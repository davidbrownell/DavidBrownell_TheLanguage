# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 5), match='Func1'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 6] (5)"
                    IterEnd: "[1, 7] (6)"
                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(5, 6), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 7] (6)"
                                                    IterEnd: "[1, 10] (9)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(6, 9), match='arg'>"
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                    Name: "arg"
                                                  Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                    Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 7
                                                        Line: 1
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 10
                                                        Line: 1
                                                    Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 7
                                                        Line: 1
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 10
                                                        Line: 1
                                                IterBegin: "[1, 7] (6)"
                                                IterEnd: "[1, 10] (9)"
                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[1, 7] (6)"
                                            IterEnd: "[1, 10] (9)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                          Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                              Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                Name: "arg"
                                              Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 7
                                                    Line: 1
                                                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 10
                                                    Line: 1
                                                Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 7
                                                    Line: 1
                                                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 10
                                                    Line: 1
                                          Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                Column: 7
                                                Line: 1
                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                Column: 10
                                                Line: 1
                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                Column: 7
                                                Line: 1
                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                Column: 10
                                                Line: 1
                                        IterBegin: "[1, 7] (6)"
                                        IterEnd: "[1, 10] (9)"
                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[1, 7] (6)"
                                    IterEnd: "[1, 10] (9)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[1, 7] (6)"
                                IterEnd: "[1, 10] (9)"
                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[1, 7] (6)"
                            IterEnd: "[1, 10] (9)"
                            Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[1, 7] (6)"
                        IterEnd: "[1, 10] (9)"
                        Type: "Argument Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 7] (6)"
                    IterEnd: "[1, 10] (9)"
                    Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 10] (9)"
                    IterEnd: "[1, 11] (10)"
                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(9, 10), match=')'>"
                    Whitespace: None
                IterBegin: "[1, 6] (5)"
                IterEnd: "[1, 11] (10)"
                Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 11] (10)"
                IterEnd: "[2, 1] (11)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 11
                  Start: 10
                Whitespace: None
            Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
              Data: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerData'>
                Arguments:
                  - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                    Data: # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerData'>
                      Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                        Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                            Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                              Name: "arg"
                            Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                              Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                  Column: 7
                                  Line: 1
                                End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                  Column: 10
                                  Line: 1
                              Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                  Column: 7
                                  Line: 1
                                End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                  Column: 10
                                  Line: 1
                        Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                          Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                            Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                              Column: 7
                              Line: 1
                            End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                              Column: 10
                              Line: 1
                          Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                            Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                              Column: 7
                              Line: 1
                            End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                              Column: 10
                              Line: 1
                      Keyword: None
                    Regions: # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerRegions'>
                      Expression: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                        Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                          Column: 7
                          Line: 1
                        End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                          Column: 10
                          Line: 1
                      Keyword: None
                      Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                        Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                          Column: 7
                          Line: 1
                        End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                          Column: 10
                          Line: 1
                Name: "Func1"
              Regions: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerRegions'>
                Arguments: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 7
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 10
                    Line: 1
                Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 6
                    Line: 1
                Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 2
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (11)"
            Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (11)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (11)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 1] (11)"
                IterEnd: "[2, 6] (16)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(11, 16), match='Func2'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[2, 6] (16)"
                    IterEnd: "[2, 7] (17)"
                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(16, 17), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 7] (17)"
                                                IterEnd: "[2, 8] (18)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(17, 18), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[2, 8] (18)"
                                                                    IterEnd: "[2, 9] (19)"
                                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(18, 19), match='a'>"
                                                                    Whitespace: None
                                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                  Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                    Name: "a"
                                                                  Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                    Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                        Column: 8
                                                                        Line: 2
                                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                        Column: 9
                                                                        Line: 2
                                                                    Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                        Column: 8
                                                                        Line: 2
                                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                        Column: 9
                                                                        Line: 2
                                                                IterBegin: "[2, 8] (18)"
                                                                IterEnd: "[2, 9] (19)"
                                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[2, 8] (18)"
                                                            IterEnd: "[2, 9] (19)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                              Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                Name: "a"
                                                              Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                    Column: 8
                                                                    Line: 2
                                                                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                    Column: 9
                                                                    Line: 2
                                                                Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                    Column: 8
                                                                    Line: 2
                                                                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                    Column: 9
                                                                    Line: 2
                                                          Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 8
                                                                Line: 2
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 9
                                                                Line: 2
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 8
                                                                Line: 2
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 9
                                                                Line: 2
                                                        IterBegin: "[2, 8] (18)"
                                                        IterEnd: "[2, 9] (19)"
                                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[2, 8] (18)"
                                                    IterEnd: "[2, 9] (19)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[2, 8] (18)"
                                                IterEnd: "[2, 9] (19)"
                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 9] (19)"
                                                IterEnd: "[2, 10] (20)"
                                                Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(19, 20), match=','>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 10] (20)"
                                                IterEnd: "[2, 11] (21)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(20, 21), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[2, 7] (17)"
                                            IterEnd: "[2, 11] (21)"
                                            Type: "Single <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[2, 7] (17)"
                                        IterEnd: "[2, 11] (21)"
                                        Type: "Tuple Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[2, 7] (17)"
                                    IterEnd: "[2, 11] (21)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 7] (17)"
                                IterEnd: "[2, 11] (21)"
                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[2, 7] (17)"
                            IterEnd: "[2, 11] (21)"
                            Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[2, 7] (17)"
                        IterEnd: "[2, 11] (21)"
                        Type: "Argument Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[2, 7] (17)"
                    IterEnd: "[2, 11] (21)"
                    Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[2, 11] (21)"
                    IterEnd: "[2, 12] (22)"
                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(21, 22), match=')'>"
                    Whitespace: None
                IterBegin: "[2, 6] (16)"
                IterEnd: "[2, 12] (22)"
                Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 12] (22)"
                IterEnd: "[3, 1] (23)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 23
                  Start: 22
                Whitespace: None
            Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
              Data: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerData'>
                Arguments:
                  - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                    Data: # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerData'>
                      Expression: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                        Data: # <class 'TheLanguage.Lexer.LexerInfo.LexerData'>
                          {}
                        Regions: # <class 'TheLanguage.Lexer.LexerInfo.LexerRegions'>
                          Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                            Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                              Column: 1
                              Line: 1
                            End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                              Column: 1
                              Line: 1
                      Keyword: None
                    Regions: # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerRegions'>
                      Expression: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                        Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                          Column: 7
                          Line: 2
                        End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                          Column: 11
                          Line: 2
                      Keyword: None
                      Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                        Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                          Column: 7
                          Line: 2
                        End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                          Column: 11
                          Line: 2
                Name: "Func2"
              Regions: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerRegions'>
                Arguments: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 7
                    Line: 2
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 11
                    Line: 2
                Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 2
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 6
                    Line: 2
                Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 2
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 3
            IterBegin: "[2, 1] (11)"
            IterEnd: "[3, 1] (23)"
            Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[2, 1] (11)"
        IterEnd: "[3, 1] (23)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[2, 1] (11)"
    IterEnd: "[3, 1] (23)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[3, 1] (23)"
Type: "<None>"
