# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Type: "'while' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 5), match='while'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 7] (6)"
                                    IterEnd: "[1, 12] (11)"
                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(6, 11), match='value'>"
                                    Whitespace:
                                      - 5
                                      - 6
                                Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "value"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                                    Self__: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                                IterBegin: "[1, 7] (6)"
                                IterEnd: "[1, 12] (11)"
                                Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 7] (6)"
                            IterEnd: "[1, 12] (11)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                        Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                            Name: "value"
                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                              Name: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                              Self__: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                            Name: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                            Self__: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                        IterBegin: "[1, 7] (6)"
                        IterEnd: "[1, 12] (11)"
                        Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[1, 7] (6)"
                    IterEnd: "[1, 12] (11)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 7] (6)"
                IterEnd: "[1, 12] (11)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 12] (11)"
                    IterEnd: "[1, 13] (12)"
                    Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 12), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 13] (12)"
                            IterEnd: "[2, 1] (13)"
                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                              End: 13
                              Start: 12
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 1] (13)"
                            IterEnd: "[2, 5] (17)"
                            Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                              End: 17
                              Start: 13
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 5] (17)"
                                            IterEnd: "[2, 10] (22)"
                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(17, 22), match='Func1'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 10] (22)"
                                                IterEnd: "[2, 11] (23)"
                                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(22, 23), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 11] (23)"
                                                IterEnd: "[2, 12] (24)"
                                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(23, 24), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[2, 10] (22)"
                                            IterEnd: "[2, 12] (24)"
                                            Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 12] (24)"
                                            IterEnd: "[3, 1] (25)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 25
                                              Start: 24
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Parser.Statements.FuncInvocationStatementParserInfo.FuncInvocationStatementParserInfo'>
                                          Arguments: None
                                          Name: "Func1"
                                          Regions: # <class 'types.FuncInvocationStatementParserInfoRegions'>
                                            Arguments: None
                                            Name: "[Ln 2, Col 5] -> [Ln 2, Col 10]"
                                            Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                                        IterBegin: "[2, 5] (17)"
                                        IterEnd: "[3, 1] (25)"
                                        Type: "Func Invocation Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[2, 5] (17)"
                                    IterEnd: "[3, 1] (25)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 5] (17)"
                                IterEnd: "[3, 1] (25)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 5] (29)"
                                            IterEnd: "[3, 10] (34)"
                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(29, 34), match='Func2'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 10] (34)"
                                                IterEnd: "[3, 11] (35)"
                                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(34, 35), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 11] (35)"
                                                IterEnd: "[3, 12] (36)"
                                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(35, 36), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[3, 10] (34)"
                                            IterEnd: "[3, 12] (36)"
                                            Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 12] (36)"
                                            IterEnd: "[4, 1] (37)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 37
                                              Start: 36
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Parser.Statements.FuncInvocationStatementParserInfo.FuncInvocationStatementParserInfo'>
                                          Arguments: None
                                          Name: "Func2"
                                          Regions: # <class 'types.FuncInvocationStatementParserInfoRegions'>
                                            Arguments: None
                                            Name: "[Ln 3, Col 5] -> [Ln 3, Col 10]"
                                            Self__: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
                                        IterBegin: "[3, 5] (29)"
                                        IterEnd: "[4, 1] (37)"
                                        Type: "Func Invocation Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[3, 5] (29)"
                                    IterEnd: "[4, 1] (37)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[3, 5] (29)"
                                IterEnd: "[4, 1] (37)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[2, 5] (17)"
                            IterEnd: "[4, 1] (37)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 1] (37)"
                            IterEnd: "[4, 1] (37)"
                            Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[1, 13] (12)"
                        IterEnd: "[4, 1] (37)"
                        Type: "Multi-line <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 13] (12)"
                    IterEnd: "[4, 1] (37)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 12] (11)"
                IterEnd: "[4, 1] (37)"
                Type: "Statements <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            Info: # <class 'TheLanguage.Parser.Statements.WhileStatementParserInfo.WhileStatementParserInfo'>
              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                  Name: "value"
                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                    Name: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                    Self__: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                  Name: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                  Self__: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
              Regions: # <class 'types.WhileStatementParserInfoRegions'>
                Expression: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                Self__: "[Ln 1, Col 1] -> [Ln 4, Col 1]"
                Statements: "[Ln 1, Col 12] -> [Ln 4, Col 1]"
              Statements:
                - # <class 'TheLanguage.Parser.Statements.FuncInvocationStatementParserInfo.FuncInvocationStatementParserInfo'>
                  Arguments: None
                  Name: "Func1"
                  Regions: # <class 'types.FuncInvocationStatementParserInfoRegions'>
                    Arguments: None
                    Name: "[Ln 2, Col 5] -> [Ln 2, Col 10]"
                    Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                - # <class 'TheLanguage.Parser.Statements.FuncInvocationStatementParserInfo.FuncInvocationStatementParserInfo'>
                  Arguments: None
                  Name: "Func2"
                  Regions: # <class 'types.FuncInvocationStatementParserInfoRegions'>
                    Arguments: None
                    Name: "[Ln 3, Col 5] -> [Ln 3, Col 10]"
                    Self__: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[4, 1] (37)"
            Type: "While Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[4, 1] (37)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[4, 1] (37)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[4, 1] (37)"
Type: "<None>"
