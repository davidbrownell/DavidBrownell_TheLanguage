# <class 'Original.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
    DataItems:
      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[4, 1] (32)"
          IterEnd: "[4, 5] (36)"
          Token: "Word Token"
          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(32, 36), match='four'>"
          Whitespace: None
        Phrase: "Word Token"
      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[4, 5] (36)"
          IterEnd: "[4, 6] (37)"
          Token: "Colon"
          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(36, 37), match=':'>"
          Whitespace: None
        Phrase: "Colon"
      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[4, 6] (37)"
          IterEnd: "[5, 1] (38)"
          Token: "Newline+"
          Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 38
            Start: 37
          Whitespace: None
        Phrase: "Newline+"
      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[5, 1] (38)"
          IterEnd: "[5, 5] (42)"
          Token: "Indent"
          Value: # <class 'Original.Lexer.Components.Token.IndentToken.MatchResult'>
            End: 42
            Start: 38
            Value: 4
          Whitespace: None
        Phrase: "Indent"
      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[5, 5] (42)"
                IterEnd: "[5, 9] (46)"
                Token: "Upper Token"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(42, 46), match='FIVE'>"
                Whitespace: None
              Phrase: "Upper Token"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[5, 10] (47)"
              IterEnd: "[5, 21] (58)"
              Token: "<comment>"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(47, 58), match='# Comment 5'>"
              Whitespace:
                - 46
                - 47
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[5, 21] (58)"
                IterEnd: "[6, 1] (59)"
                Token: "Newline+"
                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 59
                  Start: 58
                Whitespace: None
              Phrase: "Newline+"
          IsComplete: True
        Phrase: "[Upper Token, Newline+]"
      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[6, 5] (63)"
                IterEnd: "[6, 7] (65)"
                Token: "Number Token"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(63, 65), match='66'>"
                Whitespace: None
              Phrase: "Number Token"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[6, 7] (65)"
                IterEnd: "[7, 1] (66)"
                Token: "Newline+"
                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 66
                  Start: 65
                Whitespace: None
              Phrase: "Newline+"
          IsComplete: True
        Phrase: "[Number Token, Newline+]"
      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[7, 1] (66)"
          IterEnd: "[7, 1] (66)"
          Token: "Dedent"
          Value: # <class 'Original.Lexer.Components.Token.DedentToken.MatchResult'>
            {}
          Whitespace: None
        Phrase: "Dedent"
    IsComplete: True
  Phrase: "Indent"
IterBegin: "[4, 1] (32)"
IterEnd: "[7, 1] (66)"
Success: True
