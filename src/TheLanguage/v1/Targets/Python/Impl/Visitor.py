# ----------------------------------------------------------------------
# |
# |  Visitor.py
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2022-04-13 10:51:32
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2022
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
"""Contains the Visitor object"""

import itertools
import os
import textwrap

from io import StringIO
from typing import Any, List, Optional

import CommonEnvironment
from CommonEnvironment.StreamDecorator import StreamDecorator

from CommonEnvironmentEx.Package import InitRelativeImports

# ----------------------------------------------------------------------
_script_fullpath                            = CommonEnvironment.ThisFullpath()
_script_dir, _script_name                   = os.path.split(_script_fullpath)
# ----------------------------------------------------------------------

with InitRelativeImports():
    from ....Parser.Parser import ParserInfo, RootParserInfo

    from ....Parser.ParserInfos.Statements.ClassStatementParserInfo import ClassStatementParserInfo
    from ....Parser.ParserInfos.Statements.FuncDefinitionStatementParserInfo import FuncDefinitionStatementParserInfo
    from ....Parser.ParserInfos.Statements.PassStatementParserInfo import PassStatementParserInfo
    from ....Parser.ParserInfos.Statements.SpecialMethodStatementParserInfo import SpecialMethodStatementParserInfo

    from ....Parser.ParserInfos.Types.StandardTypeParserInfo import StandardTypeParserInfo


# ----------------------------------------------------------------------
class Visitor(object):
    # ----------------------------------------------------------------------
    def __init__(
        self,
        indent_spaces: Optional[int]=None,
    ):
        indent_spaces = indent_spaces or 4

        sink = StringIO()

        self._indent_text                   = " " * indent_spaces

        self._indent_stack: List[int]       = [0, ]
        self._stream_stack: List[Any]       = [sink, ]

    # ----------------------------------------------------------------------
    def GetContent(self) -> str:
        assert len(self._stream_stack) == 1

        content = self._stream_stack[-1].getvalue()
        self._stream_stack.pop()

        content = "\n".join(line.rstrip() for line in content.splitlines())

        if not content.endswith("\n"):
            content += "\n"

        return content

    # ----------------------------------------------------------------------
    @staticmethod
    def OnEnterScope(
        parser_info: ParserInfo,
    ) -> None:
        # Nothing to do here
        pass

    # ----------------------------------------------------------------------
    @staticmethod
    def OnExitScope(
        parser_info: ParserInfo,
    ) -> None:
        # Nothing to do here
        pass

    # ----------------------------------------------------------------------
    def OnEnterRootParserInfo(
        self,
        parser_info: RootParserInfo,
    ) -> None:
        self._stream.write(
            textwrap.dedent(
                """\
                # ----------------------------------------------------------------------
                # This code was automatically generated by the PythonTarget. Any changes made to this
                # file will be overwritten during the next generation!
                # ----------------------------------------------------------------------

                """,
            ),
        )

        if parser_info.documentation is not None:
            self._stream.write(
                textwrap.dedent(
                    '''
                    """\\
                    {}
                    """

                    ''',
                ).format(parser_info.documentation),
            )

    # ----------------------------------------------------------------------
    def OnExitRootParserInfo(
        self,
        parser_info: RootParserInfo,
    ) -> None:
        # Nothing to do here
        pass

    # ----------------------------------------------------------------------
    # |
    # |  Statements
    # |
    # ----------------------------------------------------------------------
    def OnEnterClassStatementParserInfo(
        self,
        parser_info: ClassStatementParserInfo,
    ):
        self._stream.write("class {}(".format(parser_info.name))

        self._stream.write(
            ", ".join(
                self._GetStandardTypeName(dependency.type) for dependency in itertools.chain(
                    parser_info.extends or [],
                    parser_info.implements or [],
                    parser_info.uses or [],
                )
            ),
        )

        if not parser_info.extends and not parser_info.implements and not parser_info.uses:
            self._stream.write("object")

        self._stream.write("):\n")
        self._Indent()

    # ----------------------------------------------------------------------
    def OnExitClassStatementParserInfo(
        self,
        parser_info: ClassStatementParserInfo,
    ):
        self._Dedent()
        self._stream.write("\n")

    # ----------------------------------------------------------------------
    def OnEnterFuncDefinitionStatementParserInfo(
        self,
        parser_info: FuncDefinitionStatementParserInfo,
    ):
        pass # BugBug

    # ----------------------------------------------------------------------
    def OnExitFuncDefinitionStatementParserInfo(
        self,
        parser_info: FuncDefinitionStatementParserInfo,
    ):
        pass # BugBug

    # ----------------------------------------------------------------------
    def OnPassStatementParserInfo(
        self,
        parser_info: PassStatementParserInfo,  # pylint: disable=unused-argument
    ) -> None:
        self._stream.write("pass\n")

    # ----------------------------------------------------------------------
    def OnEnterSpecialMethodStatementParserInfo(
        self,
        parser_info: SpecialMethodStatementParserInfo,
    ):
        pass # BugBug

    # ----------------------------------------------------------------------
    def OnExitSpecialMethodStatementParserInfo(
        self,
        parser_info: SpecialMethodStatementParserInfo,
    ):
        pass # BugBug

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @property
    def _stream(self):
        return self._stream_stack[-1]

    # ----------------------------------------------------------------------
    def _Indent(self) -> None:
        assert self._stream_stack

        self._stream_stack.append(
            StreamDecorator(
                self._stream_stack[-1],
                line_prefix=self._indent_text,
            ),
        )

        self._indent_stack.append(1)

    # ----------------------------------------------------------------------
    def _Dedent(self) -> None:
        assert self._stream_stack
        self._stream_stack.pop()

        assert self._indent_stack
        self._indent_stack.pop()

    # ----------------------------------------------------------------------
    def _ReplaceIndent(self) -> None:
        assert len(self._stream_stack) > 1
        assert self._indent_stack

        self._indent_stack[-1] += 1

        self._stream_stack[-1] = StreamDecorator(
            self._stream_stack[-2],
            line_prefix=self._indent_stack[-1] * self._indent_text,
        )

    # ----------------------------------------------------------------------
    @staticmethod
    def _GetStandardTypeName(
        parser_info: StandardTypeParserInfo,
    ) -> str:
        return ".".join(item.name for item in parser_info.items)
