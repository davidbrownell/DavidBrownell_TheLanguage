# <class 'v1.Lexer.Components.Phrase.Phrase.LexResult'>
data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data:
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "Dynamic Phrase"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    token: "'+'"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                  phrase: "'+'"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                              phrase: "Add"
                            phrase: "All Phrases"
                          phrase: "Dynamic Phrase"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            token: "'if'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                          phrase: "'if'"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                token: "Upper"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                              phrase: "Upper"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            token: "'else'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                          phrase: "'else'"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                      phrase: "Ter"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    token: "'-'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                  phrase: "'-'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data:
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data:
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data:
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        is_ignored: False
                                                        token: "Lower"
                                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                          match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                      phrase: "Lower"
                                                    phrase: "All Phrases"
                                                  phrase: "DynamicPhrasesType.Statements"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    is_ignored: False
                                                    token: "'['"
                                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                      match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                  phrase: "'['"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        is_ignored: False
                                                        token: "Lower"
                                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                          match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                      phrase: "Lower"
                                                    phrase: "All Phrases"
                                                  phrase: "DynamicPhrasesType.Statements"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    is_ignored: False
                                                    token: "']'"
                                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                      match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                  phrase: "']'"
                                              phrase: "Index"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            token: "'['"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                          phrase: "'['"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                is_ignored: False
                                                token: "Lower"
                                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                  match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                              phrase: "Lower"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            token: "']'"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                          phrase: "']'"
                                      phrase: "Index"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    token: "'['"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                  phrase: "'['"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    token: "']'"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                  phrase: "']'"
                              phrase: "Index"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            token: "'['"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                          phrase: "'['"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            token: "']'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                          phrase: "']'"
                      phrase: "Index"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
              phrase: "Sub"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            token: "'*'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
          phrase: "'*'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                token: "Upper"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
              phrase: "Upper"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Mul"
    phrase: "All Phrases"
  phrase: "DynamicPhrasesType.Statements"
iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
  begin: "[1, 1] (0)"
  end: "[1, 1] (0)"
success: True
