# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 6] (5)"
                    Type: "'class' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(0, 5), match='class'>"
                    Whitespace: None
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 7] (6)"
                IterEnd: "[1, 10] (9)"
                Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(6, 9), match='Foo'>"
                Whitespace:
                  - 5
                  - 6
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 10] (9)"
                IterEnd: "[1, 11] (10)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(9, 10), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 11] (10)"
                IterEnd: "[1, 12] (11)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(10, 11), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 12] (11)"
                    IterEnd: "[1, 13] (12)"
                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 12), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 13] (12)"
                            IterEnd: "[2, 1] (13)"
                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                              End: 13
                              Start: 12
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 1] (13)"
                            IterEnd: "[2, 5] (17)"
                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                              End: 17
                              Start: 13
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 5] (17)"
                                                    IterEnd: "[2, 6] (18)"
                                                    Type: "'@' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(17, 18), match='@'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 6] (18)"
                                                    IterEnd: "[2, 12] (24)"
                                                    Type: "<method_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(18, 24), match='Member'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 12] (24)"
                                                            IterEnd: "[2, 13] (25)"
                                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(24, 25), match='('>"
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[2, 13] (25)"
                                                                                IterEnd: "[2, 17] (29)"
                                                                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(25, 29), match='init'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[2, 17] (29)"
                                                                                IterEnd: "[2, 18] (30)"
                                                                                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(29, 30), match='='>"
                                                                                Whitespace: None
                                                                            IterBegin: "[2, 13] (25)"
                                                                            IterEnd: "[2, 18] (30)"
                                                                            Type: "With Keyword <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[2, 13] (25)"
                                                                        IterEnd: "[2, 18] (30)"
                                                                        Type: "Repeat: {With Keyword, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[2, 18] (30)"
                                                                                            IterEnd: "[2, 22] (34)"
                                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(30, 34), match='true'>"
                                                                                            Whitespace: None
                                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                          Name: "true"
                                                                                          Regions:
                                                                                            Self__: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                            Name: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                        IterBegin: "[2, 18] (30)"
                                                                                        IterEnd: "[2, 22] (34)"
                                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                    IterBegin: "[2, 18] (30)"
                                                                                    IterEnd: "[2, 22] (34)"
                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                    Name: "true"
                                                                                    Regions:
                                                                                      Self__: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                      Name: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                  Regions:
                                                                                    Self__: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                    Name: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                IterBegin: "[2, 18] (30)"
                                                                                IterEnd: "[2, 22] (34)"
                                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                            IterBegin: "[2, 18] (30)"
                                                                            IterEnd: "[2, 22] (34)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                        IterBegin: "[2, 18] (30)"
                                                                        IterEnd: "[2, 22] (34)"
                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[2, 13] (25)"
                                                                    IterEnd: "[2, 22] (34)"
                                                                    Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[2, 13] (25)"
                                                                IterEnd: "[2, 22] (34)"
                                                                Type: "Argument Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[2, 13] (25)"
                                                            IterEnd: "[2, 22] (34)"
                                                            Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 22] (34)"
                                                            IterEnd: "[2, 23] (35)"
                                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(34, 35), match=')'>"
                                                            Whitespace: None
                                                        IterBegin: "[2, 12] (24)"
                                                        IterEnd: "[2, 23] (35)"
                                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[2, 12] (24)"
                                                    IterEnd: "[2, 23] (35)"
                                                    Type: "Repeat: {Arguments, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[2, 23] (35)"
                                                        IterEnd: "[3, 1] (36)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 36
                                                          Start: 35
                                                        Whitespace: None
                                                    IterBegin: "[2, 23] (35)"
                                                    IterEnd: "[3, 1] (36)"
                                                    Type: "Repeat: {Newline+, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                IterBegin: "[2, 5] (17)"
                                                IterEnd: "[3, 1] (36)"
                                                Type: "Attribute <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[2, 5] (17)"
                                            IterEnd: "[3, 1] (36)"
                                            Type: "Repeat: {Attribute, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[3, 5] (40)"
                                                        IterEnd: "[3, 8] (43)"
                                                        Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(40, 43), match='Int'>"
                                                        Whitespace: None
                                                    Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                      Modifier: None
                                                      Regions:
                                                        Self__: "[Ln 3, Col 5] -> [Ln 3, Col 8]"
                                                        TypeName: "[Ln 3, Col 5] -> [Ln 3, Col 8]"
                                                        Modifier: None
                                                      TypeName: "Int"
                                                    IterBegin: "[3, 5] (40)"
                                                    IterEnd: "[3, 8] (43)"
                                                    Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 5] (40)"
                                                IterEnd: "[3, 8] (43)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 5] (40)"
                                            IterEnd: "[3, 8] (43)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 9] (44)"
                                            IterEnd: "[3, 15] (50)"
                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(44, 50), match='value1'>"
                                            Whitespace:
                                              - 43
                                              - 44
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 15] (50)"
                                            IterEnd: "[5, 1] (52)"
                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                              End: 52
                                              Start: 50
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Lexer.Statements.ClassMemberStatementLexerInfo.ClassMemberStatementLexerInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          DefaultValue: None
                                          Name: "value1"
                                          Regions:
                                            Self__: "[Ln 2, Col 5] -> [Ln 5, Col 1]"
                                            Visibility: "[Ln 2, Col 5] -> [Ln 5, Col 1]"
                                            Type: "[Ln 3, Col 5] -> [Ln 3, Col 8]"
                                            Name: "[Ln 3, Col 9] -> [Ln 3, Col 15]"
                                            ClassModifier: "[Ln 2, Col 5] -> [Ln 5, Col 1]"
                                            DefaultValue: None
                                          Type: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                            Modifier: None
                                            Regions:
                                              Self__: "[Ln 3, Col 5] -> [Ln 3, Col 8]"
                                              TypeName: "[Ln 3, Col 5] -> [Ln 3, Col 8]"
                                              Modifier: None
                                            TypeName: "Int"
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[2, 5] (17)"
                                        IterEnd: "[5, 1] (52)"
                                        Type: "Class Member Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[2, 5] (17)"
                                    IterEnd: "[5, 1] (52)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 5] (17)"
                                IterEnd: "[5, 1] (52)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[5, 5] (56)"
                                                    IterEnd: "[5, 6] (57)"
                                                    Type: "'@' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(56, 57), match='@'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[5, 6] (57)"
                                                    IterEnd: "[5, 12] (63)"
                                                    Type: "<method_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(57, 63), match='Member'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[5, 12] (63)"
                                                            IterEnd: "[5, 13] (64)"
                                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(63, 64), match='('>"
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[5, 13] (64)"
                                                                                IterEnd: "[5, 17] (68)"
                                                                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(64, 68), match='init'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[5, 17] (68)"
                                                                                IterEnd: "[5, 18] (69)"
                                                                                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(68, 69), match='='>"
                                                                                Whitespace: None
                                                                            IterBegin: "[5, 13] (64)"
                                                                            IterEnd: "[5, 18] (69)"
                                                                            Type: "With Keyword <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[5, 13] (64)"
                                                                        IterEnd: "[5, 18] (69)"
                                                                        Type: "Repeat: {With Keyword, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[5, 18] (69)"
                                                                                            IterEnd: "[5, 22] (73)"
                                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(69, 73), match='true'>"
                                                                                            Whitespace: None
                                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                          Name: "true"
                                                                                          Regions:
                                                                                            Self__: "[Ln 5, Col 18] -> [Ln 5, Col 22]"
                                                                                            Name: "[Ln 5, Col 18] -> [Ln 5, Col 22]"
                                                                                        IterBegin: "[5, 18] (69)"
                                                                                        IterEnd: "[5, 22] (73)"
                                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                    IterBegin: "[5, 18] (69)"
                                                                                    IterEnd: "[5, 22] (73)"
                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                    Name: "true"
                                                                                    Regions:
                                                                                      Self__: "[Ln 5, Col 18] -> [Ln 5, Col 22]"
                                                                                      Name: "[Ln 5, Col 18] -> [Ln 5, Col 22]"
                                                                                  Regions:
                                                                                    Self__: "[Ln 5, Col 18] -> [Ln 5, Col 22]"
                                                                                    Name: "[Ln 5, Col 18] -> [Ln 5, Col 22]"
                                                                                IterBegin: "[5, 18] (69)"
                                                                                IterEnd: "[5, 22] (73)"
                                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                            IterBegin: "[5, 18] (69)"
                                                                            IterEnd: "[5, 22] (73)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                        IterBegin: "[5, 18] (69)"
                                                                        IterEnd: "[5, 22] (73)"
                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[5, 13] (64)"
                                                                    IterEnd: "[5, 22] (73)"
                                                                    Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[5, 13] (64)"
                                                                IterEnd: "[5, 22] (73)"
                                                                Type: "Argument Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[5, 13] (64)"
                                                            IterEnd: "[5, 22] (73)"
                                                            Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[5, 22] (73)"
                                                            IterEnd: "[5, 23] (74)"
                                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(73, 74), match=')'>"
                                                            Whitespace: None
                                                        IterBegin: "[5, 12] (63)"
                                                        IterEnd: "[5, 23] (74)"
                                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[5, 12] (63)"
                                                    IterEnd: "[5, 23] (74)"
                                                    Type: "Repeat: {Arguments, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[5, 23] (74)"
                                                        IterEnd: "[6, 1] (75)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 75
                                                          Start: 74
                                                        Whitespace: None
                                                    IterBegin: "[5, 23] (74)"
                                                    IterEnd: "[6, 1] (75)"
                                                    Type: "Repeat: {Newline+, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                IterBegin: "[5, 5] (56)"
                                                IterEnd: "[6, 1] (75)"
                                                Type: "Attribute <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[6, 5] (79)"
                                                    IterEnd: "[6, 6] (80)"
                                                    Type: "'@' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(79, 80), match='@'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[6, 6] (80)"
                                                    IterEnd: "[6, 12] (86)"
                                                    Type: "<method_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(80, 86), match='Member'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[6, 12] (86)"
                                                            IterEnd: "[6, 13] (87)"
                                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(86, 87), match='('>"
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[6, 13] (87)"
                                                                                IterEnd: "[6, 22] (96)"
                                                                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(87, 96), match='serialize'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[6, 22] (96)"
                                                                                IterEnd: "[6, 23] (97)"
                                                                                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(96, 97), match='='>"
                                                                                Whitespace: None
                                                                            IterBegin: "[6, 13] (87)"
                                                                            IterEnd: "[6, 23] (97)"
                                                                            Type: "With Keyword <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[6, 13] (87)"
                                                                        IterEnd: "[6, 23] (97)"
                                                                        Type: "Repeat: {With Keyword, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[6, 23] (97)"
                                                                                            IterEnd: "[6, 28] (102)"
                                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(97, 102), match='false'>"
                                                                                            Whitespace: None
                                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                          Name: "false"
                                                                                          Regions:
                                                                                            Self__: "[Ln 6, Col 23] -> [Ln 6, Col 28]"
                                                                                            Name: "[Ln 6, Col 23] -> [Ln 6, Col 28]"
                                                                                        IterBegin: "[6, 23] (97)"
                                                                                        IterEnd: "[6, 28] (102)"
                                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                    IterBegin: "[6, 23] (97)"
                                                                                    IterEnd: "[6, 28] (102)"
                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                    Name: "false"
                                                                                    Regions:
                                                                                      Self__: "[Ln 6, Col 23] -> [Ln 6, Col 28]"
                                                                                      Name: "[Ln 6, Col 23] -> [Ln 6, Col 28]"
                                                                                  Regions:
                                                                                    Self__: "[Ln 6, Col 23] -> [Ln 6, Col 28]"
                                                                                    Name: "[Ln 6, Col 23] -> [Ln 6, Col 28]"
                                                                                IterBegin: "[6, 23] (97)"
                                                                                IterEnd: "[6, 28] (102)"
                                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                            IterBegin: "[6, 23] (97)"
                                                                            IterEnd: "[6, 28] (102)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                        IterBegin: "[6, 23] (97)"
                                                                        IterEnd: "[6, 28] (102)"
                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[6, 13] (87)"
                                                                    IterEnd: "[6, 28] (102)"
                                                                    Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[6, 13] (87)"
                                                                IterEnd: "[6, 28] (102)"
                                                                Type: "Argument Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[6, 13] (87)"
                                                            IterEnd: "[6, 28] (102)"
                                                            Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[6, 28] (102)"
                                                            IterEnd: "[6, 29] (103)"
                                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(102, 103), match=')'>"
                                                            Whitespace: None
                                                        IterBegin: "[6, 12] (86)"
                                                        IterEnd: "[6, 29] (103)"
                                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[6, 12] (86)"
                                                    IterEnd: "[6, 29] (103)"
                                                    Type: "Repeat: {Arguments, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[6, 29] (103)"
                                                        IterEnd: "[7, 1] (104)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 104
                                                          Start: 103
                                                        Whitespace: None
                                                    IterBegin: "[6, 29] (103)"
                                                    IterEnd: "[7, 1] (104)"
                                                    Type: "Repeat: {Newline+, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                IterBegin: "[6, 5] (79)"
                                                IterEnd: "[7, 1] (104)"
                                                Type: "Attribute <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[5, 5] (56)"
                                            IterEnd: "[7, 1] (104)"
                                            Type: "Repeat: {Attribute, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[7, 5] (108)"
                                                        IterEnd: "[7, 9] (112)"
                                                        Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(108, 112), match='Char'>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[7, 10] (113)"
                                                                IterEnd: "[7, 13] (116)"
                                                                Type: "'var' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(113, 116), match='var'>"
                                                                Whitespace:
                                                                  - 112
                                                                  - 113
                                                            IterBegin: "[7, 10] (113)"
                                                            IterEnd: "[7, 13] (116)"
                                                            Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[7, 10] (113)"
                                                        IterEnd: "[7, 13] (116)"
                                                        Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                    Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                      Modifier: TypeModifier.var
                                                      Regions:
                                                        Self__: "[Ln 7, Col 5] -> [Ln 7, Col 13]"
                                                        TypeName: "[Ln 7, Col 5] -> [Ln 7, Col 9]"
                                                        Modifier: "[Ln 7, Col 10] -> [Ln 7, Col 13]"
                                                      TypeName: "Char"
                                                    IterBegin: "[7, 5] (108)"
                                                    IterEnd: "[7, 13] (116)"
                                                    Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[7, 5] (108)"
                                                IterEnd: "[7, 13] (116)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[7, 5] (108)"
                                            IterEnd: "[7, 13] (116)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[7, 14] (117)"
                                            IterEnd: "[7, 20] (123)"
                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(117, 123), match='value2'>"
                                            Whitespace:
                                              - 116
                                              - 117
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[7, 20] (123)"
                                            IterEnd: "[8, 1] (124)"
                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                              End: 124
                                              Start: 123
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Lexer.Statements.ClassMemberStatementLexerInfo.ClassMemberStatementLexerInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          DefaultValue: None
                                          Name: "value2"
                                          Regions:
                                            Self__: "[Ln 5, Col 5] -> [Ln 8, Col 1]"
                                            Visibility: "[Ln 5, Col 5] -> [Ln 8, Col 1]"
                                            Type: "[Ln 7, Col 5] -> [Ln 7, Col 13]"
                                            Name: "[Ln 7, Col 14] -> [Ln 7, Col 20]"
                                            ClassModifier: "[Ln 5, Col 5] -> [Ln 8, Col 1]"
                                            DefaultValue: None
                                          Type: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                            Modifier: TypeModifier.var
                                            Regions:
                                              Self__: "[Ln 7, Col 5] -> [Ln 7, Col 13]"
                                              TypeName: "[Ln 7, Col 5] -> [Ln 7, Col 9]"
                                              Modifier: "[Ln 7, Col 10] -> [Ln 7, Col 13]"
                                            TypeName: "Char"
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[5, 5] (56)"
                                        IterEnd: "[8, 1] (124)"
                                        Type: "Class Member Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[5, 5] (56)"
                                    IterEnd: "[8, 1] (124)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[5, 5] (56)"
                                IterEnd: "[8, 1] (124)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[2, 5] (17)"
                            IterEnd: "[8, 1] (124)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[8, 1] (124)"
                            IterEnd: "[8, 1] (124)"
                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[1, 13] (12)"
                        IterEnd: "[8, 1] (124)"
                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 13] (12)"
                    IterEnd: "[8, 1] (124)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 12] (11)"
                IterEnd: "[8, 1] (124)"
                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
            Info: # <class 'TheLanguage.Lexer.Statements.ClassStatementLexerInfo.ClassStatementLexerInfo'>
              Base: None
              ClassModifier: "ClassModifier.immutable"
              ClassType: "ClassType.Class"
              Interfaces: None
              Mixins: None
              Name: "Foo"
              Regions:
                Self__: "[Ln 1, Col 1] -> [Ln 8, Col 1]"
                Visibility: "[Ln 1, Col 1] -> [Ln 8, Col 1]"
                ClassModifier: "[Ln 1, Col 1] -> [Ln 8, Col 1]"
                ClassType: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
                Name: "[Ln 1, Col 7] -> [Ln 1, Col 10]"
                Base: None
                Interfaces: None
                Mixins: None
                Statements: "[Ln 1, Col 12] -> [Ln 8, Col 1]"
              Statements:
                - # <class 'TheLanguage.Lexer.Statements.ClassMemberStatementLexerInfo.ClassMemberStatementLexerInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  DefaultValue: None
                  Name: "value1"
                  Regions:
                    Self__: "[Ln 2, Col 5] -> [Ln 5, Col 1]"
                    Visibility: "[Ln 2, Col 5] -> [Ln 5, Col 1]"
                    Type: "[Ln 3, Col 5] -> [Ln 3, Col 8]"
                    Name: "[Ln 3, Col 9] -> [Ln 3, Col 15]"
                    ClassModifier: "[Ln 2, Col 5] -> [Ln 5, Col 1]"
                    DefaultValue: None
                  Type: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                    Modifier: None
                    Regions:
                      Self__: "[Ln 3, Col 5] -> [Ln 3, Col 8]"
                      TypeName: "[Ln 3, Col 5] -> [Ln 3, Col 8]"
                      Modifier: None
                    TypeName: "Int"
                  Visibility: "VisibilityModifier.private"
                - # <class 'TheLanguage.Lexer.Statements.ClassMemberStatementLexerInfo.ClassMemberStatementLexerInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  DefaultValue: None
                  Name: "value2"
                  Regions:
                    Self__: "[Ln 5, Col 5] -> [Ln 8, Col 1]"
                    Visibility: "[Ln 5, Col 5] -> [Ln 8, Col 1]"
                    Type: "[Ln 7, Col 5] -> [Ln 7, Col 13]"
                    Name: "[Ln 7, Col 14] -> [Ln 7, Col 20]"
                    ClassModifier: "[Ln 5, Col 5] -> [Ln 8, Col 1]"
                    DefaultValue: None
                  Type: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                    Modifier: TypeModifier.var
                    Regions:
                      Self__: "[Ln 7, Col 5] -> [Ln 7, Col 13]"
                      TypeName: "[Ln 7, Col 5] -> [Ln 7, Col 9]"
                      Modifier: "[Ln 7, Col 10] -> [Ln 7, Col 13]"
                    TypeName: "Char"
                  Visibility: "VisibilityModifier.private"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[8, 1] (124)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[8, 1] (124)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[8, 1] (124)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[8, 1] (124)"
Type: "<None>"
