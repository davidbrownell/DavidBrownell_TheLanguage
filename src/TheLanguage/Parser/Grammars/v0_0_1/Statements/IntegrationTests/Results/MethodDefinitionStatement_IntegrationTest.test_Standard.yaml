# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 4] (3)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 3), match='Int'>"
                            Whitespace: None
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 4] (3)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 4] (3)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 5] (4)"
                IterEnd: "[1, 12] (11)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(4, 11), match='Method1'>"
                Whitespace:
                  - 3
                  - 4
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 12] (11)"
                    IterEnd: "[1, 13] (12)"
                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 12), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 13] (12)"
                    IterEnd: "[1, 14] (13)"
                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(12, 13), match=')'>"
                    Whitespace: None
                IterBegin: "[1, 12] (11)"
                IterEnd: "[1, 14] (13)"
                Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[1, 15] (14)"
                        IterEnd: "[1, 24] (23)"
                        Type: "'immutable' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(14, 23), match='immutable'>"
                        Whitespace:
                          - 13
                          - 14
                    IterBegin: "[1, 15] (14)"
                    IterEnd: "[1, 24] (23)"
                    Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Type: "Repeat: {Class Type, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[1, 24] (23)"
                        IterEnd: "[1, 25] (24)"
                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(23, 24), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[1, 25] (24)"
                        IterEnd: "[2, 1] (25)"
                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                          End: 25
                          Start: 24
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[2, 1] (25)"
                        IterEnd: "[2, 5] (29)"
                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                          End: 29
                          Start: 25
                          Value: 4
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 5] (29)"
                                        IterEnd: "[2, 9] (33)"
                                        Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(29, 33), match='pass'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 9] (33)"
                                        IterEnd: "[4, 1] (35)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 35
                                          Start: 33
                                        Whitespace: None
                                    IterBegin: "[2, 5] (29)"
                                    IterEnd: "[4, 1] (35)"
                                    Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[2, 5] (29)"
                                IterEnd: "[4, 1] (35)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[2, 5] (29)"
                            IterEnd: "[4, 1] (35)"
                            Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        IterBegin: "[2, 5] (29)"
                        IterEnd: "[4, 1] (35)"
                        Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[4, 1] (35)"
                        IterEnd: "[4, 1] (35)"
                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                          {}
                        Whitespace: None
                    IterBegin: "[1, 24] (23)"
                    IterEnd: "[4, 1] (35)"
                    Type: "Definition <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[1, 24] (23)"
                IterEnd: "[4, 1] (35)"
                Type: "Or: (Definition, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.MethodDefinitionStatement.MethodDefinitionStatement.NodeInfo'>
              ClassType: "ClassType.immutable"
              MethodType: "MethodType.standard"
              Name: "Method1"
              Parameters: {}
              ReturnType: # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 4] (3)"
                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(0, 3), match='Int'>"
                    Whitespace: None
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              Statements:
                - "Pass Statement"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[4, 1] (35)"
            Type: "Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[4, 1] (35)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[4, 1] (35)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[4, 1] (35)"
                    IterEnd: "[4, 7] (41)"
                    Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(35, 41), match='public'>"
                    Whitespace: None
                IterBegin: "[4, 1] (35)"
                IterEnd: "[4, 7] (41)"
                Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 8] (42)"
                            IterEnd: "[4, 11] (45)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(42, 45), match='Int'>"
                            Whitespace:
                              - 41
                              - 42
                        IterBegin: "[4, 8] (42)"
                        IterEnd: "[4, 11] (45)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[4, 8] (42)"
                    IterEnd: "[4, 11] (45)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[4, 8] (42)"
                IterEnd: "[4, 11] (45)"
                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 12] (46)"
                IterEnd: "[4, 19] (53)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(46, 53), match='Method2'>"
                Whitespace:
                  - 45
                  - 46
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[4, 19] (53)"
                    IterEnd: "[4, 20] (54)"
                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(53, 54), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[4, 20] (54)"
                    IterEnd: "[4, 21] (55)"
                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(54, 55), match=')'>"
                    Whitespace: None
                IterBegin: "[4, 19] (53)"
                IterEnd: "[4, 21] (55)"
                Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[4, 22] (56)"
                        IterEnd: "[4, 29] (63)"
                        Type: "'mutable' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(56, 63), match='mutable'>"
                        Whitespace:
                          - 55
                          - 56
                    IterBegin: "[4, 22] (56)"
                    IterEnd: "[4, 29] (63)"
                    Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[4, 22] (56)"
                IterEnd: "[4, 29] (63)"
                Type: "Repeat: {Class Type, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[4, 29] (63)"
                        IterEnd: "[4, 30] (64)"
                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(63, 64), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[4, 30] (64)"
                        IterEnd: "[5, 1] (65)"
                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                          End: 65
                          Start: 64
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[5, 1] (65)"
                        IterEnd: "[5, 5] (69)"
                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                          End: 69
                          Start: 65
                          Value: 4
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[5, 5] (69)"
                                        IterEnd: "[5, 9] (73)"
                                        Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(69, 73), match='pass'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[5, 9] (73)"
                                        IterEnd: "[7, 1] (75)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 75
                                          Start: 73
                                        Whitespace: None
                                    IterBegin: "[5, 5] (69)"
                                    IterEnd: "[7, 1] (75)"
                                    Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[5, 5] (69)"
                                IterEnd: "[7, 1] (75)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[5, 5] (69)"
                            IterEnd: "[7, 1] (75)"
                            Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        IterBegin: "[5, 5] (69)"
                        IterEnd: "[7, 1] (75)"
                        Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[7, 1] (75)"
                        IterEnd: "[7, 1] (75)"
                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                          {}
                        Whitespace: None
                    IterBegin: "[4, 29] (63)"
                    IterEnd: "[7, 1] (75)"
                    Type: "Definition <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[4, 29] (63)"
                IterEnd: "[7, 1] (75)"
                Type: "Or: (Definition, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.MethodDefinitionStatement.MethodDefinitionStatement.NodeInfo'>
              ClassType: "ClassType.mutable"
              MethodType: "MethodType.standard"
              Name: "Method2"
              Parameters: {}
              ReturnType: # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[4, 8] (42)"
                    IterEnd: "[4, 11] (45)"
                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(42, 45), match='Int'>"
                    Whitespace:
                      - 41
                      - 42
                IterBegin: "[4, 8] (42)"
                IterEnd: "[4, 11] (45)"
                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              Statements:
                - "Pass Statement"
              Visibility: "VisibilityModifier.public"
            IterBegin: "[4, 1] (35)"
            IterEnd: "[7, 1] (75)"
            Type: "Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[4, 1] (35)"
        IterEnd: "[7, 1] (75)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[4, 1] (35)"
    IterEnd: "[7, 1] (75)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[7, 1] (75)"
                        IterEnd: "[7, 9] (83)"
                        Type: "'override' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(75, 83), match='override'>"
                        Whitespace: None
                    IterBegin: "[7, 1] (75)"
                    IterEnd: "[7, 9] (83)"
                    Type: "Method Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[7, 1] (75)"
                IterEnd: "[7, 9] (83)"
                Type: "Repeat: {Method Type, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[7, 10] (84)"
                            IterEnd: "[7, 13] (87)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(84, 87), match='Int'>"
                            Whitespace:
                              - 83
                              - 84
                        IterBegin: "[7, 10] (84)"
                        IterEnd: "[7, 13] (87)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[7, 10] (84)"
                    IterEnd: "[7, 13] (87)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[7, 10] (84)"
                IterEnd: "[7, 13] (87)"
                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 14] (88)"
                IterEnd: "[7, 21] (95)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(88, 95), match='Method3'>"
                Whitespace:
                  - 87
                  - 88
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[7, 21] (95)"
                    IterEnd: "[7, 22] (96)"
                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(95, 96), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[7, 22] (96)"
                    IterEnd: "[7, 23] (97)"
                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(96, 97), match=')'>"
                    Whitespace: None
                IterBegin: "[7, 21] (95)"
                IterEnd: "[7, 23] (97)"
                Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[7, 24] (98)"
                        IterEnd: "[7, 33] (107)"
                        Type: "'immutable' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(98, 107), match='immutable'>"
                        Whitespace:
                          - 97
                          - 98
                    IterBegin: "[7, 24] (98)"
                    IterEnd: "[7, 33] (107)"
                    Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[7, 24] (98)"
                IterEnd: "[7, 33] (107)"
                Type: "Repeat: {Class Type, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[7, 33] (107)"
                        IterEnd: "[7, 34] (108)"
                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(107, 108), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[7, 34] (108)"
                        IterEnd: "[8, 1] (109)"
                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                          End: 109
                          Start: 108
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[8, 1] (109)"
                        IterEnd: "[8, 5] (113)"
                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                          End: 113
                          Start: 109
                          Value: 4
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[8, 5] (113)"
                                        IterEnd: "[8, 9] (117)"
                                        Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(113, 117), match='pass'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[8, 9] (117)"
                                        IterEnd: "[10, 1] (119)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 119
                                          Start: 117
                                        Whitespace: None
                                    IterBegin: "[8, 5] (113)"
                                    IterEnd: "[10, 1] (119)"
                                    Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[8, 5] (113)"
                                IterEnd: "[10, 1] (119)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[8, 5] (113)"
                            IterEnd: "[10, 1] (119)"
                            Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        IterBegin: "[8, 5] (113)"
                        IterEnd: "[10, 1] (119)"
                        Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[10, 1] (119)"
                        IterEnd: "[10, 1] (119)"
                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                          {}
                        Whitespace: None
                    IterBegin: "[7, 33] (107)"
                    IterEnd: "[10, 1] (119)"
                    Type: "Definition <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[7, 33] (107)"
                IterEnd: "[10, 1] (119)"
                Type: "Or: (Definition, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.MethodDefinitionStatement.MethodDefinitionStatement.NodeInfo'>
              ClassType: "ClassType.immutable"
              MethodType: "MethodType.override"
              Name: "Method3"
              Parameters: {}
              ReturnType: # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[7, 10] (84)"
                    IterEnd: "[7, 13] (87)"
                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(84, 87), match='Int'>"
                    Whitespace:
                      - 83
                      - 84
                IterBegin: "[7, 10] (84)"
                IterEnd: "[7, 13] (87)"
                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              Statements:
                - "Pass Statement"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[7, 1] (75)"
            IterEnd: "[10, 1] (119)"
            Type: "Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[7, 1] (75)"
        IterEnd: "[10, 1] (119)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[7, 1] (75)"
    IterEnd: "[10, 1] (119)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[10, 1] (119)"
                    IterEnd: "[10, 10] (128)"
                    Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(119, 128), match='protected'>"
                    Whitespace: None
                IterBegin: "[10, 1] (119)"
                IterEnd: "[10, 10] (128)"
                Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[10, 11] (129)"
                        IterEnd: "[10, 19] (137)"
                        Type: "'override' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(129, 137), match='override'>"
                        Whitespace:
                          - 128
                          - 129
                    IterBegin: "[10, 11] (129)"
                    IterEnd: "[10, 19] (137)"
                    Type: "Method Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[10, 11] (129)"
                IterEnd: "[10, 19] (137)"
                Type: "Repeat: {Method Type, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[10, 20] (138)"
                            IterEnd: "[10, 23] (141)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(138, 141), match='Int'>"
                            Whitespace:
                              - 137
                              - 138
                        IterBegin: "[10, 20] (138)"
                        IterEnd: "[10, 23] (141)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[10, 20] (138)"
                    IterEnd: "[10, 23] (141)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[10, 20] (138)"
                IterEnd: "[10, 23] (141)"
                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[10, 24] (142)"
                IterEnd: "[10, 31] (149)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(142, 149), match='Method4'>"
                Whitespace:
                  - 141
                  - 142
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[10, 31] (149)"
                    IterEnd: "[10, 32] (150)"
                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(149, 150), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[10, 32] (150)"
                    IterEnd: "[10, 33] (151)"
                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(150, 151), match=')'>"
                    Whitespace: None
                IterBegin: "[10, 31] (149)"
                IterEnd: "[10, 33] (151)"
                Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[10, 33] (151)"
                        IterEnd: "[10, 34] (152)"
                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(151, 152), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[10, 34] (152)"
                        IterEnd: "[11, 1] (153)"
                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                          End: 153
                          Start: 152
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[11, 1] (153)"
                        IterEnd: "[11, 5] (157)"
                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                          End: 157
                          Start: 153
                          Value: 4
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[11, 5] (157)"
                                        IterEnd: "[11, 9] (161)"
                                        Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(157, 161), match='pass'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[11, 9] (161)"
                                        IterEnd: "[13, 1] (163)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 163
                                          Start: 161
                                        Whitespace: None
                                    IterBegin: "[11, 5] (157)"
                                    IterEnd: "[13, 1] (163)"
                                    Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[11, 5] (157)"
                                IterEnd: "[13, 1] (163)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[11, 5] (157)"
                            IterEnd: "[13, 1] (163)"
                            Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        IterBegin: "[11, 5] (157)"
                        IterEnd: "[13, 1] (163)"
                        Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[13, 1] (163)"
                        IterEnd: "[13, 1] (163)"
                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                          {}
                        Whitespace: None
                    IterBegin: "[10, 33] (151)"
                    IterEnd: "[13, 1] (163)"
                    Type: "Definition <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[10, 33] (151)"
                IterEnd: "[13, 1] (163)"
                Type: "Or: (Definition, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.MethodDefinitionStatement.MethodDefinitionStatement.NodeInfo'>
              ClassType: "ClassType.immutable"
              MethodType: "MethodType.override"
              Name: "Method4"
              Parameters: {}
              ReturnType: # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[10, 20] (138)"
                    IterEnd: "[10, 23] (141)"
                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(138, 141), match='Int'>"
                    Whitespace:
                      - 137
                      - 138
                IterBegin: "[10, 20] (138)"
                IterEnd: "[10, 23] (141)"
                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              Statements:
                - "Pass Statement"
              Visibility: "VisibilityModifier.protected"
            IterBegin: "[10, 1] (119)"
            IterEnd: "[13, 1] (163)"
            Type: "Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[10, 1] (119)"
        IterEnd: "[13, 1] (163)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[10, 1] (119)"
    IterEnd: "[13, 1] (163)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[13, 1] (163)"
                    IterEnd: "[13, 8] (170)"
                    Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(163, 170), match='private'>"
                    Whitespace: None
                IterBegin: "[13, 1] (163)"
                IterEnd: "[13, 8] (170)"
                Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[13, 9] (171)"
                        IterEnd: "[13, 15] (177)"
                        Type: "'static' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(171, 177), match='static'>"
                        Whitespace:
                          - 170
                          - 171
                    IterBegin: "[13, 9] (171)"
                    IterEnd: "[13, 15] (177)"
                    Type: "Method Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[13, 9] (171)"
                IterEnd: "[13, 15] (177)"
                Type: "Repeat: {Method Type, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[13, 16] (178)"
                            IterEnd: "[13, 20] (182)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(178, 182), match='Char'>"
                            Whitespace:
                              - 177
                              - 178
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[13, 21] (183)"
                                IterEnd: "[13, 24] (186)"
                                Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(183, 186), match='val'>"
                                Whitespace:
                                  - 182
                                  - 183
                            IterBegin: "[13, 21] (183)"
                            IterEnd: "[13, 24] (186)"
                            Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                        IterBegin: "[13, 16] (178)"
                        IterEnd: "[13, 24] (186)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[13, 16] (178)"
                    IterEnd: "[13, 24] (186)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[13, 16] (178)"
                IterEnd: "[13, 24] (186)"
                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[13, 25] (187)"
                IterEnd: "[13, 32] (194)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(187, 194), match='Method5'>"
                Whitespace:
                  - 186
                  - 187
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[13, 32] (194)"
                    IterEnd: "[13, 33] (195)"
                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(194, 195), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[14, 5] (200)"
                                        IterEnd: "[14, 8] (203)"
                                        Type: "'pos' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(200, 203), match='pos'>"
                                        Whitespace: None
                                    IterBegin: "[14, 5] (200)"
                                    IterEnd: "[14, 8] (203)"
                                    Type: "Or: ('pos', 'any', 'key') <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[14, 8] (203)"
                                    IterEnd: "[14, 9] (204)"
                                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(203, 204), match=':'>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[15, 9] (213)"
                                                    IterEnd: "[15, 12] (216)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(213, 216), match='Int'>"
                                                    Whitespace: None
                                                IterBegin: "[15, 9] (213)"
                                                IterEnd: "[15, 12] (216)"
                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[15, 9] (213)"
                                            IterEnd: "[15, 12] (216)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[15, 9] (213)"
                                        IterEnd: "[15, 12] (216)"
                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[15, 13] (217)"
                                                    IterEnd: "[15, 14] (218)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(217, 218), match='a'>"
                                                    Whitespace:
                                                      - 216
                                                      - 217
                                                IterBegin: "[15, 13] (217)"
                                                IterEnd: "[15, 14] (218)"
                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[15, 13] (217)"
                                            IterEnd: "[15, 14] (218)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[15, 13] (217)"
                                        IterEnd: "[15, 14] (218)"
                                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[15, 9] (213)"
                                    IterEnd: "[15, 14] (218)"
                                    Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[15, 14] (218)"
                                            IterEnd: "[15, 15] (219)"
                                            Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(218, 219), match=','>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[15, 16] (220)"
                                                            IterEnd: "[15, 20] (224)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(220, 224), match='Bool'>"
                                                            Whitespace:
                                                              - 219
                                                              - 220
                                                        IterBegin: "[15, 16] (220)"
                                                        IterEnd: "[15, 20] (224)"
                                                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[15, 16] (220)"
                                                    IterEnd: "[15, 20] (224)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[15, 16] (220)"
                                                IterEnd: "[15, 20] (224)"
                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[15, 21] (225)"
                                                            IterEnd: "[15, 22] (226)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(225, 226), match='b'>"
                                                            Whitespace:
                                                              - 224
                                                              - 225
                                                        IterBegin: "[15, 21] (225)"
                                                        IterEnd: "[15, 22] (226)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[15, 21] (225)"
                                                    IterEnd: "[15, 22] (226)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[15, 21] (225)"
                                                IterEnd: "[15, 22] (226)"
                                                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[15, 16] (220)"
                                            IterEnd: "[15, 22] (226)"
                                            Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[15, 14] (218)"
                                        IterEnd: "[15, 22] (226)"
                                        Type: "Comma and Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[15, 14] (218)"
                                    IterEnd: "[15, 22] (226)"
                                    Type: "Repeat: {Comma and Parameter, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[15, 22] (226)"
                                        IterEnd: "[15, 23] (227)"
                                        Type: "Trailing Comma <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(226, 227), match=','>"
                                        Whitespace: None
                                    IterBegin: "[15, 22] (226)"
                                    IterEnd: "[15, 23] (227)"
                                    Type: "Repeat: {Trailing Comma, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                IterBegin: "[14, 5] (200)"
                                IterEnd: "[15, 23] (227)"
                                Type: "New Style <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[16, 5] (232)"
                                        IterEnd: "[16, 8] (235)"
                                        Type: "'key' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(232, 235), match='key'>"
                                        Whitespace: None
                                    IterBegin: "[16, 5] (232)"
                                    IterEnd: "[16, 8] (235)"
                                    Type: "Or: ('pos', 'any', 'key') <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[16, 8] (235)"
                                    IterEnd: "[16, 9] (236)"
                                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(235, 236), match=':'>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[17, 9] (245)"
                                                    IterEnd: "[17, 13] (249)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(245, 249), match='Char'>"
                                                    Whitespace: None
                                                IterBegin: "[17, 9] (245)"
                                                IterEnd: "[17, 13] (249)"
                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[17, 9] (245)"
                                            IterEnd: "[17, 13] (249)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[17, 9] (245)"
                                        IterEnd: "[17, 13] (249)"
                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[17, 14] (250)"
                                                    IterEnd: "[17, 15] (251)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(250, 251), match='c'>"
                                                    Whitespace:
                                                      - 249
                                                      - 250
                                                IterBegin: "[17, 14] (250)"
                                                IterEnd: "[17, 15] (251)"
                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[17, 14] (250)"
                                            IterEnd: "[17, 15] (251)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[17, 14] (250)"
                                        IterEnd: "[17, 15] (251)"
                                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[17, 9] (245)"
                                    IterEnd: "[17, 15] (251)"
                                    Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[17, 15] (251)"
                                            IterEnd: "[17, 16] (252)"
                                            Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(251, 252), match=','>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[17, 17] (253)"
                                                            IterEnd: "[17, 23] (259)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(253, 259), match='Double'>"
                                                            Whitespace:
                                                              - 252
                                                              - 253
                                                        IterBegin: "[17, 17] (253)"
                                                        IterEnd: "[17, 23] (259)"
                                                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[17, 17] (253)"
                                                    IterEnd: "[17, 23] (259)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[17, 17] (253)"
                                                IterEnd: "[17, 23] (259)"
                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[17, 24] (260)"
                                                            IterEnd: "[17, 25] (261)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(260, 261), match='d'>"
                                                            Whitespace:
                                                              - 259
                                                              - 260
                                                        IterBegin: "[17, 24] (260)"
                                                        IterEnd: "[17, 25] (261)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[17, 24] (260)"
                                                    IterEnd: "[17, 25] (261)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[17, 24] (260)"
                                                IterEnd: "[17, 25] (261)"
                                                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[17, 17] (253)"
                                            IterEnd: "[17, 25] (261)"
                                            Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[17, 15] (251)"
                                        IterEnd: "[17, 25] (261)"
                                        Type: "Comma and Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[17, 15] (251)"
                                    IterEnd: "[17, 25] (261)"
                                    Type: "Repeat: {Comma and Parameter, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                IterBegin: "[16, 5] (232)"
                                IterEnd: "[17, 25] (261)"
                                Type: "New Style <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[14, 5] (200)"
                            IterEnd: "[17, 25] (261)"
                            Type: "Repeat: {New Style, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                        IterBegin: "[14, 5] (200)"
                        IterEnd: "[17, 25] (261)"
                        Type: "Or: (Repeat: {New Style, 1, None}, Traditional) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[14, 5] (200)"
                    IterEnd: "[17, 25] (261)"
                    Type: "Repeat: {Or: (Repeat: {New Style, 1, None}, Traditional), 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[18, 1] (262)"
                    IterEnd: "[18, 2] (263)"
                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(262, 263), match=')'>"
                    Whitespace: None
                IterBegin: "[13, 32] (194)"
                IterEnd: "[18, 2] (263)"
                Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[18, 2] (263)"
                        IterEnd: "[18, 3] (264)"
                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(263, 264), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[18, 3] (264)"
                        IterEnd: "[19, 1] (265)"
                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                          End: 265
                          Start: 264
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[19, 1] (265)"
                        IterEnd: "[19, 5] (269)"
                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                          End: 269
                          Start: 265
                          Value: 4
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[19, 5] (269)"
                                        IterEnd: "[19, 10] (274)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(269, 274), match='func1'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[19, 10] (274)"
                                        IterEnd: "[19, 11] (275)"
                                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(274, 275), match='('>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[19, 11] (275)"
                                        IterEnd: "[19, 12] (276)"
                                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(275, 276), match=')'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[19, 12] (276)"
                                        IterEnd: "[20, 1] (277)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 277
                                          Start: 276
                                        Whitespace: None
                                    IterBegin: "[19, 5] (269)"
                                    IterEnd: "[20, 1] (277)"
                                    Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[19, 5] (269)"
                                IterEnd: "[20, 1] (277)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[19, 5] (269)"
                            IterEnd: "[20, 1] (277)"
                            Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[20, 5] (281)"
                                        IterEnd: "[20, 10] (286)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(281, 286), match='func2'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[20, 10] (286)"
                                        IterEnd: "[20, 11] (287)"
                                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(286, 287), match='('>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[20, 11] (287)"
                                        IterEnd: "[20, 12] (288)"
                                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(287, 288), match=')'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[20, 12] (288)"
                                        IterEnd: "[21, 1] (289)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 289
                                          Start: 288
                                        Whitespace: None
                                    IterBegin: "[20, 5] (281)"
                                    IterEnd: "[21, 1] (289)"
                                    Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[20, 5] (281)"
                                IterEnd: "[21, 1] (289)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[20, 5] (281)"
                            IterEnd: "[21, 1] (289)"
                            Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        IterBegin: "[19, 5] (269)"
                        IterEnd: "[21, 1] (289)"
                        Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[21, 1] (289)"
                        IterEnd: "[21, 1] (289)"
                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                          {}
                        Whitespace: None
                    IterBegin: "[18, 2] (263)"
                    IterEnd: "[21, 1] (289)"
                    Type: "Definition <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[18, 2] (263)"
                IterEnd: "[21, 1] (289)"
                Type: "Or: (Definition, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.MethodDefinitionStatement.MethodDefinitionStatement.NodeInfo'>
              ClassType: None
              MethodType: "MethodType.static"
              Name: "Method5"
              Parameters:   ParametersType.pos:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[15, 9] (213)"
                                    IterEnd: "[15, 12] (216)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(213, 216), match='Int'>"
                                    Whitespace: None
                                IterBegin: "[15, 9] (213)"
                                IterEnd: "[15, 12] (216)"
                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[15, 9] (213)"
                            IterEnd: "[15, 12] (216)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[15, 9] (213)"
                        IterEnd: "[15, 12] (216)"
                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[15, 13] (217)"
                                    IterEnd: "[15, 14] (218)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(217, 218), match='a'>"
                                    Whitespace:
                                      - 216
                                      - 217
                                IterBegin: "[15, 13] (217)"
                                IterEnd: "[15, 14] (218)"
                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[15, 13] (217)"
                            IterEnd: "[15, 14] (218)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[15, 13] (217)"
                        IterEnd: "[15, 14] (218)"
                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[15, 9] (213)"
                    IterEnd: "[15, 14] (218)"
                    Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[15, 16] (220)"
                                    IterEnd: "[15, 20] (224)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(220, 224), match='Bool'>"
                                    Whitespace:
                                      - 219
                                      - 220
                                IterBegin: "[15, 16] (220)"
                                IterEnd: "[15, 20] (224)"
                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[15, 16] (220)"
                            IterEnd: "[15, 20] (224)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[15, 16] (220)"
                        IterEnd: "[15, 20] (224)"
                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[15, 21] (225)"
                                    IterEnd: "[15, 22] (226)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(225, 226), match='b'>"
                                    Whitespace:
                                      - 224
                                      - 225
                                IterBegin: "[15, 21] (225)"
                                IterEnd: "[15, 22] (226)"
                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[15, 21] (225)"
                            IterEnd: "[15, 22] (226)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[15, 21] (225)"
                        IterEnd: "[15, 22] (226)"
                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[15, 16] (220)"
                    IterEnd: "[15, 22] (226)"
                    Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                ParametersType.key:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[17, 9] (245)"
                                    IterEnd: "[17, 13] (249)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(245, 249), match='Char'>"
                                    Whitespace: None
                                IterBegin: "[17, 9] (245)"
                                IterEnd: "[17, 13] (249)"
                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[17, 9] (245)"
                            IterEnd: "[17, 13] (249)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[17, 9] (245)"
                        IterEnd: "[17, 13] (249)"
                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[17, 14] (250)"
                                    IterEnd: "[17, 15] (251)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(250, 251), match='c'>"
                                    Whitespace:
                                      - 249
                                      - 250
                                IterBegin: "[17, 14] (250)"
                                IterEnd: "[17, 15] (251)"
                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[17, 14] (250)"
                            IterEnd: "[17, 15] (251)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[17, 14] (250)"
                        IterEnd: "[17, 15] (251)"
                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[17, 9] (245)"
                    IterEnd: "[17, 15] (251)"
                    Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[17, 17] (253)"
                                    IterEnd: "[17, 23] (259)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(253, 259), match='Double'>"
                                    Whitespace:
                                      - 252
                                      - 253
                                IterBegin: "[17, 17] (253)"
                                IterEnd: "[17, 23] (259)"
                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[17, 17] (253)"
                            IterEnd: "[17, 23] (259)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[17, 17] (253)"
                        IterEnd: "[17, 23] (259)"
                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[17, 24] (260)"
                                    IterEnd: "[17, 25] (261)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(260, 261), match='d'>"
                                    Whitespace:
                                      - 259
                                      - 260
                                IterBegin: "[17, 24] (260)"
                                IterEnd: "[17, 25] (261)"
                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[17, 24] (260)"
                            IterEnd: "[17, 25] (261)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[17, 24] (260)"
                        IterEnd: "[17, 25] (261)"
                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[17, 17] (253)"
                    IterEnd: "[17, 25] (261)"
                    Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              ReturnType: # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[13, 16] (178)"
                    IterEnd: "[13, 20] (182)"
                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(178, 182), match='Char'>"
                    Whitespace:
                      - 177
                      - 178
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[13, 21] (183)"
                        IterEnd: "[13, 24] (186)"
                        Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(183, 186), match='val'>"
                        Whitespace:
                          - 182
                          - 183
                    IterBegin: "[13, 21] (183)"
                    IterEnd: "[13, 24] (186)"
                    Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                IterBegin: "[13, 16] (178)"
                IterEnd: "[13, 24] (186)"
                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              Statements:
                - "Func Invocation Statement"
                - "Func Invocation Statement"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[13, 1] (163)"
            IterEnd: "[21, 1] (289)"
            Type: "Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[13, 1] (163)"
        IterEnd: "[21, 1] (289)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[13, 1] (163)"
    IterEnd: "[21, 1] (289)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[21, 1] (289)"
Type: "<None>"
