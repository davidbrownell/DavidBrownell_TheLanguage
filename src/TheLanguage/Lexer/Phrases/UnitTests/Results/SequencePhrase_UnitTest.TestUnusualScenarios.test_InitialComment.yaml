# <class 'TheLanguage.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[1, 1] (0)"
          IterEnd: "[1, 11] (10)"
          Token: "Comment"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(0, 10), match='# Comment1'>"
          Whitespace: None
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[1, 11] (10)"
          IterEnd: "[2, 1] (11)"
          Token: "Newline+"
          Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 11
            Start: 10
          Whitespace: None
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 1] (11)"
            IterEnd: "[2, 7] (17)"
            Token: "lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 17), match='lower1'>"
            Whitespace: None
          Phrase: "lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[2, 8] (18)"
          IterEnd: "[2, 18] (28)"
          Token: "Comment"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(18, 28), match='# Comment2'>"
          Whitespace:
            - 17
            - 18
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 18] (28)"
            IterEnd: "[3, 1] (29)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 29
              Start: 28
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "Sequence: [lower, Newline+]"
  Phrase: "Or: (Sequence: [lower, Newline+], Sequence: [upper, Newline+])"
IterBegin: "[1, 1] (0)"
IterEnd: "[3, 1] (29)"
Success: True

# <class 'TheLanguage.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 1] (29)"
            IterEnd: "[3, 7] (35)"
            Token: "lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 35), match='lower2'>"
            Whitespace: None
          Phrase: "lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 7] (35)"
            IterEnd: "[4, 1] (36)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 36
              Start: 35
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "Sequence: [lower, Newline+]"
  Phrase: "Or: (Sequence: [lower, Newline+], Sequence: [upper, Newline+])"
IterBegin: "[3, 1] (29)"
IterEnd: "[4, 1] (36)"
Success: True

# <class 'TheLanguage.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[4, 1] (36)"
          IterEnd: "[4, 11] (46)"
          Token: "Comment"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(36, 46), match='# Comment3'>"
          Whitespace: None
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[4, 11] (46)"
          IterEnd: "[5, 1] (47)"
          Token: "Newline+"
          Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 47
            Start: 46
          Whitespace: None
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[5, 1] (47)"
            IterEnd: "[5, 7] (53)"
            Token: "lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(47, 53), match='lower3'>"
            Whitespace: None
          Phrase: "lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[5, 7] (53)"
            IterEnd: "[6, 1] (54)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 54
              Start: 53
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "Sequence: [lower, Newline+]"
  Phrase: "Or: (Sequence: [lower, Newline+], Sequence: [upper, Newline+])"
IterBegin: "[4, 1] (36)"
IterEnd: "[6, 1] (54)"
Success: True
