# ----------------------------------------------------------------------
# This code was automatically generated by the PythonTarget. Any changes made to this
# file will be overwritten during the next generation!
# ----------------------------------------------------------------------

from v1.Lexer.Location import Location
from v1.Parser.MiniLanguage.Types.BooleanType import BooleanType
from v1.Parser.MiniLanguage.Types.CustomType import CustomType
from v1.Parser.MiniLanguage.Types.IntegerType import IntegerType
from v1.Parser.MiniLanguage.Types.NumberType import NumberType
from v1.Parser.MiniLanguage.Types.StringType import StringType
from v1.Parser.ParserInfos.Common.ClassModifier import ClassModifier
from v1.Parser.ParserInfos.Common.ConstraintArgumentsParserInfo import ConstraintArgumentParserInfo
from v1.Parser.ParserInfos.Common.ConstraintArgumentsParserInfo import ConstraintArgumentsParserInfo
from v1.Parser.ParserInfos.Common.ConstraintParametersParserInfo import ConstraintParameterParserInfo
from v1.Parser.ParserInfos.Common.ConstraintParametersParserInfo import ConstraintParametersParserInfo
from v1.Parser.ParserInfos.Common.FuncArgumentsParserInfo import FuncArgumentParserInfo
from v1.Parser.ParserInfos.Common.FuncArgumentsParserInfo import FuncArgumentsParserInfo
from v1.Parser.ParserInfos.Common.FuncParametersParserInfo import FuncParameterParserInfo
from v1.Parser.ParserInfos.Common.FuncParametersParserInfo import FuncParametersParserInfo
from v1.Parser.ParserInfos.Common.MethodModifier import MethodModifier
from v1.Parser.ParserInfos.Common.MutabilityModifier import MutabilityModifier
from v1.Parser.ParserInfos.Common.TemplateParametersParserInfo import TemplateDecoratorParameterParserInfo
from v1.Parser.ParserInfos.Common.TemplateParametersParserInfo import TemplateParametersParserInfo
from v1.Parser.ParserInfos.Common.TemplateParametersParserInfo import TemplateTypeParameterParserInfo
from v1.Parser.ParserInfos.Common.VisibilityModifier import VisibilityModifier
from v1.Parser.ParserInfos.Expressions.BinaryExpressionParserInfo import BinaryExpressionParserInfo, OperatorType as BinaryExpressionOperatorType
from v1.Parser.ParserInfos.Expressions.BooleanExpressionParserInfo import BooleanExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.CallExpressionParserInfo import CallExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.FuncOrTypeExpressionParserInfo import FuncOrTypeExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.IntegerExpressionParserInfo import IntegerExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.NoneExpressionParserInfo import NoneExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.VariableExpressionParserInfo import VariableExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.VariantExpressionParserInfo import VariantExpressionParserInfo
from v1.Parser.ParserInfos.ParserInfo import ParserInfoType
from v1.Parser.ParserInfos.Statements.ClassCapabilities.StandardCapabilities import StandardCapabilities
from v1.Parser.ParserInfos.Statements.ClassStatementParserInfo import ClassStatementDependencyParserInfo
from v1.Parser.ParserInfos.Statements.ClassStatementParserInfo import ClassStatementParserInfo
from v1.Parser.ParserInfos.Statements.FuncDefinitionStatementParserInfo import FuncDefinitionStatementParserInfo, OperatorType as FuncDefinitionStatementParserInfoOperatorType
from v1.Parser.ParserInfos.Statements.FuncInvocationStatementParserInfo import FuncInvocationStatementParserInfo
from v1.Parser.ParserInfos.Statements.ImportStatementParserInfo import ImportStatementItemParserInfo
from v1.Parser.ParserInfos.Statements.ImportStatementParserInfo import ImportStatementParserInfo, ImportType as ImportStatementParserInfoImportType
from v1.Parser.ParserInfos.Statements.SpecialMethodStatementParserInfo import SpecialMethodStatementParserInfo, SpecialMethodType
from v1.Parser.ParserInfos.Statements.TypeAliasStatementParserInfo import TypeAliasStatementParserInfo
from v1.Parser.Region import Region


# ----------------------------------------------------------------------
region_000000 = Region(begin=Location(line=16, column=1), end=Location(line=19, column=1))
region_000001 = Region(begin=Location(line=16, column=34), end=Location(line=16, column=44))
region_000002 = Region(begin=Location(line=16, column=6), end=Location(line=16, column=26))
region_000003 = Region(begin=Location(line=22, column=9), end=Location(line=22, column=12))
region_000004 = Region(begin=Location(line=22, column=9), end=Location(line=22, column=23))
region_000005 = Region(begin=Location(line=22, column=13), end=Location(line=22, column=23))
region_000006 = Region(begin=Location(line=24, column=9), end=Location(line=24, column=13))
region_000007 = Region(begin=Location(line=24, column=9), end=Location(line=24, column=25))
region_000008 = Region(begin=Location(line=24, column=14), end=Location(line=24, column=25))
region_000009 = Region(begin=Location(line=20, column=31), end=Location(line=25, column=2))
region_000010 = Region(begin=Location(line=21, column=5), end=Location(line=22, column=24))
region_000011 = Region(begin=Location(line=22, column=24), end=Location(line=24, column=26))
region_000012 = Region(begin=Location(line=27, column=10), end=Location(line=27, column=13))
region_000013 = Region(begin=Location(line=27, column=16), end=Location(line=27, column=20))
region_000014 = Region(begin=Location(line=27, column=9), end=Location(line=27, column=21))
region_000015 = Region(begin=Location(line=27, column=35), end=Location(line=27, column=39))
region_000016 = Region(begin=Location(line=27, column=9), end=Location(line=27, column=39))
region_000017 = Region(begin=Location(line=27, column=22), end=Location(line=27, column=32))
region_000018 = Region(begin=Location(line=28, column=10), end=Location(line=28, column=13))
region_000019 = Region(begin=Location(line=28, column=16), end=Location(line=28, column=20))
region_000020 = Region(begin=Location(line=28, column=9), end=Location(line=28, column=21))
region_000021 = Region(begin=Location(line=28, column=35), end=Location(line=28, column=39))
region_000022 = Region(begin=Location(line=28, column=9), end=Location(line=28, column=39))
region_000023 = Region(begin=Location(line=28, column=22), end=Location(line=28, column=32))
region_000024 = Region(begin=Location(line=25, column=3), end=Location(line=29, column=2))
region_000025 = Region(begin=Location(line=26, column=5), end=Location(line=28, column=40))
region_000026 = Region(begin=Location(line=30, column=29), end=Location(line=30, column=39))
region_000027 = Region(begin=Location(line=30, column=41), end=Location(line=30, column=51))
region_000028 = Region(begin=Location(line=30, column=27), end=Location(line=30, column=53))
region_000029 = Region(begin=Location(line=30, column=16), end=Location(line=30, column=53))
region_000030 = Region(begin=Location(line=30, column=16), end=Location(line=30, column=26))
region_000031 = Region(begin=Location(line=35, column=9), end=Location(line=35, column=17))
region_000032 = Region(begin=Location(line=36, column=13), end=Location(line=36, column=23))
region_000033 = Region(begin=Location(line=36, column=27), end=Location(line=36, column=28))
region_000034 = Region(begin=Location(line=36, column=13), end=Location(line=36, column=28))
region_000035 = Region(begin=Location(line=36, column=24), end=Location(line=36, column=26))
region_000036 = Region(begin=Location(line=37, column=16), end=Location(line=37, column=26))
region_000037 = Region(begin=Location(line=37, column=30), end=Location(line=37, column=31))
region_000038 = Region(begin=Location(line=37, column=16), end=Location(line=37, column=31))
region_000039 = Region(begin=Location(line=37, column=27), end=Location(line=37, column=29))
region_000040 = Region(begin=Location(line=38, column=16), end=Location(line=38, column=26))
region_000041 = Region(begin=Location(line=38, column=30), end=Location(line=38, column=31))
region_000042 = Region(begin=Location(line=38, column=16), end=Location(line=38, column=31))
region_000043 = Region(begin=Location(line=38, column=27), end=Location(line=38, column=29))
region_000044 = Region(begin=Location(line=39, column=16), end=Location(line=39, column=26))
region_000045 = Region(begin=Location(line=39, column=30), end=Location(line=39, column=32))
region_000046 = Region(begin=Location(line=39, column=16), end=Location(line=39, column=32))
region_000047 = Region(begin=Location(line=39, column=27), end=Location(line=39, column=29))
region_000048 = Region(begin=Location(line=40, column=16), end=Location(line=40, column=26))
region_000049 = Region(begin=Location(line=40, column=30), end=Location(line=40, column=32))
region_000050 = Region(begin=Location(line=40, column=16), end=Location(line=40, column=32))
region_000051 = Region(begin=Location(line=40, column=27), end=Location(line=40, column=29))
region_000052 = Region(begin=Location(line=39, column=16), end=Location(line=40, column=32))
region_000053 = Region(begin=Location(line=40, column=13), end=Location(line=40, column=15))
region_000054 = Region(begin=Location(line=38, column=16), end=Location(line=40, column=32))
region_000055 = Region(begin=Location(line=39, column=13), end=Location(line=39, column=15))
region_000056 = Region(begin=Location(line=37, column=16), end=Location(line=40, column=32))
region_000057 = Region(begin=Location(line=38, column=13), end=Location(line=38, column=15))
region_000058 = Region(begin=Location(line=36, column=13), end=Location(line=40, column=32))
region_000059 = Region(begin=Location(line=37, column=13), end=Location(line=37, column=15))
region_000060 = Region(begin=Location(line=35, column=17), end=Location(line=41, column=10))
region_000061 = Region(begin=Location(line=35, column=9), end=Location(line=41, column=10))
region_000062 = Region(begin=Location(line=35, column=9), end=Location(line=43, column=1))
region_000063 = Region(begin=Location(line=34, column=5), end=Location(line=43, column=5))
region_000064 = Region(begin=Location(line=34, column=5), end=Location(line=34, column=23))
region_000065 = Region(begin=Location(line=34, column=25), end=Location(line=43, column=5))
region_000066 = Region(begin=Location(line=43, column=40), end=Location(line=43, column=52))
region_000067 = Region(begin=Location(line=43, column=40), end=Location(line=43, column=48))
region_000068 = Region(begin=Location(line=43, column=49), end=Location(line=43, column=52))
region_000069 = Region(begin=Location(line=43, column=70), end=Location(line=43, column=78))
region_000070 = Region(begin=Location(line=43, column=69), end=Location(line=43, column=79))
region_000071 = Region(begin=Location(line=43, column=80), end=Location(line=43, column=92))
region_000072 = Region(begin=Location(line=43, column=80), end=Location(line=43, column=88))
region_000073 = Region(begin=Location(line=43, column=89), end=Location(line=43, column=92))
region_000074 = Region(begin=Location(line=43, column=80), end=Location(line=43, column=100))
region_000075 = Region(begin=Location(line=43, column=93), end=Location(line=43, column=100))
region_000076 = Region(begin=Location(line=43, column=79), end=Location(line=43, column=101))
region_000077 = Region(begin=Location(line=43, column=5), end=Location(line=44, column=1))
region_000078 = Region(begin=Location(line=43, column=24), end=Location(line=43, column=30))
region_000079 = Region(begin=Location(line=43, column=31), end=Location(line=43, column=39))
region_000080 = Region(begin=Location(line=43, column=53), end=Location(line=43, column=69))
region_000081 = Region(begin=Location(line=43, column=6), end=Location(line=43, column=14))
region_000082 = Region(begin=Location(line=43, column=16), end=Location(line=43, column=22))
region_000083 = Region(begin=Location(line=44, column=52), end=Location(line=44, column=60))
region_000084 = Region(begin=Location(line=44, column=51), end=Location(line=44, column=61))
region_000085 = Region(begin=Location(line=44, column=62), end=Location(line=44, column=74))
region_000086 = Region(begin=Location(line=44, column=62), end=Location(line=44, column=70))
region_000087 = Region(begin=Location(line=44, column=71), end=Location(line=44, column=74))
region_000088 = Region(begin=Location(line=44, column=62), end=Location(line=44, column=82))
region_000089 = Region(begin=Location(line=44, column=75), end=Location(line=44, column=82))
region_000090 = Region(begin=Location(line=44, column=61), end=Location(line=44, column=83))
region_000091 = Region(begin=Location(line=44, column=5), end=Location(line=45, column=1))
region_000092 = Region(begin=Location(line=44, column=16), end=Location(line=44, column=22))
region_000093 = Region(begin=Location(line=44, column=84), end=Location(line=44, column=93))
region_000094 = Region(begin=Location(line=44, column=23), end=Location(line=44, column=31))
region_000095 = Region(begin=Location(line=44, column=37), end=Location(line=44, column=51))
region_000096 = Region(begin=Location(line=44, column=6), end=Location(line=44, column=14))
region_000097 = Region(begin=Location(line=45, column=52), end=Location(line=45, column=60))
region_000098 = Region(begin=Location(line=45, column=51), end=Location(line=45, column=61))
region_000099 = Region(begin=Location(line=45, column=62), end=Location(line=45, column=74))
region_000100 = Region(begin=Location(line=45, column=62), end=Location(line=45, column=70))
region_000101 = Region(begin=Location(line=45, column=71), end=Location(line=45, column=74))
region_000102 = Region(begin=Location(line=45, column=62), end=Location(line=45, column=82))
region_000103 = Region(begin=Location(line=45, column=75), end=Location(line=45, column=82))
region_000104 = Region(begin=Location(line=45, column=61), end=Location(line=45, column=83))
region_000105 = Region(begin=Location(line=45, column=5), end=Location(line=47, column=1))
region_000106 = Region(begin=Location(line=45, column=16), end=Location(line=45, column=22))
region_000107 = Region(begin=Location(line=45, column=84), end=Location(line=45, column=87))
region_000108 = Region(begin=Location(line=45, column=23), end=Location(line=45, column=31))
region_000109 = Region(begin=Location(line=45, column=37), end=Location(line=45, column=51))
region_000110 = Region(begin=Location(line=45, column=6), end=Location(line=45, column=14))
region_000111 = Region(begin=Location(line=47, column=49), end=Location(line=47, column=57))
region_000112 = Region(begin=Location(line=47, column=48), end=Location(line=47, column=58))
region_000113 = Region(begin=Location(line=47, column=59), end=Location(line=47, column=71))
region_000114 = Region(begin=Location(line=47, column=59), end=Location(line=47, column=67))
region_000115 = Region(begin=Location(line=47, column=68), end=Location(line=47, column=71))
region_000116 = Region(begin=Location(line=47, column=59), end=Location(line=47, column=79))
region_000117 = Region(begin=Location(line=47, column=72), end=Location(line=47, column=79))
region_000118 = Region(begin=Location(line=47, column=58), end=Location(line=47, column=80))
region_000119 = Region(begin=Location(line=47, column=5), end=Location(line=49, column=1))
region_000120 = Region(begin=Location(line=47, column=16), end=Location(line=47, column=22))
region_000121 = Region(begin=Location(line=47, column=81), end=Location(line=47, column=90))
region_000122 = Region(begin=Location(line=47, column=23), end=Location(line=47, column=31))
region_000123 = Region(begin=Location(line=47, column=37), end=Location(line=47, column=48))
region_000124 = Region(begin=Location(line=47, column=6), end=Location(line=47, column=14))
region_000125 = Region(begin=Location(line=49, column=32), end=Location(line=49, column=44))
region_000126 = Region(begin=Location(line=49, column=32), end=Location(line=49, column=40))
region_000127 = Region(begin=Location(line=49, column=41), end=Location(line=49, column=44))
region_000128 = Region(begin=Location(line=49, column=5), end=Location(line=51, column=1))
region_000129 = Region(begin=Location(line=49, column=16), end=Location(line=49, column=22))
region_000130 = Region(begin=Location(line=49, column=58), end=Location(line=49, column=67))
region_000131 = Region(begin=Location(line=49, column=23), end=Location(line=49, column=31))
region_000132 = Region(begin=Location(line=49, column=45), end=Location(line=49, column=55))
region_000133 = Region(begin=Location(line=49, column=55), end=Location(line=49, column=57))
region_000134 = Region(begin=Location(line=49, column=6), end=Location(line=49, column=14))
region_000135 = Region(begin=Location(line=51, column=32), end=Location(line=51, column=40))
region_000136 = Region(begin=Location(line=51, column=32), end=Location(line=51, column=36))
region_000137 = Region(begin=Location(line=51, column=37), end=Location(line=51, column=40))
region_000138 = Region(begin=Location(line=51, column=5), end=Location(line=52, column=1))
region_000139 = Region(begin=Location(line=51, column=16), end=Location(line=51, column=22))
region_000140 = Region(begin=Location(line=51, column=54), end=Location(line=51, column=63))
region_000141 = Region(begin=Location(line=51, column=23), end=Location(line=51, column=31))
region_000142 = Region(begin=Location(line=51, column=41), end=Location(line=51, column=51))
region_000143 = Region(begin=Location(line=51, column=51), end=Location(line=51, column=53))
region_000144 = Region(begin=Location(line=51, column=6), end=Location(line=51, column=14))
region_000145 = Region(begin=Location(line=52, column=32), end=Location(line=52, column=39))
region_000146 = Region(begin=Location(line=52, column=32), end=Location(line=52, column=35))
region_000147 = Region(begin=Location(line=52, column=36), end=Location(line=52, column=39))
region_000148 = Region(begin=Location(line=52, column=5), end=Location(line=54, column=1))
region_000149 = Region(begin=Location(line=52, column=16), end=Location(line=52, column=22))
region_000150 = Region(begin=Location(line=52, column=56), end=Location(line=52, column=65))
region_000151 = Region(begin=Location(line=52, column=23), end=Location(line=52, column=31))
region_000152 = Region(begin=Location(line=52, column=40), end=Location(line=52, column=53))
region_000153 = Region(begin=Location(line=52, column=53), end=Location(line=52, column=55))
region_000154 = Region(begin=Location(line=52, column=6), end=Location(line=52, column=14))
region_000155 = Region(begin=Location(line=54, column=40), end=Location(line=54, column=57))
region_000156 = Region(begin=Location(line=54, column=40), end=Location(line=54, column=53))
region_000157 = Region(begin=Location(line=54, column=54), end=Location(line=54, column=57))
region_000158 = Region(begin=Location(line=54, column=70), end=Location(line=54, column=88))
region_000159 = Region(begin=Location(line=54, column=70), end=Location(line=54, column=78))
region_000160 = Region(begin=Location(line=54, column=79), end=Location(line=54, column=88))
region_000161 = Region(begin=Location(line=54, column=70), end=Location(line=54, column=93))
region_000162 = Region(begin=Location(line=54, column=89), end=Location(line=54, column=93))
region_000163 = Region(begin=Location(line=54, column=95), end=Location(line=54, column=111))
region_000164 = Region(begin=Location(line=54, column=95), end=Location(line=54, column=101))
region_000165 = Region(begin=Location(line=54, column=102), end=Location(line=54, column=111))
region_000166 = Region(begin=Location(line=54, column=95), end=Location(line=54, column=116))
region_000167 = Region(begin=Location(line=54, column=112), end=Location(line=54, column=116))
region_000168 = Region(begin=Location(line=54, column=69), end=Location(line=54, column=117))
region_000169 = Region(begin=Location(line=54, column=70), end=Location(line=54, column=116))
region_000170 = Region(begin=Location(line=54, column=5), end=Location(line=56, column=1))
region_000171 = Region(begin=Location(line=54, column=24), end=Location(line=54, column=30))
region_000172 = Region(begin=Location(line=54, column=31), end=Location(line=54, column=39))
region_000173 = Region(begin=Location(line=54, column=58), end=Location(line=54, column=69))
region_000174 = Region(begin=Location(line=54, column=6), end=Location(line=54, column=14))
region_000175 = Region(begin=Location(line=54, column=16), end=Location(line=54, column=22))
region_000176 = Region(begin=Location(line=56, column=32), end=Location(line=56, column=40))
region_000177 = Region(begin=Location(line=56, column=32), end=Location(line=56, column=36))
region_000178 = Region(begin=Location(line=56, column=37), end=Location(line=56, column=40))
region_000179 = Region(begin=Location(line=56, column=51), end=Location(line=56, column=64))
region_000180 = Region(begin=Location(line=56, column=51), end=Location(line=56, column=54))
region_000181 = Region(begin=Location(line=56, column=55), end=Location(line=56, column=64))
region_000182 = Region(begin=Location(line=56, column=51), end=Location(line=56, column=69))
region_000183 = Region(begin=Location(line=56, column=65), end=Location(line=56, column=69))
region_000184 = Region(begin=Location(line=56, column=50), end=Location(line=56, column=70))
region_000185 = Region(begin=Location(line=56, column=5), end=Location(line=57, column=1))
region_000186 = Region(begin=Location(line=56, column=16), end=Location(line=56, column=22))
region_000187 = Region(begin=Location(line=56, column=71), end=Location(line=56, column=80))
region_000188 = Region(begin=Location(line=56, column=23), end=Location(line=56, column=31))
region_000189 = Region(begin=Location(line=56, column=41), end=Location(line=56, column=50))
region_000190 = Region(begin=Location(line=56, column=6), end=Location(line=56, column=14))
region_000191 = Region(begin=Location(line=57, column=32), end=Location(line=57, column=40))
region_000192 = Region(begin=Location(line=57, column=32), end=Location(line=57, column=36))
region_000193 = Region(begin=Location(line=57, column=37), end=Location(line=57, column=40))
region_000194 = Region(begin=Location(line=57, column=54), end=Location(line=57, column=67))
region_000195 = Region(begin=Location(line=57, column=54), end=Location(line=57, column=57))
region_000196 = Region(begin=Location(line=57, column=58), end=Location(line=57, column=67))
region_000197 = Region(begin=Location(line=57, column=54), end=Location(line=57, column=72))
region_000198 = Region(begin=Location(line=57, column=68), end=Location(line=57, column=72))
region_000199 = Region(begin=Location(line=57, column=53), end=Location(line=57, column=73))
region_000200 = Region(begin=Location(line=57, column=5), end=Location(line=58, column=1))
region_000201 = Region(begin=Location(line=57, column=16), end=Location(line=57, column=22))
region_000202 = Region(begin=Location(line=57, column=74), end=Location(line=57, column=83))
region_000203 = Region(begin=Location(line=57, column=23), end=Location(line=57, column=31))
region_000204 = Region(begin=Location(line=57, column=41), end=Location(line=57, column=53))
region_000205 = Region(begin=Location(line=57, column=6), end=Location(line=57, column=14))
region_000206 = Region(begin=Location(line=58, column=32), end=Location(line=58, column=40))
region_000207 = Region(begin=Location(line=58, column=32), end=Location(line=58, column=36))
region_000208 = Region(begin=Location(line=58, column=37), end=Location(line=58, column=40))
region_000209 = Region(begin=Location(line=58, column=50), end=Location(line=58, column=63))
region_000210 = Region(begin=Location(line=58, column=50), end=Location(line=58, column=53))
region_000211 = Region(begin=Location(line=58, column=54), end=Location(line=58, column=63))
region_000212 = Region(begin=Location(line=58, column=50), end=Location(line=58, column=68))
region_000213 = Region(begin=Location(line=58, column=64), end=Location(line=58, column=68))
region_000214 = Region(begin=Location(line=58, column=49), end=Location(line=58, column=69))
region_000215 = Region(begin=Location(line=58, column=5), end=Location(line=59, column=1))
region_000216 = Region(begin=Location(line=58, column=16), end=Location(line=58, column=22))
region_000217 = Region(begin=Location(line=58, column=70), end=Location(line=58, column=79))
region_000218 = Region(begin=Location(line=58, column=23), end=Location(line=58, column=31))
region_000219 = Region(begin=Location(line=58, column=41), end=Location(line=58, column=49))
region_000220 = Region(begin=Location(line=58, column=6), end=Location(line=58, column=14))
region_000221 = Region(begin=Location(line=59, column=32), end=Location(line=59, column=40))
region_000222 = Region(begin=Location(line=59, column=32), end=Location(line=59, column=36))
region_000223 = Region(begin=Location(line=59, column=37), end=Location(line=59, column=40))
region_000224 = Region(begin=Location(line=59, column=55), end=Location(line=59, column=68))
region_000225 = Region(begin=Location(line=59, column=55), end=Location(line=59, column=58))
region_000226 = Region(begin=Location(line=59, column=59), end=Location(line=59, column=68))
region_000227 = Region(begin=Location(line=59, column=55), end=Location(line=59, column=73))
region_000228 = Region(begin=Location(line=59, column=69), end=Location(line=59, column=73))
region_000229 = Region(begin=Location(line=59, column=54), end=Location(line=59, column=74))
region_000230 = Region(begin=Location(line=59, column=5), end=Location(line=60, column=1))
region_000231 = Region(begin=Location(line=59, column=16), end=Location(line=59, column=22))
region_000232 = Region(begin=Location(line=59, column=75), end=Location(line=59, column=84))
region_000233 = Region(begin=Location(line=59, column=23), end=Location(line=59, column=31))
region_000234 = Region(begin=Location(line=59, column=41), end=Location(line=59, column=54))
region_000235 = Region(begin=Location(line=59, column=6), end=Location(line=59, column=14))
region_000236 = Region(begin=Location(line=60, column=32), end=Location(line=60, column=40))
region_000237 = Region(begin=Location(line=60, column=32), end=Location(line=60, column=36))
region_000238 = Region(begin=Location(line=60, column=37), end=Location(line=60, column=40))
region_000239 = Region(begin=Location(line=60, column=53), end=Location(line=60, column=66))
region_000240 = Region(begin=Location(line=60, column=53), end=Location(line=60, column=56))
region_000241 = Region(begin=Location(line=60, column=57), end=Location(line=60, column=66))
region_000242 = Region(begin=Location(line=60, column=53), end=Location(line=60, column=71))
region_000243 = Region(begin=Location(line=60, column=67), end=Location(line=60, column=71))
region_000244 = Region(begin=Location(line=60, column=52), end=Location(line=60, column=72))
region_000245 = Region(begin=Location(line=60, column=5), end=Location(line=61, column=1))
region_000246 = Region(begin=Location(line=60, column=16), end=Location(line=60, column=22))
region_000247 = Region(begin=Location(line=60, column=73), end=Location(line=60, column=82))
region_000248 = Region(begin=Location(line=60, column=23), end=Location(line=60, column=31))
region_000249 = Region(begin=Location(line=60, column=41), end=Location(line=60, column=52))
region_000250 = Region(begin=Location(line=60, column=6), end=Location(line=60, column=14))
region_000251 = Region(begin=Location(line=61, column=32), end=Location(line=61, column=40))
region_000252 = Region(begin=Location(line=61, column=32), end=Location(line=61, column=36))
region_000253 = Region(begin=Location(line=61, column=37), end=Location(line=61, column=40))
region_000254 = Region(begin=Location(line=61, column=58), end=Location(line=61, column=71))
region_000255 = Region(begin=Location(line=61, column=58), end=Location(line=61, column=61))
region_000256 = Region(begin=Location(line=61, column=62), end=Location(line=61, column=71))
region_000257 = Region(begin=Location(line=61, column=58), end=Location(line=61, column=76))
region_000258 = Region(begin=Location(line=61, column=72), end=Location(line=61, column=76))
region_000259 = Region(begin=Location(line=61, column=57), end=Location(line=61, column=77))
region_000260 = Region(begin=Location(line=61, column=5), end=Location(line=63, column=1))
region_000261 = Region(begin=Location(line=61, column=16), end=Location(line=61, column=22))
region_000262 = Region(begin=Location(line=61, column=78), end=Location(line=61, column=87))
region_000263 = Region(begin=Location(line=61, column=23), end=Location(line=61, column=31))
region_000264 = Region(begin=Location(line=61, column=41), end=Location(line=61, column=57))
region_000265 = Region(begin=Location(line=61, column=6), end=Location(line=61, column=14))
region_000266 = Region(begin=Location(line=63, column=32), end=Location(line=63, column=44))
region_000267 = Region(begin=Location(line=63, column=32), end=Location(line=63, column=40))
region_000268 = Region(begin=Location(line=63, column=41), end=Location(line=63, column=44))
region_000269 = Region(begin=Location(line=63, column=5), end=Location(line=64, column=1))
region_000270 = Region(begin=Location(line=63, column=16), end=Location(line=63, column=22))
region_000271 = Region(begin=Location(line=63, column=61), end=Location(line=63, column=70))
region_000272 = Region(begin=Location(line=63, column=23), end=Location(line=63, column=31))
region_000273 = Region(begin=Location(line=63, column=45), end=Location(line=63, column=58))
region_000274 = Region(begin=Location(line=63, column=58), end=Location(line=63, column=60))
region_000275 = Region(begin=Location(line=63, column=6), end=Location(line=63, column=14))
region_000276 = Region(begin=Location(line=64, column=32), end=Location(line=64, column=44))
region_000277 = Region(begin=Location(line=64, column=32), end=Location(line=64, column=40))
region_000278 = Region(begin=Location(line=64, column=41), end=Location(line=64, column=44))
region_000279 = Region(begin=Location(line=64, column=5), end=Location(line=66, column=1))
region_000280 = Region(begin=Location(line=64, column=16), end=Location(line=64, column=22))
region_000281 = Region(begin=Location(line=64, column=61), end=Location(line=64, column=70))
region_000282 = Region(begin=Location(line=64, column=23), end=Location(line=64, column=31))
region_000283 = Region(begin=Location(line=64, column=45), end=Location(line=64, column=58))
region_000284 = Region(begin=Location(line=64, column=58), end=Location(line=64, column=60))
region_000285 = Region(begin=Location(line=64, column=6), end=Location(line=64, column=14))
region_000286 = Region(begin=Location(line=66, column=32), end=Location(line=66, column=44))
region_000287 = Region(begin=Location(line=66, column=32), end=Location(line=66, column=40))
region_000288 = Region(begin=Location(line=66, column=41), end=Location(line=66, column=44))
region_000289 = Region(begin=Location(line=66, column=57), end=Location(line=66, column=70))
region_000290 = Region(begin=Location(line=66, column=57), end=Location(line=66, column=60))
region_000291 = Region(begin=Location(line=66, column=61), end=Location(line=66, column=70))
region_000292 = Region(begin=Location(line=66, column=57), end=Location(line=66, column=78))
region_000293 = Region(begin=Location(line=66, column=71), end=Location(line=66, column=78))
region_000294 = Region(begin=Location(line=66, column=56), end=Location(line=66, column=79))
region_000295 = Region(begin=Location(line=66, column=5), end=Location(line=67, column=1))
region_000296 = Region(begin=Location(line=66, column=16), end=Location(line=66, column=22))
region_000297 = Region(begin=Location(line=66, column=80), end=Location(line=66, column=89))
region_000298 = Region(begin=Location(line=66, column=23), end=Location(line=66, column=31))
region_000299 = Region(begin=Location(line=66, column=45), end=Location(line=66, column=56))
region_000300 = Region(begin=Location(line=66, column=6), end=Location(line=66, column=14))
region_000301 = Region(begin=Location(line=67, column=32), end=Location(line=67, column=44))
region_000302 = Region(begin=Location(line=67, column=32), end=Location(line=67, column=40))
region_000303 = Region(begin=Location(line=67, column=41), end=Location(line=67, column=44))
region_000304 = Region(begin=Location(line=67, column=59), end=Location(line=67, column=72))
region_000305 = Region(begin=Location(line=67, column=59), end=Location(line=67, column=62))
region_000306 = Region(begin=Location(line=67, column=63), end=Location(line=67, column=72))
region_000307 = Region(begin=Location(line=67, column=59), end=Location(line=67, column=83))
region_000308 = Region(begin=Location(line=67, column=73), end=Location(line=67, column=83))
region_000309 = Region(begin=Location(line=67, column=58), end=Location(line=67, column=84))
region_000310 = Region(begin=Location(line=67, column=5), end=Location(line=68, column=1))
region_000311 = Region(begin=Location(line=67, column=16), end=Location(line=67, column=22))
region_000312 = Region(begin=Location(line=67, column=85), end=Location(line=67, column=94))
region_000313 = Region(begin=Location(line=67, column=23), end=Location(line=67, column=31))
region_000314 = Region(begin=Location(line=67, column=45), end=Location(line=67, column=58))
region_000315 = Region(begin=Location(line=67, column=6), end=Location(line=67, column=14))
region_000316 = Region(begin=Location(line=68, column=32), end=Location(line=68, column=44))
region_000317 = Region(begin=Location(line=68, column=32), end=Location(line=68, column=40))
region_000318 = Region(begin=Location(line=68, column=41), end=Location(line=68, column=44))
region_000319 = Region(begin=Location(line=68, column=56), end=Location(line=68, column=69))
region_000320 = Region(begin=Location(line=68, column=56), end=Location(line=68, column=59))
region_000321 = Region(begin=Location(line=68, column=60), end=Location(line=68, column=69))
region_000322 = Region(begin=Location(line=68, column=56), end=Location(line=68, column=78))
region_000323 = Region(begin=Location(line=68, column=70), end=Location(line=68, column=78))
region_000324 = Region(begin=Location(line=68, column=55), end=Location(line=68, column=79))
region_000325 = Region(begin=Location(line=68, column=5), end=Location(line=70, column=1))
region_000326 = Region(begin=Location(line=68, column=16), end=Location(line=68, column=22))
region_000327 = Region(begin=Location(line=68, column=80), end=Location(line=68, column=89))
region_000328 = Region(begin=Location(line=68, column=23), end=Location(line=68, column=31))
region_000329 = Region(begin=Location(line=68, column=45), end=Location(line=68, column=55))
region_000330 = Region(begin=Location(line=68, column=6), end=Location(line=68, column=14))
region_000331 = Region(begin=Location(line=70, column=32), end=Location(line=70, column=44))
region_000332 = Region(begin=Location(line=70, column=32), end=Location(line=70, column=40))
region_000333 = Region(begin=Location(line=70, column=41), end=Location(line=70, column=44))
region_000334 = Region(begin=Location(line=70, column=54), end=Location(line=70, column=67))
region_000335 = Region(begin=Location(line=70, column=54), end=Location(line=70, column=57))
region_000336 = Region(begin=Location(line=70, column=58), end=Location(line=70, column=67))
region_000337 = Region(begin=Location(line=70, column=54), end=Location(line=70, column=73))
region_000338 = Region(begin=Location(line=70, column=68), end=Location(line=70, column=73))
region_000339 = Region(begin=Location(line=70, column=53), end=Location(line=70, column=74))
region_000340 = Region(begin=Location(line=70, column=5), end=Location(line=71, column=1))
region_000341 = Region(begin=Location(line=70, column=16), end=Location(line=70, column=22))
region_000342 = Region(begin=Location(line=70, column=75), end=Location(line=70, column=84))
region_000343 = Region(begin=Location(line=70, column=23), end=Location(line=70, column=31))
region_000344 = Region(begin=Location(line=70, column=45), end=Location(line=70, column=53))
region_000345 = Region(begin=Location(line=70, column=6), end=Location(line=70, column=14))
region_000346 = Region(begin=Location(line=71, column=32), end=Location(line=71, column=44))
region_000347 = Region(begin=Location(line=71, column=32), end=Location(line=71, column=40))
region_000348 = Region(begin=Location(line=71, column=41), end=Location(line=71, column=44))
region_000349 = Region(begin=Location(line=71, column=59), end=Location(line=71, column=72))
region_000350 = Region(begin=Location(line=71, column=59), end=Location(line=71, column=62))
region_000351 = Region(begin=Location(line=71, column=63), end=Location(line=71, column=72))
region_000352 = Region(begin=Location(line=71, column=59), end=Location(line=71, column=78))
region_000353 = Region(begin=Location(line=71, column=73), end=Location(line=71, column=78))
region_000354 = Region(begin=Location(line=71, column=58), end=Location(line=71, column=79))
region_000355 = Region(begin=Location(line=71, column=5), end=Location(line=73, column=1))
region_000356 = Region(begin=Location(line=71, column=16), end=Location(line=71, column=22))
region_000357 = Region(begin=Location(line=71, column=80), end=Location(line=71, column=89))
region_000358 = Region(begin=Location(line=71, column=23), end=Location(line=71, column=31))
region_000359 = Region(begin=Location(line=71, column=45), end=Location(line=71, column=58))
region_000360 = Region(begin=Location(line=71, column=6), end=Location(line=71, column=14))
region_000361 = Region(begin=Location(line=73, column=49), end=Location(line=73, column=57))
region_000362 = Region(begin=Location(line=73, column=48), end=Location(line=73, column=58))
region_000363 = Region(begin=Location(line=73, column=59), end=Location(line=73, column=71))
region_000364 = Region(begin=Location(line=73, column=59), end=Location(line=73, column=67))
region_000365 = Region(begin=Location(line=73, column=68), end=Location(line=73, column=71))
region_000366 = Region(begin=Location(line=73, column=59), end=Location(line=73, column=79))
region_000367 = Region(begin=Location(line=73, column=72), end=Location(line=73, column=79))
region_000368 = Region(begin=Location(line=73, column=58), end=Location(line=73, column=80))
region_000369 = Region(begin=Location(line=73, column=5), end=Location(line=75, column=1))
region_000370 = Region(begin=Location(line=73, column=16), end=Location(line=73, column=22))
region_000371 = Region(begin=Location(line=73, column=81), end=Location(line=73, column=84))
region_000372 = Region(begin=Location(line=73, column=23), end=Location(line=73, column=31))
region_000373 = Region(begin=Location(line=73, column=37), end=Location(line=73, column=48))
region_000374 = Region(begin=Location(line=73, column=6), end=Location(line=73, column=14))
region_000375 = Region(begin=Location(line=75, column=56), end=Location(line=75, column=69))
region_000376 = Region(begin=Location(line=75, column=56), end=Location(line=75, column=59))
region_000377 = Region(begin=Location(line=75, column=60), end=Location(line=75, column=69))
region_000378 = Region(begin=Location(line=75, column=56), end=Location(line=75, column=77))
region_000379 = Region(begin=Location(line=75, column=70), end=Location(line=75, column=77))
region_000380 = Region(begin=Location(line=75, column=55), end=Location(line=75, column=78))
region_000381 = Region(begin=Location(line=75, column=5), end=Location(line=76, column=1))
region_000382 = Region(begin=Location(line=75, column=16), end=Location(line=75, column=22))
region_000383 = Region(begin=Location(line=75, column=79), end=Location(line=75, column=82))
region_000384 = Region(begin=Location(line=75, column=23), end=Location(line=75, column=31))
region_000385 = Region(begin=Location(line=75, column=37), end=Location(line=75, column=55))
region_000386 = Region(begin=Location(line=75, column=6), end=Location(line=75, column=14))
region_000387 = Region(begin=Location(line=76, column=58), end=Location(line=76, column=71))
region_000388 = Region(begin=Location(line=76, column=58), end=Location(line=76, column=61))
region_000389 = Region(begin=Location(line=76, column=62), end=Location(line=76, column=71))
region_000390 = Region(begin=Location(line=76, column=58), end=Location(line=76, column=82))
region_000391 = Region(begin=Location(line=76, column=72), end=Location(line=76, column=82))
region_000392 = Region(begin=Location(line=76, column=57), end=Location(line=76, column=83))
region_000393 = Region(begin=Location(line=76, column=5), end=Location(line=77, column=1))
region_000394 = Region(begin=Location(line=76, column=16), end=Location(line=76, column=22))
region_000395 = Region(begin=Location(line=76, column=84), end=Location(line=76, column=87))
region_000396 = Region(begin=Location(line=76, column=23), end=Location(line=76, column=31))
region_000397 = Region(begin=Location(line=76, column=37), end=Location(line=76, column=57))
region_000398 = Region(begin=Location(line=76, column=6), end=Location(line=76, column=14))
region_000399 = Region(begin=Location(line=77, column=55), end=Location(line=77, column=68))
region_000400 = Region(begin=Location(line=77, column=55), end=Location(line=77, column=58))
region_000401 = Region(begin=Location(line=77, column=59), end=Location(line=77, column=68))
region_000402 = Region(begin=Location(line=77, column=55), end=Location(line=77, column=77))
region_000403 = Region(begin=Location(line=77, column=69), end=Location(line=77, column=77))
region_000404 = Region(begin=Location(line=77, column=54), end=Location(line=77, column=78))
region_000405 = Region(begin=Location(line=77, column=5), end=Location(line=79, column=1))
region_000406 = Region(begin=Location(line=77, column=16), end=Location(line=77, column=22))
region_000407 = Region(begin=Location(line=77, column=79), end=Location(line=77, column=82))
region_000408 = Region(begin=Location(line=77, column=23), end=Location(line=77, column=31))
region_000409 = Region(begin=Location(line=77, column=37), end=Location(line=77, column=54))
region_000410 = Region(begin=Location(line=77, column=6), end=Location(line=77, column=14))
region_000411 = Region(begin=Location(line=79, column=53), end=Location(line=79, column=66))
region_000412 = Region(begin=Location(line=79, column=53), end=Location(line=79, column=56))
region_000413 = Region(begin=Location(line=79, column=57), end=Location(line=79, column=66))
region_000414 = Region(begin=Location(line=79, column=53), end=Location(line=79, column=72))
region_000415 = Region(begin=Location(line=79, column=67), end=Location(line=79, column=72))
region_000416 = Region(begin=Location(line=79, column=52), end=Location(line=79, column=73))
region_000417 = Region(begin=Location(line=79, column=5), end=Location(line=80, column=1))
region_000418 = Region(begin=Location(line=79, column=16), end=Location(line=79, column=22))
region_000419 = Region(begin=Location(line=79, column=74), end=Location(line=79, column=77))
region_000420 = Region(begin=Location(line=79, column=23), end=Location(line=79, column=31))
region_000421 = Region(begin=Location(line=79, column=37), end=Location(line=79, column=52))
region_000422 = Region(begin=Location(line=79, column=6), end=Location(line=79, column=14))
region_000423 = Region(begin=Location(line=80, column=58), end=Location(line=80, column=71))
region_000424 = Region(begin=Location(line=80, column=58), end=Location(line=80, column=61))
region_000425 = Region(begin=Location(line=80, column=62), end=Location(line=80, column=71))
region_000426 = Region(begin=Location(line=80, column=58), end=Location(line=80, column=77))
region_000427 = Region(begin=Location(line=80, column=72), end=Location(line=80, column=77))
region_000428 = Region(begin=Location(line=80, column=57), end=Location(line=80, column=78))
region_000429 = Region(begin=Location(line=80, column=5), end=Location(line=83, column=1))
region_000430 = Region(begin=Location(line=80, column=16), end=Location(line=80, column=22))
region_000431 = Region(begin=Location(line=80, column=79), end=Location(line=80, column=82))
region_000432 = Region(begin=Location(line=80, column=23), end=Location(line=80, column=31))
region_000433 = Region(begin=Location(line=80, column=37), end=Location(line=80, column=57))
region_000434 = Region(begin=Location(line=80, column=6), end=Location(line=80, column=14))
region_000435 = Region(begin=Location(line=20, column=1), end=Location(line=84, column=1))
region_000436 = Region(begin=Location(line=20, column=1), end=Location(line=20, column=7))
region_000437 = Region(begin=Location(line=20, column=8), end=Location(line=20, column=15))
region_000438 = Region(begin=Location(line=20, column=22), end=Location(line=20, column=30))
region_000439 = Region(begin=Location(line=31, column=1), end=Location(line=84, column=1))
region_000440 = Region(begin=Location(line=87, column=57), end=Location(line=87, column=58))
region_000441 = Region(begin=Location(line=87, column=74), end=Location(line=87, column=79))
region_000442 = Region(begin=Location(line=87, column=60), end=Location(line=87, column=79))
region_000443 = Region(begin=Location(line=87, column=60), end=Location(line=87, column=71))
region_000444 = Region(begin=Location(line=87, column=94), end=Location(line=87, column=104))
region_000445 = Region(begin=Location(line=87, column=81), end=Location(line=87, column=104))
region_000446 = Region(begin=Location(line=87, column=81), end=Location(line=87, column=91))
region_000447 = Region(begin=Location(line=87, column=119), end=Location(line=87, column=129))
region_000448 = Region(begin=Location(line=87, column=106), end=Location(line=87, column=129))
region_000449 = Region(begin=Location(line=87, column=106), end=Location(line=87, column=116))
region_000450 = Region(begin=Location(line=87, column=56), end=Location(line=87, column=130))
region_000451 = Region(begin=Location(line=87, column=47), end=Location(line=87, column=130))
region_000452 = Region(begin=Location(line=87, column=47), end=Location(line=87, column=55))
region_000453 = Region(begin=Location(line=84, column=1), end=Location(line=89, column=1))
region_000454 = Region(begin=Location(line=84, column=1), end=Location(line=84, column=7))
region_000455 = Region(begin=Location(line=84, column=8), end=Location(line=84, column=13))
region_000456 = Region(begin=Location(line=92, column=57), end=Location(line=92, column=58))
region_000457 = Region(begin=Location(line=92, column=74), end=Location(line=92, column=78))
region_000458 = Region(begin=Location(line=92, column=60), end=Location(line=92, column=78))
region_000459 = Region(begin=Location(line=92, column=60), end=Location(line=92, column=71))
region_000460 = Region(begin=Location(line=92, column=93), end=Location(line=92, column=103))
region_000461 = Region(begin=Location(line=92, column=80), end=Location(line=92, column=103))
region_000462 = Region(begin=Location(line=92, column=80), end=Location(line=92, column=90))
region_000463 = Region(begin=Location(line=92, column=118), end=Location(line=92, column=128))
region_000464 = Region(begin=Location(line=92, column=105), end=Location(line=92, column=128))
region_000465 = Region(begin=Location(line=92, column=105), end=Location(line=92, column=115))
region_000466 = Region(begin=Location(line=92, column=56), end=Location(line=92, column=129))
region_000467 = Region(begin=Location(line=92, column=47), end=Location(line=92, column=129))
region_000468 = Region(begin=Location(line=92, column=47), end=Location(line=92, column=55))
region_000469 = Region(begin=Location(line=89, column=1), end=Location(line=95, column=1))
region_000470 = Region(begin=Location(line=89, column=1), end=Location(line=89, column=7))
region_000471 = Region(begin=Location(line=89, column=8), end=Location(line=89, column=20))
region_000472 = Region(begin=Location(line=99, column=57), end=Location(line=99, column=58))
region_000473 = Region(begin=Location(line=99, column=74), end=Location(line=99, column=79))
region_000474 = Region(begin=Location(line=99, column=60), end=Location(line=99, column=79))
region_000475 = Region(begin=Location(line=99, column=60), end=Location(line=99, column=71))
region_000476 = Region(begin=Location(line=99, column=94), end=Location(line=99, column=104))
region_000477 = Region(begin=Location(line=99, column=81), end=Location(line=99, column=104))
region_000478 = Region(begin=Location(line=99, column=81), end=Location(line=99, column=91))
region_000479 = Region(begin=Location(line=99, column=119), end=Location(line=99, column=129))
region_000480 = Region(begin=Location(line=99, column=106), end=Location(line=99, column=129))
region_000481 = Region(begin=Location(line=99, column=106), end=Location(line=99, column=116))
region_000482 = Region(begin=Location(line=99, column=56), end=Location(line=99, column=130))
region_000483 = Region(begin=Location(line=99, column=47), end=Location(line=99, column=130))
region_000484 = Region(begin=Location(line=99, column=47), end=Location(line=99, column=55))
region_000485 = Region(begin=Location(line=96, column=1), end=Location(line=101, column=1))
region_000486 = Region(begin=Location(line=96, column=1), end=Location(line=96, column=7))
region_000487 = Region(begin=Location(line=96, column=8), end=Location(line=96, column=13))
region_000488 = Region(begin=Location(line=104, column=57), end=Location(line=104, column=58))
region_000489 = Region(begin=Location(line=104, column=74), end=Location(line=104, column=78))
region_000490 = Region(begin=Location(line=104, column=60), end=Location(line=104, column=78))
region_000491 = Region(begin=Location(line=104, column=60), end=Location(line=104, column=71))
region_000492 = Region(begin=Location(line=104, column=93), end=Location(line=104, column=103))
region_000493 = Region(begin=Location(line=104, column=80), end=Location(line=104, column=103))
region_000494 = Region(begin=Location(line=104, column=80), end=Location(line=104, column=90))
region_000495 = Region(begin=Location(line=104, column=118), end=Location(line=104, column=128))
region_000496 = Region(begin=Location(line=104, column=105), end=Location(line=104, column=128))
region_000497 = Region(begin=Location(line=104, column=105), end=Location(line=104, column=115))
region_000498 = Region(begin=Location(line=104, column=56), end=Location(line=104, column=129))
region_000499 = Region(begin=Location(line=104, column=47), end=Location(line=104, column=129))
region_000500 = Region(begin=Location(line=104, column=47), end=Location(line=104, column=55))
region_000501 = Region(begin=Location(line=101, column=1), end=Location(line=107, column=1))
region_000502 = Region(begin=Location(line=101, column=1), end=Location(line=101, column=7))
region_000503 = Region(begin=Location(line=101, column=8), end=Location(line=101, column=20))
region_000504 = Region(begin=Location(line=111, column=57), end=Location(line=111, column=58))
region_000505 = Region(begin=Location(line=111, column=74), end=Location(line=111, column=79))
region_000506 = Region(begin=Location(line=111, column=60), end=Location(line=111, column=79))
region_000507 = Region(begin=Location(line=111, column=60), end=Location(line=111, column=71))
region_000508 = Region(begin=Location(line=111, column=94), end=Location(line=111, column=104))
region_000509 = Region(begin=Location(line=111, column=81), end=Location(line=111, column=104))
region_000510 = Region(begin=Location(line=111, column=81), end=Location(line=111, column=91))
region_000511 = Region(begin=Location(line=111, column=119), end=Location(line=111, column=129))
region_000512 = Region(begin=Location(line=111, column=106), end=Location(line=111, column=129))
region_000513 = Region(begin=Location(line=111, column=106), end=Location(line=111, column=116))
region_000514 = Region(begin=Location(line=111, column=56), end=Location(line=111, column=130))
region_000515 = Region(begin=Location(line=111, column=47), end=Location(line=111, column=130))
region_000516 = Region(begin=Location(line=111, column=47), end=Location(line=111, column=55))
region_000517 = Region(begin=Location(line=108, column=1), end=Location(line=113, column=1))
region_000518 = Region(begin=Location(line=108, column=1), end=Location(line=108, column=7))
region_000519 = Region(begin=Location(line=108, column=8), end=Location(line=108, column=13))
region_000520 = Region(begin=Location(line=116, column=57), end=Location(line=116, column=58))
region_000521 = Region(begin=Location(line=116, column=74), end=Location(line=116, column=78))
region_000522 = Region(begin=Location(line=116, column=60), end=Location(line=116, column=78))
region_000523 = Region(begin=Location(line=116, column=60), end=Location(line=116, column=71))
region_000524 = Region(begin=Location(line=116, column=93), end=Location(line=116, column=103))
region_000525 = Region(begin=Location(line=116, column=80), end=Location(line=116, column=103))
region_000526 = Region(begin=Location(line=116, column=80), end=Location(line=116, column=90))
region_000527 = Region(begin=Location(line=116, column=118), end=Location(line=116, column=128))
region_000528 = Region(begin=Location(line=116, column=105), end=Location(line=116, column=128))
region_000529 = Region(begin=Location(line=116, column=105), end=Location(line=116, column=115))
region_000530 = Region(begin=Location(line=116, column=56), end=Location(line=116, column=129))
region_000531 = Region(begin=Location(line=116, column=47), end=Location(line=116, column=129))
region_000532 = Region(begin=Location(line=116, column=47), end=Location(line=116, column=55))
region_000533 = Region(begin=Location(line=113, column=1), end=Location(line=119, column=1))
region_000534 = Region(begin=Location(line=113, column=1), end=Location(line=113, column=7))
region_000535 = Region(begin=Location(line=113, column=8), end=Location(line=113, column=20))
region_000536 = Region(begin=Location(line=123, column=57), end=Location(line=123, column=59))
region_000537 = Region(begin=Location(line=123, column=75), end=Location(line=123, column=80))
region_000538 = Region(begin=Location(line=123, column=61), end=Location(line=123, column=80))
region_000539 = Region(begin=Location(line=123, column=61), end=Location(line=123, column=72))
region_000540 = Region(begin=Location(line=123, column=95), end=Location(line=123, column=105))
region_000541 = Region(begin=Location(line=123, column=82), end=Location(line=123, column=105))
region_000542 = Region(begin=Location(line=123, column=82), end=Location(line=123, column=92))
region_000543 = Region(begin=Location(line=123, column=120), end=Location(line=123, column=130))
region_000544 = Region(begin=Location(line=123, column=107), end=Location(line=123, column=130))
region_000545 = Region(begin=Location(line=123, column=107), end=Location(line=123, column=117))
region_000546 = Region(begin=Location(line=123, column=56), end=Location(line=123, column=131))
region_000547 = Region(begin=Location(line=123, column=47), end=Location(line=123, column=131))
region_000548 = Region(begin=Location(line=123, column=47), end=Location(line=123, column=55))
region_000549 = Region(begin=Location(line=120, column=1), end=Location(line=125, column=1))
region_000550 = Region(begin=Location(line=120, column=1), end=Location(line=120, column=7))
region_000551 = Region(begin=Location(line=120, column=8), end=Location(line=120, column=14))
region_000552 = Region(begin=Location(line=128, column=57), end=Location(line=128, column=59))
region_000553 = Region(begin=Location(line=128, column=75), end=Location(line=128, column=79))
region_000554 = Region(begin=Location(line=128, column=61), end=Location(line=128, column=79))
region_000555 = Region(begin=Location(line=128, column=61), end=Location(line=128, column=72))
region_000556 = Region(begin=Location(line=128, column=94), end=Location(line=128, column=104))
region_000557 = Region(begin=Location(line=128, column=81), end=Location(line=128, column=104))
region_000558 = Region(begin=Location(line=128, column=81), end=Location(line=128, column=91))
region_000559 = Region(begin=Location(line=128, column=119), end=Location(line=128, column=129))
region_000560 = Region(begin=Location(line=128, column=106), end=Location(line=128, column=129))
region_000561 = Region(begin=Location(line=128, column=106), end=Location(line=128, column=116))
region_000562 = Region(begin=Location(line=128, column=56), end=Location(line=128, column=130))
region_000563 = Region(begin=Location(line=128, column=47), end=Location(line=128, column=130))
region_000564 = Region(begin=Location(line=128, column=47), end=Location(line=128, column=55))
region_000565 = Region(begin=Location(line=125, column=1), end=Location(line=131, column=1))
region_000566 = Region(begin=Location(line=125, column=1), end=Location(line=125, column=7))
region_000567 = Region(begin=Location(line=125, column=8), end=Location(line=125, column=21))
region_000568 = Region(begin=Location(line=135, column=57), end=Location(line=135, column=59))
region_000569 = Region(begin=Location(line=135, column=75), end=Location(line=135, column=80))
region_000570 = Region(begin=Location(line=135, column=61), end=Location(line=135, column=80))
region_000571 = Region(begin=Location(line=135, column=61), end=Location(line=135, column=72))
region_000572 = Region(begin=Location(line=135, column=95), end=Location(line=135, column=105))
region_000573 = Region(begin=Location(line=135, column=82), end=Location(line=135, column=105))
region_000574 = Region(begin=Location(line=135, column=82), end=Location(line=135, column=92))
region_000575 = Region(begin=Location(line=135, column=120), end=Location(line=135, column=130))
region_000576 = Region(begin=Location(line=135, column=107), end=Location(line=135, column=130))
region_000577 = Region(begin=Location(line=135, column=107), end=Location(line=135, column=117))
region_000578 = Region(begin=Location(line=135, column=56), end=Location(line=135, column=131))
region_000579 = Region(begin=Location(line=135, column=47), end=Location(line=135, column=131))
region_000580 = Region(begin=Location(line=135, column=47), end=Location(line=135, column=55))
region_000581 = Region(begin=Location(line=132, column=1), end=Location(line=137, column=1))
region_000582 = Region(begin=Location(line=132, column=1), end=Location(line=132, column=7))
region_000583 = Region(begin=Location(line=132, column=8), end=Location(line=132, column=14))
region_000584 = Region(begin=Location(line=140, column=57), end=Location(line=140, column=59))
region_000585 = Region(begin=Location(line=140, column=75), end=Location(line=140, column=79))
region_000586 = Region(begin=Location(line=140, column=61), end=Location(line=140, column=79))
region_000587 = Region(begin=Location(line=140, column=61), end=Location(line=140, column=72))
region_000588 = Region(begin=Location(line=140, column=94), end=Location(line=140, column=104))
region_000589 = Region(begin=Location(line=140, column=81), end=Location(line=140, column=104))
region_000590 = Region(begin=Location(line=140, column=81), end=Location(line=140, column=91))
region_000591 = Region(begin=Location(line=140, column=119), end=Location(line=140, column=129))
region_000592 = Region(begin=Location(line=140, column=106), end=Location(line=140, column=129))
region_000593 = Region(begin=Location(line=140, column=106), end=Location(line=140, column=116))
region_000594 = Region(begin=Location(line=140, column=56), end=Location(line=140, column=130))
region_000595 = Region(begin=Location(line=140, column=47), end=Location(line=140, column=130))
region_000596 = Region(begin=Location(line=140, column=47), end=Location(line=140, column=55))
region_000597 = Region(begin=Location(line=137, column=1), end=Location(line=141, column=1))
region_000598 = Region(begin=Location(line=137, column=1), end=Location(line=137, column=7))
region_000599 = Region(begin=Location(line=137, column=8), end=Location(line=137, column=21))


# ----------------------------------------------------------------------
statement_000000 = ImportStatementItemParserInfo.Create(
    regions=[region_000000, region_000001, None],
    name="MutableNum",
    alias=None,
)

statement_000000 = ImportStatementParserInfo.Create(
    regions=[region_000000, region_000000, region_000002],
    visibility_param=VisibilityModifier.private,
    source_parts=['Concepts', 'MutableNum'],
    import_items=[statement_000000, ],
    import_type=ImportStatementParserInfoImportType.source_is_module,
)

statement_000001 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000003, region_000003, None],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000002 = TemplateDecoratorParameterParserInfo.Create(
    regions=[region_000004, region_000005],
    type=statement_000001,
    name="num_bytes!",
    default_value=None,
)

statement_000003 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000006, region_000006, None],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000004 = TemplateDecoratorParameterParserInfo.Create(
    regions=[region_000007, region_000008],
    type=statement_000003,
    name="is_checked!",
    default_value=None,
)

statement_000005 = TemplateParametersParserInfo.Create(
    regions=[region_000009, region_000010, None, region_000011],
    positional=[statement_000002, ],
    any=None,
    keyword=[statement_000004, ],
)

statement_000006 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000012, region_000012, None],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000007 = NoneExpressionParserInfo.Create(
    regions=[region_000013],
)

statement_000008 = VariantExpressionParserInfo.Create(
    regions=[region_000014, None],
    types=[statement_000006, statement_000007, ],
    mutability_modifier=None,
)

statement_000009 = NoneExpressionParserInfo.Create(
    regions=[region_000015],
)

statement_000010 = ConstraintParameterParserInfo.Create(
    regions=[region_000016, region_000017],
    type=statement_000008,
    name="min_value!",
    default_value=statement_000009,
)

statement_000011 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000018, region_000018, None],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000012 = NoneExpressionParserInfo.Create(
    regions=[region_000019],
)

statement_000013 = VariantExpressionParserInfo.Create(
    regions=[region_000020, None],
    types=[statement_000011, statement_000012, ],
    mutability_modifier=None,
)

statement_000014 = NoneExpressionParserInfo.Create(
    regions=[region_000021],
)

statement_000015 = ConstraintParameterParserInfo.Create(
    regions=[region_000022, region_000023],
    type=statement_000013,
    name="max_value!",
    default_value=statement_000014,
)

statement_000016 = ConstraintParametersParserInfo.Create(
    regions=[region_000024, None, None, region_000025],
    positional=None,
    any=None,
    keyword=[statement_000010, statement_000015, ],
)

statement_000017 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000026, region_000026],
    name="min_value!",
)

statement_000017 = ConstraintArgumentParserInfo.Create(
    regions=[region_000026, None],
    expression=statement_000017,
    keyword=None,
)

statement_000018 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000027, region_000027],
    name="max_value!",
)

statement_000018 = ConstraintArgumentParserInfo.Create(
    regions=[region_000027, None],
    expression=statement_000018,
    keyword=None,
)

statement_000019 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000028, region_000028],
    arguments=[statement_000017, statement_000018, ],
)

statement_000020 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000029, region_000030, None],
    value=CustomType("MutableNum"),
    templates=None,
    constraints=statement_000019,
    mutability_modifier=None,
)

statement_000020 = ClassStatementDependencyParserInfo.Create(
    regions=[region_000029, region_000029],
    visibility=VisibilityModifier.private,
    type=statement_000020,
)

statement_000021 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000031, region_000031, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000022 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000032, region_000032],
    name="num_bytes!",
)

statement_000023 = IntegerExpressionParserInfo.Create(
    regions=[region_000033],
    value=2,
)

statement_000024 = BinaryExpressionParserInfo.Create(
    regions=[region_000034, region_000035],
    left_expression=statement_000022,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000023,
)

statement_000025 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000036, region_000036],
    name="num_bytes!",
)

statement_000026 = IntegerExpressionParserInfo.Create(
    regions=[region_000037],
    value=4,
)

statement_000027 = BinaryExpressionParserInfo.Create(
    regions=[region_000038, region_000039],
    left_expression=statement_000025,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000026,
)

statement_000028 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000040, region_000040],
    name="num_bytes!",
)

statement_000029 = IntegerExpressionParserInfo.Create(
    regions=[region_000041],
    value=8,
)

statement_000030 = BinaryExpressionParserInfo.Create(
    regions=[region_000042, region_000043],
    left_expression=statement_000028,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000029,
)

statement_000031 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000044, region_000044],
    name="num_bytes!",
)

statement_000032 = IntegerExpressionParserInfo.Create(
    regions=[region_000045],
    value=16,
)

statement_000033 = BinaryExpressionParserInfo.Create(
    regions=[region_000046, region_000047],
    left_expression=statement_000031,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000032,
)

statement_000034 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000048, region_000048],
    name="num_bytes!",
)

statement_000035 = IntegerExpressionParserInfo.Create(
    regions=[region_000049],
    value=32,
)

statement_000036 = BinaryExpressionParserInfo.Create(
    regions=[region_000050, region_000051],
    left_expression=statement_000034,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000035,
)

statement_000037 = BinaryExpressionParserInfo.Create(
    regions=[region_000052, region_000053],
    left_expression=statement_000033,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000036,
)

statement_000038 = BinaryExpressionParserInfo.Create(
    regions=[region_000054, region_000055],
    left_expression=statement_000030,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000037,
)

statement_000039 = BinaryExpressionParserInfo.Create(
    regions=[region_000056, region_000057],
    left_expression=statement_000027,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000038,
)

statement_000040 = BinaryExpressionParserInfo.Create(
    regions=[region_000058, region_000059],
    left_expression=statement_000024,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000039,
)

statement_000040 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000058, None],
    expression=statement_000040,
    keyword=None,
)

statement_000041 = FuncArgumentsParserInfo.Create(
    regions=[region_000060, region_000060],
    arguments=[statement_000040, ],
)

statement_000042 = CallExpressionParserInfo.Create(
    regions=[region_000061, region_000060],
    expression=statement_000021,
    arguments=statement_000041,
)

statement_000043 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000062],
    expression=statement_000042,
)

statement_000044 = SpecialMethodStatementParserInfo.Create(
    regions=[region_000063, region_000064, region_000065],
    parent_class_capabilities=StandardCapabilities,
    name=SpecialMethodType.CompileTimeEvalTemplates,
    statements=[statement_000043, ],
)

statement_000045 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000066, region_000067, region_000068],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000046 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000069, region_000069, None],
    name="ArchiveT",
    is_variadic=None,
    default_type=None,
)

statement_000047 = TemplateParametersParserInfo.Create(
    regions=[region_000070, None, region_000069, None],
    positional=None,
    any=[statement_000046, ],
    keyword=None,
)

statement_000048 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000071, region_000072, region_000073],
    value=CustomType("ArchiveT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000049 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000074, None, region_000075],  # type: ignore
    type=statement_000048,
    is_variadic=None,
    name="archive",
    default_value=None,
)

statement_000050 = FuncParametersParserInfo.Create(
    regions=[region_000076, None, region_000074, None],
    positional=None,
    any_args=[statement_000049, ],
    keyword=None,
)

statement_000051 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000077, region_000076, region_000078, None, region_000079, region_000080, None, None, None, region_000081, None, None, None, None, region_000082],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000050,
    visibility_param=VisibilityModifier.public,
    mutability_param=None,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000045,
    name=FuncDefinitionStatementParserInfoOperatorType.Deserialize,
    documentation=None,
    templates=statement_000047,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=True,
)

statement_000052 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000083, region_000083, None],
    name="ArchiveT",
    is_variadic=None,
    default_type=None,
)

statement_000053 = TemplateParametersParserInfo.Create(
    regions=[region_000084, None, region_000083, None],
    positional=None,
    any=[statement_000052, ],
    keyword=None,
)

statement_000054 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000085, region_000086, region_000087],
    value=CustomType("ArchiveT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000055 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000088, None, region_000089],  # type: ignore
    type=statement_000054,
    is_variadic=None,
    name="archive",
    default_value=None,
)

statement_000056 = FuncParametersParserInfo.Create(
    regions=[region_000090, None, region_000088, None],
    positional=None,
    any_args=[statement_000055, ],
    keyword=None,
)

statement_000057 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000091, region_000090, region_000092, region_000093, region_000094, region_000095, None, None, None, region_000096, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000056,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Serialize,
    documentation=None,
    templates=statement_000053,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000058 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000097, region_000097, None],
    name="ArchiveT",
    is_variadic=None,
    default_type=None,
)

statement_000059 = TemplateParametersParserInfo.Create(
    regions=[region_000098, None, region_000097, None],
    positional=None,
    any=[statement_000058, ],
    keyword=None,
)

statement_000060 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000099, region_000100, region_000101],
    value=CustomType("ArchiveT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000061 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000102, None, region_000103],  # type: ignore
    type=statement_000060,
    is_variadic=None,
    name="archive",
    default_value=None,
)

statement_000062 = FuncParametersParserInfo.Create(
    regions=[region_000104, None, region_000102, None],
    positional=None,
    any_args=[statement_000061, ],
    keyword=None,
)

statement_000063 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000105, region_000104, region_000106, region_000107, region_000108, region_000109, None, None, None, region_000110, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000062,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Serialize,
    documentation=None,
    templates=statement_000059,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000064 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000111, region_000111, None],
    name="VisitorT",
    is_variadic=None,
    default_type=None,
)

statement_000065 = TemplateParametersParserInfo.Create(
    regions=[region_000112, None, region_000111, None],
    positional=None,
    any=[statement_000064, ],
    keyword=None,
)

statement_000066 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000113, region_000114, region_000115],
    value=CustomType("VisitorT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000067 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000116, None, region_000117],  # type: ignore
    type=statement_000066,
    is_variadic=None,
    name="visitor",
    default_value=None,
)

statement_000068 = FuncParametersParserInfo.Create(
    regions=[region_000118, None, region_000116, None],
    positional=None,
    any_args=[statement_000067, ],
    keyword=None,
)

statement_000069 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000119, region_000118, region_000120, region_000121, region_000122, region_000123, None, None, None, region_000124, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000068,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Accept,
    documentation=None,
    templates=statement_000065,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000070 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000125, region_000126, region_000127],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000071 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000128, region_000133, region_000129, region_000130, region_000131, region_000132, None, None, None, region_000134, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000070,
    name=FuncDefinitionStatementParserInfoOperatorType.Clone,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000072 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000135, region_000136, region_000137],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000073 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000138, region_000143, region_000139, region_000140, region_000141, region_000142, None, None, None, region_000144, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000072,
    name=FuncDefinitionStatementParserInfoOperatorType.ToBool,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000074 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000145, region_000146, region_000147],
    value=StringType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000075 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000148, region_000153, region_000149, region_000150, region_000151, region_000152, None, None, None, region_000154, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000074,
    name=FuncDefinitionStatementParserInfoOperatorType.ToString,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000076 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000155, region_000156, region_000157],
    value=CustomType("CompareResult"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000077 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000158, region_000159, region_000160],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000078 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000161, None, region_000162],  # type: ignore
    type=statement_000077,
    is_variadic=None,
    name="this",
    default_value=None,
)

statement_000079 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000163, region_000164, region_000165],
    value=CustomType("Number"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000080 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000166, None, region_000167],  # type: ignore
    type=statement_000079,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000081 = FuncParametersParserInfo.Create(
    regions=[region_000168, None, region_000169, None],
    positional=None,
    any_args=[statement_000078, statement_000080, ],
    keyword=None,
)

statement_000082 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000170, region_000168, region_000171, None, region_000172, region_000173, None, None, None, region_000174, None, None, None, None, region_000175],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000081,
    visibility_param=VisibilityModifier.public,
    mutability_param=None,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000076,
    name=FuncDefinitionStatementParserInfoOperatorType.Compare,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=True,
)

statement_000083 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000176, region_000177, region_000178],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000084 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000179, region_000180, region_000181],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000085 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000182, None, region_000183],  # type: ignore
    type=statement_000084,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000086 = FuncParametersParserInfo.Create(
    regions=[region_000184, None, region_000182, None],
    positional=None,
    any_args=[statement_000085, ],
    keyword=None,
)

statement_000087 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000185, region_000184, region_000186, region_000187, region_000188, region_000189, None, None, None, region_000190, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000086,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000083,
    name=FuncDefinitionStatementParserInfoOperatorType.Equal,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000088 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000191, region_000192, region_000193],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000089 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000194, region_000195, region_000196],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000090 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000197, None, region_000198],  # type: ignore
    type=statement_000089,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000091 = FuncParametersParserInfo.Create(
    regions=[region_000199, None, region_000197, None],
    positional=None,
    any_args=[statement_000090, ],
    keyword=None,
)

statement_000092 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000200, region_000199, region_000201, region_000202, region_000203, region_000204, None, None, None, region_000205, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000091,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000088,
    name=FuncDefinitionStatementParserInfoOperatorType.NotEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000093 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000206, region_000207, region_000208],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000094 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000209, region_000210, region_000211],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000095 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000212, None, region_000213],  # type: ignore
    type=statement_000094,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000096 = FuncParametersParserInfo.Create(
    regions=[region_000214, None, region_000212, None],
    positional=None,
    any_args=[statement_000095, ],
    keyword=None,
)

statement_000097 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000215, region_000214, region_000216, region_000217, region_000218, region_000219, None, None, None, region_000220, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000096,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000093,
    name=FuncDefinitionStatementParserInfoOperatorType.Less,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000098 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000221, region_000222, region_000223],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000099 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000224, region_000225, region_000226],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000100 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000227, None, region_000228],  # type: ignore
    type=statement_000099,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000101 = FuncParametersParserInfo.Create(
    regions=[region_000229, None, region_000227, None],
    positional=None,
    any_args=[statement_000100, ],
    keyword=None,
)

statement_000102 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000230, region_000229, region_000231, region_000232, region_000233, region_000234, None, None, None, region_000235, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000101,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000098,
    name=FuncDefinitionStatementParserInfoOperatorType.LessEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000103 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000236, region_000237, region_000238],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000104 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000239, region_000240, region_000241],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000105 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000242, None, region_000243],  # type: ignore
    type=statement_000104,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000106 = FuncParametersParserInfo.Create(
    regions=[region_000244, None, region_000242, None],
    positional=None,
    any_args=[statement_000105, ],
    keyword=None,
)

statement_000107 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000245, region_000244, region_000246, region_000247, region_000248, region_000249, None, None, None, region_000250, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000106,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000103,
    name=FuncDefinitionStatementParserInfoOperatorType.Greater,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000108 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000251, region_000252, region_000253],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000109 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000254, region_000255, region_000256],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000110 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000257, None, region_000258],  # type: ignore
    type=statement_000109,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000111 = FuncParametersParserInfo.Create(
    regions=[region_000259, None, region_000257, None],
    positional=None,
    any_args=[statement_000110, ],
    keyword=None,
)

statement_000112 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000260, region_000259, region_000261, region_000262, region_000263, region_000264, None, None, None, region_000265, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000111,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000108,
    name=FuncDefinitionStatementParserInfoOperatorType.GreaterEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000113 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000266, region_000267, region_000268],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000114 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000269, region_000274, region_000270, region_000271, region_000272, region_000273, None, None, None, region_000275, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000113,
    name=FuncDefinitionStatementParserInfoOperatorType.Negative,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000115 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000276, region_000277, region_000278],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000116 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000279, region_000284, region_000280, region_000281, region_000282, region_000283, None, None, None, region_000285, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000115,
    name=FuncDefinitionStatementParserInfoOperatorType.Positive,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000117 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000286, region_000287, region_000288],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000118 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000289, region_000290, region_000291],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000119 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000292, None, region_000293],  # type: ignore
    type=statement_000118,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000120 = FuncParametersParserInfo.Create(
    regions=[region_000294, None, region_000292, None],
    positional=None,
    any_args=[statement_000119, ],
    keyword=None,
)

statement_000121 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000295, region_000294, region_000296, region_000297, region_000298, region_000299, None, None, None, region_000300, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000120,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000117,
    name=FuncDefinitionStatementParserInfoOperatorType.Divide,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000122 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000301, region_000302, region_000303],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000123 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000304, region_000305, region_000306],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000124 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000307, None, region_000308],  # type: ignore
    type=statement_000123,
    is_variadic=None,
    name="multiplier",
    default_value=None,
)

statement_000125 = FuncParametersParserInfo.Create(
    regions=[region_000309, None, region_000307, None],
    positional=None,
    any_args=[statement_000124, ],
    keyword=None,
)

statement_000126 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000310, region_000309, region_000311, region_000312, region_000313, region_000314, None, None, None, region_000315, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000125,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000122,
    name=FuncDefinitionStatementParserInfoOperatorType.Multiply,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000127 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000316, region_000317, region_000318],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000128 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000319, region_000320, region_000321],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000129 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000322, None, region_000323],  # type: ignore
    type=statement_000128,
    is_variadic=None,
    name="exponent",
    default_value=None,
)

statement_000130 = FuncParametersParserInfo.Create(
    regions=[region_000324, None, region_000322, None],
    positional=None,
    any_args=[statement_000129, ],
    keyword=None,
)

statement_000131 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000325, region_000324, region_000326, region_000327, region_000328, region_000329, None, None, None, region_000330, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000130,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000127,
    name=FuncDefinitionStatementParserInfoOperatorType.Power,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000132 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000331, region_000332, region_000333],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000133 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000334, region_000335, region_000336],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000134 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000337, None, region_000338],  # type: ignore
    type=statement_000133,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000135 = FuncParametersParserInfo.Create(
    regions=[region_000339, None, region_000337, None],
    positional=None,
    any_args=[statement_000134, ],
    keyword=None,
)

statement_000136 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000340, region_000339, region_000341, region_000342, region_000343, region_000344, None, None, None, region_000345, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000135,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000132,
    name=FuncDefinitionStatementParserInfoOperatorType.Add,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000137 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000346, region_000347, region_000348],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000138 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000349, region_000350, region_000351],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000139 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000352, None, region_000353],  # type: ignore
    type=statement_000138,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000140 = FuncParametersParserInfo.Create(
    regions=[region_000354, None, region_000352, None],
    positional=None,
    any_args=[statement_000139, ],
    keyword=None,
)

statement_000141 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000355, region_000354, region_000356, region_000357, region_000358, region_000359, None, None, None, region_000360, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000140,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000137,
    name=FuncDefinitionStatementParserInfoOperatorType.Subtract,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000142 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000361, region_000361, None],
    name="VisitorT",
    is_variadic=None,
    default_type=None,
)

statement_000143 = TemplateParametersParserInfo.Create(
    regions=[region_000362, None, region_000361, None],
    positional=None,
    any=[statement_000142, ],
    keyword=None,
)

statement_000144 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000363, region_000364, region_000365],
    value=CustomType("VisitorT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000145 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000366, None, region_000367],  # type: ignore
    type=statement_000144,
    is_variadic=None,
    name="visitor",
    default_value=None,
)

statement_000146 = FuncParametersParserInfo.Create(
    regions=[region_000368, None, region_000366, None],
    positional=None,
    any_args=[statement_000145, ],
    keyword=None,
)

statement_000147 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000369, region_000368, region_000370, region_000371, region_000372, region_000373, None, None, None, region_000374, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000146,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Accept,
    documentation=None,
    templates=statement_000143,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000148 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000375, region_000376, region_000377],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000149 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000378, None, region_000379],  # type: ignore
    type=statement_000148,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000150 = FuncParametersParserInfo.Create(
    regions=[region_000380, None, region_000378, None],
    positional=None,
    any_args=[statement_000149, ],
    keyword=None,
)

statement_000151 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000381, region_000380, region_000382, region_000383, region_000384, region_000385, None, None, None, region_000386, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000150,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.DivideInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000152 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000387, region_000388, region_000389],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000153 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000390, None, region_000391],  # type: ignore
    type=statement_000152,
    is_variadic=None,
    name="multiplier",
    default_value=None,
)

statement_000154 = FuncParametersParserInfo.Create(
    regions=[region_000392, None, region_000390, None],
    positional=None,
    any_args=[statement_000153, ],
    keyword=None,
)

statement_000155 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000393, region_000392, region_000394, region_000395, region_000396, region_000397, None, None, None, region_000398, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000154,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.MultiplyInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000156 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000399, region_000400, region_000401],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000157 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000402, None, region_000403],  # type: ignore
    type=statement_000156,
    is_variadic=None,
    name="exponent",
    default_value=None,
)

statement_000158 = FuncParametersParserInfo.Create(
    regions=[region_000404, None, region_000402, None],
    positional=None,
    any_args=[statement_000157, ],
    keyword=None,
)

statement_000159 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000405, region_000404, region_000406, region_000407, region_000408, region_000409, None, None, None, region_000410, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000158,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.PowerInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000160 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000411, region_000412, region_000413],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000161 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000414, None, region_000415],  # type: ignore
    type=statement_000160,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000162 = FuncParametersParserInfo.Create(
    regions=[region_000416, None, region_000414, None],
    positional=None,
    any_args=[statement_000161, ],
    keyword=None,
)

statement_000163 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000417, region_000416, region_000418, region_000419, region_000420, region_000421, None, None, None, region_000422, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000162,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.AddInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000164 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000423, region_000424, region_000425],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000165 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000426, None, region_000427],  # type: ignore
    type=statement_000164,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000166 = FuncParametersParserInfo.Create(
    regions=[region_000428, None, region_000426, None],
    positional=None,
    any_args=[statement_000165, ],
    keyword=None,
)

statement_000167 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000429, region_000428, region_000430, region_000431, region_000432, region_000433, None, None, None, region_000434, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000166,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.SubtractInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000168 = ClassStatementParserInfo.Create(
    regions=[region_000435, region_000436, region_000437, region_000438, None, None, region_000029, None, region_000439, region_000435, None, None],
    class_capabilities=StandardCapabilities,
    visibility_param=VisibilityModifier.public,
    class_modifier_param=ClassModifier.mutable,
    name="FixedNum",
    documentation=None,
    templates=statement_000005,
    constraints=statement_000016,
    extends=None,
    implements=[statement_000020, ],
    uses=None,
    statements=[statement_000044, statement_000051, statement_000057, statement_000063, statement_000069, statement_000071, statement_000073, statement_000075, statement_000082, statement_000087, statement_000092, statement_000097, statement_000102, statement_000107, statement_000112, statement_000114, statement_000116, statement_000121, statement_000126, statement_000131, statement_000136, statement_000141, statement_000147, statement_000151, statement_000155, statement_000159, statement_000163, statement_000167, ],
    constructor_visibility_param=VisibilityModifier.public,
    is_abstract=None,
    is_final=None,
)

statement_000169 = IntegerExpressionParserInfo.Create(
    regions=[region_000440],
    value=2,
)

statement_000169 = ConstraintArgumentParserInfo.Create(
    regions=[region_000440, None],
    expression=statement_000169,
    keyword=None,
)

statement_000170 = BooleanExpressionParserInfo.Create(
    regions=[region_000441],
    value=False,
)

statement_000171 = ConstraintArgumentParserInfo.Create(
    regions=[region_000442, region_000443],
    expression=statement_000170,
    keyword="is_checked!",
)

statement_000172 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000444, region_000444],
    name="min_value!",
)

statement_000173 = ConstraintArgumentParserInfo.Create(
    regions=[region_000445, region_000446],
    expression=statement_000172,
    keyword="min_value!",
)

statement_000174 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000447, region_000447],
    name="max_value!",
)

statement_000175 = ConstraintArgumentParserInfo.Create(
    regions=[region_000448, region_000449],
    expression=statement_000174,
    keyword="max_value!",
)

statement_000176 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000450, region_000450],
    arguments=[statement_000169, statement_000171, statement_000173, statement_000175, ],
)

statement_000177 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000451, region_000452, None],
    value=CustomType("FixedNum"),
    templates=None,
    constraints=statement_000176,
    mutability_modifier=None,
)

statement_000178 = TypeAliasStatementParserInfo.Create(
    regions=[region_000453, region_000454, region_000455],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Num16",
    type=statement_000177,
)

statement_000179 = IntegerExpressionParserInfo.Create(
    regions=[region_000456],
    value=2,
)

statement_000179 = ConstraintArgumentParserInfo.Create(
    regions=[region_000456, None],
    expression=statement_000179,
    keyword=None,
)

statement_000180 = BooleanExpressionParserInfo.Create(
    regions=[region_000457],
    value=True,
)

statement_000181 = ConstraintArgumentParserInfo.Create(
    regions=[region_000458, region_000459],
    expression=statement_000180,
    keyword="is_checked!",
)

statement_000182 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000460, region_000460],
    name="min_value!",
)

statement_000183 = ConstraintArgumentParserInfo.Create(
    regions=[region_000461, region_000462],
    expression=statement_000182,
    keyword="min_value!",
)

statement_000184 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000463, region_000463],
    name="max_value!",
)

statement_000185 = ConstraintArgumentParserInfo.Create(
    regions=[region_000464, region_000465],
    expression=statement_000184,
    keyword="max_value!",
)

statement_000186 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000466, region_000466],
    arguments=[statement_000179, statement_000181, statement_000183, statement_000185, ],
)

statement_000187 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000467, region_000468, None],
    value=CustomType("FixedNum"),
    templates=None,
    constraints=statement_000186,
    mutability_modifier=None,
)

statement_000188 = TypeAliasStatementParserInfo.Create(
    regions=[region_000469, region_000470, region_000471],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedNum16",
    type=statement_000187,
)

statement_000189 = IntegerExpressionParserInfo.Create(
    regions=[region_000472],
    value=4,
)

statement_000189 = ConstraintArgumentParserInfo.Create(
    regions=[region_000472, None],
    expression=statement_000189,
    keyword=None,
)

statement_000190 = BooleanExpressionParserInfo.Create(
    regions=[region_000473],
    value=False,
)

statement_000191 = ConstraintArgumentParserInfo.Create(
    regions=[region_000474, region_000475],
    expression=statement_000190,
    keyword="is_checked!",
)

statement_000192 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000476, region_000476],
    name="min_value!",
)

statement_000193 = ConstraintArgumentParserInfo.Create(
    regions=[region_000477, region_000478],
    expression=statement_000192,
    keyword="min_value!",
)

statement_000194 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000479, region_000479],
    name="max_value!",
)

statement_000195 = ConstraintArgumentParserInfo.Create(
    regions=[region_000480, region_000481],
    expression=statement_000194,
    keyword="max_value!",
)

statement_000196 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000482, region_000482],
    arguments=[statement_000189, statement_000191, statement_000193, statement_000195, ],
)

statement_000197 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000483, region_000484, None],
    value=CustomType("FixedNum"),
    templates=None,
    constraints=statement_000196,
    mutability_modifier=None,
)

statement_000198 = TypeAliasStatementParserInfo.Create(
    regions=[region_000485, region_000486, region_000487],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Num32",
    type=statement_000197,
)

statement_000199 = IntegerExpressionParserInfo.Create(
    regions=[region_000488],
    value=4,
)

statement_000199 = ConstraintArgumentParserInfo.Create(
    regions=[region_000488, None],
    expression=statement_000199,
    keyword=None,
)

statement_000200 = BooleanExpressionParserInfo.Create(
    regions=[region_000489],
    value=True,
)

statement_000201 = ConstraintArgumentParserInfo.Create(
    regions=[region_000490, region_000491],
    expression=statement_000200,
    keyword="is_checked!",
)

statement_000202 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000492, region_000492],
    name="min_value!",
)

statement_000203 = ConstraintArgumentParserInfo.Create(
    regions=[region_000493, region_000494],
    expression=statement_000202,
    keyword="min_value!",
)

statement_000204 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000495, region_000495],
    name="max_value!",
)

statement_000205 = ConstraintArgumentParserInfo.Create(
    regions=[region_000496, region_000497],
    expression=statement_000204,
    keyword="max_value!",
)

statement_000206 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000498, region_000498],
    arguments=[statement_000199, statement_000201, statement_000203, statement_000205, ],
)

statement_000207 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000499, region_000500, None],
    value=CustomType("FixedNum"),
    templates=None,
    constraints=statement_000206,
    mutability_modifier=None,
)

statement_000208 = TypeAliasStatementParserInfo.Create(
    regions=[region_000501, region_000502, region_000503],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedNum32",
    type=statement_000207,
)

statement_000209 = IntegerExpressionParserInfo.Create(
    regions=[region_000504],
    value=8,
)

statement_000209 = ConstraintArgumentParserInfo.Create(
    regions=[region_000504, None],
    expression=statement_000209,
    keyword=None,
)

statement_000210 = BooleanExpressionParserInfo.Create(
    regions=[region_000505],
    value=False,
)

statement_000211 = ConstraintArgumentParserInfo.Create(
    regions=[region_000506, region_000507],
    expression=statement_000210,
    keyword="is_checked!",
)

statement_000212 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000508, region_000508],
    name="min_value!",
)

statement_000213 = ConstraintArgumentParserInfo.Create(
    regions=[region_000509, region_000510],
    expression=statement_000212,
    keyword="min_value!",
)

statement_000214 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000511, region_000511],
    name="max_value!",
)

statement_000215 = ConstraintArgumentParserInfo.Create(
    regions=[region_000512, region_000513],
    expression=statement_000214,
    keyword="max_value!",
)

statement_000216 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000514, region_000514],
    arguments=[statement_000209, statement_000211, statement_000213, statement_000215, ],
)

statement_000217 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000515, region_000516, None],
    value=CustomType("FixedNum"),
    templates=None,
    constraints=statement_000216,
    mutability_modifier=None,
)

statement_000218 = TypeAliasStatementParserInfo.Create(
    regions=[region_000517, region_000518, region_000519],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Num64",
    type=statement_000217,
)

statement_000219 = IntegerExpressionParserInfo.Create(
    regions=[region_000520],
    value=8,
)

statement_000219 = ConstraintArgumentParserInfo.Create(
    regions=[region_000520, None],
    expression=statement_000219,
    keyword=None,
)

statement_000220 = BooleanExpressionParserInfo.Create(
    regions=[region_000521],
    value=True,
)

statement_000221 = ConstraintArgumentParserInfo.Create(
    regions=[region_000522, region_000523],
    expression=statement_000220,
    keyword="is_checked!",
)

statement_000222 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000524, region_000524],
    name="min_value!",
)

statement_000223 = ConstraintArgumentParserInfo.Create(
    regions=[region_000525, region_000526],
    expression=statement_000222,
    keyword="min_value!",
)

statement_000224 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000527, region_000527],
    name="max_value!",
)

statement_000225 = ConstraintArgumentParserInfo.Create(
    regions=[region_000528, region_000529],
    expression=statement_000224,
    keyword="max_value!",
)

statement_000226 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000530, region_000530],
    arguments=[statement_000219, statement_000221, statement_000223, statement_000225, ],
)

statement_000227 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000531, region_000532, None],
    value=CustomType("FixedNum"),
    templates=None,
    constraints=statement_000226,
    mutability_modifier=None,
)

statement_000228 = TypeAliasStatementParserInfo.Create(
    regions=[region_000533, region_000534, region_000535],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedNum64",
    type=statement_000227,
)

statement_000229 = IntegerExpressionParserInfo.Create(
    regions=[region_000536],
    value=16,
)

statement_000229 = ConstraintArgumentParserInfo.Create(
    regions=[region_000536, None],
    expression=statement_000229,
    keyword=None,
)

statement_000230 = BooleanExpressionParserInfo.Create(
    regions=[region_000537],
    value=False,
)

statement_000231 = ConstraintArgumentParserInfo.Create(
    regions=[region_000538, region_000539],
    expression=statement_000230,
    keyword="is_checked!",
)

statement_000232 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000540, region_000540],
    name="min_value!",
)

statement_000233 = ConstraintArgumentParserInfo.Create(
    regions=[region_000541, region_000542],
    expression=statement_000232,
    keyword="min_value!",
)

statement_000234 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000543, region_000543],
    name="max_value!",
)

statement_000235 = ConstraintArgumentParserInfo.Create(
    regions=[region_000544, region_000545],
    expression=statement_000234,
    keyword="max_value!",
)

statement_000236 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000546, region_000546],
    arguments=[statement_000229, statement_000231, statement_000233, statement_000235, ],
)

statement_000237 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000547, region_000548, None],
    value=CustomType("FixedNum"),
    templates=None,
    constraints=statement_000236,
    mutability_modifier=None,
)

statement_000238 = TypeAliasStatementParserInfo.Create(
    regions=[region_000549, region_000550, region_000551],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Num128",
    type=statement_000237,
)

statement_000239 = IntegerExpressionParserInfo.Create(
    regions=[region_000552],
    value=16,
)

statement_000239 = ConstraintArgumentParserInfo.Create(
    regions=[region_000552, None],
    expression=statement_000239,
    keyword=None,
)

statement_000240 = BooleanExpressionParserInfo.Create(
    regions=[region_000553],
    value=True,
)

statement_000241 = ConstraintArgumentParserInfo.Create(
    regions=[region_000554, region_000555],
    expression=statement_000240,
    keyword="is_checked!",
)

statement_000242 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000556, region_000556],
    name="min_value!",
)

statement_000243 = ConstraintArgumentParserInfo.Create(
    regions=[region_000557, region_000558],
    expression=statement_000242,
    keyword="min_value!",
)

statement_000244 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000559, region_000559],
    name="max_value!",
)

statement_000245 = ConstraintArgumentParserInfo.Create(
    regions=[region_000560, region_000561],
    expression=statement_000244,
    keyword="max_value!",
)

statement_000246 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000562, region_000562],
    arguments=[statement_000239, statement_000241, statement_000243, statement_000245, ],
)

statement_000247 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000563, region_000564, None],
    value=CustomType("FixedNum"),
    templates=None,
    constraints=statement_000246,
    mutability_modifier=None,
)

statement_000248 = TypeAliasStatementParserInfo.Create(
    regions=[region_000565, region_000566, region_000567],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedNum128",
    type=statement_000247,
)

statement_000249 = IntegerExpressionParserInfo.Create(
    regions=[region_000568],
    value=32,
)

statement_000249 = ConstraintArgumentParserInfo.Create(
    regions=[region_000568, None],
    expression=statement_000249,
    keyword=None,
)

statement_000250 = BooleanExpressionParserInfo.Create(
    regions=[region_000569],
    value=False,
)

statement_000251 = ConstraintArgumentParserInfo.Create(
    regions=[region_000570, region_000571],
    expression=statement_000250,
    keyword="is_checked!",
)

statement_000252 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000572, region_000572],
    name="min_value!",
)

statement_000253 = ConstraintArgumentParserInfo.Create(
    regions=[region_000573, region_000574],
    expression=statement_000252,
    keyword="min_value!",
)

statement_000254 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000575, region_000575],
    name="max_value!",
)

statement_000255 = ConstraintArgumentParserInfo.Create(
    regions=[region_000576, region_000577],
    expression=statement_000254,
    keyword="max_value!",
)

statement_000256 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000578, region_000578],
    arguments=[statement_000249, statement_000251, statement_000253, statement_000255, ],
)

statement_000257 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000579, region_000580, None],
    value=CustomType("FixedNum"),
    templates=None,
    constraints=statement_000256,
    mutability_modifier=None,
)

statement_000258 = TypeAliasStatementParserInfo.Create(
    regions=[region_000581, region_000582, region_000583],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Num256",
    type=statement_000257,
)

statement_000259 = IntegerExpressionParserInfo.Create(
    regions=[region_000584],
    value=32,
)

statement_000259 = ConstraintArgumentParserInfo.Create(
    regions=[region_000584, None],
    expression=statement_000259,
    keyword=None,
)

statement_000260 = BooleanExpressionParserInfo.Create(
    regions=[region_000585],
    value=True,
)

statement_000261 = ConstraintArgumentParserInfo.Create(
    regions=[region_000586, region_000587],
    expression=statement_000260,
    keyword="is_checked!",
)

statement_000262 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000588, region_000588],
    name="min_value!",
)

statement_000263 = ConstraintArgumentParserInfo.Create(
    regions=[region_000589, region_000590],
    expression=statement_000262,
    keyword="min_value!",
)

statement_000264 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000591, region_000591],
    name="max_value!",
)

statement_000265 = ConstraintArgumentParserInfo.Create(
    regions=[region_000592, region_000593],
    expression=statement_000264,
    keyword="max_value!",
)

statement_000266 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000594, region_000594],
    arguments=[statement_000259, statement_000261, statement_000263, statement_000265, ],
)

statement_000267 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000595, region_000596, None],
    value=CustomType("FixedNum"),
    templates=None,
    constraints=statement_000266,
    mutability_modifier=None,
)

statement_000268 = TypeAliasStatementParserInfo.Create(
    regions=[region_000597, region_000598, region_000599],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedNum256",
    type=statement_000267,
)

public_exports = [
    statement_000178,
    statement_000188,
    statement_000198,
    statement_000208,
    statement_000218,
    statement_000228,
    statement_000238,
    statement_000248,
    statement_000258,
    statement_000268,
]
