# ----------------------------------------------------------------------
# |
# |  PhraseDSL_UnitTest.py
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2021-07-12 16:26:38
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2021
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
"""Unit tst for PhraseDSL.py"""

import os
import textwrap

import pytest

import CommonEnvironment

from CommonEnvironmentEx.Package import InitRelativeImports

# ----------------------------------------------------------------------
_script_fullpath                            = CommonEnvironment.ThisFullpath()
_script_dir, _script_name                   = os.path.split(_script_fullpath)
# ----------------------------------------------------------------------

with InitRelativeImports():
    from ..DSL import *

    from ...Components.Token import (
        DedentToken,
        IndentToken,
        NewlineToken,
        PopIgnoreWhitespaceControlToken,
        PushIgnoreWhitespaceControlToken,
        RegexToken,
    )

    from ...Components.UnitTests import (
        CoroutineMock,
        CreateIterator,
        parse_mock,
        MethodCallsToString,
    )


# ----------------------------------------------------------------------
_word_token                                 = RegexToken("Word Token", re.compile(r"(?P<value>[a-z]+)"))
_number_token                               = RegexToken("Number Token", re.compile(r"(?P<value>\d+)"))
_upper_token                                = RegexToken("Upper Token", re.compile(r"(?P<value>[A-Z]+)"))
_lpar_token                                 = RegexToken("lpar", re.compile(r"\("))
_rpar_token                                 = RegexToken("rpar", re.compile(r"\)"))

# ----------------------------------------------------------------------
class TestParseSimple(object):
    _phrase                                 = CreatePhrase(
        name="Phrase",
        item=[
            _word_token,
            _word_token,
            NewlineToken(),
        ],
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_SingleSpaceSep(self, parse_mock):
        iter = CreateIterator("one two")

        assert str(iter) == "[1, 1] (0)"

        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[1, 1] (0)", "The incoming iterator should not be modified"
        assert str(result.Iter) == "[2, 1] (8)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 8] (7)
                                                              IterBefore : [1, 5] (4)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(4, 7), match='two'>
                                                              Whitespace : 0)   3
                                                                           1)   4
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (8)
                                                              IterBefore : [1, 8] (7)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 8
                                                                           Start : 7
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [2, 1] (8)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 12

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_MultipleSpaceSep(self, parse_mock):
        iter = CreateIterator("one      two")

        assert str(iter) == "[1, 1] (0)"

        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[1, 1] (0)", "The incoming iterator should not be modified"
        assert str(result.Iter) == "[2, 1] (13)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 13] (12)
                                                              IterBefore : [1, 10] (9)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(9, 12), match='two'>
                                                              Whitespace : 0)   3
                                                                           1)   9
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (13)
                                                              IterBefore : [1, 13] (12)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 13
                                                                           Start : 12
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [2, 1] (13)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 12

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_TabSep(self, parse_mock):
        iter = CreateIterator("one\ttwo")

        assert str(iter) == "[1, 1] (0)"

        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[1, 1] (0)",  "The incoming iterator should not be modified"
        assert str(result.Iter) == "[2, 1] (8)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 8] (7)
                                                              IterBefore : [1, 5] (4)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(4, 7), match='two'>
                                                              Whitespace : 0)   3
                                                                           1)   4
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (8)
                                                              IterBefore : [1, 8] (7)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 8
                                                                           Start : 7
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [2, 1] (8)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 12

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_MultiTabSep(self, parse_mock):
        iter = CreateIterator("one\t\ttwo")

        assert str(iter) == "[1, 1] (0)"

        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[1, 1] (0)",  "The incoming iterator should not be modified"
        assert str(result.Iter) == "[2, 1] (9)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 9] (8)
                                                              IterBefore : [1, 6] (5)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(5, 8), match='two'>
                                                              Whitespace : 0)   3
                                                                           1)   5
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (9)
                                                              IterBefore : [1, 9] (8)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 9
                                                                           Start : 8
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [2, 1] (9)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 12

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_TrailingSpace(self, parse_mock):
        iter = CreateIterator("one two ")

        assert str(iter) == "[1, 1] (0)"

        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[1, 1] (0)",  "The incoming iterator should not be modified"
        assert str(result.Iter) == "[2, 1] (9)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 8] (7)
                                                              IterBefore : [1, 5] (4)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(4, 7), match='two'>
                                                              Whitespace : 0)   3
                                                                           1)   4
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (9)
                                                              IterBefore : [1, 9] (8)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 9
                                                                           Start : 8
                                                              Whitespace : 0)   7
                                                                           1)   8
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [2, 1] (9)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 12

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_MultipleTrailingSpace(self, parse_mock):
        iter = CreateIterator("one two    ")

        assert str(iter) == "[1, 1] (0)"

        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[1, 1] (0)",  "The incoming iterator should not be modified"
        assert str(result.Iter) == "[2, 1] (12)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 8] (7)
                                                              IterBefore : [1, 5] (4)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(4, 7), match='two'>
                                                              Whitespace : 0)   3
                                                                           1)   4
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (12)
                                                              IterBefore : [1, 12] (11)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 12
                                                                           Start : 11
                                                              Whitespace : 0)   7
                                                                           1)   11
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [2, 1] (12)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 12

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_TrailingTab(self, parse_mock):
        iter = CreateIterator("one two\t")

        assert str(iter) == "[1, 1] (0)"

        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[1, 1] (0)",  "The incoming iterator should not be modified"
        assert str(result.Iter) == "[2, 1] (9)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 8] (7)
                                                              IterBefore : [1, 5] (4)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(4, 7), match='two'>
                                                              Whitespace : 0)   3
                                                                           1)   4
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (9)
                                                              IterBefore : [1, 9] (8)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 9
                                                                           Start : 8
                                                              Whitespace : 0)   7
                                                                           1)   8
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [2, 1] (9)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 12

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_MultipleTrailingTab(self, parse_mock):
        iter = CreateIterator("one two\t\t\t\t")

        assert str(iter) == "[1, 1] (0)"
        assert iter.ContentLen == 12

        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[1, 1] (0)",  "The incoming iterator should not be modified"
        assert str(result.Iter) == "[2, 1] (12)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 8] (7)
                                                              IterBefore : [1, 5] (4)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(4, 7), match='two'>
                                                              Whitespace : 0)   3
                                                                           1)   4
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (12)
                                                              IterBefore : [1, 12] (11)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 12
                                                                           Start : 11
                                                              Whitespace : 0)   7
                                                                           1)   11
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [2, 1] (12)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 12

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_MultipleLines(self, parse_mock):
        iter = CreateIterator(
            textwrap.dedent(
                """\
                one two
                three four
                """,
            ),
        )

        # Line 1
        assert str(iter) == "[1, 1] (0)"
        assert iter.ContentLen == 19

        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[1, 1] (0)",  "The incoming iterator should not be modified"
        assert str(result.Iter) == "[2, 1] (8)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 8] (7)
                                                              IterBefore : [1, 5] (4)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(4, 7), match='two'>
                                                              Whitespace : 0)   3
                                                                           1)   4
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (8)
                                                              IterBefore : [1, 8] (7)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 8
                                                                           Start : 7
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [2, 1] (8)
            Success : True
            """,
        )

        assert len(parse_mock.method_calls) == 12

        iter = result.Iter

        # Line 2
        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[2, 1] (8)",  "The incoming iterator should not be modified"
        assert str(result.Iter) == "[3, 1] (19)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 6] (13)
                                                              IterBefore : [2, 1] (8)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(8, 13), match='three'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 11] (18)
                                                              IterBefore : [2, 7] (14)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(14, 18), match='four'>
                                                              Whitespace : 0)   13
                                                                           1)   14
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [3, 1] (19)
                                                              IterBefore : [2, 11] (18)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 19
                                                                           Start : 18
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [3, 1] (19)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 24

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_TrailingWhitespace(self, parse_mock):
        iter = CreateIterator("one two\n\n  \n    \n")

        assert str(iter) == "[1, 1] (0)"
        assert iter.ContentLen == 17

        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[1, 1] (0)",  "The incoming iterator should not be modified"
        assert str(result.Iter) == "[5, 1] (17)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 8] (7)
                                                              IterBefore : [1, 5] (4)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(4, 7), match='two'>
                                                              Whitespace : 0)   3
                                                                           1)   4
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [5, 1] (17)
                                                              IterBefore : [1, 8] (7)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 17
                                                                           Start : 7
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [5, 1] (17)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 12

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NoMatch(self, parse_mock):
        iter = CreateIterator("one two three")

        assert str(iter) == "[1, 1] (0)"
        assert iter.ContentLen == 14

        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)
        assert str(iter) == "[1, 1] (0)",  "The incoming iterator should not be modified"
        assert str(result.Iter) == "[1, 8] (7)", "The result iterator should be modified"

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 8] (7)
                                                              IterBefore : [1, 5] (4)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(4, 7), match='two'>
                                                              Whitespace : 0)   3
                                                                           1)   4
                                                   Phrase   : Word Token
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : None
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [1, 8] (7)
            Success : False
            """,
        )

        assert len(parse_mock.method_calls) == 10

# ----------------------------------------------------------------------
class TestParseIndentAndDedent(object):
    _phrase                                 = CreatePhrase(
        name="Phrase",
        item=[
            _word_token,
            NewlineToken(),
            IndentToken(),
            _word_token,
            NewlineToken(),
            _word_token,
            NewlineToken(),
            DedentToken(),
        ],
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Match(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    one
                        two
                        three
                    """,
                ),
            ),
            parse_mock,
            single_threaded=True,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (4)
                                                              IterBefore : [1, 4] (3)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 4
                                                                           Start : 3
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 5] (8)
                                                              IterBefore : [2, 1] (4)
                                                              Token      : Indent
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                           End   : 8
                                                                           Start : 4
                                                                           Value : 4
                                                              Whitespace : None
                                                   Phrase   : Indent
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 8] (11)
                                                              IterBefore : [2, 5] (8)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(8, 11), match='two'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [3, 1] (12)
                                                              IterBefore : [2, 8] (11)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 12
                                                                           Start : 11
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                              5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [3, 10] (21)
                                                              IterBefore : [3, 5] (16)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(16, 21), match='three'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [4, 1] (22)
                                                              IterBefore : [3, 10] (21)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 22
                                                                           Start : 21
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                              7)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [4, 1] (22)
                                                              IterBefore : [4, 1] (22)
                                                              Token      : Dedent
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                           -- empty dict --
                                                              Whitespace : None
                                                   Phrase   : Dedent
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [4, 1] (22)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert MethodCallsToString(parse_mock) == textwrap.dedent(
            """\
            0) StartPhrase, "Phrase"
            1) StartPhrase, "Word Token", "Phrase"
            2) OnInternalPhraseAsync, 0, 3
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [1, 4] (3)
                           IterBefore : [1, 1] (0)
                           Token      : Word Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                           Whitespace : None
                Phrase   : Word Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Phrase
            3) EndPhrase, "Word Token" [True], "Phrase" [None]
            4) StartPhrase, "Newline+", "Phrase"
            5) OnInternalPhraseAsync, 3, 4
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [2, 1] (4)
                           IterBefore : [1, 4] (3)
                           Token      : Newline+
                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                        End   : 4
                                        Start : 3
                           Whitespace : None
                Phrase   : Newline+
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 4] (3)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                           IsComplete : False
                Phrase   : Phrase
            6) EndPhrase, "Newline+" [True], "Phrase" [None]
            7) StartPhrase, "Indent", "Phrase"
            8) OnIndentAsync, 4, 8
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [2, 5] (8)
                           IterBefore : [2, 1] (4)
                           Token      : Indent
                           Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                        End   : 8
                                        Start : 4
                                        Value : 4
                           Whitespace : None
                Phrase   : Indent
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 4] (3)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 1] (4)
                                                        IterBefore : [1, 4] (3)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 4
                                                                     Start : 3
                                                        Whitespace : None
                                             Phrase   : Newline+
                           IsComplete : False
                Phrase   : Phrase
            9) EndPhrase, "Indent" [True], "Phrase" [None]
            10) StartPhrase, "Word Token", "Phrase"
            11) OnInternalPhraseAsync, 8, 11
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [2, 8] (11)
                           IterBefore : [2, 5] (8)
                           Token      : Word Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(8, 11), match='two'>
                           Whitespace : None
                Phrase   : Word Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 4] (3)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 1] (4)
                                                        IterBefore : [1, 4] (3)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 4
                                                                     Start : 3
                                                        Whitespace : None
                                             Phrase   : Newline+
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 5] (8)
                                                        IterBefore : [2, 1] (4)
                                                        Token      : Indent
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                     End   : 8
                                                                     Start : 4
                                                                     Value : 4
                                                        Whitespace : None
                                             Phrase   : Indent
                           IsComplete : False
                Phrase   : Phrase
            12) EndPhrase, "Word Token" [True], "Phrase" [None]
            13) StartPhrase, "Newline+", "Phrase"
            14) OnInternalPhraseAsync, 11, 12
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [3, 1] (12)
                           IterBefore : [2, 8] (11)
                           Token      : Newline+
                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                        End   : 12
                                        Start : 11
                           Whitespace : None
                Phrase   : Newline+
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 4] (3)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 1] (4)
                                                        IterBefore : [1, 4] (3)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 4
                                                                     Start : 3
                                                        Whitespace : None
                                             Phrase   : Newline+
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 5] (8)
                                                        IterBefore : [2, 1] (4)
                                                        Token      : Indent
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                     End   : 8
                                                                     Start : 4
                                                                     Value : 4
                                                        Whitespace : None
                                             Phrase   : Indent
                                        3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 8] (11)
                                                        IterBefore : [2, 5] (8)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(8, 11), match='two'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                           IsComplete : False
                Phrase   : Phrase
            15) EndPhrase, "Newline+" [True], "Phrase" [None]
            16) StartPhrase, "Word Token", "Phrase"
            17) OnInternalPhraseAsync, 16, 21
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [3, 10] (21)
                           IterBefore : [3, 5] (16)
                           Token      : Word Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(16, 21), match='three'>
                           Whitespace : None
                Phrase   : Word Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 4] (3)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 1] (4)
                                                        IterBefore : [1, 4] (3)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 4
                                                                     Start : 3
                                                        Whitespace : None
                                             Phrase   : Newline+
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 5] (8)
                                                        IterBefore : [2, 1] (4)
                                                        Token      : Indent
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                     End   : 8
                                                                     Start : 4
                                                                     Value : 4
                                                        Whitespace : None
                                             Phrase   : Indent
                                        3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 8] (11)
                                                        IterBefore : [2, 5] (8)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(8, 11), match='two'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 1] (12)
                                                        IterBefore : [2, 8] (11)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 12
                                                                     Start : 11
                                                        Whitespace : None
                                             Phrase   : Newline+
                           IsComplete : False
                Phrase   : Phrase
            18) EndPhrase, "Word Token" [True], "Phrase" [None]
            19) StartPhrase, "Newline+", "Phrase"
            20) OnInternalPhraseAsync, 21, 22
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [4, 1] (22)
                           IterBefore : [3, 10] (21)
                           Token      : Newline+
                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                        End   : 22
                                        Start : 21
                           Whitespace : None
                Phrase   : Newline+
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 4] (3)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 1] (4)
                                                        IterBefore : [1, 4] (3)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 4
                                                                     Start : 3
                                                        Whitespace : None
                                             Phrase   : Newline+
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 5] (8)
                                                        IterBefore : [2, 1] (4)
                                                        Token      : Indent
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                     End   : 8
                                                                     Start : 4
                                                                     Value : 4
                                                        Whitespace : None
                                             Phrase   : Indent
                                        3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 8] (11)
                                                        IterBefore : [2, 5] (8)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(8, 11), match='two'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 1] (12)
                                                        IterBefore : [2, 8] (11)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 12
                                                                     Start : 11
                                                        Whitespace : None
                                             Phrase   : Newline+
                                        5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 10] (21)
                                                        IterBefore : [3, 5] (16)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(16, 21), match='three'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                           IsComplete : False
                Phrase   : Phrase
            21) EndPhrase, "Newline+" [True], "Phrase" [None]
            22) StartPhrase, "Dedent", "Phrase"
            23) OnDedentAsync, 22, 22
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [4, 1] (22)
                           IterBefore : [4, 1] (22)
                           Token      : Dedent
                           Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                        -- empty dict --
                           Whitespace : None
                Phrase   : Dedent
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 4] (3)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 1] (4)
                                                        IterBefore : [1, 4] (3)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 4
                                                                     Start : 3
                                                        Whitespace : None
                                             Phrase   : Newline+
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 5] (8)
                                                        IterBefore : [2, 1] (4)
                                                        Token      : Indent
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                     End   : 8
                                                                     Start : 4
                                                                     Value : 4
                                                        Whitespace : None
                                             Phrase   : Indent
                                        3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 8] (11)
                                                        IterBefore : [2, 5] (8)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(8, 11), match='two'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 1] (12)
                                                        IterBefore : [2, 8] (11)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 12
                                                                     Start : 11
                                                        Whitespace : None
                                             Phrase   : Newline+
                                        5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 10] (21)
                                                        IterBefore : [3, 5] (16)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(16, 21), match='three'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [4, 1] (22)
                                                        IterBefore : [3, 10] (21)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 22
                                                                     Start : 21
                                                        Whitespace : None
                                             Phrase   : Newline+
                           IsComplete : False
                Phrase   : Phrase
            24) EndPhrase, "Dedent" [True], "Phrase" [None]
            25) OnInternalPhraseAsync, 0, 22
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 4] (3)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 1] (4)
                                                        IterBefore : [1, 4] (3)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 4
                                                                     Start : 3
                                                        Whitespace : None
                                             Phrase   : Newline+
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 5] (8)
                                                        IterBefore : [2, 1] (4)
                                                        Token      : Indent
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                     End   : 8
                                                                     Start : 4
                                                                     Value : 4
                                                        Whitespace : None
                                             Phrase   : Indent
                                        3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 8] (11)
                                                        IterBefore : [2, 5] (8)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(8, 11), match='two'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 1] (12)
                                                        IterBefore : [2, 8] (11)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 12
                                                                     Start : 11
                                                        Whitespace : None
                                             Phrase   : Newline+
                                        5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 10] (21)
                                                        IterBefore : [3, 5] (16)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(16, 21), match='three'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [4, 1] (22)
                                                        IterBefore : [3, 10] (21)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 22
                                                                     Start : 21
                                                        Whitespace : None
                                             Phrase   : Newline+
                                        7)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [4, 1] (22)
                                                        IterBefore : [4, 1] (22)
                                                        Token      : Dedent
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                     -- empty dict --
                                                        Whitespace : None
                                             Phrase   : Dedent
                           IsComplete : True
                Phrase   : Phrase
            26) EndPhrase, "Phrase" [True]
            """,
        )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NoMatch(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    one
                        two
                            three
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (4)
                                                              IterBefore : [1, 4] (3)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 4
                                                                           Start : 3
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 5] (8)
                                                              IterBefore : [2, 1] (4)
                                                              Token      : Indent
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                           End   : 8
                                                                           Start : 4
                                                                           Value : 4
                                                              Whitespace : None
                                                   Phrase   : Indent
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 8] (11)
                                                              IterBefore : [2, 5] (8)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(8, 11), match='two'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [3, 1] (12)
                                                              IterBefore : [2, 8] (11)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 12
                                                                           Start : 11
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                              5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : None
                                                   Phrase   : Word Token
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [3, 1] (12)
            Success : False
            """,
        )

        assert len(parse_mock.method_calls) == 19

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_FinishEarly(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    one
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (4)
                                                              IterBefore : [1, 4] (3)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 4
                                                                           Start : 3
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : None
                                                   Phrase   : Indent
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [2, 1] (4)
            Success : False
            """,
        )

        assert len(parse_mock.method_calls) == 10

# ----------------------------------------------------------------------
class TestIgnoreWhitespace(object):
    _phrase                                 = CreatePhrase(
        name="Phrase",
        item=[
            _word_token,
            _lpar_token,
            PushIgnoreWhitespaceControlToken(),
            _word_token,
            _word_token,
            _word_token,
            _word_token,
            PopIgnoreWhitespaceControlToken(),
            _rpar_token,
            _word_token,
            NewlineToken(),
        ],
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_MatchNoExtra(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    one (


                        two

                            three
                        four
                            five

                    ) six
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 6] (5)
                                                              IterBefore : [1, 5] (4)
                                                              Token      : lpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(4, 5), match='('>
                                                              Whitespace : 0)   3
                                                                           1)   4
                                                   Phrase   : lpar
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [4, 1] (8)
                                                   IterBefore : [1, 6] (5)
                                                   Token      : Newline+
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                End   : 8
                                                                Start : 5
                                                   Whitespace : None
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [4, 5] (12)
                                                   IterBefore : [4, 1] (8)
                                                   Token      : Indent
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                End   : 12
                                                                Start : 8
                                                                Value : 4
                                                   Whitespace : None
                                              4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [4, 8] (15)
                                                              IterBefore : [4, 5] (12)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(12, 15), match='two'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [6, 1] (17)
                                                   IterBefore : [4, 8] (15)
                                                   Token      : Newline+
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                End   : 17
                                                                Start : 15
                                                   Whitespace : None
                                              6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [6, 9] (25)
                                                   IterBefore : [6, 1] (17)
                                                   Token      : Indent
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                End   : 25
                                                                Start : 17
                                                                Value : 8
                                                   Whitespace : None
                                              7)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [6, 14] (30)
                                                              IterBefore : [6, 9] (25)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(25, 30), match='three'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              8)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [7, 1] (31)
                                                   IterBefore : [6, 14] (30)
                                                   Token      : Newline+
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                End   : 31
                                                                Start : 30
                                                   Whitespace : None
                                              9)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [7, 5] (35)
                                                   IterBefore : [7, 1] (31)
                                                   Token      : Dedent
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                -- empty dict --
                                                   Whitespace : None
                                              10)  <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [7, 9] (39)
                                                              IterBefore : [7, 5] (35)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(35, 39), match='four'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              11)  <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [8, 1] (40)
                                                   IterBefore : [7, 9] (39)
                                                   Token      : Newline+
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                End   : 40
                                                                Start : 39
                                                   Whitespace : None
                                              12)  <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [8, 9] (48)
                                                   IterBefore : [8, 1] (40)
                                                   Token      : Indent
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                End   : 48
                                                                Start : 40
                                                                Value : 8
                                                   Whitespace : None
                                              13)  <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [8, 13] (52)
                                                              IterBefore : [8, 9] (48)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(48, 52), match='five'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              14)  <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [10, 1] (54)
                                                   IterBefore : [8, 13] (52)
                                                   Token      : Newline+
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                End   : 54
                                                                Start : 52
                                                   Whitespace : None
                                              15)  <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [10, 1] (54)
                                                   IterBefore : [10, 1] (54)
                                                   Token      : Dedent
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                -- empty dict --
                                                   Whitespace : None
                                              16)  <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [10, 1] (54)
                                                   IterBefore : [10, 1] (54)
                                                   Token      : Dedent
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                -- empty dict --
                                                   Whitespace : None
                                              17)  <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [10, 2] (55)
                                                              IterBefore : [10, 1] (54)
                                                              Token      : rpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(54, 55), match=')'>
                                                              Whitespace : None
                                                   Phrase   : rpar
                                              18)  <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [10, 6] (59)
                                                              IterBefore : [10, 3] (56)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(56, 59), match='six'>
                                                              Whitespace : 0)   55
                                                                           1)   56
                                                   Phrase   : Word Token
                                              19)  <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [11, 1] (60)
                                                              IterBefore : [10, 6] (59)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 60
                                                                           Start : 59
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [11, 1] (60)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 30

# ----------------------------------------------------------------------
class TestEmbeddedPhrases(object):
    _inner_phrase                           = CreatePhrase(
        name="Inner",
        item=[
            _word_token,
            _word_token,
        ],
    )

    _phrase                                 = CreatePhrase(
        name="Phrase",
        item=[
            _lpar_token,
            _inner_phrase,
            _rpar_token,
        ],
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Match(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator("( one two )"),
            parse_mock,
            single_threaded=True,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 2] (1)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : lpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                              Whitespace : None
                                                   Phrase   : lpar
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [1, 6] (5)
                                                                                           IterBefore : [1, 3] (2)
                                                                                           Token      : Word Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(2, 5), match='one'>
                                                                                           Whitespace : 0)   1
                                                                                                        1)   2
                                                                                Phrase   : Word Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [1, 10] (9)
                                                                                           IterBefore : [1, 7] (6)
                                                                                           Token      : Word Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(6, 9), match='two'>
                                                                                           Whitespace : 0)   5
                                                                                                        1)   6
                                                                                Phrase   : Word Token
                                                              IsComplete : True
                                                   Phrase   : Inner
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 12] (11)
                                                              IterBefore : [1, 11] (10)
                                                              Token      : rpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(10, 11), match=')'>
                                                              Whitespace : 0)   9
                                                                           1)   10
                                                   Phrase   : rpar
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [1, 12] (11)
            Success : True
            """,
        )

        # assert result.Iter.AtEnd()

        assert MethodCallsToString(parse_mock) == textwrap.dedent(
            """\
            0) StartPhrase, "Phrase"
            1) StartPhrase, "lpar", "Phrase"
            2) OnInternalPhraseAsync, 0, 1
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [1, 2] (1)
                           IterBefore : [1, 1] (0)
                           Token      : lpar
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                           Whitespace : None
                Phrase   : lpar
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Phrase
            3) EndPhrase, "lpar" [True], "Phrase" [None]
            4) StartPhrase, "Inner", "Phrase"
            5) StartPhrase, "Word Token", "Inner", "Phrase"
            6) OnInternalPhraseAsync, 2, 5
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [1, 6] (5)
                           IterBefore : [1, 3] (2)
                           Token      : Word Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(2, 5), match='one'>
                           Whitespace : 0)   1
                                        1)   2
                Phrase   : Word Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Inner
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 2] (1)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : lpar
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                        Whitespace : None
                                             Phrase   : lpar
                           IsComplete : False
                Phrase   : Phrase
            7) EndPhrase, "Word Token" [True], "Inner" [None], "Phrase" [None]
            8) StartPhrase, "Word Token", "Inner", "Phrase"
            9) OnInternalPhraseAsync, 6, 9
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [1, 10] (9)
                           IterBefore : [1, 7] (6)
                           Token      : Word Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(6, 9), match='two'>
                           Whitespace : 0)   5
                                        1)   6
                Phrase   : Word Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 6] (5)
                                                        IterBefore : [1, 3] (2)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(2, 5), match='one'>
                                                        Whitespace : 0)   1
                                                                     1)   2
                                             Phrase   : Word Token
                           IsComplete : False
                Phrase   : Inner
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 2] (1)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : lpar
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                        Whitespace : None
                                             Phrase   : lpar
                           IsComplete : False
                Phrase   : Phrase
            10) EndPhrase, "Word Token" [True], "Inner" [None], "Phrase" [None]
            11) OnInternalPhraseAsync, 1, 9
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 6] (5)
                                                        IterBefore : [1, 3] (2)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(2, 5), match='one'>
                                                        Whitespace : 0)   1
                                                                     1)   2
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 10] (9)
                                                        IterBefore : [1, 7] (6)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(6, 9), match='two'>
                                                        Whitespace : 0)   5
                                                                     1)   6
                                             Phrase   : Word Token
                           IsComplete : True
                Phrase   : Inner
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 2] (1)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : lpar
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                        Whitespace : None
                                             Phrase   : lpar
                           IsComplete : False
                Phrase   : Phrase
            12) EndPhrase, "Inner" [True], "Phrase" [None]
            13) StartPhrase, "rpar", "Phrase"
            14) OnInternalPhraseAsync, 10, 11
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [1, 12] (11)
                           IterBefore : [1, 11] (10)
                           Token      : rpar
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(10, 11), match=')'>
                           Whitespace : 0)   9
                                        1)   10
                Phrase   : rpar
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 2] (1)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : lpar
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                        Whitespace : None
                                             Phrase   : lpar
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [1, 6] (5)
                                                                                     IterBefore : [1, 3] (2)
                                                                                     Token      : Word Token
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match : <_sre.SRE_Match object; span=(2, 5), match='one'>
                                                                                     Whitespace : 0)   1
                                                                                                  1)   2
                                                                          Phrase   : Word Token
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [1, 10] (9)
                                                                                     IterBefore : [1, 7] (6)
                                                                                     Token      : Word Token
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match : <_sre.SRE_Match object; span=(6, 9), match='two'>
                                                                                     Whitespace : 0)   5
                                                                                                  1)   6
                                                                          Phrase   : Word Token
                                                        IsComplete : True
                                             Phrase   : Inner
                           IsComplete : False
                Phrase   : Phrase
            15) EndPhrase, "rpar" [True], "Phrase" [None]
            16) OnInternalPhraseAsync, 0, 11
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 2] (1)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : lpar
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                        Whitespace : None
                                             Phrase   : lpar
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [1, 6] (5)
                                                                                     IterBefore : [1, 3] (2)
                                                                                     Token      : Word Token
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match : <_sre.SRE_Match object; span=(2, 5), match='one'>
                                                                                     Whitespace : 0)   1
                                                                                                  1)   2
                                                                          Phrase   : Word Token
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [1, 10] (9)
                                                                                     IterBefore : [1, 7] (6)
                                                                                     Token      : Word Token
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match : <_sre.SRE_Match object; span=(6, 9), match='two'>
                                                                                     Whitespace : 0)   5
                                                                                                  1)   6
                                                                          Phrase   : Word Token
                                                        IsComplete : True
                                             Phrase   : Inner
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 12] (11)
                                                        IterBefore : [1, 11] (10)
                                                        Token      : rpar
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(10, 11), match=')'>
                                                        Whitespace : 0)   9
                                                                     1)   10
                                             Phrase   : rpar
                           IsComplete : True
                Phrase   : Phrase
            17) EndPhrase, "Phrase" [True]
            """,
        )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NoMatchAllInner(self, parse_mock):
        result = await self._phrase.ParseAsync(["root"], CreateIterator("( one two"), parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 2] (1)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : lpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                              Whitespace : None
                                                   Phrase   : lpar
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [1, 6] (5)
                                                                                           IterBefore : [1, 3] (2)
                                                                                           Token      : Word Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(2, 5), match='one'>
                                                                                           Whitespace : 0)   1
                                                                                                        1)   2
                                                                                Phrase   : Word Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [1, 10] (9)
                                                                                           IterBefore : [1, 7] (6)
                                                                                           Token      : Word Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(6, 9), match='two'>
                                                                                           Whitespace : 0)   5
                                                                                                        1)   6
                                                                                Phrase   : Word Token
                                                              IsComplete : True
                                                   Phrase   : Inner
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : None
                                                   Phrase   : rpar
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [1, 10] (9)
            Success : False
            """,
        )

        assert len(parse_mock.method_calls) == 16

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NoMatchPartialInner(self, parse_mock):
        result = await self._phrase.ParseAsync(["root"], CreateIterator("( one"), parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 2] (1)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : lpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                              Whitespace : None
                                                   Phrase   : lpar
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [1, 6] (5)
                                                                                           IterBefore : [1, 3] (2)
                                                                                           Token      : Word Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(2, 5), match='one'>
                                                                                           Whitespace : 0)   1
                                                                                                        1)   2
                                                                                Phrase   : Word Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : None
                                                                                Phrase   : Word Token
                                                              IsComplete : True
                                                   Phrase   : Inner
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [1, 6] (5)
            Success : False
            """,
        )

        assert len(parse_mock.method_calls) == 12

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NoMatchFirstOnly(self, parse_mock):
        result = await self._phrase.ParseAsync(["root"], CreateIterator("( "), parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 2] (1)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : lpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                              Whitespace : None
                                                   Phrase   : lpar
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : None
                                                                                Phrase   : Word Token
                                                              IsComplete : True
                                                   Phrase   : Inner
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [1, 2] (1)
            Success : False
            """,
        )

        assert len(parse_mock.method_calls) == 9

# ----------------------------------------------------------------------
class TestDynamicPhrases(object):
    _word_phrase                            = CreatePhrase(
        name="Word Phrase",
        item=[
            _word_token,
            _word_token,
            NewlineToken(),
        ],
    )

    _number_phrase                          = CreatePhrase(
        name="Number Phrase",
        item=[
            _number_token,
            NewlineToken(),
        ],
    )

    _phrase                                 = CreatePhrase(
        name="Phrase",
        item=[
            DynamicPhrasesType.Statements,
            DynamicPhrasesType.Statements,
            DynamicPhrasesType.Expressions,
        ],
    )

    # ----------------------------------------------------------------------
    @staticmethod
    @pytest.fixture
    def modified_parse_mock(parse_mock):
        parse_mock.GetDynamicPhrases.side_effect = lambda unique_id, value: [TestDynamicPhrases._word_phrase, TestDynamicPhrases._number_phrase] if value == DynamicPhrasesType.Statements else [TestDynamicPhrases._number_phrase]

        return parse_mock

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Match(self, modified_parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    worda wordb
                    123
                    456
                    """,
                ),
            ),
            modified_parse_mock,
            single_threaded=True,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                         Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                    DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [1, 6] (5)
                                                                                                                 IterBefore : [1, 1] (0)
                                                                                                                 Token      : Word Token
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                              Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Word Token
                                                                                                 1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [1, 12] (11)
                                                                                                                 IterBefore : [1, 7] (6)
                                                                                                                 Token      : Word Token
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                              Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                                 Whitespace : 0)   5
                                                                                                                              1)   6
                                                                                                      Phrase   : Word Token
                                                                                                 2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [2, 1] (12)
                                                                                                                 IterBefore : [1, 12] (11)
                                                                                                                 Token      : Newline+
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                              End   : 12
                                                                                                                              Start : 11
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Newline+
                                                                                    IsComplete : True
                                                                         Phrase   : Word Phrase
                                                              Phrase   : Or: (Word Phrase, Number Phrase)
                                                   Phrase   : DynamicPhrasesType.Statements
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                         Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                    DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [2, 4] (15)
                                                                                                                 IterBefore : [2, 1] (12)
                                                                                                                 Token      : Number Token
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                              Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Number Token
                                                                                                 1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [3, 1] (16)
                                                                                                                 IterBefore : [2, 4] (15)
                                                                                                                 Token      : Newline+
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                              End   : 16
                                                                                                                              Start : 15
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Newline+
                                                                                    IsComplete : True
                                                                         Phrase   : Number Phrase
                                                              Phrase   : Or: (Word Phrase, Number Phrase)
                                                   Phrase   : DynamicPhrasesType.Statements
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                         Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                    DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [3, 4] (19)
                                                                                                                 IterBefore : [3, 1] (16)
                                                                                                                 Token      : Number Token
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                              Match : <_sre.SRE_Match object; span=(16, 19), match='456'>
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Number Token
                                                                                                 1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [4, 1] (20)
                                                                                                                 IterBefore : [3, 4] (19)
                                                                                                                 Token      : Newline+
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                              End   : 20
                                                                                                                              Start : 19
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Newline+
                                                                                    IsComplete : True
                                                                         Phrase   : Number Phrase
                                                              Phrase   : Or: (Number Phrase)
                                                   Phrase   : DynamicPhrasesType.Expressions
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [4, 1] (20)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert MethodCallsToString(modified_parse_mock) == textwrap.dedent(
            """\
            0) StartPhrase, "Phrase"
            1) StartPhrase, "DynamicPhrasesType.Statements", "Phrase"
            2) GetDynamicPhrases, e
            3) StartPhrase, "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            4) StartPhrase, "Word Phrase", "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            5) StartPhrase, "Word Token", "Word Phrase", "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            6) OnInternalPhraseAsync, 0, 5
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [1, 6] (5)
                           IterBefore : [1, 1] (0)
                           Token      : Word Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                           Whitespace : None
                Phrase   : Word Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Word Phrase
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Or: (Word Phrase, Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Statements
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Phrase
            7) EndPhrase, "Word Token" [True], "Word Phrase" [None], "Or: (Word Phrase, Number Phrase)" [None], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            8) StartPhrase, "Word Token", "Word Phrase", "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            9) OnInternalPhraseAsync, 6, 11
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [1, 12] (11)
                           IterBefore : [1, 7] (6)
                           Token      : Word Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                           Whitespace : 0)   5
                                        1)   6
                Phrase   : Word Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 6] (5)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                           IsComplete : False
                Phrase   : Word Phrase
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Or: (Word Phrase, Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Statements
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Phrase
            10) EndPhrase, "Word Token" [True], "Word Phrase" [None], "Or: (Word Phrase, Number Phrase)" [None], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            11) StartPhrase, "Newline+", "Word Phrase", "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            12) OnInternalPhraseAsync, 11, 12
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [2, 1] (12)
                           IterBefore : [1, 12] (11)
                           Token      : Newline+
                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                        End   : 12
                                        Start : 11
                           Whitespace : None
                Phrase   : Newline+
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 6] (5)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 12] (11)
                                                        IterBefore : [1, 7] (6)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                        Whitespace : 0)   5
                                                                     1)   6
                                             Phrase   : Word Token
                           IsComplete : False
                Phrase   : Word Phrase
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Or: (Word Phrase, Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Statements
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Phrase
            13) EndPhrase, "Newline+" [True], "Word Phrase" [None], "Or: (Word Phrase, Number Phrase)" [None], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            14) OnInternalPhraseAsync, 0, 12
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 6] (5)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 12] (11)
                                                        IterBefore : [1, 7] (6)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                        Whitespace : 0)   5
                                                                     1)   6
                                             Phrase   : Word Token
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 1] (12)
                                                        IterBefore : [1, 12] (11)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 12
                                                                     Start : 11
                                                        Whitespace : None
                                             Phrase   : Newline+
                           IsComplete : True
                Phrase   : Word Phrase
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Or: (Word Phrase, Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Statements
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Phrase
            15) EndPhrase, "Word Phrase" [True], "Or: (Word Phrase, Number Phrase)" [None], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            16) StartPhrase, "Number Phrase", "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            17) StartPhrase, "Number Token", "Number Phrase", "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            18) EndPhrase, "Number Token" [False], "Number Phrase" [None], "Or: (Word Phrase, Number Phrase)" [None], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            19) EndPhrase, "Number Phrase" [False], "Or: (Word Phrase, Number Phrase)" [None], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            20) OnInternalPhraseAsync, 0, 12
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                      DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                   IsIgnored  : False
                                                                   IterAfter  : [1, 6] (5)
                                                                   IterBefore : [1, 1] (0)
                                                                   Token      : Word Token
                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                   Whitespace : None
                                                        Phrase   : Word Token
                                                   1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                   IsIgnored  : False
                                                                   IterAfter  : [1, 12] (11)
                                                                   IterBefore : [1, 7] (6)
                                                                   Token      : Word Token
                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                   Whitespace : 0)   5
                                                                                1)   6
                                                        Phrase   : Word Token
                                                   2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                   IsIgnored  : False
                                                                   IterAfter  : [2, 1] (12)
                                                                   IterBefore : [1, 12] (11)
                                                                   Token      : Newline+
                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                End   : 12
                                                                                Start : 11
                                                                   Whitespace : None
                                                        Phrase   : Newline+
                                      IsComplete : True
                           Phrase   : Word Phrase
                Phrase   : Or: (Word Phrase, Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Statements
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Phrase
            21) EndPhrase, "Or: (Word Phrase, Number Phrase)" [True], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            22) OnInternalPhraseAsync, 0, 12
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                              IsIgnored  : False
                                                                              IterAfter  : [1, 6] (5)
                                                                              IterBefore : [1, 1] (0)
                                                                              Token      : Word Token
                                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                           Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                              Whitespace : None
                                                                   Phrase   : Word Token
                                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                              IsIgnored  : False
                                                                              IterAfter  : [1, 12] (11)
                                                                              IterBefore : [1, 7] (6)
                                                                              Token      : Word Token
                                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                           Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                              Whitespace : 0)   5
                                                                                           1)   6
                                                                   Phrase   : Word Token
                                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                              IsIgnored  : False
                                                                              IterAfter  : [2, 1] (12)
                                                                              IterBefore : [1, 12] (11)
                                                                              Token      : Newline+
                                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                           End   : 12
                                                                                           Start : 11
                                                                              Whitespace : None
                                                                   Phrase   : Newline+
                                                 IsComplete : True
                                      Phrase   : Word Phrase
                           Phrase   : Or: (Word Phrase, Number Phrase)
                Phrase   : DynamicPhrasesType.Statements
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Phrase
            23) EndPhrase, "DynamicPhrasesType.Statements" [True], "Phrase" [None]
            24) StartPhrase, "DynamicPhrasesType.Statements", "Phrase"
            25) GetDynamicPhrases, e
            26) StartPhrase, "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            27) StartPhrase, "Word Phrase", "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            28) StartPhrase, "Word Token", "Word Phrase", "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            29) EndPhrase, "Word Token" [False], "Word Phrase" [None], "Or: (Word Phrase, Number Phrase)" [None], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            30) EndPhrase, "Word Phrase" [False], "Or: (Word Phrase, Number Phrase)" [None], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            31) StartPhrase, "Number Phrase", "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            32) StartPhrase, "Number Token", "Number Phrase", "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            33) OnInternalPhraseAsync, 12, 15
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [2, 4] (15)
                           IterBefore : [2, 1] (12)
                           Token      : Number Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                           Whitespace : None
                Phrase   : Number Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Number Phrase
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : None
                                                                          Phrase   : Word Token
                                                        IsComplete : True
                                             Phrase   : Word Phrase
                           IsComplete : False
                Phrase   : Or: (Word Phrase, Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Statements
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 6] (5)
                                                                                                           IterBefore : [1, 1] (0)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Word Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 12] (11)
                                                                                                           IterBefore : [1, 7] (6)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                           Whitespace : 0)   5
                                                                                                                        1)   6
                                                                                                Phrase   : Word Token
                                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 1] (12)
                                                                                                           IterBefore : [1, 12] (11)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 12
                                                                                                                        Start : 11
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Word Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                           IsComplete : False
                Phrase   : Phrase
            34) EndPhrase, "Number Token" [True], "Number Phrase" [None], "Or: (Word Phrase, Number Phrase)" [None], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            35) StartPhrase, "Newline+", "Number Phrase", "Or: (Word Phrase, Number Phrase)", "DynamicPhrasesType.Statements", "Phrase"
            36) OnInternalPhraseAsync, 15, 16
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [3, 1] (16)
                           IterBefore : [2, 4] (15)
                           Token      : Newline+
                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                        End   : 16
                                        Start : 15
                           Whitespace : None
                Phrase   : Newline+
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 4] (15)
                                                        IterBefore : [2, 1] (12)
                                                        Token      : Number Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                        Whitespace : None
                                             Phrase   : Number Token
                           IsComplete : False
                Phrase   : Number Phrase
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : None
                                                                          Phrase   : Word Token
                                                        IsComplete : True
                                             Phrase   : Word Phrase
                           IsComplete : False
                Phrase   : Or: (Word Phrase, Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Statements
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 6] (5)
                                                                                                           IterBefore : [1, 1] (0)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Word Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 12] (11)
                                                                                                           IterBefore : [1, 7] (6)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                           Whitespace : 0)   5
                                                                                                                        1)   6
                                                                                                Phrase   : Word Token
                                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 1] (12)
                                                                                                           IterBefore : [1, 12] (11)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 12
                                                                                                                        Start : 11
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Word Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                           IsComplete : False
                Phrase   : Phrase
            37) EndPhrase, "Newline+" [True], "Number Phrase" [None], "Or: (Word Phrase, Number Phrase)" [None], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            38) OnInternalPhraseAsync, 12, 16
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 4] (15)
                                                        IterBefore : [2, 1] (12)
                                                        Token      : Number Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                        Whitespace : None
                                             Phrase   : Number Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 1] (16)
                                                        IterBefore : [2, 4] (15)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 16
                                                                     Start : 15
                                                        Whitespace : None
                                             Phrase   : Newline+
                           IsComplete : True
                Phrase   : Number Phrase
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : None
                                                                          Phrase   : Word Token
                                                        IsComplete : True
                                             Phrase   : Word Phrase
                           IsComplete : False
                Phrase   : Or: (Word Phrase, Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Statements
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 6] (5)
                                                                                                           IterBefore : [1, 1] (0)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Word Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 12] (11)
                                                                                                           IterBefore : [1, 7] (6)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                           Whitespace : 0)   5
                                                                                                                        1)   6
                                                                                                Phrase   : Word Token
                                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 1] (12)
                                                                                                           IterBefore : [1, 12] (11)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 12
                                                                                                                        Start : 11
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Word Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                           IsComplete : False
                Phrase   : Phrase
            39) EndPhrase, "Number Phrase" [True], "Or: (Word Phrase, Number Phrase)" [None], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            40) OnInternalPhraseAsync, 12, 16
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                      DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                   IsIgnored  : False
                                                                   IterAfter  : [2, 4] (15)
                                                                   IterBefore : [2, 1] (12)
                                                                   Token      : Number Token
                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                   Whitespace : None
                                                        Phrase   : Number Token
                                                   1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                   IsIgnored  : False
                                                                   IterAfter  : [3, 1] (16)
                                                                   IterBefore : [2, 4] (15)
                                                                   Token      : Newline+
                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                End   : 16
                                                                                Start : 15
                                                                   Whitespace : None
                                                        Phrase   : Newline+
                                      IsComplete : True
                           Phrase   : Number Phrase
                Phrase   : Or: (Word Phrase, Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Statements
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 6] (5)
                                                                                                           IterBefore : [1, 1] (0)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Word Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 12] (11)
                                                                                                           IterBefore : [1, 7] (6)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                           Whitespace : 0)   5
                                                                                                                        1)   6
                                                                                                Phrase   : Word Token
                                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 1] (12)
                                                                                                           IterBefore : [1, 12] (11)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 12
                                                                                                                        Start : 11
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Word Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                           IsComplete : False
                Phrase   : Phrase
            41) EndPhrase, "Or: (Word Phrase, Number Phrase)" [True], "DynamicPhrasesType.Statements" [None], "Phrase" [None]
            42) OnInternalPhraseAsync, 12, 16
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                              IsIgnored  : False
                                                                              IterAfter  : [2, 4] (15)
                                                                              IterBefore : [2, 1] (12)
                                                                              Token      : Number Token
                                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                           Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                              Whitespace : None
                                                                   Phrase   : Number Token
                                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                              IsIgnored  : False
                                                                              IterAfter  : [3, 1] (16)
                                                                              IterBefore : [2, 4] (15)
                                                                              Token      : Newline+
                                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                           End   : 16
                                                                                           Start : 15
                                                                              Whitespace : None
                                                                   Phrase   : Newline+
                                                 IsComplete : True
                                      Phrase   : Number Phrase
                           Phrase   : Or: (Word Phrase, Number Phrase)
                Phrase   : DynamicPhrasesType.Statements
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 6] (5)
                                                                                                           IterBefore : [1, 1] (0)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Word Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 12] (11)
                                                                                                           IterBefore : [1, 7] (6)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                           Whitespace : 0)   5
                                                                                                                        1)   6
                                                                                                Phrase   : Word Token
                                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 1] (12)
                                                                                                           IterBefore : [1, 12] (11)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 12
                                                                                                                        Start : 11
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Word Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                           IsComplete : False
                Phrase   : Phrase
            43) EndPhrase, "DynamicPhrasesType.Statements" [True], "Phrase" [None]
            44) StartPhrase, "DynamicPhrasesType.Expressions", "Phrase"
            45) GetDynamicPhrases, e
            46) StartPhrase, "Or: (Number Phrase)", "DynamicPhrasesType.Expressions", "Phrase"
            47) StartPhrase, "Number Phrase", "Or: (Number Phrase)", "DynamicPhrasesType.Expressions", "Phrase"
            48) StartPhrase, "Number Token", "Number Phrase", "Or: (Number Phrase)", "DynamicPhrasesType.Expressions", "Phrase"
            49) OnInternalPhraseAsync, 16, 19
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [3, 4] (19)
                           IterBefore : [3, 1] (16)
                           Token      : Number Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(16, 19), match='456'>
                           Whitespace : None
                Phrase   : Number Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Number Phrase
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Or: (Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Expressions
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 6] (5)
                                                                                                           IterBefore : [1, 1] (0)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Word Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 12] (11)
                                                                                                           IterBefore : [1, 7] (6)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                           Whitespace : 0)   5
                                                                                                                        1)   6
                                                                                                Phrase   : Word Token
                                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 1] (12)
                                                                                                           IterBefore : [1, 12] (11)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 12
                                                                                                                        Start : 11
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Word Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 4] (15)
                                                                                                           IterBefore : [2, 1] (12)
                                                                                                           Token      : Number Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Number Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [3, 1] (16)
                                                                                                           IterBefore : [2, 4] (15)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 16
                                                                                                                        Start : 15
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Number Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                           IsComplete : False
                Phrase   : Phrase
            50) EndPhrase, "Number Token" [True], "Number Phrase" [None], "Or: (Number Phrase)" [None], "DynamicPhrasesType.Expressions" [None], "Phrase" [None]
            51) StartPhrase, "Newline+", "Number Phrase", "Or: (Number Phrase)", "DynamicPhrasesType.Expressions", "Phrase"
            52) OnInternalPhraseAsync, 19, 20
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [4, 1] (20)
                           IterBefore : [3, 4] (19)
                           Token      : Newline+
                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                        End   : 20
                                        Start : 19
                           Whitespace : None
                Phrase   : Newline+
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 4] (19)
                                                        IterBefore : [3, 1] (16)
                                                        Token      : Number Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(16, 19), match='456'>
                                                        Whitespace : None
                                             Phrase   : Number Token
                           IsComplete : False
                Phrase   : Number Phrase
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Or: (Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Expressions
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 6] (5)
                                                                                                           IterBefore : [1, 1] (0)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Word Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 12] (11)
                                                                                                           IterBefore : [1, 7] (6)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                           Whitespace : 0)   5
                                                                                                                        1)   6
                                                                                                Phrase   : Word Token
                                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 1] (12)
                                                                                                           IterBefore : [1, 12] (11)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 12
                                                                                                                        Start : 11
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Word Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 4] (15)
                                                                                                           IterBefore : [2, 1] (12)
                                                                                                           Token      : Number Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Number Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [3, 1] (16)
                                                                                                           IterBefore : [2, 4] (15)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 16
                                                                                                                        Start : 15
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Number Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                           IsComplete : False
                Phrase   : Phrase
            53) EndPhrase, "Newline+" [True], "Number Phrase" [None], "Or: (Number Phrase)" [None], "DynamicPhrasesType.Expressions" [None], "Phrase" [None]
            54) OnInternalPhraseAsync, 16, 20
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 4] (19)
                                                        IterBefore : [3, 1] (16)
                                                        Token      : Number Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(16, 19), match='456'>
                                                        Whitespace : None
                                             Phrase   : Number Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [4, 1] (20)
                                                        IterBefore : [3, 4] (19)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 20
                                                                     Start : 19
                                                        Whitespace : None
                                             Phrase   : Newline+
                           IsComplete : True
                Phrase   : Number Phrase
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Or: (Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Expressions
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 6] (5)
                                                                                                           IterBefore : [1, 1] (0)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Word Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 12] (11)
                                                                                                           IterBefore : [1, 7] (6)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                           Whitespace : 0)   5
                                                                                                                        1)   6
                                                                                                Phrase   : Word Token
                                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 1] (12)
                                                                                                           IterBefore : [1, 12] (11)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 12
                                                                                                                        Start : 11
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Word Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 4] (15)
                                                                                                           IterBefore : [2, 1] (12)
                                                                                                           Token      : Number Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Number Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [3, 1] (16)
                                                                                                           IterBefore : [2, 4] (15)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 16
                                                                                                                        Start : 15
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Number Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                           IsComplete : False
                Phrase   : Phrase
            55) EndPhrase, "Number Phrase" [True], "Or: (Number Phrase)" [None], "DynamicPhrasesType.Expressions" [None], "Phrase" [None]
            56) OnInternalPhraseAsync, 16, 20
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                      DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                   IsIgnored  : False
                                                                   IterAfter  : [3, 4] (19)
                                                                   IterBefore : [3, 1] (16)
                                                                   Token      : Number Token
                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                Match : <_sre.SRE_Match object; span=(16, 19), match='456'>
                                                                   Whitespace : None
                                                        Phrase   : Number Token
                                                   1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                   IsIgnored  : False
                                                                   IterAfter  : [4, 1] (20)
                                                                   IterBefore : [3, 4] (19)
                                                                   Token      : Newline+
                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                End   : 20
                                                                                Start : 19
                                                                   Whitespace : None
                                                        Phrase   : Newline+
                                      IsComplete : True
                           Phrase   : Number Phrase
                Phrase   : Or: (Number Phrase)
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   None
                           IsComplete : False
                Phrase   : DynamicPhrasesType.Expressions
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 6] (5)
                                                                                                           IterBefore : [1, 1] (0)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Word Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 12] (11)
                                                                                                           IterBefore : [1, 7] (6)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                           Whitespace : 0)   5
                                                                                                                        1)   6
                                                                                                Phrase   : Word Token
                                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 1] (12)
                                                                                                           IterBefore : [1, 12] (11)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 12
                                                                                                                        Start : 11
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Word Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 4] (15)
                                                                                                           IterBefore : [2, 1] (12)
                                                                                                           Token      : Number Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Number Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [3, 1] (16)
                                                                                                           IterBefore : [2, 4] (15)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 16
                                                                                                                        Start : 15
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Number Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                           IsComplete : False
                Phrase   : Phrase
            57) EndPhrase, "Or: (Number Phrase)" [True], "DynamicPhrasesType.Expressions" [None], "Phrase" [None]
            58) OnInternalPhraseAsync, 16, 20
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                              IsIgnored  : False
                                                                              IterAfter  : [3, 4] (19)
                                                                              IterBefore : [3, 1] (16)
                                                                              Token      : Number Token
                                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                           Match : <_sre.SRE_Match object; span=(16, 19), match='456'>
                                                                              Whitespace : None
                                                                   Phrase   : Number Token
                                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                              IsIgnored  : False
                                                                              IterAfter  : [4, 1] (20)
                                                                              IterBefore : [3, 4] (19)
                                                                              Token      : Newline+
                                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                           End   : 20
                                                                                           Start : 19
                                                                              Whitespace : None
                                                                   Phrase   : Newline+
                                                 IsComplete : True
                                      Phrase   : Number Phrase
                           Phrase   : Or: (Number Phrase)
                Phrase   : DynamicPhrasesType.Expressions
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 6] (5)
                                                                                                           IterBefore : [1, 1] (0)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Word Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 12] (11)
                                                                                                           IterBefore : [1, 7] (6)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                           Whitespace : 0)   5
                                                                                                                        1)   6
                                                                                                Phrase   : Word Token
                                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 1] (12)
                                                                                                           IterBefore : [1, 12] (11)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 12
                                                                                                                        Start : 11
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Word Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 4] (15)
                                                                                                           IterBefore : [2, 1] (12)
                                                                                                           Token      : Number Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Number Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [3, 1] (16)
                                                                                                           IterBefore : [2, 4] (15)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 16
                                                                                                                        Start : 15
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Number Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                           IsComplete : False
                Phrase   : Phrase
            59) EndPhrase, "DynamicPhrasesType.Expressions" [True], "Phrase" [None]
            60) OnInternalPhraseAsync, 0, 20
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 6] (5)
                                                                                                           IterBefore : [1, 1] (0)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Word Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [1, 12] (11)
                                                                                                           IterBefore : [1, 7] (6)
                                                                                                           Token      : Word Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                           Whitespace : 0)   5
                                                                                                                        1)   6
                                                                                                Phrase   : Word Token
                                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 1] (12)
                                                                                                           IterBefore : [1, 12] (11)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 12
                                                                                                                        Start : 11
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Word Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [2, 4] (15)
                                                                                                           IterBefore : [2, 1] (12)
                                                                                                           Token      : Number Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Number Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [3, 1] (16)
                                                                                                           IterBefore : [2, 4] (15)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 16
                                                                                                                        Start : 15
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Number Phrase
                                                        Phrase   : Or: (Word Phrase, Number Phrase)
                                             Phrase   : DynamicPhrasesType.Statements
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [3, 4] (19)
                                                                                                           IterBefore : [3, 1] (16)
                                                                                                           Token      : Number Token
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                        Match : <_sre.SRE_Match object; span=(16, 19), match='456'>
                                                                                                           Whitespace : None
                                                                                                Phrase   : Number Token
                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                           IsIgnored  : False
                                                                                                           IterAfter  : [4, 1] (20)
                                                                                                           IterBefore : [3, 4] (19)
                                                                                                           Token      : Newline+
                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                        End   : 20
                                                                                                                        Start : 19
                                                                                                           Whitespace : None
                                                                                                Phrase   : Newline+
                                                                              IsComplete : True
                                                                   Phrase   : Number Phrase
                                                        Phrase   : Or: (Number Phrase)
                                             Phrase   : DynamicPhrasesType.Expressions
                           IsComplete : True
                Phrase   : Phrase
            61) EndPhrase, "Phrase" [True]
            """,
        )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NoMatch(self, modified_parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    worda wordb
                    123
                    wordc wordd
                    """,
                ),
            ),
            modified_parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                         Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                    DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [1, 6] (5)
                                                                                                                 IterBefore : [1, 1] (0)
                                                                                                                 Token      : Word Token
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                              Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Word Token
                                                                                                 1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [1, 12] (11)
                                                                                                                 IterBefore : [1, 7] (6)
                                                                                                                 Token      : Word Token
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                              Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                                 Whitespace : 0)   5
                                                                                                                              1)   6
                                                                                                      Phrase   : Word Token
                                                                                                 2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [2, 1] (12)
                                                                                                                 IterBefore : [1, 12] (11)
                                                                                                                 Token      : Newline+
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                              End   : 12
                                                                                                                              Start : 11
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Newline+
                                                                                    IsComplete : True
                                                                         Phrase   : Word Phrase
                                                              Phrase   : Or: (Word Phrase, Number Phrase)
                                                   Phrase   : DynamicPhrasesType.Statements
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                         Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                    DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [2, 4] (15)
                                                                                                                 IterBefore : [2, 1] (12)
                                                                                                                 Token      : Number Token
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                              Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Number Token
                                                                                                 1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [3, 1] (16)
                                                                                                                 IterBefore : [2, 4] (15)
                                                                                                                 Token      : Newline+
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                              End   : 16
                                                                                                                              Start : 15
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Newline+
                                                                                    IsComplete : True
                                                                         Phrase   : Number Phrase
                                                              Phrase   : Or: (Word Phrase, Number Phrase)
                                                   Phrase   : DynamicPhrasesType.Statements
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                         DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                      DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                        Data     : None
                                                                                                                        Phrase   : Number Token
                                                                                                      IsComplete : True
                                                                                           Phrase   : Number Phrase
                                                                         IsComplete : True
                                                              Phrase   : Or: (Number Phrase)
                                                   Phrase   : DynamicPhrasesType.Expressions
                                 IsComplete : True
                      Phrase   : Phrase
            Iter    : [3, 1] (16)
            Success : False
            """,
        )

        assert len(modified_parse_mock.method_calls) == 54

# ----------------------------------------------------------------------
class TestOrPhrases(object):
    _word_phrase                            = CreatePhrase(
        name="Word Phrase",
        item=[
            _word_token,
            NewlineToken(),
        ],
    )

    _number_phrase                          = CreatePhrase(
        name="Number Phrase",
        item=[
            _number_token,
            NewlineToken(),
        ],
    )

    _upper_phrase                           = CreatePhrase(
        name="Upper Phrase",
        item=[
            _upper_token,
            NewlineToken(),
        ],
    )

    _phrase                                 = CreatePhrase(
        item=(
            _word_phrase,
            _number_phrase,
            _upper_phrase,
        ),
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_WordMatch(self, parse_mock):
        result = await self._phrase.ParseAsync(["root"], CreateIterator("word"), parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                 Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                            DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [1, 5] (4)
                                                                         IterBefore : [1, 1] (0)
                                                                         Token      : Word Token
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                      Match : <_sre.SRE_Match object; span=(0, 4), match='word'>
                                                                         Whitespace : None
                                                              Phrase   : Word Token
                                                         1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [2, 1] (5)
                                                                         IterBefore : [1, 5] (4)
                                                                         Token      : Newline+
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                      End   : 5
                                                                                      Start : 4
                                                                         Whitespace : None
                                                              Phrase   : Newline+
                                            IsComplete : True
                                 Phrase   : Word Phrase
                      Phrase   : Or: (Word Phrase, Number Phrase, Upper Phrase)
            Iter    : [2, 1] (5)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 20

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NumberMatch(self, parse_mock):
        result = await self._phrase.ParseAsync(["root"], CreateIterator("1234"), parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                 Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                            DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [1, 5] (4)
                                                                         IterBefore : [1, 1] (0)
                                                                         Token      : Number Token
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                      Match : <_sre.SRE_Match object; span=(0, 4), match='1234'>
                                                                         Whitespace : None
                                                              Phrase   : Number Token
                                                         1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [2, 1] (5)
                                                                         IterBefore : [1, 5] (4)
                                                                         Token      : Newline+
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                      End   : 5
                                                                                      Start : 4
                                                                         Whitespace : None
                                                              Phrase   : Newline+
                                            IsComplete : True
                                 Phrase   : Number Phrase
                      Phrase   : Or: (Word Phrase, Number Phrase, Upper Phrase)
            Iter    : [2, 1] (5)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 20

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_UpperMatch(self, parse_mock):
        result = await self._phrase.ParseAsync(["root"], CreateIterator("WORD"), parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                 Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                            DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [1, 5] (4)
                                                                         IterBefore : [1, 1] (0)
                                                                         Token      : Upper Token
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                      Match : <_sre.SRE_Match object; span=(0, 4), match='WORD'>
                                                                         Whitespace : None
                                                              Phrase   : Upper Token
                                                         1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [2, 1] (5)
                                                                         IterBefore : [1, 5] (4)
                                                                         Token      : Newline+
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                      End   : 5
                                                                                      Start : 4
                                                                         Whitespace : None
                                                              Phrase   : Newline+
                                            IsComplete : True
                                 Phrase   : Upper Phrase
                      Phrase   : Or: (Word Phrase, Number Phrase, Upper Phrase)
            Iter    : [2, 1] (5)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 20

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NoMatch(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator("this is not a match"),
            parse_mock,
            single_threaded=True,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [1, 5] (4)
                                                                                           IterBefore : [1, 1] (0)
                                                                                           Token      : Word Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(0, 4), match='this'>
                                                                                           Whitespace : None
                                                                                Phrase   : Word Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Word Phrase
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : None
                                                                                Phrase   : Number Token
                                                              IsComplete : True
                                                   Phrase   : Number Phrase
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : None
                                                                                Phrase   : Upper Token
                                                              IsComplete : True
                                                   Phrase   : Upper Phrase
                                 IsComplete : True
                      Phrase   : Or: (Word Phrase, Number Phrase, Upper Phrase)
            Iter    : [1, 5] (4)
            Success : False
            """,
        )

        assert MethodCallsToString(parse_mock) == textwrap.dedent(
            """\
            0) StartPhrase, "Or: (Word Phrase, Number Phrase, Upper Phrase)"
            1) StartPhrase, "Word Phrase", "Or: (Word Phrase, Number Phrase, Upper Phrase)"
            2) StartPhrase, "Word Token", "Word Phrase", "Or: (Word Phrase, Number Phrase, Upper Phrase)"
            3) OnInternalPhraseAsync, 0, 4
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [1, 5] (4)
                           IterBefore : [1, 1] (0)
                           Token      : Word Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(0, 4), match='this'>
                           Whitespace : None
                Phrase   : Word Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Word Phrase
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Or: (Word Phrase, Number Phrase, Upper Phrase)
            4) EndPhrase, "Word Token" [True], "Word Phrase" [None], "Or: (Word Phrase, Number Phrase, Upper Phrase)" [None]
            5) StartPhrase, "Newline+", "Word Phrase", "Or: (Word Phrase, Number Phrase, Upper Phrase)"
            6) EndPhrase, "Newline+" [False], "Word Phrase" [None], "Or: (Word Phrase, Number Phrase, Upper Phrase)" [None]
            7) EndPhrase, "Word Phrase" [False], "Or: (Word Phrase, Number Phrase, Upper Phrase)" [None]
            8) StartPhrase, "Number Phrase", "Or: (Word Phrase, Number Phrase, Upper Phrase)"
            9) StartPhrase, "Number Token", "Number Phrase", "Or: (Word Phrase, Number Phrase, Upper Phrase)"
            10) EndPhrase, "Number Token" [False], "Number Phrase" [None], "Or: (Word Phrase, Number Phrase, Upper Phrase)" [None]
            11) EndPhrase, "Number Phrase" [False], "Or: (Word Phrase, Number Phrase, Upper Phrase)" [None]
            12) StartPhrase, "Upper Phrase", "Or: (Word Phrase, Number Phrase, Upper Phrase)"
            13) StartPhrase, "Upper Token", "Upper Phrase", "Or: (Word Phrase, Number Phrase, Upper Phrase)"
            14) EndPhrase, "Upper Token" [False], "Upper Phrase" [None], "Or: (Word Phrase, Number Phrase, Upper Phrase)" [None]
            15) EndPhrase, "Upper Phrase" [False], "Or: (Word Phrase, Number Phrase, Upper Phrase)" [None]
            16) EndPhrase, "Or: (Word Phrase, Number Phrase, Upper Phrase)" [False]
            """,
        )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_EarlyTermination(self, parse_mock):
        parse_mock.OnInternalPhraseAsync = CoroutineMock(
            side_effect=[True, False],
        )

        result = await self._phrase.ParseAsync(["root"], CreateIterator("word"), parse_mock)

        assert result is None
        assert len(parse_mock.method_calls) == 18

# ----------------------------------------------------------------------
class TestEmbeddedOrPhrases(object):
    _phrase                                 = CreatePhrase(
        (
            [_word_token, NewlineToken()],
            [_number_token, NewlineToken()],
            [_upper_token, NewlineToken()],
        ),
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Standard(self, parse_mock):
        iter = CreateIterator(
            textwrap.dedent(
                """\
                one
                2222
                THREE
                """,
            ),
        )

        # Line 1
        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                 Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                            DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [1, 4] (3)
                                                                         IterBefore : [1, 1] (0)
                                                                         Token      : Word Token
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                      Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                                         Whitespace : None
                                                              Phrase   : Word Token
                                                         1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [2, 1] (4)
                                                                         IterBefore : [1, 4] (3)
                                                                         Token      : Newline+
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                      End   : 4
                                                                                      Start : 3
                                                                         Whitespace : None
                                                              Phrase   : Newline+
                                            IsComplete : True
                                 Phrase   : Sequence: [Word Token, Newline+]
                      Phrase   : Or: (Sequence: [Word Token, Newline+], Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+])
            Iter    : [2, 1] (4)
            Success : True
            """,
        )

        iter = result.Iter

        # Line 2
        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                 Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                            DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [2, 5] (8)
                                                                         IterBefore : [2, 1] (4)
                                                                         Token      : Number Token
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                      Match : <_sre.SRE_Match object; span=(4, 8), match='2222'>
                                                                         Whitespace : None
                                                              Phrase   : Number Token
                                                         1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [3, 1] (9)
                                                                         IterBefore : [2, 5] (8)
                                                                         Token      : Newline+
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                      End   : 9
                                                                                      Start : 8
                                                                         Whitespace : None
                                                              Phrase   : Newline+
                                            IsComplete : True
                                 Phrase   : Sequence: [Number Token, Newline+]
                      Phrase   : Or: (Sequence: [Word Token, Newline+], Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+])
            Iter    : [3, 1] (9)
            Success : True
            """,
        )

        iter = result.Iter

        # Line 3
        result = await self._phrase.ParseAsync(["root"], iter, parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                 Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                            DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [3, 6] (14)
                                                                         IterBefore : [3, 1] (9)
                                                                         Token      : Upper Token
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                      Match : <_sre.SRE_Match object; span=(9, 14), match='THREE'>
                                                                         Whitespace : None
                                                              Phrase   : Upper Token
                                                         1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [4, 1] (15)
                                                                         IterBefore : [3, 6] (14)
                                                                         Token      : Newline+
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                      End   : 15
                                                                                      Start : 14
                                                                         Whitespace : None
                                                              Phrase   : Newline+
                                            IsComplete : True
                                 Phrase   : Sequence: [Upper Token, Newline+]
                      Phrase   : Or: (Sequence: [Word Token, Newline+], Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+])
            Iter    : [4, 1] (15)
            Success : True
            """,
        )

        iter = result.Iter

        # Done
        assert iter.AtEnd()

# ----------------------------------------------------------------------
class TestRepeatPhrases(object):
    _phrase                                 = CreatePhrase(
        [
            PhraseItem([_word_token, NewlineToken()], arity="*"),
            PhraseItem([_number_token, NewlineToken()], arity="+"),
            PhraseItem([_upper_token, NewlineToken()], arity="?"),
            PhraseItem([_word_token, NewlineToken()], arity="+"),
        ],
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Match1(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    worda
                    wordb
                    12
                    3456
                    UPPER
                    wordc
                    wordd
                    worde
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [1, 6] (5)
                                                                                                                        IterBefore : [1, 1] (0)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 1] (6)
                                                                                                                        IterBefore : [1, 6] (5)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 6
                                                                                                                                     Start : 5
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 6] (11)
                                                                                                                        IterBefore : [2, 1] (6)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 1] (12)
                                                                                                                        IterBefore : [2, 6] (11)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 12
                                                                                                                                     Start : 11
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 3] (14)
                                                                                                                        IterBefore : [3, 1] (12)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(12, 14), match='12'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 1] (15)
                                                                                                                        IterBefore : [3, 3] (14)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 15
                                                                                                                                     Start : 14
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 5] (19)
                                                                                                                        IterBefore : [4, 1] (15)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(15, 19), match='3456'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [5, 1] (20)
                                                                                                                        IterBefore : [4, 5] (19)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 20
                                                                                                                                     Start : 19
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [5, 6] (25)
                                                                                                                        IterBefore : [5, 1] (20)
                                                                                                                        Token      : Upper Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(20, 25), match='UPPER'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Upper Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [6, 1] (26)
                                                                                                                        IterBefore : [5, 6] (25)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 26
                                                                                                                                     Start : 25
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Upper Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [6, 6] (31)
                                                                                                                        IterBefore : [6, 1] (26)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(26, 31), match='wordc'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [7, 1] (32)
                                                                                                                        IterBefore : [6, 6] (31)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 32
                                                                                                                                     Start : 31
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [7, 6] (37)
                                                                                                                        IterBefore : [7, 1] (32)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(32, 37), match='wordd'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [8, 1] (38)
                                                                                                                        IterBefore : [7, 6] (37)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 38
                                                                                                                                     Start : 37
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [8, 6] (43)
                                                                                                                        IterBefore : [8, 1] (38)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(38, 43), match='worde'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [9, 1] (44)
                                                                                                                        IterBefore : [8, 6] (43)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 44
                                                                                                                                     Start : 43
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                                 IsComplete : True
                      Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            Iter    : [9, 1] (44)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 95

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Match2(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    12
                    3456
                    UPPER
                    wordc
                    wordd
                    worde
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : -- empty list --
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [1, 3] (2)
                                                                                                                        IterBefore : [1, 1] (0)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 1] (3)
                                                                                                                        IterBefore : [1, 3] (2)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 3
                                                                                                                                     Start : 2
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 5] (7)
                                                                                                                        IterBefore : [2, 1] (3)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 1] (8)
                                                                                                                        IterBefore : [2, 5] (7)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 8
                                                                                                                                     Start : 7
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 6] (13)
                                                                                                                        IterBefore : [3, 1] (8)
                                                                                                                        Token      : Upper Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(8, 13), match='UPPER'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Upper Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 1] (14)
                                                                                                                        IterBefore : [3, 6] (13)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 14
                                                                                                                                     Start : 13
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Upper Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 6] (19)
                                                                                                                        IterBefore : [4, 1] (14)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(14, 19), match='wordc'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [5, 1] (20)
                                                                                                                        IterBefore : [4, 6] (19)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 20
                                                                                                                                     Start : 19
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [5, 6] (25)
                                                                                                                        IterBefore : [5, 1] (20)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(20, 25), match='wordd'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [6, 1] (26)
                                                                                                                        IterBefore : [5, 6] (25)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 26
                                                                                                                                     Start : 25
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [6, 6] (31)
                                                                                                                        IterBefore : [6, 1] (26)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(26, 31), match='worde'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [7, 1] (32)
                                                                                                                        IterBefore : [6, 6] (31)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 32
                                                                                                                                     Start : 31
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                                 IsComplete : True
                      Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            Iter    : [7, 1] (32)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 77

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Match3(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    worda
                    12
                    3456
                    wordc
                    wordd
                    worde
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [1, 6] (5)
                                                                                                                        IterBefore : [1, 1] (0)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 1] (6)
                                                                                                                        IterBefore : [1, 6] (5)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 6
                                                                                                                                     Start : 5
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 3] (8)
                                                                                                                        IterBefore : [2, 1] (6)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(6, 8), match='12'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 1] (9)
                                                                                                                        IterBefore : [2, 3] (8)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 9
                                                                                                                                     Start : 8
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 5] (13)
                                                                                                                        IterBefore : [3, 1] (9)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(9, 13), match='3456'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 1] (14)
                                                                                                                        IterBefore : [3, 5] (13)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 14
                                                                                                                                     Start : 13
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : -- empty list --
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 6] (19)
                                                                                                                        IterBefore : [4, 1] (14)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(14, 19), match='wordc'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [5, 1] (20)
                                                                                                                        IterBefore : [4, 6] (19)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 20
                                                                                                                                     Start : 19
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [5, 6] (25)
                                                                                                                        IterBefore : [5, 1] (20)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(20, 25), match='wordd'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [6, 1] (26)
                                                                                                                        IterBefore : [5, 6] (25)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 26
                                                                                                                                     Start : 25
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [6, 6] (31)
                                                                                                                        IterBefore : [6, 1] (26)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(26, 31), match='worde'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [7, 1] (32)
                                                                                                                        IterBefore : [6, 6] (31)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 32
                                                                                                                                     Start : 31
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                                 IsComplete : True
                      Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            Iter    : [7, 1] (32)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert len(parse_mock.method_calls) == 81

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Match4(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    12
                    3456
                    wordc
                    wordd
                    worde
                    """,
                ),
            ),
            parse_mock,
            single_threaded=True,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : -- empty list --
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [1, 3] (2)
                                                                                                                        IterBefore : [1, 1] (0)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 1] (3)
                                                                                                                        IterBefore : [1, 3] (2)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 3
                                                                                                                                     Start : 2
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 5] (7)
                                                                                                                        IterBefore : [2, 1] (3)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 1] (8)
                                                                                                                        IterBefore : [2, 5] (7)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 8
                                                                                                                                     Start : 7
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : -- empty list --
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 6] (13)
                                                                                                                        IterBefore : [3, 1] (8)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 1] (14)
                                                                                                                        IterBefore : [3, 6] (13)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 14
                                                                                                                                     Start : 13
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 6] (19)
                                                                                                                        IterBefore : [4, 1] (14)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(14, 19), match='wordd'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [5, 1] (20)
                                                                                                                        IterBefore : [4, 6] (19)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 20
                                                                                                                                     Start : 19
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [5, 6] (25)
                                                                                                                        IterBefore : [5, 1] (20)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(20, 25), match='worde'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [6, 1] (26)
                                                                                                                        IterBefore : [5, 6] (25)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 26
                                                                                                                                     Start : 25
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                                 IsComplete : True
                      Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            Iter    : [6, 1] (26)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

        assert MethodCallsToString(parse_mock) == textwrap.dedent(
            """\
            0) StartPhrase, "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            1) StartPhrase, "Repeat: {Sequence: [Word Token, Newline+], 0, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            2) StartPhrase, "Sequence: [Word Token, Newline+]", "Repeat: {Sequence: [Word Token, Newline+], 0, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            3) StartPhrase, "Word Token", "Sequence: [Word Token, Newline+]", "Repeat: {Sequence: [Word Token, Newline+], 0, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            4) EndPhrase, "Word Token" [False], "Sequence: [Word Token, Newline+]" [None], "Repeat: {Sequence: [Word Token, Newline+], 0, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            5) EndPhrase, "Sequence: [Word Token, Newline+]" [False], "Repeat: {Sequence: [Word Token, Newline+], 0, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            6) OnInternalPhraseAsync, 0, 0
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : True
                Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            7) EndPhrase, "Repeat: {Sequence: [Word Token, Newline+], 0, None}" [True], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            8) StartPhrase, "Repeat: {Sequence: [Number Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            9) StartPhrase, "Sequence: [Number Token, Newline+]", "Repeat: {Sequence: [Number Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            10) StartPhrase, "Number Token", "Sequence: [Number Token, Newline+]", "Repeat: {Sequence: [Number Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            11) OnInternalPhraseAsync, 0, 2
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [1, 3] (2)
                           IterBefore : [1, 1] (0)
                           Token      : Number Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                           Whitespace : None
                Phrase   : Number Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Sequence: [Number Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            12) EndPhrase, "Number Token" [True], "Sequence: [Number Token, Newline+]" [None], "Repeat: {Sequence: [Number Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            13) StartPhrase, "Newline+", "Sequence: [Number Token, Newline+]", "Repeat: {Sequence: [Number Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            14) OnInternalPhraseAsync, 2, 3
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [2, 1] (3)
                           IterBefore : [1, 3] (2)
                           Token      : Newline+
                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                        End   : 3
                                        Start : 2
                           Whitespace : None
                Phrase   : Newline+
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 3] (2)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Number Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                        Whitespace : None
                                             Phrase   : Number Token
                           IsComplete : False
                Phrase   : Sequence: [Number Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            15) EndPhrase, "Newline+" [True], "Sequence: [Number Token, Newline+]" [None], "Repeat: {Sequence: [Number Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            16) OnInternalPhraseAsync, 0, 3
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [1, 3] (2)
                                                        IterBefore : [1, 1] (0)
                                                        Token      : Number Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                        Whitespace : None
                                             Phrase   : Number Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 1] (3)
                                                        IterBefore : [1, 3] (2)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 3
                                                                     Start : 2
                                                        Whitespace : None
                                             Phrase   : Newline+
                           IsComplete : True
                Phrase   : Sequence: [Number Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            17) EndPhrase, "Sequence: [Number Token, Newline+]" [True], "Repeat: {Sequence: [Number Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            18) StartPhrase, "Sequence: [Number Token, Newline+]", "Repeat: {Sequence: [Number Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            19) StartPhrase, "Number Token", "Sequence: [Number Token, Newline+]", "Repeat: {Sequence: [Number Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            20) OnInternalPhraseAsync, 3, 7
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [2, 5] (7)
                           IterBefore : [2, 1] (3)
                           Token      : Number Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                           Whitespace : None
                Phrase   : Number Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Sequence: [Number Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [1, 3] (2)
                                                                          IterBefore : [1, 1] (0)
                                                                          Token      : Number Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                          Whitespace : None
                                                               Phrase   : Number Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [2, 1] (3)
                                                                          IterBefore : [1, 3] (2)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 3
                                                                                       Start : 2
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            21) EndPhrase, "Number Token" [True], "Sequence: [Number Token, Newline+]" [None], "Repeat: {Sequence: [Number Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            22) StartPhrase, "Newline+", "Sequence: [Number Token, Newline+]", "Repeat: {Sequence: [Number Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            23) OnInternalPhraseAsync, 7, 8
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [3, 1] (8)
                           IterBefore : [2, 5] (7)
                           Token      : Newline+
                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                        End   : 8
                                        Start : 7
                           Whitespace : None
                Phrase   : Newline+
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 5] (7)
                                                        IterBefore : [2, 1] (3)
                                                        Token      : Number Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                        Whitespace : None
                                             Phrase   : Number Token
                           IsComplete : False
                Phrase   : Sequence: [Number Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [1, 3] (2)
                                                                          IterBefore : [1, 1] (0)
                                                                          Token      : Number Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                          Whitespace : None
                                                               Phrase   : Number Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [2, 1] (3)
                                                                          IterBefore : [1, 3] (2)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 3
                                                                                       Start : 2
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            24) EndPhrase, "Newline+" [True], "Sequence: [Number Token, Newline+]" [None], "Repeat: {Sequence: [Number Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            25) OnInternalPhraseAsync, 3, 8
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [2, 5] (7)
                                                        IterBefore : [2, 1] (3)
                                                        Token      : Number Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                        Whitespace : None
                                             Phrase   : Number Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 1] (8)
                                                        IterBefore : [2, 5] (7)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 8
                                                                     Start : 7
                                                        Whitespace : None
                                             Phrase   : Newline+
                           IsComplete : True
                Phrase   : Sequence: [Number Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [1, 3] (2)
                                                                          IterBefore : [1, 1] (0)
                                                                          Token      : Number Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                          Whitespace : None
                                                               Phrase   : Number Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [2, 1] (3)
                                                                          IterBefore : [1, 3] (2)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 3
                                                                                       Start : 2
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            26) EndPhrase, "Sequence: [Number Token, Newline+]" [True], "Repeat: {Sequence: [Number Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            27) StartPhrase, "Sequence: [Number Token, Newline+]", "Repeat: {Sequence: [Number Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            28) StartPhrase, "Number Token", "Sequence: [Number Token, Newline+]", "Repeat: {Sequence: [Number Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            29) EndPhrase, "Number Token" [False], "Sequence: [Number Token, Newline+]" [None], "Repeat: {Sequence: [Number Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            30) EndPhrase, "Sequence: [Number Token, Newline+]" [False], "Repeat: {Sequence: [Number Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            31) OnInternalPhraseAsync, 0, 8
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [1, 3] (2)
                                                                                     IterBefore : [1, 1] (0)
                                                                                     Token      : Number Token
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                     Whitespace : None
                                                                          Phrase   : Number Token
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [2, 1] (3)
                                                                                     IterBefore : [1, 3] (2)
                                                                                     Token      : Newline+
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End   : 3
                                                                                                  Start : 2
                                                                                     Whitespace : None
                                                                          Phrase   : Newline+
                                                        IsComplete : True
                                             Phrase   : Sequence: [Number Token, Newline+]
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [2, 5] (7)
                                                                                     IterBefore : [2, 1] (3)
                                                                                     Token      : Number Token
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                     Whitespace : None
                                                                          Phrase   : Number Token
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [3, 1] (8)
                                                                                     IterBefore : [2, 5] (7)
                                                                                     Token      : Newline+
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End   : 8
                                                                                                  Start : 7
                                                                                     Whitespace : None
                                                                          Phrase   : Newline+
                                                        IsComplete : True
                                             Phrase   : Sequence: [Number Token, Newline+]
                           IsComplete : True
                Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            32) EndPhrase, "Repeat: {Sequence: [Number Token, Newline+], 1, None}" [True], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            33) StartPhrase, "Repeat: {Sequence: [Upper Token, Newline+], 0, 1}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            34) StartPhrase, "Sequence: [Upper Token, Newline+]", "Repeat: {Sequence: [Upper Token, Newline+], 0, 1}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            35) StartPhrase, "Upper Token", "Sequence: [Upper Token, Newline+]", "Repeat: {Sequence: [Upper Token, Newline+], 0, 1}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            36) EndPhrase, "Upper Token" [False], "Sequence: [Upper Token, Newline+]" [None], "Repeat: {Sequence: [Upper Token, Newline+], 0, 1}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            37) EndPhrase, "Sequence: [Upper Token, Newline+]" [False], "Repeat: {Sequence: [Upper Token, Newline+], 0, 1}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            38) OnInternalPhraseAsync, 8, 8
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : True
                Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            39) EndPhrase, "Repeat: {Sequence: [Upper Token, Newline+], 0, 1}" [True], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            40) StartPhrase, "Repeat: {Sequence: [Word Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            41) StartPhrase, "Sequence: [Word Token, Newline+]", "Repeat: {Sequence: [Word Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            42) StartPhrase, "Word Token", "Sequence: [Word Token, Newline+]", "Repeat: {Sequence: [Word Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            43) OnInternalPhraseAsync, 8, 13
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [3, 6] (13)
                           IterBefore : [3, 1] (8)
                           Token      : Word Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                           Whitespace : None
                Phrase   : Word Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Sequence: [Word Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            44) EndPhrase, "Word Token" [True], "Sequence: [Word Token, Newline+]" [None], "Repeat: {Sequence: [Word Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            45) StartPhrase, "Newline+", "Sequence: [Word Token, Newline+]", "Repeat: {Sequence: [Word Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            46) OnInternalPhraseAsync, 13, 14
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [4, 1] (14)
                           IterBefore : [3, 6] (13)
                           Token      : Newline+
                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                        End   : 14
                                        Start : 13
                           Whitespace : None
                Phrase   : Newline+
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 6] (13)
                                                        IterBefore : [3, 1] (8)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                           IsComplete : False
                Phrase   : Sequence: [Word Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            47) EndPhrase, "Newline+" [True], "Sequence: [Word Token, Newline+]" [None], "Repeat: {Sequence: [Word Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            48) OnInternalPhraseAsync, 8, 14
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [3, 6] (13)
                                                        IterBefore : [3, 1] (8)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [4, 1] (14)
                                                        IterBefore : [3, 6] (13)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 14
                                                                     Start : 13
                                                        Whitespace : None
                                             Phrase   : Newline+
                           IsComplete : True
                Phrase   : Sequence: [Word Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            49) EndPhrase, "Sequence: [Word Token, Newline+]" [True], "Repeat: {Sequence: [Word Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            50) StartPhrase, "Sequence: [Word Token, Newline+]", "Repeat: {Sequence: [Word Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            51) StartPhrase, "Word Token", "Sequence: [Word Token, Newline+]", "Repeat: {Sequence: [Word Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            52) OnInternalPhraseAsync, 14, 19
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [4, 6] (19)
                           IterBefore : [4, 1] (14)
                           Token      : Word Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(14, 19), match='wordd'>
                           Whitespace : None
                Phrase   : Word Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Sequence: [Word Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [3, 6] (13)
                                                                          IterBefore : [3, 1] (8)
                                                                          Token      : Word Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                                                                          Whitespace : None
                                                               Phrase   : Word Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [4, 1] (14)
                                                                          IterBefore : [3, 6] (13)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 14
                                                                                       Start : 13
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            53) EndPhrase, "Word Token" [True], "Sequence: [Word Token, Newline+]" [None], "Repeat: {Sequence: [Word Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            54) StartPhrase, "Newline+", "Sequence: [Word Token, Newline+]", "Repeat: {Sequence: [Word Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            55) OnInternalPhraseAsync, 19, 20
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [5, 1] (20)
                           IterBefore : [4, 6] (19)
                           Token      : Newline+
                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                        End   : 20
                                        Start : 19
                           Whitespace : None
                Phrase   : Newline+
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [4, 6] (19)
                                                        IterBefore : [4, 1] (14)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(14, 19), match='wordd'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                           IsComplete : False
                Phrase   : Sequence: [Word Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [3, 6] (13)
                                                                          IterBefore : [3, 1] (8)
                                                                          Token      : Word Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                                                                          Whitespace : None
                                                               Phrase   : Word Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [4, 1] (14)
                                                                          IterBefore : [3, 6] (13)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 14
                                                                                       Start : 13
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            56) EndPhrase, "Newline+" [True], "Sequence: [Word Token, Newline+]" [None], "Repeat: {Sequence: [Word Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            57) OnInternalPhraseAsync, 14, 20
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [4, 6] (19)
                                                        IterBefore : [4, 1] (14)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(14, 19), match='wordd'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [5, 1] (20)
                                                        IterBefore : [4, 6] (19)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 20
                                                                     Start : 19
                                                        Whitespace : None
                                             Phrase   : Newline+
                           IsComplete : True
                Phrase   : Sequence: [Word Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [3, 6] (13)
                                                                          IterBefore : [3, 1] (8)
                                                                          Token      : Word Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                                                                          Whitespace : None
                                                               Phrase   : Word Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [4, 1] (14)
                                                                          IterBefore : [3, 6] (13)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 14
                                                                                       Start : 13
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            58) EndPhrase, "Sequence: [Word Token, Newline+]" [True], "Repeat: {Sequence: [Word Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            59) StartPhrase, "Sequence: [Word Token, Newline+]", "Repeat: {Sequence: [Word Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            60) StartPhrase, "Word Token", "Sequence: [Word Token, Newline+]", "Repeat: {Sequence: [Word Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            61) OnInternalPhraseAsync, 20, 25
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [5, 6] (25)
                           IterBefore : [5, 1] (20)
                           Token      : Word Token
                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match : <_sre.SRE_Match object; span=(20, 25), match='worde'>
                           Whitespace : None
                Phrase   : Word Token
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : -- empty list --
                           IsComplete : False
                Phrase   : Sequence: [Word Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [3, 6] (13)
                                                                          IterBefore : [3, 1] (8)
                                                                          Token      : Word Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                                                                          Whitespace : None
                                                               Phrase   : Word Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [4, 1] (14)
                                                                          IterBefore : [3, 6] (13)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 14
                                                                                       Start : 13
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [4, 6] (19)
                                                                          IterBefore : [4, 1] (14)
                                                                          Token      : Word Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(14, 19), match='wordd'>
                                                                          Whitespace : None
                                                               Phrase   : Word Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [5, 1] (20)
                                                                          IterBefore : [4, 6] (19)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 20
                                                                                       Start : 19
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            62) EndPhrase, "Word Token" [True], "Sequence: [Word Token, Newline+]" [None], "Repeat: {Sequence: [Word Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            63) StartPhrase, "Newline+", "Sequence: [Word Token, Newline+]", "Repeat: {Sequence: [Word Token, Newline+], 1, None}", "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]"
            64) OnInternalPhraseAsync, 25, 26
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                           IsIgnored  : False
                           IterAfter  : [6, 1] (26)
                           IterBefore : [5, 6] (25)
                           Token      : Newline+
                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                        End   : 26
                                        Start : 25
                           Whitespace : None
                Phrase   : Newline+
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [5, 6] (25)
                                                        IterBefore : [5, 1] (20)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(20, 25), match='worde'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                           IsComplete : False
                Phrase   : Sequence: [Word Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [3, 6] (13)
                                                                          IterBefore : [3, 1] (8)
                                                                          Token      : Word Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                                                                          Whitespace : None
                                                               Phrase   : Word Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [4, 1] (14)
                                                                          IterBefore : [3, 6] (13)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 14
                                                                                       Start : 13
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [4, 6] (19)
                                                                          IterBefore : [4, 1] (14)
                                                                          Token      : Word Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(14, 19), match='wordd'>
                                                                          Whitespace : None
                                                               Phrase   : Word Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [5, 1] (20)
                                                                          IterBefore : [4, 6] (19)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 20
                                                                                       Start : 19
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            65) EndPhrase, "Newline+" [True], "Sequence: [Word Token, Newline+]" [None], "Repeat: {Sequence: [Word Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            66) OnInternalPhraseAsync, 20, 26
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [5, 6] (25)
                                                        IterBefore : [5, 1] (20)
                                                        Token      : Word Token
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                     Match : <_sre.SRE_Match object; span=(20, 25), match='worde'>
                                                        Whitespace : None
                                             Phrase   : Word Token
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                        IsIgnored  : False
                                                        IterAfter  : [6, 1] (26)
                                                        IterBefore : [5, 6] (25)
                                                        Token      : Newline+
                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                     End   : 26
                                                                     Start : 25
                                                        Whitespace : None
                                             Phrase   : Newline+
                           IsComplete : True
                Phrase   : Sequence: [Word Token, Newline+]
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [3, 6] (13)
                                                                          IterBefore : [3, 1] (8)
                                                                          Token      : Word Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                                                                          Whitespace : None
                                                               Phrase   : Word Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [4, 1] (14)
                                                                          IterBefore : [3, 6] (13)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 14
                                                                                       Start : 13
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [4, 6] (19)
                                                                          IterBefore : [4, 1] (14)
                                                                          Token      : Word Token
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                       Match : <_sre.SRE_Match object; span=(14, 19), match='wordd'>
                                                                          Whitespace : None
                                                               Phrase   : Word Token
                                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                          IsIgnored  : False
                                                                          IterAfter  : [5, 1] (20)
                                                                          IterBefore : [4, 6] (19)
                                                                          Token      : Newline+
                                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                       End   : 20
                                                                                       Start : 19
                                                                          Whitespace : None
                                                               Phrase   : Newline+
                                             IsComplete : True
                           IsComplete : False
                Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            67) EndPhrase, "Sequence: [Word Token, Newline+]" [True], "Repeat: {Sequence: [Word Token, Newline+], 1, None}" [None], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            68) OnInternalPhraseAsync, 8, 26
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [3, 6] (13)
                                                                                     IterBefore : [3, 1] (8)
                                                                                     Token      : Word Token
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                                                                                     Whitespace : None
                                                                          Phrase   : Word Token
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [4, 1] (14)
                                                                                     IterBefore : [3, 6] (13)
                                                                                     Token      : Newline+
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End   : 14
                                                                                                  Start : 13
                                                                                     Whitespace : None
                                                                          Phrase   : Newline+
                                                        IsComplete : True
                                             Phrase   : Sequence: [Word Token, Newline+]
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [4, 6] (19)
                                                                                     IterBefore : [4, 1] (14)
                                                                                     Token      : Word Token
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match : <_sre.SRE_Match object; span=(14, 19), match='wordd'>
                                                                                     Whitespace : None
                                                                          Phrase   : Word Token
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [5, 1] (20)
                                                                                     IterBefore : [4, 6] (19)
                                                                                     Token      : Newline+
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End   : 20
                                                                                                  Start : 19
                                                                                     Whitespace : None
                                                                          Phrase   : Newline+
                                                        IsComplete : True
                                             Phrase   : Sequence: [Word Token, Newline+]
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [5, 6] (25)
                                                                                     IterBefore : [5, 1] (20)
                                                                                     Token      : Word Token
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match : <_sre.SRE_Match object; span=(20, 25), match='worde'>
                                                                                     Whitespace : None
                                                                          Phrase   : Word Token
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                     IsIgnored  : False
                                                                                     IterAfter  : [6, 1] (26)
                                                                                     IterBefore : [5, 6] (25)
                                                                                     Token      : Newline+
                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End   : 26
                                                                                                  Start : 25
                                                                                     Whitespace : None
                                                                          Phrase   : Newline+
                                                        IsComplete : True
                                             Phrase   : Sequence: [Word Token, Newline+]
                           IsComplete : True
                Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                           IsComplete : False
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            69) EndPhrase, "Repeat: {Sequence: [Word Token, Newline+], 1, None}" [True], "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [None]
            70) OnInternalPhraseAsync, 0, 26
                <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [1, 3] (2)
                                                                                                                  IterBefore : [1, 1] (0)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 1] (3)
                                                                                                                  IterBefore : [1, 3] (2)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 3
                                                                                                                               Start : 2
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [2, 5] (7)
                                                                                                                  IterBefore : [2, 1] (3)
                                                                                                                  Token      : Number Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Number Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 1] (8)
                                                                                                                  IterBefore : [2, 5] (7)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 8
                                                                                                                               Start : 7
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Number Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : -- empty list --
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                                        3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [3, 6] (13)
                                                                                                                  IterBefore : [3, 1] (8)
                                                                                                                  Token      : Word Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(8, 13), match='wordc'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Word Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [4, 1] (14)
                                                                                                                  IterBefore : [3, 6] (13)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 14
                                                                                                                               Start : 13
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Word Token, Newline+]
                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [4, 6] (19)
                                                                                                                  IterBefore : [4, 1] (14)
                                                                                                                  Token      : Word Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(14, 19), match='wordd'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Word Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [5, 1] (20)
                                                                                                                  IterBefore : [4, 6] (19)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 20
                                                                                                                               Start : 19
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Word Token, Newline+]
                                                                     2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                     DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [5, 6] (25)
                                                                                                                  IterBefore : [5, 1] (20)
                                                                                                                  Token      : Word Token
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                               Match : <_sre.SRE_Match object; span=(20, 25), match='worde'>
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Word Token
                                                                                                  1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                       Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                  IsIgnored  : False
                                                                                                                  IterAfter  : [6, 1] (26)
                                                                                                                  IterBefore : [5, 6] (25)
                                                                                                                  Token      : Newline+
                                                                                                                  Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                               End   : 26
                                                                                                                               Start : 25
                                                                                                                  Whitespace : None
                                                                                                       Phrase   : Newline+
                                                                                     IsComplete : True
                                                                          Phrase   : Sequence: [Word Token, Newline+]
                                                        IsComplete : True
                                             Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                           IsComplete : True
                Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            71) EndPhrase, "Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]" [True]
            """,
        )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NoMatch1(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    worda
                    wordb
                    UPPER
                    wordc
                    wordd
                    worde
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [1, 6] (5)
                                                                                                                        IterBefore : [1, 1] (0)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 1] (6)
                                                                                                                        IterBefore : [1, 6] (5)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 6
                                                                                                                                     Start : 5
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 6] (11)
                                                                                                                        IterBefore : [2, 1] (6)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(6, 11), match='wordb'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 1] (12)
                                                                                                                        IterBefore : [2, 6] (11)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 12
                                                                                                                                     Start : 11
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : None
                                                                                                             Phrase   : Number Token
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                 IsComplete : True
                      Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            Iter    : [3, 1] (12)
            Success : False
            """,
        )

        assert len(parse_mock.method_calls) == 33

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NoMatch2(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    12
                    3456
                    UPPER
                    999
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : -- empty list --
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Word Token, Newline+], 0, None}
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [1, 3] (2)
                                                                                                                        IterBefore : [1, 1] (0)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(0, 2), match='12'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 1] (3)
                                                                                                                        IterBefore : [1, 3] (2)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 3
                                                                                                                                     Start : 2
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 5] (7)
                                                                                                                        IterBefore : [2, 1] (3)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(3, 7), match='3456'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 1] (8)
                                                                                                                        IterBefore : [2, 5] (7)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 8
                                                                                                                                     Start : 7
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Number Token, Newline+], 1, None}
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 6] (13)
                                                                                                                        IterBefore : [3, 1] (8)
                                                                                                                        Token      : Upper Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(8, 13), match='UPPER'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Upper Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 1] (14)
                                                                                                                        IterBefore : [3, 6] (13)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 14
                                                                                                                                     Start : 13
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Upper Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Upper Token, Newline+], 0, 1}
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : None
                                                                                                             Phrase   : Word Token
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Sequence: [Word Token, Newline+], 1, None}
                                 IsComplete : True
                      Phrase   : Sequence: [Repeat: {Sequence: [Word Token, Newline+], 0, None}, Repeat: {Sequence: [Number Token, Newline+], 1, None}, Repeat: {Sequence: [Upper Token, Newline+], 0, 1}, Repeat: {Sequence: [Word Token, Newline+], 1, None}]
            Iter    : [4, 1] (14)
            Success : False
            """,
        )

        assert len(parse_mock.method_calls) == 52

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_EarlyTermination(self, parse_mock):
        parse_mock.OnInternalPhraseAsync = CoroutineMock(
            side_effect=[True, True, True, True, False],
        )

        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    worda
                    wordb
                    12
                    3456
                    wordc
                    wordd
                    worde
                    """,
                ),
            ),
            parse_mock,
        )

        assert result is None

# ----------------------------------------------------------------------
class TestRepeatSimilarPhrases(object):
    # Ensure that the first phrase doesn't eat the word so that it isn't available to the
    # second phrase.
    _phrase                                 = CreatePhrase(
        item=[
            PhraseItem(
                name="Word & Number",
                item=[_word_token, _number_token],
                arity="*",
            ),
            PhraseItem(
                item=_word_token,
                arity="?",
            ),
        ],
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_LargeMatch(self, parse_mock):
        result = await self._phrase.ParseAsync(["root"], CreateIterator("word 123"), parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [1, 5] (4)
                                                                                                                        IterBefore : [1, 1] (0)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(0, 4), match='word'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [1, 9] (8)
                                                                                                                        IterBefore : [1, 6] (5)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(5, 8), match='123'>
                                                                                                                        Whitespace : 0)   4
                                                                                                                                     1)   5
                                                                                                             Phrase   : Number Token
                                                                                           IsComplete : True
                                                                                Phrase   : Word & Number
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Word & Number, 0, None}
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : -- empty list --
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Word Token, 0, 1}
                                 IsComplete : True
                      Phrase   : Sequence: [Repeat: {Word & Number, 0, None}, Repeat: {Word Token, 0, 1}]
            Iter    : [1, 9] (8)
            Success : True
            """,
        )

        # assert result.Iter.AtEnd()

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_SmallMatch(self, parse_mock):
        result = await self._phrase.ParseAsync(["root"], CreateIterator("word"), parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : -- empty list --
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Word & Number, 0, None}
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [1, 5] (4)
                                                                                           IterBefore : [1, 1] (0)
                                                                                           Token      : Word Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(0, 4), match='word'>
                                                                                           Whitespace : None
                                                                                Phrase   : Word Token
                                                              IsComplete : True
                                                   Phrase   : Repeat: {Word Token, 0, 1}
                                 IsComplete : True
                      Phrase   : Sequence: [Repeat: {Word & Number, 0, None}, Repeat: {Word Token, 0, 1}]
            Iter    : [1, 5] (4)
            Success : True
            """,
        )

        # assert result.Iter.AtEnd()

# ----------------------------------------------------------------------
class TestNamedPhrases(object):
    _word_line_phrase                       = CreatePhrase(
        name="Word Line",
        item=[_word_token, NewlineToken()],
    )

    _phrase                                 = CreatePhrase(
        name="__Phrase__",
        item=[
            PhraseItem(name="__Dynamic__", item=DynamicPhrasesType.Statements),
            PhraseItem(
                name="__Or__",
                item=(
                    _word_line_phrase,
                    PhraseItem(name="Upper Line", item=[_upper_token, NewlineToken()]),
                ),
            ),
            PhraseItem(name="__Repeat__", item=[_number_token, NewlineToken()], arity=(2, 2)),
        ],
    )

    # ----------------------------------------------------------------------
    @pytest.fixture
    def modified_parse_mock(self, parse_mock):
        parse_mock.GetDynamicPhrases.side_effect = lambda unique_id, value: [self._word_line_phrase]

        return parse_mock

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Match(self, modified_parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    worda
                    WORDB
                    123
                    456
                    """,
                ),
            ),
            modified_parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                         Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                    DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [1, 6] (5)
                                                                                                                 IterBefore : [1, 1] (0)
                                                                                                                 Token      : Word Token
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                              Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Word Token
                                                                                                 1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [2, 1] (6)
                                                                                                                 IterBefore : [1, 6] (5)
                                                                                                                 Token      : Newline+
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                              End   : 6
                                                                                                                              Start : 5
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Newline+
                                                                                    IsComplete : True
                                                                         Phrase   : Word Line
                                                              Phrase   : Or: (Word Line)
                                                   Phrase   : __Dynamic__
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                         DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                      IsIgnored  : False
                                                                                                      IterAfter  : [2, 6] (11)
                                                                                                      IterBefore : [2, 1] (6)
                                                                                                      Token      : Upper Token
                                                                                                      Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                   Match : <_sre.SRE_Match object; span=(6, 11), match='WORDB'>
                                                                                                      Whitespace : None
                                                                                           Phrase   : Upper Token
                                                                                      1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                      IsIgnored  : False
                                                                                                      IterAfter  : [3, 1] (12)
                                                                                                      IterBefore : [2, 6] (11)
                                                                                                      Token      : Newline+
                                                                                                      Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                   End   : 12
                                                                                                                   Start : 11
                                                                                                      Whitespace : None
                                                                                           Phrase   : Newline+
                                                                         IsComplete : True
                                                              Phrase   : Upper Line
                                                   Phrase   : __Or__
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 4] (15)
                                                                                                                        IterBefore : [3, 1] (12)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 1] (16)
                                                                                                                        IterBefore : [3, 4] (15)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 16
                                                                                                                                     Start : 15
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : __Repeat__
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 4] (19)
                                                                                                                        IterBefore : [4, 1] (16)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(16, 19), match='456'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [5, 1] (20)
                                                                                                                        IterBefore : [4, 4] (19)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 20
                                                                                                                                     Start : 19
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : __Repeat__
                                                              IsComplete : True
                                                   Phrase   : Repeat: {__Repeat__, 2, 2}
                                 IsComplete : True
                      Phrase   : __Phrase__
            Iter    : [5, 1] (20)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NoMatch(self, modified_parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    worda
                    WORDB
                    123
                    """,
                ),
            ),
            modified_parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                         Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                    DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [1, 6] (5)
                                                                                                                 IterBefore : [1, 1] (0)
                                                                                                                 Token      : Word Token
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                              Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Word Token
                                                                                                 1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [2, 1] (6)
                                                                                                                 IterBefore : [1, 6] (5)
                                                                                                                 Token      : Newline+
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                              End   : 6
                                                                                                                              Start : 5
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Newline+
                                                                                    IsComplete : True
                                                                         Phrase   : Word Line
                                                              Phrase   : Or: (Word Line)
                                                   Phrase   : __Dynamic__
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                         DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                      IsIgnored  : False
                                                                                                      IterAfter  : [2, 6] (11)
                                                                                                      IterBefore : [2, 1] (6)
                                                                                                      Token      : Upper Token
                                                                                                      Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                   Match : <_sre.SRE_Match object; span=(6, 11), match='WORDB'>
                                                                                                      Whitespace : None
                                                                                           Phrase   : Upper Token
                                                                                      1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                      IsIgnored  : False
                                                                                                      IterAfter  : [3, 1] (12)
                                                                                                      IterBefore : [2, 6] (11)
                                                                                                      Token      : Newline+
                                                                                                      Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                   End   : 12
                                                                                                                   Start : 11
                                                                                                      Whitespace : None
                                                                                           Phrase   : Newline+
                                                                         IsComplete : True
                                                              Phrase   : Upper Line
                                                   Phrase   : __Or__
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 4] (15)
                                                                                                                        IterBefore : [3, 1] (12)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(12, 15), match='123'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 1] (16)
                                                                                                                        IterBefore : [3, 4] (15)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 16
                                                                                                                                     Start : 15
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : __Repeat__
                                                              IsComplete : True
                                                   Phrase   : Repeat: {__Repeat__, 2, 2}
                                 IsComplete : True
                      Phrase   : __Phrase__
            Iter    : [4, 1] (16)
            Success : False
            """,
        )

# ----------------------------------------------------------------------
class TestComments(object):
    _multiline_phrase                       = CreatePhrase(
        PhraseItem(
            name="Multiline",
            item=[
                [_word_token, NewlineToken()],
                [_upper_token, NewlineToken()],
                [_number_token, NewlineToken()],
            ],
            arity="+",
        ),
    )

    _indent_phrase                          = CreatePhrase(
        name="Indent",
        item=[
            _word_token,
            RegexToken("Colon", re.compile(r":")),
            NewlineToken(),
            IndentToken(),
            [_upper_token, NewlineToken()],
            [_number_token, NewlineToken()],
            DedentToken(),
        ],
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Multiline(self, parse_mock):
        result = await self._multiline_phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    one # Comment 1
                    TWO
                    3
                    four
                    FIVE                    # Comment 5
                    66
                    seven
                    EIGHT
                    999     # Comment 9
                    ten      # Comment 10
                    ELEVEN   # Comment 11
                    12       # Comment 12
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [1, 4] (3)
                                                                                                                        IterBefore : [1, 1] (0)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                             IsIgnored  : True
                                                                                                             IterAfter  : [1, 16] (15)
                                                                                                             IterBefore : [1, 5] (4)
                                                                                                             Token      : Comment
                                                                                                             Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match : <_sre.SRE_Match object; span=(4, 15), match='# Comment 1'>
                                                                                                             Whitespace : 0)   3
                                                                                                                          1)   4
                                                                                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 1] (16)
                                                                                                                        IterBefore : [1, 16] (15)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 16
                                                                                                                                     Start : 15
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 4] (19)
                                                                                                                        IterBefore : [2, 1] (16)
                                                                                                                        Token      : Upper Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(16, 19), match='TWO'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Upper Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 1] (20)
                                                                                                                        IterBefore : [2, 4] (19)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 20
                                                                                                                                     Start : 19
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Upper Token, Newline+]
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [3, 2] (21)
                                                                                                                        IterBefore : [3, 1] (20)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(20, 21), match='3'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 1] (22)
                                                                                                                        IterBefore : [3, 2] (21)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 22
                                                                                                                                     Start : 21
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Multiline
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 5] (26)
                                                                                                                        IterBefore : [4, 1] (22)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(22, 26), match='four'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [5, 1] (27)
                                                                                                                        IterBefore : [4, 5] (26)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 27
                                                                                                                                     Start : 26
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [5, 5] (31)
                                                                                                                        IterBefore : [5, 1] (27)
                                                                                                                        Token      : Upper Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(27, 31), match='FIVE'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Upper Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                             IsIgnored  : True
                                                                                                             IterAfter  : [5, 36] (62)
                                                                                                             IterBefore : [5, 25] (51)
                                                                                                             Token      : Comment
                                                                                                             Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match : <_sre.SRE_Match object; span=(51, 62), match='# Comment 5'>
                                                                                                             Whitespace : 0)   31
                                                                                                                          1)   51
                                                                                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [6, 1] (63)
                                                                                                                        IterBefore : [5, 36] (62)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 63
                                                                                                                                     Start : 62
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Upper Token, Newline+]
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [6, 3] (65)
                                                                                                                        IterBefore : [6, 1] (63)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(63, 65), match='66'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [7, 1] (66)
                                                                                                                        IterBefore : [6, 3] (65)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 66
                                                                                                                                     Start : 65
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Multiline
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [7, 6] (71)
                                                                                                                        IterBefore : [7, 1] (66)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(66, 71), match='seven'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [8, 1] (72)
                                                                                                                        IterBefore : [7, 6] (71)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 72
                                                                                                                                     Start : 71
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [8, 6] (77)
                                                                                                                        IterBefore : [8, 1] (72)
                                                                                                                        Token      : Upper Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(72, 77), match='EIGHT'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Upper Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [9, 1] (78)
                                                                                                                        IterBefore : [8, 6] (77)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 78
                                                                                                                                     Start : 77
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Upper Token, Newline+]
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [9, 4] (81)
                                                                                                                        IterBefore : [9, 1] (78)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(78, 81), match='999'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                             IsIgnored  : True
                                                                                                             IterAfter  : [9, 20] (97)
                                                                                                             IterBefore : [9, 9] (86)
                                                                                                             Token      : Comment
                                                                                                             Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match : <_sre.SRE_Match object; span=(86, 97), match='# Comment 9'>
                                                                                                             Whitespace : 0)   81
                                                                                                                          1)   86
                                                                                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [10, 1] (98)
                                                                                                                        IterBefore : [9, 20] (97)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 98
                                                                                                                                     Start : 97
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Multiline
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [10, 4] (101)
                                                                                                                        IterBefore : [10, 1] (98)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(98, 101), match='ten'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                             IsIgnored  : True
                                                                                                             IterAfter  : [10, 22] (119)
                                                                                                             IterBefore : [10, 10] (107)
                                                                                                             Token      : Comment
                                                                                                             Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match : <_sre.SRE_Match object; span=(107, 119), match='# Comment 10'>
                                                                                                             Whitespace : 0)   101
                                                                                                                          1)   107
                                                                                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [11, 1] (120)
                                                                                                                        IterBefore : [10, 22] (119)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 120
                                                                                                                                     Start : 119
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [11, 7] (126)
                                                                                                                        IterBefore : [11, 1] (120)
                                                                                                                        Token      : Upper Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(120, 126), match='ELEVEN'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Upper Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                             IsIgnored  : True
                                                                                                             IterAfter  : [11, 22] (141)
                                                                                                             IterBefore : [11, 10] (129)
                                                                                                             Token      : Comment
                                                                                                             Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match : <_sre.SRE_Match object; span=(129, 141), match='# Comment 11'>
                                                                                                             Whitespace : 0)   126
                                                                                                                          1)   129
                                                                                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [12, 1] (142)
                                                                                                                        IterBefore : [11, 22] (141)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 142
                                                                                                                                     Start : 141
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Upper Token, Newline+]
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [12, 3] (144)
                                                                                                                        IterBefore : [12, 1] (142)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(142, 144), match='12'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                             IsIgnored  : True
                                                                                                             IterAfter  : [12, 22] (163)
                                                                                                             IterBefore : [12, 10] (151)
                                                                                                             Token      : Comment
                                                                                                             Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match : <_sre.SRE_Match object; span=(151, 163), match='# Comment 12'>
                                                                                                             Whitespace : 0)   144
                                                                                                                          1)   151
                                                                                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [13, 1] (164)
                                                                                                                        IterBefore : [12, 22] (163)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 164
                                                                                                                                     Start : 163
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Multiline
                                 IsComplete : True
                      Phrase   : Repeat: {Multiline, 1, None}
            Iter    : [13, 1] (164)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Indent(self, parse_mock):
        iterator = CreateIterator(
            textwrap.dedent(
                """\
                one:  # Comment 1
                    TWO
                    3
                four:
                    FIVE # Comment 5
                    66
                seven:
                    EIGHT
                    999                     # Comment 9
                ten:            # Comment 10
                    ELEVEN      # Comment 11
                    12          # Comment 12
                """,
            ),
        )

        # 1-3
        result = await self._indent_phrase.ParseAsync(["root"], iterator, parse_mock)
        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 4] (3)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 3), match='one'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 5] (4)
                                                              IterBefore : [1, 4] (3)
                                                              Token      : Colon
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(3, 4), match=':'>
                                                              Whitespace : None
                                                   Phrase   : Colon
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [1, 18] (17)
                                                   IterBefore : [1, 7] (6)
                                                   Token      : Comment
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                Match : <_sre.SRE_Match object; span=(6, 17), match='# Comment 1'>
                                                   Whitespace : 0)   4
                                                                1)   6
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 1] (18)
                                                              IterBefore : [1, 18] (17)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 18
                                                                           Start : 17
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                              4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [2, 5] (22)
                                                              IterBefore : [2, 1] (18)
                                                              Token      : Indent
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                           End   : 22
                                                                           Start : 18
                                                                           Value : 4
                                                              Whitespace : None
                                                   Phrase   : Indent
                                              5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [2, 8] (25)
                                                                                           IterBefore : [2, 5] (22)
                                                                                           Token      : Upper Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(22, 25), match='TWO'>
                                                                                           Whitespace : None
                                                                                Phrase   : Upper Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [3, 1] (26)
                                                                                           IterBefore : [2, 8] (25)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 26
                                                                                                        Start : 25
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Upper Token, Newline+]
                                              6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [3, 6] (31)
                                                                                           IterBefore : [3, 5] (30)
                                                                                           Token      : Number Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(30, 31), match='3'>
                                                                                           Whitespace : None
                                                                                Phrase   : Number Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [4, 1] (32)
                                                                                           IterBefore : [3, 6] (31)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 32
                                                                                                        Start : 31
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Number Token, Newline+]
                                              7)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [4, 1] (32)
                                                              IterBefore : [4, 1] (32)
                                                              Token      : Dedent
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                           -- empty dict --
                                                              Whitespace : None
                                                   Phrase   : Dedent
                                 IsComplete : True
                      Phrase   : Indent
            Iter    : [4, 1] (32)
            Success : True
            """,
        )

        iterator = result.Iter

        # 4-6
        result = await self._indent_phrase.ParseAsync(["root"], iterator, parse_mock)
        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [4, 5] (36)
                                                              IterBefore : [4, 1] (32)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(32, 36), match='four'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [4, 6] (37)
                                                              IterBefore : [4, 5] (36)
                                                              Token      : Colon
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(36, 37), match=':'>
                                                              Whitespace : None
                                                   Phrase   : Colon
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [5, 1] (38)
                                                              IterBefore : [4, 6] (37)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 38
                                                                           Start : 37
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [5, 5] (42)
                                                              IterBefore : [5, 1] (38)
                                                              Token      : Indent
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                           End   : 42
                                                                           Start : 38
                                                                           Value : 4
                                                              Whitespace : None
                                                   Phrase   : Indent
                                              4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [5, 9] (46)
                                                                                           IterBefore : [5, 5] (42)
                                                                                           Token      : Upper Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(42, 46), match='FIVE'>
                                                                                           Whitespace : None
                                                                                Phrase   : Upper Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                IsIgnored  : True
                                                                                IterAfter  : [5, 21] (58)
                                                                                IterBefore : [5, 10] (47)
                                                                                Token      : Comment
                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                             Match : <_sre.SRE_Match object; span=(47, 58), match='# Comment 5'>
                                                                                Whitespace : 0)   46
                                                                                             1)   47
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [6, 1] (59)
                                                                                           IterBefore : [5, 21] (58)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 59
                                                                                                        Start : 58
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Upper Token, Newline+]
                                              5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [6, 7] (65)
                                                                                           IterBefore : [6, 5] (63)
                                                                                           Token      : Number Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(63, 65), match='66'>
                                                                                           Whitespace : None
                                                                                Phrase   : Number Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [7, 1] (66)
                                                                                           IterBefore : [6, 7] (65)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 66
                                                                                                        Start : 65
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Number Token, Newline+]
                                              6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [7, 1] (66)
                                                              IterBefore : [7, 1] (66)
                                                              Token      : Dedent
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                           -- empty dict --
                                                              Whitespace : None
                                                   Phrase   : Dedent
                                 IsComplete : True
                      Phrase   : Indent
            Iter    : [7, 1] (66)
            Success : True
            """,
        )

        iterator = result.Iter

        # 7-9
        result = await self._indent_phrase.ParseAsync(["root"], iterator, parse_mock)
        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [7, 6] (71)
                                                              IterBefore : [7, 1] (66)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(66, 71), match='seven'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [7, 7] (72)
                                                              IterBefore : [7, 6] (71)
                                                              Token      : Colon
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(71, 72), match=':'>
                                                              Whitespace : None
                                                   Phrase   : Colon
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [8, 1] (73)
                                                              IterBefore : [7, 7] (72)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 73
                                                                           Start : 72
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [8, 5] (77)
                                                              IterBefore : [8, 1] (73)
                                                              Token      : Indent
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                           End   : 77
                                                                           Start : 73
                                                                           Value : 4
                                                              Whitespace : None
                                                   Phrase   : Indent
                                              4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [8, 10] (82)
                                                                                           IterBefore : [8, 5] (77)
                                                                                           Token      : Upper Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(77, 82), match='EIGHT'>
                                                                                           Whitespace : None
                                                                                Phrase   : Upper Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [9, 1] (83)
                                                                                           IterBefore : [8, 10] (82)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 83
                                                                                                        Start : 82
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Upper Token, Newline+]
                                              5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [9, 8] (90)
                                                                                           IterBefore : [9, 5] (87)
                                                                                           Token      : Number Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(87, 90), match='999'>
                                                                                           Whitespace : None
                                                                                Phrase   : Number Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                IsIgnored  : True
                                                                                IterAfter  : [9, 40] (122)
                                                                                IterBefore : [9, 29] (111)
                                                                                Token      : Comment
                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                             Match : <_sre.SRE_Match object; span=(111, 122), match='# Comment 9'>
                                                                                Whitespace : 0)   90
                                                                                             1)   111
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [10, 1] (123)
                                                                                           IterBefore : [9, 40] (122)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 123
                                                                                                        Start : 122
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Number Token, Newline+]
                                              6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [10, 1] (123)
                                                              IterBefore : [10, 1] (123)
                                                              Token      : Dedent
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                           -- empty dict --
                                                              Whitespace : None
                                                   Phrase   : Dedent
                                 IsComplete : True
                      Phrase   : Indent
            Iter    : [10, 1] (123)
            Success : True
            """,
        )

        iterator = result.Iter

        # 10-12
        result = await self._indent_phrase.ParseAsync(["root"], iterator, parse_mock)
        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [10, 4] (126)
                                                              IterBefore : [10, 1] (123)
                                                              Token      : Word Token
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(123, 126), match='ten'>
                                                              Whitespace : None
                                                   Phrase   : Word Token
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [10, 5] (127)
                                                              IterBefore : [10, 4] (126)
                                                              Token      : Colon
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(126, 127), match=':'>
                                                              Whitespace : None
                                                   Phrase   : Colon
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                   IsIgnored  : True
                                                   IterAfter  : [10, 29] (151)
                                                   IterBefore : [10, 17] (139)
                                                   Token      : Comment
                                                   Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                Match : <_sre.SRE_Match object; span=(139, 151), match='# Comment 10'>
                                                   Whitespace : 0)   127
                                                                1)   139
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [11, 1] (152)
                                                              IterBefore : [10, 29] (151)
                                                              Token      : Newline+
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                           End   : 152
                                                                           Start : 151
                                                              Whitespace : None
                                                   Phrase   : Newline+
                                              4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [11, 5] (156)
                                                              IterBefore : [11, 1] (152)
                                                              Token      : Indent
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                           End   : 156
                                                                           Start : 152
                                                                           Value : 4
                                                              Whitespace : None
                                                   Phrase   : Indent
                                              5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [11, 11] (162)
                                                                                           IterBefore : [11, 5] (156)
                                                                                           Token      : Upper Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(156, 162), match='ELEVEN'>
                                                                                           Whitespace : None
                                                                                Phrase   : Upper Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                IsIgnored  : True
                                                                                IterAfter  : [11, 29] (180)
                                                                                IterBefore : [11, 17] (168)
                                                                                Token      : Comment
                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                             Match : <_sre.SRE_Match object; span=(168, 180), match='# Comment 11'>
                                                                                Whitespace : 0)   162
                                                                                             1)   168
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [12, 1] (181)
                                                                                           IterBefore : [11, 29] (180)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 181
                                                                                                        Start : 180
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Upper Token, Newline+]
                                              6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [12, 7] (187)
                                                                                           IterBefore : [12, 5] (185)
                                                                                           Token      : Number Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(185, 187), match='12'>
                                                                                           Whitespace : None
                                                                                Phrase   : Number Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                IsIgnored  : True
                                                                                IterAfter  : [12, 29] (209)
                                                                                IterBefore : [12, 17] (197)
                                                                                Token      : Comment
                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                             Match : <_sre.SRE_Match object; span=(197, 209), match='# Comment 12'>
                                                                                Whitespace : 0)   187
                                                                                             1)   197
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [13, 1] (210)
                                                                                           IterBefore : [12, 29] (209)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 210
                                                                                                        Start : 209
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Number Token, Newline+]
                                              7)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [13, 1] (210)
                                                              IterBefore : [13, 1] (210)
                                                              Token      : Dedent
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                           -- empty dict --
                                                              Whitespace : None
                                                   Phrase   : Dedent
                                 IsComplete : True
                      Phrase   : Indent
            Iter    : [13, 1] (210)
            Success : True
            """,
        )

        iterator = result.Iter

        assert result.Iter.AtEnd()

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_StandAlone(self, parse_mock):
        result = await self._multiline_phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    # one
                    one     # After one

                    # TWO

                    TWO     # After TWO

                            # 3
                    3       # After 3
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                IsIgnored  : True
                                                                                IterAfter  : [1, 6] (5)
                                                                                IterBefore : [1, 1] (0)
                                                                                Token      : Comment
                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                             Match : <_sre.SRE_Match object; span=(0, 5), match='# one'>
                                                                                Whitespace : None
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                IsIgnored  : True
                                                                                IterAfter  : [2, 1] (6)
                                                                                IterBefore : [1, 6] (5)
                                                                                Token      : Newline+
                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                             End   : 6
                                                                                             Start : 5
                                                                                Whitespace : None
                                                                           2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [2, 4] (9)
                                                                                                                        IterBefore : [2, 1] (6)
                                                                                                                        Token      : Word Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(6, 9), match='one'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Word Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                             IsIgnored  : True
                                                                                                             IterAfter  : [2, 20] (25)
                                                                                                             IterBefore : [2, 9] (14)
                                                                                                             Token      : Comment
                                                                                                             Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match : <_sre.SRE_Match object; span=(14, 25), match='# After one'>
                                                                                                             Whitespace : 0)   9
                                                                                                                          1)   14
                                                                                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [4, 1] (27)
                                                                                                                        IterBefore : [2, 20] (25)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 27
                                                                                                                                     Start : 25
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Word Token, Newline+]
                                                                           3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                IsIgnored  : True
                                                                                IterAfter  : [4, 6] (32)
                                                                                IterBefore : [4, 1] (27)
                                                                                Token      : Comment
                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                             Match : <_sre.SRE_Match object; span=(27, 32), match='# TWO'>
                                                                                Whitespace : None
                                                                           4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                IsIgnored  : True
                                                                                IterAfter  : [6, 1] (34)
                                                                                IterBefore : [4, 6] (32)
                                                                                Token      : Newline+
                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                             End   : 34
                                                                                             Start : 32
                                                                                Whitespace : None
                                                                           5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [6, 4] (37)
                                                                                                                        IterBefore : [6, 1] (34)
                                                                                                                        Token      : Upper Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(34, 37), match='TWO'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Upper Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                             IsIgnored  : True
                                                                                                             IterAfter  : [6, 20] (53)
                                                                                                             IterBefore : [6, 9] (42)
                                                                                                             Token      : Comment
                                                                                                             Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match : <_sre.SRE_Match object; span=(42, 53), match='# After TWO'>
                                                                                                             Whitespace : 0)   37
                                                                                                                          1)   42
                                                                                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [8, 1] (55)
                                                                                                                        IterBefore : [6, 20] (53)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 55
                                                                                                                                     Start : 53
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Upper Token, Newline+]
                                                                           6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                IsIgnored  : True
                                                                                IterAfter  : [8, 12] (66)
                                                                                IterBefore : [8, 9] (63)
                                                                                Token      : Comment
                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                             Match : <_sre.SRE_Match object; span=(63, 66), match='# 3'>
                                                                                Whitespace : 0)   55
                                                                                             1)   63
                                                                           7)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                IsIgnored  : True
                                                                                IterAfter  : [9, 1] (67)
                                                                                IterBefore : [8, 12] (66)
                                                                                Token      : Newline+
                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                             End   : 67
                                                                                             Start : 66
                                                                                Whitespace : None
                                                                           8)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [9, 2] (68)
                                                                                                                        IterBefore : [9, 1] (67)
                                                                                                                        Token      : Number Token
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                     Match : <_sre.SRE_Match object; span=(67, 68), match='3'>
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Number Token
                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                             IsIgnored  : True
                                                                                                             IterAfter  : [9, 18] (84)
                                                                                                             IterBefore : [9, 9] (75)
                                                                                                             Token      : Comment
                                                                                                             Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match : <_sre.SRE_Match object; span=(75, 84), match='# After 3'>
                                                                                                             Whitespace : 0)   68
                                                                                                                          1)   75
                                                                                                        2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                        IsIgnored  : False
                                                                                                                        IterAfter  : [10, 1] (85)
                                                                                                                        IterBefore : [9, 18] (84)
                                                                                                                        Token      : Newline+
                                                                                                                        Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                     End   : 85
                                                                                                                                     Start : 84
                                                                                                                        Whitespace : None
                                                                                                             Phrase   : Newline+
                                                                                           IsComplete : True
                                                                                Phrase   : Sequence: [Number Token, Newline+]
                                                              IsComplete : True
                                                   Phrase   : Multiline
                                 IsComplete : True
                      Phrase   : Repeat: {Multiline, 1, None}
            Iter    : [10, 1] (85)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

# ----------------------------------------------------------------------
class TestRecursiveOrPhrases(object):
    _phrase                                 = CreatePhrase(
        name="Recursive Phrase",
        item=[
            _lpar_token,
            (_word_token, None),
            _rpar_token,
        ],
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_NoRecursion(self, parse_mock):
        result = await self._phrase.ParseAsync(["root"], CreateIterator("( hello )"), parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 2] (1)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : lpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                              Whitespace : None
                                                   Phrase   : lpar
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                         IsIgnored  : False
                                                                         IterAfter  : [1, 8] (7)
                                                                         IterBefore : [1, 3] (2)
                                                                         Token      : Word Token
                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                      Match : <_sre.SRE_Match object; span=(2, 7), match='hello'>
                                                                         Whitespace : 0)   1
                                                                                      1)   2
                                                              Phrase   : Word Token
                                                   Phrase   : Or: (Word Token, Recursive Phrase)
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 10] (9)
                                                              IterBefore : [1, 9] (8)
                                                              Token      : rpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(8, 9), match=')'>
                                                              Whitespace : 0)   7
                                                                           1)   8
                                                   Phrase   : rpar
                                 IsComplete : True
                      Phrase   : Recursive Phrase
            Iter    : [1, 10] (9)
            Success : True
            """,
        )

        # assert result.Iter.AtEnd()

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_SingleRecursion(self, parse_mock):
        result = await self._phrase.ParseAsync(["root"], CreateIterator("((hello))"), parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 2] (1)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : lpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                              Whitespace : None
                                                   Phrase   : lpar
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                         DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                      IsIgnored  : False
                                                                                                      IterAfter  : [1, 3] (2)
                                                                                                      IterBefore : [1, 2] (1)
                                                                                                      Token      : lpar
                                                                                                      Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                   Match : <_sre.SRE_Match object; span=(1, 2), match='('>
                                                                                                      Whitespace : None
                                                                                           Phrase   : lpar
                                                                                      1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                 IsIgnored  : False
                                                                                                                 IterAfter  : [1, 8] (7)
                                                                                                                 IterBefore : [1, 3] (2)
                                                                                                                 Token      : Word Token
                                                                                                                 Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                              Match : <_sre.SRE_Match object; span=(2, 7), match='hello'>
                                                                                                                 Whitespace : None
                                                                                                      Phrase   : Word Token
                                                                                           Phrase   : Or: (Word Token, Recursive Phrase)
                                                                                      2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                      IsIgnored  : False
                                                                                                      IterAfter  : [1, 9] (8)
                                                                                                      IterBefore : [1, 8] (7)
                                                                                                      Token      : rpar
                                                                                                      Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                   Match : <_sre.SRE_Match object; span=(7, 8), match=')'>
                                                                                                      Whitespace : None
                                                                                           Phrase   : rpar
                                                                         IsComplete : True
                                                              Phrase   : Recursive Phrase
                                                   Phrase   : Or: (Word Token, Recursive Phrase)
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 10] (9)
                                                              IterBefore : [1, 9] (8)
                                                              Token      : rpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(8, 9), match=')'>
                                                              Whitespace : None
                                                   Phrase   : rpar
                                 IsComplete : True
                      Phrase   : Recursive Phrase
            Iter    : [1, 10] (9)
            Success : True
            """,
        )

        # assert result.Iter.AtEnd()

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_DoubleRecursion(self, parse_mock):
        result = await self._phrase.ParseAsync(["root"], CreateIterator("( ( ( hello)))"), parse_mock)

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 2] (1)
                                                              IterBefore : [1, 1] (0)
                                                              Token      : lpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(0, 1), match='('>
                                                              Whitespace : None
                                                   Phrase   : lpar
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                         DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                      IsIgnored  : False
                                                                                                      IterAfter  : [1, 4] (3)
                                                                                                      IterBefore : [1, 3] (2)
                                                                                                      Token      : lpar
                                                                                                      Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                   Match : <_sre.SRE_Match object; span=(2, 3), match='('>
                                                                                                      Whitespace : 0)   1
                                                                                                                   1)   2
                                                                                           Phrase   : lpar
                                                                                      1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                              IsIgnored  : False
                                                                                                                                              IterAfter  : [1, 6] (5)
                                                                                                                                              IterBefore : [1, 5] (4)
                                                                                                                                              Token      : lpar
                                                                                                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                           Match : <_sre.SRE_Match object; span=(4, 5), match='('>
                                                                                                                                              Whitespace : 0)   3
                                                                                                                                                           1)   4
                                                                                                                                   Phrase   : lpar
                                                                                                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                         IsIgnored  : False
                                                                                                                                                         IterAfter  : [1, 12] (11)
                                                                                                                                                         IterBefore : [1, 7] (6)
                                                                                                                                                         Token      : Word Token
                                                                                                                                                         Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                                      Match : <_sre.SRE_Match object; span=(6, 11), match='hello'>
                                                                                                                                                         Whitespace : 0)   5
                                                                                                                                                                      1)   6
                                                                                                                                              Phrase   : Word Token
                                                                                                                                   Phrase   : Or: (Word Token, Recursive Phrase)
                                                                                                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                              IsIgnored  : False
                                                                                                                                              IterAfter  : [1, 13] (12)
                                                                                                                                              IterBefore : [1, 12] (11)
                                                                                                                                              Token      : rpar
                                                                                                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                           Match : <_sre.SRE_Match object; span=(11, 12), match=')'>
                                                                                                                                              Whitespace : None
                                                                                                                                   Phrase   : rpar
                                                                                                                 IsComplete : True
                                                                                                      Phrase   : Recursive Phrase
                                                                                           Phrase   : Or: (Word Token, Recursive Phrase)
                                                                                      2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                      IsIgnored  : False
                                                                                                      IterAfter  : [1, 14] (13)
                                                                                                      IterBefore : [1, 13] (12)
                                                                                                      Token      : rpar
                                                                                                      Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                   Match : <_sre.SRE_Match object; span=(12, 13), match=')'>
                                                                                                      Whitespace : None
                                                                                           Phrase   : rpar
                                                                         IsComplete : True
                                                              Phrase   : Recursive Phrase
                                                   Phrase   : Or: (Word Token, Recursive Phrase)
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                              IsIgnored  : False
                                                              IterAfter  : [1, 15] (14)
                                                              IterBefore : [1, 14] (13)
                                                              Token      : rpar
                                                              Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                           Match : <_sre.SRE_Match object; span=(13, 14), match=')'>
                                                              Whitespace : None
                                                   Phrase   : rpar
                                 IsComplete : True
                      Phrase   : Recursive Phrase
            Iter    : [1, 15] (14)
            Success : True
            """,
        )

        # assert result.Iter.AtEnd()

# ----------------------------------------------------------------------
class TestRecursiveRepeatPhrase(object):
    _phrase                                 = CreatePhrase(
        name="Recursive Phrase",
        item=[
            [_number_token, NewlineToken()],
            (
                PhraseItem(None, arity=(1, 2)),
                [_word_token, NewlineToken()]
            ),
        ],
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Match(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    123
                    456
                    789
                    helloa
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [1, 4] (3)
                                                                                           IterBefore : [1, 1] (0)
                                                                                           Token      : Number Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(0, 3), match='123'>
                                                                                           Whitespace : None
                                                                                Phrase   : Number Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [2, 1] (4)
                                                                                           IterBefore : [1, 4] (3)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 4
                                                                                                        Start : 3
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Number Token, Newline+]
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                         DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                      DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                                                   DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                     Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                IsIgnored  : False
                                                                                                                                                                IterAfter  : [2, 4] (7)
                                                                                                                                                                IterBefore : [2, 1] (4)
                                                                                                                                                                Token      : Number Token
                                                                                                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                                             Match : <_sre.SRE_Match object; span=(4, 7), match='456'>
                                                                                                                                                                Whitespace : None
                                                                                                                                                     Phrase   : Number Token
                                                                                                                                                1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                     Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                IsIgnored  : False
                                                                                                                                                                IterAfter  : [3, 1] (8)
                                                                                                                                                                IterBefore : [2, 4] (7)
                                                                                                                                                                Token      : Newline+
                                                                                                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                                                             End   : 8
                                                                                                                                                                             Start : 7
                                                                                                                                                                Whitespace : None
                                                                                                                                                     Phrase   : Newline+
                                                                                                                                   IsComplete : True
                                                                                                                        Phrase   : Sequence: [Number Token, Newline+]
                                                                                                                   1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                                                                                           DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                                                                                                                        DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                                                                                     IsIgnored  : False
                                                                                                                                                                                                                                     IterAfter  : [3, 4] (11)
                                                                                                                                                                                                                                     IterBefore : [3, 1] (8)
                                                                                                                                                                                                                                     Token      : Number Token
                                                                                                                                                                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                                                                                                                  Match : <_sre.SRE_Match object; span=(8, 11), match='789'>
                                                                                                                                                                                                                                     Whitespace : None
                                                                                                                                                                                                                          Phrase   : Number Token
                                                                                                                                                                                                                     1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                                                                          Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                                                                                     IsIgnored  : False
                                                                                                                                                                                                                                     IterAfter  : [4, 1] (12)
                                                                                                                                                                                                                                     IterBefore : [3, 4] (11)
                                                                                                                                                                                                                                     Token      : Newline+
                                                                                                                                                                                                                                     Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                                                                                                                                  End   : 12
                                                                                                                                                                                                                                                  Start : 11
                                                                                                                                                                                                                                     Whitespace : None
                                                                                                                                                                                                                          Phrase   : Newline+
                                                                                                                                                                                                        IsComplete : True
                                                                                                                                                                                             Phrase   : Sequence: [Number Token, Newline+]
                                                                                                                                                                                        1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                                             Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                                                                                                                                   DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                                                                                     Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                                                                                                IsIgnored  : False
                                                                                                                                                                                                                                                IterAfter  : [4, 7] (18)
                                                                                                                                                                                                                                                IterBefore : [4, 1] (12)
                                                                                                                                                                                                                                                Token      : Word Token
                                                                                                                                                                                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                                                                                                                             Match : <_sre.SRE_Match object; span=(12, 18), match='helloa'>
                                                                                                                                                                                                                                                Whitespace : None
                                                                                                                                                                                                                                     Phrase   : Word Token
                                                                                                                                                                                                                                1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                                                                                     Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                                                                                                IsIgnored  : False
                                                                                                                                                                                                                                                IterAfter  : [5, 1] (19)
                                                                                                                                                                                                                                                IterBefore : [4, 7] (18)
                                                                                                                                                                                                                                                Token      : Newline+
                                                                                                                                                                                                                                                Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                                                                                                                                             End   : 19
                                                                                                                                                                                                                                                             Start : 18
                                                                                                                                                                                                                                                Whitespace : None
                                                                                                                                                                                                                                     Phrase   : Newline+
                                                                                                                                                                                                                   IsComplete : True
                                                                                                                                                                                                        Phrase   : Sequence: [Word Token, Newline+]
                                                                                                                                                                                             Phrase   : Or: (Repeat: {Recursive Phrase, 1, 2}, Sequence: [Word Token, Newline+])
                                                                                                                                                                           IsComplete : True
                                                                                                                                                                Phrase   : Recursive Phrase
                                                                                                                                              IsComplete : True
                                                                                                                                   Phrase   : Repeat: {Recursive Phrase, 1, 2}
                                                                                                                        Phrase   : Or: (Repeat: {Recursive Phrase, 1, 2}, Sequence: [Word Token, Newline+])
                                                                                                      IsComplete : True
                                                                                           Phrase   : Recursive Phrase
                                                                         IsComplete : True
                                                              Phrase   : Repeat: {Recursive Phrase, 1, 2}
                                                   Phrase   : Or: (Repeat: {Recursive Phrase, 1, 2}, Sequence: [Word Token, Newline+])
                                 IsComplete : True
                      Phrase   : Recursive Phrase
            Iter    : [5, 1] (19)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

# ----------------------------------------------------------------------
class TestRecursiveSequencePhrase(object):
    _phrase                                 = CreatePhrase(
        [
            [_number_token, NewlineToken()],
            [_upper_token, NewlineToken()],
            (
                None,
                [RegexToken("Delimiter", re.compile(r"---")), NewlineToken()],
            ),
            [_word_token, NewlineToken()],
        ],
    )

    # ----------------------------------------------------------------------
    @pytest.mark.asyncio
    async def test_Match(self, parse_mock):
        result = await self._phrase.ParseAsync(
            ["root"],
            CreateIterator(
                textwrap.dedent(
                    """\
                    123
                    UPPERA
                    456
                    UPPERB
                    789
                    UPPERC
                    ---
                    worda
                    wordb
                    wordc
                    """,
                ),
            ),
            parse_mock,
        )

        assert str(result) == textwrap.dedent(
            """\
            <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
            Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [1, 4] (3)
                                                                                           IterBefore : [1, 1] (0)
                                                                                           Token      : Number Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(0, 3), match='123'>
                                                                                           Whitespace : None
                                                                                Phrase   : Number Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [2, 1] (4)
                                                                                           IterBefore : [1, 4] (3)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 4
                                                                                                        Start : 3
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Number Token, Newline+]
                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [2, 7] (10)
                                                                                           IterBefore : [2, 1] (4)
                                                                                           Token      : Upper Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(4, 10), match='UPPERA'>
                                                                                           Whitespace : None
                                                                                Phrase   : Upper Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [3, 1] (11)
                                                                                           IterBefore : [2, 7] (10)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 11
                                                                                                        Start : 10
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Upper Token, Newline+]
                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                         DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                      DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                   IsIgnored  : False
                                                                                                                                   IterAfter  : [3, 4] (14)
                                                                                                                                   IterBefore : [3, 1] (11)
                                                                                                                                   Token      : Number Token
                                                                                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                Match : <_sre.SRE_Match object; span=(11, 14), match='456'>
                                                                                                                                   Whitespace : None
                                                                                                                        Phrase   : Number Token
                                                                                                                   1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                   IsIgnored  : False
                                                                                                                                   IterAfter  : [4, 1] (15)
                                                                                                                                   IterBefore : [3, 4] (14)
                                                                                                                                   Token      : Newline+
                                                                                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                                End   : 15
                                                                                                                                                Start : 14
                                                                                                                                   Whitespace : None
                                                                                                                        Phrase   : Newline+
                                                                                                      IsComplete : True
                                                                                           Phrase   : Sequence: [Number Token, Newline+]
                                                                                      1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                      DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                   IsIgnored  : False
                                                                                                                                   IterAfter  : [4, 7] (21)
                                                                                                                                   IterBefore : [4, 1] (15)
                                                                                                                                   Token      : Upper Token
                                                                                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                Match : <_sre.SRE_Match object; span=(15, 21), match='UPPERB'>
                                                                                                                                   Whitespace : None
                                                                                                                        Phrase   : Upper Token
                                                                                                                   1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                   IsIgnored  : False
                                                                                                                                   IterAfter  : [5, 1] (22)
                                                                                                                                   IterBefore : [4, 7] (21)
                                                                                                                                   Token      : Newline+
                                                                                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                                End   : 22
                                                                                                                                                Start : 21
                                                                                                                                   Whitespace : None
                                                                                                                        Phrase   : Newline+
                                                                                                      IsComplete : True
                                                                                           Phrase   : Sequence: [Upper Token, Newline+]
                                                                                      2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                      Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                                 DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                           IsIgnored  : False
                                                                                                                                                                           IterAfter  : [5, 4] (25)
                                                                                                                                                                           IterBefore : [5, 1] (22)
                                                                                                                                                                           Token      : Number Token
                                                                                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                                                        Match : <_sre.SRE_Match object; span=(22, 25), match='789'>
                                                                                                                                                                           Whitespace : None
                                                                                                                                                                Phrase   : Number Token
                                                                                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                           IsIgnored  : False
                                                                                                                                                                           IterAfter  : [6, 1] (26)
                                                                                                                                                                           IterBefore : [5, 4] (25)
                                                                                                                                                                           Token      : Newline+
                                                                                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                                                                        End   : 26
                                                                                                                                                                                        Start : 25
                                                                                                                                                                           Whitespace : None
                                                                                                                                                                Phrase   : Newline+
                                                                                                                                              IsComplete : True
                                                                                                                                   Phrase   : Sequence: [Number Token, Newline+]
                                                                                                                              1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                           IsIgnored  : False
                                                                                                                                                                           IterAfter  : [6, 7] (32)
                                                                                                                                                                           IterBefore : [6, 1] (26)
                                                                                                                                                                           Token      : Upper Token
                                                                                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                                                        Match : <_sre.SRE_Match object; span=(26, 32), match='UPPERC'>
                                                                                                                                                                           Whitespace : None
                                                                                                                                                                Phrase   : Upper Token
                                                                                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                           IsIgnored  : False
                                                                                                                                                                           IterAfter  : [7, 1] (33)
                                                                                                                                                                           IterBefore : [6, 7] (32)
                                                                                                                                                                           Token      : Newline+
                                                                                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                                                                        End   : 33
                                                                                                                                                                                        Start : 32
                                                                                                                                                                           Whitespace : None
                                                                                                                                                                Phrase   : Newline+
                                                                                                                                              IsComplete : True
                                                                                                                                   Phrase   : Sequence: [Upper Token, Newline+]
                                                                                                                              2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                              Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                                                                         DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                                      IsIgnored  : False
                                                                                                                                                                                      IterAfter  : [7, 4] (36)
                                                                                                                                                                                      IterBefore : [7, 1] (33)
                                                                                                                                                                                      Token      : Delimiter
                                                                                                                                                                                      Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                                                                   Match : <_sre.SRE_Match object; span=(33, 36), match='---'>
                                                                                                                                                                                      Whitespace : None
                                                                                                                                                                           Phrase   : Delimiter
                                                                                                                                                                      1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                                      IsIgnored  : False
                                                                                                                                                                                      IterAfter  : [8, 1] (37)
                                                                                                                                                                                      IterBefore : [7, 4] (36)
                                                                                                                                                                                      Token      : Newline+
                                                                                                                                                                                      Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                                                                                   End   : 37
                                                                                                                                                                                                   Start : 36
                                                                                                                                                                                      Whitespace : None
                                                                                                                                                                           Phrase   : Newline+
                                                                                                                                                         IsComplete : True
                                                                                                                                              Phrase   : Sequence: [Delimiter, Newline+]
                                                                                                                                   Phrase   : Or: (Sequence: [Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+], Or: (Recursive, Sequence: [Delimiter, Newline+]), Sequence: [Word Token, Newline+]], Sequence: [Delimiter, Newline+])
                                                                                                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                           IsIgnored  : False
                                                                                                                                                                           IterAfter  : [8, 6] (42)
                                                                                                                                                                           IterBefore : [8, 1] (37)
                                                                                                                                                                           Token      : Word Token
                                                                                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                                                        Match : <_sre.SRE_Match object; span=(37, 42), match='worda'>
                                                                                                                                                                           Whitespace : None
                                                                                                                                                                Phrase   : Word Token
                                                                                                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                                                           IsIgnored  : False
                                                                                                                                                                           IterAfter  : [9, 1] (43)
                                                                                                                                                                           IterBefore : [8, 6] (42)
                                                                                                                                                                           Token      : Newline+
                                                                                                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                                                                        End   : 43
                                                                                                                                                                                        Start : 42
                                                                                                                                                                           Whitespace : None
                                                                                                                                                                Phrase   : Newline+
                                                                                                                                              IsComplete : True
                                                                                                                                   Phrase   : Sequence: [Word Token, Newline+]
                                                                                                                 IsComplete : True
                                                                                                      Phrase   : Sequence: [Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+], Or: (Sequence: [Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+], Or: (Recursive, Sequence: [Delimiter, Newline+]), Sequence: [Word Token, Newline+]], Sequence: [Delimiter, Newline+]), Sequence: [Word Token, Newline+]]
                                                                                           Phrase   : Or: (Sequence: [Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+], Or: (Recursive, Sequence: [Delimiter, Newline+]), Sequence: [Word Token, Newline+]], Sequence: [Delimiter, Newline+])
                                                                                      3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                           Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                                                                      DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                   IsIgnored  : False
                                                                                                                                   IterAfter  : [9, 6] (48)
                                                                                                                                   IterBefore : [9, 1] (43)
                                                                                                                                   Token      : Word Token
                                                                                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                                Match : <_sre.SRE_Match object; span=(43, 48), match='wordb'>
                                                                                                                                   Whitespace : None
                                                                                                                        Phrase   : Word Token
                                                                                                                   1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                                                        Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                                                                   IsIgnored  : False
                                                                                                                                   IterAfter  : [10, 1] (49)
                                                                                                                                   IterBefore : [9, 6] (48)
                                                                                                                                   Token      : Newline+
                                                                                                                                   Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                                                                End   : 49
                                                                                                                                                Start : 48
                                                                                                                                   Whitespace : None
                                                                                                                        Phrase   : Newline+
                                                                                                      IsComplete : True
                                                                                           Phrase   : Sequence: [Word Token, Newline+]
                                                                         IsComplete : True
                                                              Phrase   : Sequence: [Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+], Or: (Sequence: [Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+], Or: (Recursive, Sequence: [Delimiter, Newline+]), Sequence: [Word Token, Newline+]], Sequence: [Delimiter, Newline+]), Sequence: [Word Token, Newline+]]
                                                   Phrase   : Or: (Sequence: [Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+], Or: (Recursive, Sequence: [Delimiter, Newline+]), Sequence: [Word Token, Newline+]], Sequence: [Delimiter, Newline+])
                                              3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                   Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                              DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [10, 6] (54)
                                                                                           IterBefore : [10, 1] (49)
                                                                                           Token      : Word Token
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                        Match : <_sre.SRE_Match object; span=(49, 54), match='wordc'>
                                                                                           Whitespace : None
                                                                                Phrase   : Word Token
                                                                           1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                                Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                           IsIgnored  : False
                                                                                           IterAfter  : [11, 1] (55)
                                                                                           IterBefore : [10, 6] (54)
                                                                                           Token      : Newline+
                                                                                           Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                        End   : 55
                                                                                                        Start : 54
                                                                                           Whitespace : None
                                                                                Phrase   : Newline+
                                                              IsComplete : True
                                                   Phrase   : Sequence: [Word Token, Newline+]
                                 IsComplete : True
                      Phrase   : Sequence: [Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+], Or: (Sequence: [Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+], Or: (Recursive, Sequence: [Delimiter, Newline+]), Sequence: [Word Token, Newline+]], Sequence: [Delimiter, Newline+]), Sequence: [Word Token, Newline+]]
            Iter    : [11, 1] (55)
            Success : True
            """,
        )

        assert result.Iter.AtEnd()

# ----------------------------------------------------------------------
@pytest.mark.asyncio
async def test_IgnoreWhitespace(parse_mock):
    phrase = CreatePhrase(
        name="Phrase",
        item=[
            PushIgnoreWhitespaceControlToken(),
            _word_token,
            _word_token,
            PopIgnoreWhitespaceControlToken(),
        ],
    )

    result = await phrase.ParseAsync(
        ["root"],
        CreateIterator(
            textwrap.dedent(
                """\



                            worda

                    wordb

                """,
            ),
        ),
        parse_mock,
    )

    assert str(result) == textwrap.dedent(
        """\
        <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
        Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                               IsIgnored  : True
                                               IterAfter  : [4, 1] (3)
                                               IterBefore : [1, 1] (0)
                                               Token      : Newline+
                                               Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                            End   : 3
                                                            Start : 0
                                               Whitespace : None
                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                               IsIgnored  : True
                                               IterAfter  : [4, 9] (11)
                                               IterBefore : [4, 1] (3)
                                               Token      : Indent
                                               Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                            End   : 11
                                                            Start : 3
                                                            Value : 8
                                               Whitespace : None
                                          2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [4, 14] (16)
                                                          IterBefore : [4, 9] (11)
                                                          Token      : Word Token
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                       Match : <_sre.SRE_Match object; span=(11, 16), match='worda'>
                                                          Whitespace : None
                                               Phrase   : Word Token
                                          3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                               IsIgnored  : True
                                               IterAfter  : [6, 1] (18)
                                               IterBefore : [4, 14] (16)
                                               Token      : Newline+
                                               Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                            End   : 18
                                                            Start : 16
                                               Whitespace : None
                                          4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                               IsIgnored  : True
                                               IterAfter  : [6, 1] (18)
                                               IterBefore : [6, 1] (18)
                                               Token      : Dedent
                                               Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                            -- empty dict --
                                               Whitespace : None
                                          5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [6, 6] (23)
                                                          IterBefore : [6, 1] (18)
                                                          Token      : Word Token
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                       Match : <_sre.SRE_Match object; span=(18, 23), match='wordb'>
                                                          Whitespace : None
                                               Phrase   : Word Token
                                          6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                               IsIgnored  : True
                                               IterAfter  : [8, 1] (25)
                                               IterBefore : [6, 6] (23)
                                               Token      : Newline+
                                               Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                            End   : 25
                                                            Start : 23
                                               Whitespace : None
                             IsComplete : True
                  Phrase   : Phrase
        Iter    : [8, 1] (25)
        Success : True
        """,
    )

    assert result.Iter.AtEnd()

# ----------------------------------------------------------------------
@pytest.mark.asyncio
async def test_IgnoreWhitespaceNestedPhrase(parse_mock):
    phrase = CreatePhrase(
        name="Phrase",
        item=[
            _word_token,
            NewlineToken(),
            CreatePhrase(
                name="Nested",
                item=[
                    PushIgnoreWhitespaceControlToken(),
                    _word_token,
                    _word_token,
                    PopIgnoreWhitespaceControlToken(),
                ],
            ),
            _word_token,
            NewlineToken(),
        ],
    )

    result = await phrase.ParseAsync(
        ["root"],
        CreateIterator(
            textwrap.dedent(
                """\
                worda


                        wordb
                            wordc

                wordd
                """,
            ),
        ),
        parse_mock,
    )

    assert str(result) == textwrap.dedent(
        """\
        <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
        Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [1, 6] (5)
                                                          IterBefore : [1, 1] (0)
                                                          Token      : Word Token
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                       Match : <_sre.SRE_Match object; span=(0, 5), match='worda'>
                                                          Whitespace : None
                                               Phrase   : Word Token
                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [4, 1] (8)
                                                          IterBefore : [1, 6] (5)
                                                          Token      : Newline+
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                       End   : 8
                                                                       Start : 5
                                                          Whitespace : None
                                               Phrase   : Newline+
                                          2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                          DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [4, 9] (16)
                                                                            IterBefore : [4, 1] (8)
                                                                            Token      : Indent
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                         End   : 16
                                                                                         Start : 8
                                                                                         Value : 8
                                                                            Whitespace : None
                                                                       1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                            Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                       IsIgnored  : False
                                                                                       IterAfter  : [4, 14] (21)
                                                                                       IterBefore : [4, 9] (16)
                                                                                       Token      : Word Token
                                                                                       Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                    Match : <_sre.SRE_Match object; span=(16, 21), match='wordb'>
                                                                                       Whitespace : None
                                                                            Phrase   : Word Token
                                                                       2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [5, 1] (22)
                                                                            IterBefore : [4, 14] (21)
                                                                            Token      : Newline+
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                         End   : 22
                                                                                         Start : 21
                                                                            Whitespace : None
                                                                       3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [5, 13] (34)
                                                                            IterBefore : [5, 1] (22)
                                                                            Token      : Indent
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                         End   : 34
                                                                                         Start : 22
                                                                                         Value : 12
                                                                            Whitespace : None
                                                                       4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                            Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                       IsIgnored  : False
                                                                                       IterAfter  : [5, 18] (39)
                                                                                       IterBefore : [5, 13] (34)
                                                                                       Token      : Word Token
                                                                                       Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                    Match : <_sre.SRE_Match object; span=(34, 39), match='wordc'>
                                                                                       Whitespace : None
                                                                            Phrase   : Word Token
                                                                       5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [7, 1] (41)
                                                                            IterBefore : [5, 18] (39)
                                                                            Token      : Newline+
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                         End   : 41
                                                                                         Start : 39
                                                                            Whitespace : None
                                                                       6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [7, 1] (41)
                                                                            IterBefore : [7, 1] (41)
                                                                            Token      : Dedent
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                         -- empty dict --
                                                                            Whitespace : None
                                                                       7)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [7, 1] (41)
                                                                            IterBefore : [7, 1] (41)
                                                                            Token      : Dedent
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                         -- empty dict --
                                                                            Whitespace : None
                                                          IsComplete : True
                                               Phrase   : Nested
                                          3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [7, 6] (46)
                                                          IterBefore : [7, 1] (41)
                                                          Token      : Word Token
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                       Match : <_sre.SRE_Match object; span=(41, 46), match='wordd'>
                                                          Whitespace : None
                                               Phrase   : Word Token
                                          4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [8, 1] (47)
                                                          IterBefore : [7, 6] (46)
                                                          Token      : Newline+
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                       End   : 47
                                                                       Start : 46
                                                          Whitespace : None
                                               Phrase   : Newline+
                             IsComplete : True
                  Phrase   : Phrase
        Iter    : [8, 1] (47)
        Success : True
        """,
    )

    assert result.Iter.AtEnd()

# ----------------------------------------------------------------------
@pytest.mark.asyncio
async def test_IgnoreWhitespaceNestedPhraseWithDedents(parse_mock):
    phrase = CreatePhrase(
        name="Phrase",
        item=[
            _word_token,
            RegexToken("':'", re.compile(r":")),
            NewlineToken(),
            IndentToken(),
            CreatePhrase(
                name="Nested",
                item=[
                    PushIgnoreWhitespaceControlToken(),
                    _word_token,
                    _word_token,
                    PopIgnoreWhitespaceControlToken(),
                ],
            ),
            _word_token,
            NewlineToken(),
            DedentToken(),
            _word_token,
            NewlineToken(),
        ],
    )

    result = await phrase.ParseAsync(
        ["root"],
        CreateIterator(
            textwrap.dedent(
                """\
                newscope:


                    worda
                        wordb

                    wordc
                wordd
                """,
            ),
        ),
        parse_mock,
    )

    assert str(result) == textwrap.dedent(
        """\
        <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
        Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [1, 9] (8)
                                                          IterBefore : [1, 1] (0)
                                                          Token      : Word Token
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                       Match : <_sre.SRE_Match object; span=(0, 8), match='newscope'>
                                                          Whitespace : None
                                               Phrase   : Word Token
                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [1, 10] (9)
                                                          IterBefore : [1, 9] (8)
                                                          Token      : ':'
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                       Match : <_sre.SRE_Match object; span=(8, 9), match=':'>
                                                          Whitespace : None
                                               Phrase   : ':'
                                          2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [4, 1] (12)
                                                          IterBefore : [1, 10] (9)
                                                          Token      : Newline+
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                       End   : 12
                                                                       Start : 9
                                                          Whitespace : None
                                               Phrase   : Newline+
                                          3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [4, 5] (16)
                                                          IterBefore : [4, 1] (12)
                                                          Token      : Indent
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                       End   : 16
                                                                       Start : 12
                                                                       Value : 4
                                                          Whitespace : None
                                               Phrase   : Indent
                                          4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                          DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                            Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                       IsIgnored  : False
                                                                                       IterAfter  : [4, 10] (21)
                                                                                       IterBefore : [4, 5] (16)
                                                                                       Token      : Word Token
                                                                                       Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                    Match : <_sre.SRE_Match object; span=(16, 21), match='worda'>
                                                                                       Whitespace : None
                                                                            Phrase   : Word Token
                                                                       1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [5, 1] (22)
                                                                            IterBefore : [4, 10] (21)
                                                                            Token      : Newline+
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                         End   : 22
                                                                                         Start : 21
                                                                            Whitespace : None
                                                                       2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [5, 9] (30)
                                                                            IterBefore : [5, 1] (22)
                                                                            Token      : Indent
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                         End   : 30
                                                                                         Start : 22
                                                                                         Value : 8
                                                                            Whitespace : None
                                                                       3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                            Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                       IsIgnored  : False
                                                                                       IterAfter  : [5, 14] (35)
                                                                                       IterBefore : [5, 9] (30)
                                                                                       Token      : Word Token
                                                                                       Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                    Match : <_sre.SRE_Match object; span=(30, 35), match='wordb'>
                                                                                       Whitespace : None
                                                                            Phrase   : Word Token
                                                                       4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [7, 1] (37)
                                                                            IterBefore : [5, 14] (35)
                                                                            Token      : Newline+
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                         End   : 37
                                                                                         Start : 35
                                                                            Whitespace : None
                                                                       5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [7, 5] (41)
                                                                            IterBefore : [7, 1] (37)
                                                                            Token      : Dedent
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                         -- empty dict --
                                                                            Whitespace : None
                                                          IsComplete : True
                                               Phrase   : Nested
                                          5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [7, 10] (46)
                                                          IterBefore : [7, 5] (41)
                                                          Token      : Word Token
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                       Match : <_sre.SRE_Match object; span=(41, 46), match='wordc'>
                                                          Whitespace : None
                                               Phrase   : Word Token
                                          6)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [8, 1] (47)
                                                          IterBefore : [7, 10] (46)
                                                          Token      : Newline+
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                       End   : 47
                                                                       Start : 46
                                                          Whitespace : None
                                               Phrase   : Newline+
                                          7)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [8, 1] (47)
                                                          IterBefore : [8, 1] (47)
                                                          Token      : Dedent
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                       -- empty dict --
                                                          Whitespace : None
                                               Phrase   : Dedent
                                          8)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [8, 6] (52)
                                                          IterBefore : [8, 1] (47)
                                                          Token      : Word Token
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                       Match : <_sre.SRE_Match object; span=(47, 52), match='wordd'>
                                                          Whitespace : None
                                               Phrase   : Word Token
                                          9)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [9, 1] (53)
                                                          IterBefore : [8, 6] (52)
                                                          Token      : Newline+
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                       End   : 53
                                                                       Start : 52
                                                          Whitespace : None
                                               Phrase   : Newline+
                             IsComplete : True
                  Phrase   : Phrase
        Iter    : [9, 1] (53)
        Success : True
        """,
    )

    assert result.Iter.AtEnd()

# ----------------------------------------------------------------------
@pytest.mark.asyncio
async def test_IgnoreWhitespaceNestedPhraseEndWithDedents(parse_mock):
    phrase = CreatePhrase(
        name="Phrase",
        item=[
            _word_token,
            RegexToken("':'", re.compile(r":")),
            NewlineToken(),
            IndentToken(),
            CreatePhrase(
                name="Nested",
                item=[
                    PushIgnoreWhitespaceControlToken(),
                    _word_token,
                    _word_token,
                    PopIgnoreWhitespaceControlToken(),
                ],
            ),
            DedentToken(),
        ],
    )

    result = await phrase.ParseAsync(
        ["root"],
        CreateIterator(
            textwrap.dedent(
                """\
                newscope:


                    worda
                        wordb


                """,
            ),
        ),
        parse_mock,
    )

    assert str(result) == textwrap.dedent(
        """\
        <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
        Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [1, 9] (8)
                                                          IterBefore : [1, 1] (0)
                                                          Token      : Word Token
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                       Match : <_sre.SRE_Match object; span=(0, 8), match='newscope'>
                                                          Whitespace : None
                                               Phrase   : Word Token
                                          1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [1, 10] (9)
                                                          IterBefore : [1, 9] (8)
                                                          Token      : ':'
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                       Match : <_sre.SRE_Match object; span=(8, 9), match=':'>
                                                          Whitespace : None
                                               Phrase   : ':'
                                          2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [4, 1] (12)
                                                          IterBefore : [1, 10] (9)
                                                          Token      : Newline+
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                       End   : 12
                                                                       Start : 9
                                                          Whitespace : None
                                               Phrase   : Newline+
                                          3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [4, 5] (16)
                                                          IterBefore : [4, 1] (12)
                                                          Token      : Indent
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                       End   : 16
                                                                       Start : 12
                                                                       Value : 4
                                                          Whitespace : None
                                               Phrase   : Indent
                                          4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                                          DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                            Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                       IsIgnored  : False
                                                                                       IterAfter  : [4, 10] (21)
                                                                                       IterBefore : [4, 5] (16)
                                                                                       Token      : Word Token
                                                                                       Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                    Match : <_sre.SRE_Match object; span=(16, 21), match='worda'>
                                                                                       Whitespace : None
                                                                            Phrase   : Word Token
                                                                       1)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [5, 1] (22)
                                                                            IterBefore : [4, 10] (21)
                                                                            Token      : Newline+
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                         End   : 22
                                                                                         Start : 21
                                                                            Whitespace : None
                                                                       2)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [5, 9] (30)
                                                                            IterBefore : [5, 1] (22)
                                                                            Token      : Indent
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                         End   : 30
                                                                                         Start : 22
                                                                                         Value : 8
                                                                            Whitespace : None
                                                                       3)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                                                            Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                                       IsIgnored  : False
                                                                                       IterAfter  : [5, 14] (35)
                                                                                       IterBefore : [5, 9] (30)
                                                                                       Token      : Word Token
                                                                                       Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                    Match : <_sre.SRE_Match object; span=(30, 35), match='wordb'>
                                                                                       Whitespace : None
                                                                            Phrase   : Word Token
                                                                       4)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [8, 1] (38)
                                                                            IterBefore : [5, 14] (35)
                                                                            Token      : Newline+
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                         End   : 38
                                                                                         Start : 35
                                                                            Whitespace : None
                                                                       5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                                            IsIgnored  : True
                                                                            IterAfter  : [8, 1] (38)
                                                                            IterBefore : [8, 1] (38)
                                                                            Token      : Dedent
                                                                            Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                         -- empty dict --
                                                                            Whitespace : None
                                                          IsComplete : True
                                               Phrase   : Nested
                                          5)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [8, 1] (38)
                                                          IterBefore : [8, 1] (38)
                                                          Token      : Dedent
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                       -- empty dict --
                                                          Whitespace : None
                                               Phrase   : Dedent
                             IsComplete : True
                  Phrase   : Phrase
        Iter    : [8, 1] (38)
        Success : True
        """,
    )

    assert result.Iter.AtEnd()

# ----------------------------------------------------------------------
@pytest.mark.asyncio
async def test_NestedPhrase(parse_mock):
    phrase = CreatePhrase(
        name="Phrase",
        item=[TokenPhrase(_word_token),],
    )

    result = await phrase.ParseAsync(["root"], CreateIterator("test"), parse_mock)

    assert str(result) == textwrap.dedent(
        """\
        <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
        Data    : <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                             DataItems  : 0)   <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                               Data     : <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                          IsIgnored  : False
                                                          IterAfter  : [1, 5] (4)
                                                          IterBefore : [1, 1] (0)
                                                          Token      : Word Token
                                                          Value      : <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                       Match : <_sre.SRE_Match object; span=(0, 4), match='test'>
                                                          Whitespace : None
                                               Phrase   : Word Token
                             IsComplete : True
                  Phrase   : Phrase
        Iter    : [1, 5] (4)
        Success : True
        """,
    )

    # assert result.Iter.AtEnd()
