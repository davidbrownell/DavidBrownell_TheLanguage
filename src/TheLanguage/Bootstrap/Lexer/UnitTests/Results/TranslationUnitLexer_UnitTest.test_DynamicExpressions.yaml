# <class 'Bootstrap.Lexer.Components.AST.Node'>
Children:
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 5] (4)"
                Type: "Upper <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 4), match='WORD'>"
                Whitespace: None
              - # <class 'Bootstrap.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[1, 6] (5)"
                        IterEnd: "[1, 10] (9)"
                        Type: "Number <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(5, 9), match='1234'>"
                        Whitespace:
                          - 4
                          - 5
                    IsIgnored: False
                    IterBegin: "[1, 6] (5)"
                    IterEnd: "[1, 10] (9)"
                    Type: "(Expression) Expressions <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IsIgnored: False
                IterBegin: "[1, 6] (5)"
                IterEnd: "[1, 10] (9)"
                Type: "DynamicPhrasesType.Expressions <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 11] (10)"
                IterEnd: "[1, 16] (15)"
                Type: "Lower <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(10, 15), match='lower'>"
                Whitespace:
                  - 9
                  - 10
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 16] (15)"
                IterEnd: "[2, 1] (16)"
                Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 16
                  Start: 15
                Whitespace: None
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (16)"
            Type: "Statement <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (16)"
        Type: "(Statement) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (16)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[2, 1] (16)"
Type: "<None>"
