# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 6] (5)"
                    Type: "'class' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(0, 5), match='class'>"
                    Whitespace: None
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 7] (6)"
                IterEnd: "[1, 10] (9)"
                Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(6, 9), match='Foo'>"
                Whitespace:
                  - 5
                  - 6
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 10] (9)"
                IterEnd: "[1, 11] (10)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(9, 10), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 11] (10)"
                IterEnd: "[1, 12] (11)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(10, 11), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 12] (11)"
                    IterEnd: "[1, 13] (12)"
                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 12), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 13] (12)"
                            IterEnd: "[2, 1] (13)"
                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                              End: 13
                              Start: 12
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 1] (13)"
                            IterEnd: "[2, 5] (17)"
                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                              End: 17
                              Start: 13
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[2, 5] (17)"
                                                        IterEnd: "[2, 8] (20)"
                                                        Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(17, 20), match='Int'>"
                                                        Whitespace: None
                                                    Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                      Modifier: None
                                                      Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                                        Modifier: None
                                                        Self__: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                                                        TypeName: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                                                      TypeName: "Int"
                                                    IterBegin: "[2, 5] (17)"
                                                    IterEnd: "[2, 8] (20)"
                                                    Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[2, 5] (17)"
                                                IterEnd: "[2, 8] (20)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[2, 5] (17)"
                                            IterEnd: "[2, 8] (20)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 9] (21)"
                                            IterEnd: "[2, 15] (27)"
                                            Type: "<method_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(21, 27), match='Method'>"
                                            Whitespace:
                                              - 20
                                              - 21
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 15] (27)"
                                                IterEnd: "[2, 16] (28)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(27, 28), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 16] (28)"
                                                IterEnd: "[2, 17] (29)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(28, 29), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[2, 15] (27)"
                                            IterEnd: "[2, 17] (29)"
                                            Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 17] (29)"
                                                    IterEnd: "[2, 18] (30)"
                                                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(29, 30), match=':'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 18] (30)"
                                                            IterEnd: "[3, 1] (31)"
                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                              End: 31
                                                              Start: 30
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[3, 1] (31)"
                                                            IterEnd: "[3, 9] (39)"
                                                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                              End: 39
                                                              Start: 31
                                                              Value: 8
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 9] (39)"
                                                                            IterEnd: "[6, 12] (100)"
                                                                            Type: "Multi-line Content <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(39, 100), match='<<<\\n        A method may\\n        have docstring>"
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[6, 12] (100)"
                                                                            IterEnd: "[8, 1] (102)"
                                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                              End: 102
                                                                              Start: 100
                                                                            Whitespace: None
                                                                        Info: None
                                                                        IterBegin: "[3, 9] (39)"
                                                                        IterEnd: "[8, 1] (102)"
                                                                        Type: "Docstring Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 9] (39)"
                                                                    IterEnd: "[8, 1] (102)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[3, 9] (39)"
                                                                IterEnd: "[8, 1] (102)"
                                                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[8, 9] (110)"
                                                                            IterEnd: "[8, 13] (114)"
                                                                            Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(110, 114), match='pass'>"
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[8, 13] (114)"
                                                                            IterEnd: "[10, 1] (116)"
                                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                              End: 116
                                                                              Start: 114
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                                                                          Regions: # <class 'types.PassStatementLexerInfoRegions'>
                                                                            Self__: "[Ln 8, Col 9] -> [Ln 10, Col 1]"
                                                                        IterBegin: "[8, 9] (110)"
                                                                        IterEnd: "[10, 1] (116)"
                                                                        Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[8, 9] (110)"
                                                                    IterEnd: "[10, 1] (116)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[8, 9] (110)"
                                                                IterEnd: "[10, 1] (116)"
                                                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[10, 9] (124)"
                                                                            IterEnd: "[10, 13] (128)"
                                                                            Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(124, 128), match='pass'>"
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[10, 13] (128)"
                                                                            IterEnd: "[11, 1] (129)"
                                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                              End: 129
                                                                              Start: 128
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                                                                          Regions: # <class 'types.PassStatementLexerInfoRegions'>
                                                                            Self__: "[Ln 10, Col 9] -> [Ln 11, Col 1]"
                                                                        IterBegin: "[10, 9] (124)"
                                                                        IterEnd: "[11, 1] (129)"
                                                                        Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[10, 9] (124)"
                                                                    IterEnd: "[11, 1] (129)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[10, 9] (124)"
                                                                IterEnd: "[11, 1] (129)"
                                                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[11, 9] (137)"
                                                                            IterEnd: "[11, 13] (141)"
                                                                            Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(137, 141), match='pass'>"
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[11, 13] (141)"
                                                                            IterEnd: "[12, 1] (142)"
                                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                              End: 142
                                                                              Start: 141
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                                                                          Regions: # <class 'types.PassStatementLexerInfoRegions'>
                                                                            Self__: "[Ln 11, Col 9] -> [Ln 12, Col 1]"
                                                                        IterBegin: "[11, 9] (137)"
                                                                        IterEnd: "[12, 1] (142)"
                                                                        Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[11, 9] (137)"
                                                                    IterEnd: "[12, 1] (142)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[11, 9] (137)"
                                                                IterEnd: "[12, 1] (142)"
                                                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 9] (39)"
                                                            IterEnd: "[12, 1] (142)"
                                                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[12, 1] (142)"
                                                            IterEnd: "[12, 1] (142)"
                                                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                              {}
                                                            Whitespace: None
                                                        IterBegin: "[2, 18] (30)"
                                                        IterEnd: "[12, 1] (142)"
                                                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[2, 18] (30)"
                                                    IterEnd: "[12, 1] (142)"
                                                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[2, 17] (29)"
                                                IterEnd: "[12, 1] (142)"
                                                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[2, 17] (29)"
                                            IterEnd: "[12, 1] (142)"
                                            Type: "Or: (Statements, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        Info: # <class 'TheLanguage.Lexer.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          Documentation: |-
                                            A method may
                                            have docstrings!
                                          MethodType: "MethodType.standard"
                                          Name: "Method"
                                          Parameters: None
                                          Regions: # <class 'types.FuncAndMethodDefinitionStatementLexerInfoRegions'>
                                            ClassModifier: "[Ln 2, Col 5] -> [Ln 12, Col 1]"
                                            Documentation: "[Ln 3, Col 9] -> [Ln 6, Col 12]"
                                            MethodType: "[Ln 2, Col 5] -> [Ln 12, Col 1]"
                                            Name: "[Ln 2, Col 9] -> [Ln 2, Col 15]"
                                            Parameters: None
                                            ReturnType: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                                            Self__: "[Ln 2, Col 5] -> [Ln 12, Col 1]"
                                            Statements: "[Ln 2, Col 17] -> [Ln 12, Col 1]"
                                            Visibility: "[Ln 2, Col 5] -> [Ln 12, Col 1]"
                                          ReturnType: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                            Modifier: None
                                            Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                              Modifier: None
                                              Self__: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                                              TypeName: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                                            TypeName: "Int"
                                          Statements:
                                            - # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                                              Regions: # <class 'types.PassStatementLexerInfoRegions'>
                                                Self__: "[Ln 8, Col 9] -> [Ln 10, Col 1]"
                                            - # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                                              Regions: # <class 'types.PassStatementLexerInfoRegions'>
                                                Self__: "[Ln 10, Col 9] -> [Ln 11, Col 1]"
                                            - # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                                              Regions: # <class 'types.PassStatementLexerInfoRegions'>
                                                Self__: "[Ln 11, Col 9] -> [Ln 12, Col 1]"
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[2, 5] (17)"
                                        IterEnd: "[12, 1] (142)"
                                        Type: "Func And Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[2, 5] (17)"
                                    IterEnd: "[12, 1] (142)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 5] (17)"
                                IterEnd: "[12, 1] (142)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[2, 5] (17)"
                            IterEnd: "[12, 1] (142)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[12, 1] (142)"
                            IterEnd: "[12, 1] (142)"
                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[1, 13] (12)"
                        IterEnd: "[12, 1] (142)"
                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 13] (12)"
                    IterEnd: "[12, 1] (142)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 12] (11)"
                IterEnd: "[12, 1] (142)"
                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
            Info: # <class 'TheLanguage.Lexer.Statements.ClassStatementLexerInfo.ClassStatementLexerInfo'>
              Base: None
              ClassModifier: "ClassModifier.immutable"
              ClassType: "ClassType.Class"
              Documentation: None
              Interfaces: None
              Mixins: None
              Name: "Foo"
              Regions: # <class 'types.ClassStatementLexerInfoRegions'>
                Base: None
                ClassModifier: "[Ln 1, Col 1] -> [Ln 12, Col 1]"
                ClassType: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
                Documentation: None
                Interfaces: None
                Mixins: None
                Name: "[Ln 1, Col 7] -> [Ln 1, Col 10]"
                Self__: "[Ln 1, Col 1] -> [Ln 12, Col 1]"
                Statements: "[Ln 1, Col 12] -> [Ln 12, Col 1]"
                Visibility: "[Ln 1, Col 1] -> [Ln 12, Col 1]"
              Statements:
                - # <class 'TheLanguage.Lexer.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  Documentation: |-
                    A method may
                    have docstrings!
                  MethodType: "MethodType.standard"
                  Name: "Method"
                  Parameters: None
                  Regions: # <class 'types.FuncAndMethodDefinitionStatementLexerInfoRegions'>
                    ClassModifier: "[Ln 2, Col 5] -> [Ln 12, Col 1]"
                    Documentation: "[Ln 3, Col 9] -> [Ln 6, Col 12]"
                    MethodType: "[Ln 2, Col 5] -> [Ln 12, Col 1]"
                    Name: "[Ln 2, Col 9] -> [Ln 2, Col 15]"
                    Parameters: None
                    ReturnType: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                    Self__: "[Ln 2, Col 5] -> [Ln 12, Col 1]"
                    Statements: "[Ln 2, Col 17] -> [Ln 12, Col 1]"
                    Visibility: "[Ln 2, Col 5] -> [Ln 12, Col 1]"
                  ReturnType: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                    Modifier: None
                    Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                      Modifier: None
                      Self__: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                      TypeName: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                    TypeName: "Int"
                  Statements:
                    - # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                      Regions: # <class 'types.PassStatementLexerInfoRegions'>
                        Self__: "[Ln 8, Col 9] -> [Ln 10, Col 1]"
                    - # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                      Regions: # <class 'types.PassStatementLexerInfoRegions'>
                        Self__: "[Ln 10, Col 9] -> [Ln 11, Col 1]"
                    - # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                      Regions: # <class 'types.PassStatementLexerInfoRegions'>
                        Self__: "[Ln 11, Col 9] -> [Ln 12, Col 1]"
                  Visibility: "VisibilityModifier.private"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[12, 1] (142)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[12, 1] (142)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[12, 1] (142)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[12, 1] (142)"
Type: "<None>"
