# <class 'v1.Lexer.Components.Phrase.Phrase.LexResult'>
data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 1] (0)"
                      end: "[1, 2] (1)"
                    token: "'-'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(0, 1), match='-'>"
                  phrase: "'-'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: false
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 2] (1)"
                          end: "[1, 5] (4)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(1, 4), match='one'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
              phrase: "Neg"
            phrase: "All Phrases"
          phrase: "Dynamic Phrase"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: true
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 5] (4)"
            end: "[1, 6] (5)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 4
              end: 5
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 6] (5)"
              end: "[1, 7] (6)"
            token: "'+'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(5, 6), match='+'>"
          phrase: "'+'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: true
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 7] (6)"
            end: "[1, 8] (7)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 6
              end: 7
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 8] (7)"
                  end: "[1, 11] (10)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(7, 10), match='two'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Add"
    phrase: "All Phrases"
  phrase: "DynamicPhrasesType.Statements"
iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
  begin: "[1, 1] (0)"
  end: "[1, 11] (10)"
success: true
