# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 4] (3)"
                            Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 3), match='Int'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                          Modifier: None
                          Regions: # <class 'types.StandardTypeParserInfoRegions'>
                            Modifier: None
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 4]"
                            TypeName: "[Ln 1, Col 1] -> [Ln 1, Col 4]"
                          TypeName: "Int"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 4] (3)"
                        Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 4] (3)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 5] (4)"
                IterEnd: "[1, 9] (8)"
                Type: "<method_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(4, 8), match='Func'>"
                Whitespace:
                  - 3
                  - 4
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 9] (8)"
                    IterEnd: "[1, 10] (9)"
                    Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(8, 9), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 5] (14)"
                                        IterEnd: "[2, 8] (17)"
                                        Type: "'pos' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(14, 17), match='pos'>"
                                        Whitespace: None
                                    IterBegin: "[2, 5] (14)"
                                    IterEnd: "[2, 8] (17)"
                                    Type: "Or: ('pos', 'any', 'key') <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 8] (17)"
                                    IterEnd: "[2, 9] (18)"
                                    Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(17, 18), match=':'>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 10] (19)"
                                                    IterEnd: "[2, 13] (22)"
                                                    Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(19, 22), match='Int'>"
                                                    Whitespace:
                                                      - 18
                                                      - 19
                                                Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                                  Modifier: None
                                                  Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                                    Modifier: None
                                                    Self__: "[Ln 2, Col 10] -> [Ln 2, Col 13]"
                                                    TypeName: "[Ln 2, Col 10] -> [Ln 2, Col 13]"
                                                  TypeName: "Int"
                                                IterBegin: "[2, 10] (19)"
                                                IterEnd: "[2, 13] (22)"
                                                Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[2, 10] (19)"
                                            IterEnd: "[2, 13] (22)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[2, 10] (19)"
                                        IterEnd: "[2, 13] (22)"
                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 14] (23)"
                                        IterEnd: "[2, 15] (24)"
                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(23, 24), match='a'>"
                                        Whitespace:
                                          - 22
                                          - 23
                                    IterBegin: "[2, 10] (19)"
                                    IterEnd: "[2, 15] (24)"
                                    Type: "Parameter <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 15] (24)"
                                        IterEnd: "[2, 16] (25)"
                                        Type: "Trailing Comma <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(24, 25), match=','>"
                                        Whitespace: None
                                    IterBegin: "[2, 15] (24)"
                                    IterEnd: "[2, 16] (25)"
                                    Type: "Repeat: {Trailing Comma, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                IterBegin: "[2, 5] (14)"
                                IterEnd: "[2, 16] (25)"
                                Type: "New Style <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[3, 5] (30)"
                                        IterEnd: "[3, 8] (33)"
                                        Type: "'key' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(30, 33), match='key'>"
                                        Whitespace: None
                                    IterBegin: "[3, 5] (30)"
                                    IterEnd: "[3, 8] (33)"
                                    Type: "Or: ('pos', 'any', 'key') <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[3, 8] (33)"
                                    IterEnd: "[3, 9] (34)"
                                    Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(33, 34), match=':'>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[4, 9] (43)"
                                                    IterEnd: "[4, 12] (46)"
                                                    Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(43, 46), match='Int'>"
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                                  Modifier: None
                                                  Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                                    Modifier: None
                                                    Self__: "[Ln 4, Col 9] -> [Ln 4, Col 12]"
                                                    TypeName: "[Ln 4, Col 9] -> [Ln 4, Col 12]"
                                                  TypeName: "Int"
                                                IterBegin: "[4, 9] (43)"
                                                IterEnd: "[4, 12] (46)"
                                                Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[4, 9] (43)"
                                            IterEnd: "[4, 12] (46)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[4, 9] (43)"
                                        IterEnd: "[4, 12] (46)"
                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[4, 13] (47)"
                                        IterEnd: "[4, 14] (48)"
                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(47, 48), match='b'>"
                                        Whitespace:
                                          - 46
                                          - 47
                                    IterBegin: "[4, 9] (43)"
                                    IterEnd: "[4, 14] (48)"
                                    Type: "Parameter <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[4, 14] (48)"
                                            IterEnd: "[4, 15] (49)"
                                            Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(48, 49), match=','>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[5, 9] (58)"
                                                            IterEnd: "[5, 12] (61)"
                                                            Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(58, 61), match='Int'>"
                                                            Whitespace: None
                                                        Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                                          Modifier: None
                                                          Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                                            Modifier: None
                                                            Self__: "[Ln 5, Col 9] -> [Ln 5, Col 12]"
                                                            TypeName: "[Ln 5, Col 9] -> [Ln 5, Col 12]"
                                                          TypeName: "Int"
                                                        IterBegin: "[5, 9] (58)"
                                                        IterEnd: "[5, 12] (61)"
                                                        Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[5, 9] (58)"
                                                    IterEnd: "[5, 12] (61)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[5, 9] (58)"
                                                IterEnd: "[5, 12] (61)"
                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[5, 13] (62)"
                                                IterEnd: "[5, 14] (63)"
                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(62, 63), match='c'>"
                                                Whitespace:
                                                  - 61
                                                  - 62
                                            IterBegin: "[5, 9] (58)"
                                            IterEnd: "[5, 14] (63)"
                                            Type: "Parameter <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[4, 14] (48)"
                                        IterEnd: "[5, 14] (63)"
                                        Type: "Comma and Parameter <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[4, 14] (48)"
                                    IterEnd: "[5, 14] (63)"
                                    Type: "Repeat: {Comma and Parameter, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[5, 14] (63)"
                                        IterEnd: "[5, 15] (64)"
                                        Type: "Trailing Comma <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(63, 64), match=','>"
                                        Whitespace: None
                                    IterBegin: "[5, 14] (63)"
                                    IterEnd: "[5, 15] (64)"
                                    Type: "Repeat: {Trailing Comma, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                IterBegin: "[3, 5] (30)"
                                IterEnd: "[5, 15] (64)"
                                Type: "New Style <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[2, 5] (14)"
                            IterEnd: "[5, 15] (64)"
                            Type: "Repeat: {New Style, 1, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                        IterBegin: "[2, 5] (14)"
                        IterEnd: "[5, 15] (64)"
                        Type: "Or: (Repeat: {New Style, 1, None}, Traditional) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[2, 5] (14)"
                    IterEnd: "[5, 15] (64)"
                    Type: "Repeat: {Or: (Repeat: {New Style, 1, None}, Traditional), 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[6, 1] (65)"
                    IterEnd: "[6, 2] (66)"
                    Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(65, 66), match=')'>"
                    Whitespace: None
                IterBegin: "[1, 9] (8)"
                IterEnd: "[6, 2] (66)"
                Type: "Parameters <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[6, 2] (66)"
                        IterEnd: "[6, 3] (67)"
                        Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(66, 67), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[6, 3] (67)"
                                IterEnd: "[7, 1] (68)"
                                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                  End: 68
                                  Start: 67
                                Whitespace: None
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[7, 1] (68)"
                                IterEnd: "[7, 5] (72)"
                                Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                                  End: 72
                                  Start: 68
                                  Value: 4
                                Whitespace: None
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[7, 5] (72)"
                                                IterEnd: "[7, 9] (76)"
                                                Type: "'pass' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(72, 76), match='pass'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[7, 9] (76)"
                                                IterEnd: "[8, 1] (77)"
                                                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                  End: 77
                                                  Start: 76
                                                Whitespace: None
                                            Info: # <class 'TheLanguage.Parser.Statements.PassStatementParserInfo.PassStatementParserInfo'>
                                              Regions: # <class 'types.PassStatementParserInfoRegions'>
                                                Self__: "[Ln 7, Col 5] -> [Ln 8, Col 1]"
                                            IterBegin: "[7, 5] (72)"
                                            IterEnd: "[8, 1] (77)"
                                            Type: "Pass Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[7, 5] (72)"
                                        IterEnd: "[8, 1] (77)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[7, 5] (72)"
                                    IterEnd: "[8, 1] (77)"
                                    Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                IterBegin: "[7, 5] (72)"
                                IterEnd: "[8, 1] (77)"
                                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[8, 1] (77)"
                                IterEnd: "[8, 1] (77)"
                                Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                                  {}
                                Whitespace: None
                            IterBegin: "[6, 3] (67)"
                            IterEnd: "[8, 1] (77)"
                            Type: "Multi-line <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[6, 3] (67)"
                        IterEnd: "[8, 1] (77)"
                        Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[6, 2] (66)"
                    IterEnd: "[8, 1] (77)"
                    Type: "Statements <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[6, 2] (66)"
                IterEnd: "[8, 1] (77)"
                Type: "Or: (Statements, Newline+) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
            Info: # <class 'TheLanguage.Parser.Statements.FuncAndMethodDefinitionStatementParserInfo.FuncAndMethodDefinitionStatementParserInfo'>
              ClassModifier: None
              Documentation: None
              MethodType: "MethodType.standard"
              Name: "Func"
              Parameters: # <class 'TheLanguage.Parser.Common.ParametersParserInfo.ParametersParserInfo'>
                Any: None
                Keyword:
                  - # <class 'TheLanguage.Parser.Common.ParametersParserInfo.ParameterParserInfo'>
                    Default: None
                    IsVarArgs: None
                    Name: "b"
                    Regions: # <class 'types.ParameterParserInfoRegions'>
                      Default: None
                      IsVarArgs: None
                      Name: "[Ln 4, Col 13] -> [Ln 4, Col 14]"
                      Self__: "[Ln 4, Col 9] -> [Ln 4, Col 14]"
                      Type: "[Ln 4, Col 9] -> [Ln 4, Col 12]"
                    Type: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                      Modifier: None
                      Regions: # <class 'types.StandardTypeParserInfoRegions'>
                        Modifier: None
                        Self__: "[Ln 4, Col 9] -> [Ln 4, Col 12]"
                        TypeName: "[Ln 4, Col 9] -> [Ln 4, Col 12]"
                      TypeName: "Int"
                  - # <class 'TheLanguage.Parser.Common.ParametersParserInfo.ParameterParserInfo'>
                    Default: None
                    IsVarArgs: None
                    Name: "c"
                    Regions: # <class 'types.ParameterParserInfoRegions'>
                      Default: None
                      IsVarArgs: None
                      Name: "[Ln 5, Col 13] -> [Ln 5, Col 14]"
                      Self__: "[Ln 5, Col 9] -> [Ln 5, Col 14]"
                      Type: "[Ln 5, Col 9] -> [Ln 5, Col 12]"
                    Type: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                      Modifier: None
                      Regions: # <class 'types.StandardTypeParserInfoRegions'>
                        Modifier: None
                        Self__: "[Ln 5, Col 9] -> [Ln 5, Col 12]"
                        TypeName: "[Ln 5, Col 9] -> [Ln 5, Col 12]"
                      TypeName: "Int"
                Positional:
                  - # <class 'TheLanguage.Parser.Common.ParametersParserInfo.ParameterParserInfo'>
                    Default: None
                    IsVarArgs: None
                    Name: "a"
                    Regions: # <class 'types.ParameterParserInfoRegions'>
                      Default: None
                      IsVarArgs: None
                      Name: "[Ln 2, Col 14] -> [Ln 2, Col 15]"
                      Self__: "[Ln 2, Col 10] -> [Ln 2, Col 15]"
                      Type: "[Ln 2, Col 10] -> [Ln 2, Col 13]"
                    Type: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                      Modifier: None
                      Regions: # <class 'types.StandardTypeParserInfoRegions'>
                        Modifier: None
                        Self__: "[Ln 2, Col 10] -> [Ln 2, Col 13]"
                        TypeName: "[Ln 2, Col 10] -> [Ln 2, Col 13]"
                      TypeName: "Int"
                Regions: # <class 'types.ParametersParserInfoRegions'>
                  Any: None
                  Keyword: "[Ln 3, Col 5] -> [Ln 5, Col 15]"
                  Positional: "[Ln 2, Col 5] -> [Ln 2, Col 16]"
                  Self__: "[Ln 2, Col 5] -> [Ln 5, Col 15]"
              Regions: # <class 'types.FuncAndMethodDefinitionStatementParserInfoRegions'>
                ClassModifier: None
                Documentation: None
                MethodType: "[Ln 1, Col 1] -> [Ln 8, Col 1]"
                Name: "[Ln 1, Col 5] -> [Ln 1, Col 9]"
                Parameters: "[Ln 1, Col 9] -> [Ln 6, Col 2]"
                ReturnType: "[Ln 1, Col 1] -> [Ln 1, Col 4]"
                Self__: "[Ln 1, Col 1] -> [Ln 8, Col 1]"
                Statements: "[Ln 6, Col 2] -> [Ln 8, Col 1]"
                Visibility: "[Ln 1, Col 1] -> [Ln 8, Col 1]"
              ReturnType: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                Modifier: None
                Regions: # <class 'types.StandardTypeParserInfoRegions'>
                  Modifier: None
                  Self__: "[Ln 1, Col 1] -> [Ln 1, Col 4]"
                  TypeName: "[Ln 1, Col 1] -> [Ln 1, Col 4]"
                TypeName: "Int"
              Statements:
                - # <class 'TheLanguage.Parser.Statements.PassStatementParserInfo.PassStatementParserInfo'>
                  Regions: # <class 'types.PassStatementParserInfoRegions'>
                    Self__: "[Ln 7, Col 5] -> [Ln 8, Col 1]"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[8, 1] (77)"
            Type: "Func And Method Definition Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[8, 1] (77)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[8, 1] (77)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[8, 1] (77)"
Type: "<None>"
