# ----------------------------------------------------------------------
# |
# |  Generator.TheLanguage
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2021-11-12 11:37:29
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2021
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
from .Expression import ExpressionParserInfo, ExpressionParserInfoRegions
from ..Variables.Variable import VariableParserInfo, VariableParserInfoRegions


# ----------------------------------------------------------------------
public immutable class GeneratorExpressionParserInfo
    extends ExpressionParserInfo
:
    <<<
    Example syntax: TODO: Add a blank line following this one
        DecorateValue(value) for value in [1, 2, 3] if value & 1
        --------------------     -----    ---------    ---------
        |                        |        |            |
        |                        |        |            - condition
        |                        |        - source
        |                        - name
        - result
    >>>

    public ExpressionParserInfo val result
    public VariableParserInfo val name
    public ExpressionParserInfo val source
    public (ExpressionParserInfo | None) val condition


# ----------------------------------------------------------------------
public immutable class GeneratorExpressionParserInfoRegions
    extends ExpressionParserInfoRegions
:
    public ExpressionParserInfoRegions val result
    public VariableParserInfoRegions val name
    public ExpressionParserInfoRegions val source
    public (ExpressionParserInfoRegions | None) val condition
