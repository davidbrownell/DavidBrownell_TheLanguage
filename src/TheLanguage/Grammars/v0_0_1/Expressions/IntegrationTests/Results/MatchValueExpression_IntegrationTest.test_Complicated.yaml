# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 6] (5)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 5), match='value'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Name: "value"
                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                            Name: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 6] (5)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 6] (5)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 7] (6)"
                IterEnd: "[1, 8] (7)"
                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(6, 7), match='='>"
                Whitespace:
                  - 5
                  - 6
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 9] (8)"
                                    IterEnd: "[1, 10] (9)"
                                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(8, 9), match='('>"
                                    Whitespace:
                                      - 7
                                      - 8
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 10] (9)"
                                    IterEnd: "[2, 1] (10)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 10
                                      Start: 9
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 1] (10)"
                                    IterEnd: "[2, 5] (14)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 14
                                      Start: 10
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 5] (14)"
                                        IterEnd: "[2, 10] (19)"
                                        Type: "'match' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(14, 19), match='match'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 11] (20)"
                                        IterEnd: "[2, 16] (25)"
                                        Type: "'value' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(20, 25), match='value'>"
                                        Whitespace:
                                          - 19
                                          - 20
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 17] (26)"
                                                            IterEnd: "[2, 22] (31)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(26, 31), match='expr1'>"
                                                            Whitespace:
                                                              - 25
                                                              - 26
                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                          Name: "expr1"
                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                            Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                            Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                        IterBegin: "[2, 17] (26)"
                                                        IterEnd: "[2, 22] (31)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[2, 17] (26)"
                                                    IterEnd: "[2, 22] (31)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                    Name: "expr1"
                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                      Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                      Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                    Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                    Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                IterBegin: "[2, 17] (26)"
                                                IterEnd: "[2, 22] (31)"
                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[2, 17] (26)"
                                            IterEnd: "[2, 22] (31)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[2, 17] (26)"
                                        IterEnd: "[2, 22] (31)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 22] (31)"
                                        IterEnd: "[2, 23] (32)"
                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(31, 32), match=':'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 23] (32)"
                                        IterEnd: "[3, 1] (33)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 33
                                          Start: 32
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[3, 1] (33)"
                                        IterEnd: "[3, 9] (41)"
                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                          End: 41
                                          Start: 33
                                          Value: 8
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 9] (41)"
                                                IterEnd: "[3, 13] (45)"
                                                Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(41, 45), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 14] (46)"
                                                                            IterEnd: "[3, 19] (51)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(46, 51), match='case1'>"
                                                                            Whitespace:
                                                                              - 45
                                                                              - 46
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "case1"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                            Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                        IterBegin: "[3, 14] (46)"
                                                                        IterEnd: "[3, 19] (51)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 14] (46)"
                                                                    IterEnd: "[3, 19] (51)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "case1"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                      Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                    Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                IterBegin: "[3, 14] (46)"
                                                                IterEnd: "[3, 19] (51)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 14] (46)"
                                                            IterEnd: "[3, 19] (51)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 14] (46)"
                                                        IterEnd: "[3, 19] (51)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[3, 14] (46)"
                                                    IterEnd: "[3, 19] (51)"
                                                    Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 14] (46)"
                                                IterEnd: "[3, 19] (51)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 19] (51)"
                                                IterEnd: "[3, 20] (52)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(51, 52), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 21] (53)"
                                                                            IterEnd: "[3, 27] (59)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(53, 59), match='value1'>"
                                                                            Whitespace:
                                                                              - 52
                                                                              - 53
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value1"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 3, Col 21] -> [Ln 3, Col 27]"
                                                                            Self__: "[Ln 3, Col 21] -> [Ln 3, Col 27]"
                                                                        IterBegin: "[3, 21] (53)"
                                                                        IterEnd: "[3, 27] (59)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 21] (53)"
                                                                    IterEnd: "[3, 27] (59)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "value1"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 3, Col 21] -> [Ln 3, Col 27]"
                                                                      Self__: "[Ln 3, Col 21] -> [Ln 3, Col 27]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 3, Col 21] -> [Ln 3, Col 27]"
                                                                    Self__: "[Ln 3, Col 21] -> [Ln 3, Col 27]"
                                                                IterBegin: "[3, 21] (53)"
                                                                IterEnd: "[3, 27] (59)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 21] (53)"
                                                            IterEnd: "[3, 27] (59)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 21] (53)"
                                                        IterEnd: "[3, 27] (59)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[3, 27] (59)"
                                                        IterEnd: "[4, 1] (60)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 60
                                                          Start: 59
                                                        Whitespace: None
                                                    IterBegin: "[3, 21] (53)"
                                                    IterEnd: "[4, 1] (60)"
                                                    Type: "Single Line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 21] (53)"
                                                IterEnd: "[4, 1] (60)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 9] (41)"
                                            IterEnd: "[4, 1] (60)"
                                            Type: "Case Phrase <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 9] (68)"
                                                IterEnd: "[4, 13] (72)"
                                                Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(68, 72), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[4, 14] (73)"
                                                                            IterEnd: "[4, 19] (78)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(73, 78), match='case2'>"
                                                                            Whitespace:
                                                                              - 72
                                                                              - 73
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "case2"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 4, Col 14] -> [Ln 4, Col 19]"
                                                                            Self__: "[Ln 4, Col 14] -> [Ln 4, Col 19]"
                                                                        IterBegin: "[4, 14] (73)"
                                                                        IterEnd: "[4, 19] (78)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[4, 14] (73)"
                                                                    IterEnd: "[4, 19] (78)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "case2"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 4, Col 14] -> [Ln 4, Col 19]"
                                                                      Self__: "[Ln 4, Col 14] -> [Ln 4, Col 19]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 4, Col 14] -> [Ln 4, Col 19]"
                                                                    Self__: "[Ln 4, Col 14] -> [Ln 4, Col 19]"
                                                                IterBegin: "[4, 14] (73)"
                                                                IterEnd: "[4, 19] (78)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[4, 14] (73)"
                                                            IterEnd: "[4, 19] (78)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[4, 14] (73)"
                                                        IterEnd: "[4, 19] (78)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[4, 14] (73)"
                                                    IterEnd: "[4, 19] (78)"
                                                    Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[4, 14] (73)"
                                                IterEnd: "[4, 19] (78)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 19] (78)"
                                                IterEnd: "[4, 20] (79)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(78, 79), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 20] (79)"
                                                        IterEnd: "[5, 1] (80)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 80
                                                          Start: 79
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[5, 1] (80)"
                                                        IterEnd: "[5, 13] (92)"
                                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                          End: 92
                                                          Start: 80
                                                          Value: 12
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[5, 13] (92)"
                                                                            IterEnd: "[5, 14] (93)"
                                                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(92, 93), match='('>"
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[5, 14] (93)"
                                                                            IterEnd: "[6, 1] (94)"
                                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                              End: 94
                                                                              Start: 93
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[6, 1] (94)"
                                                                            IterEnd: "[6, 17] (110)"
                                                                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                              End: 110
                                                                              Start: 94
                                                                              Value: 16
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[6, 17] (110)"
                                                                                IterEnd: "[6, 22] (115)"
                                                                                Type: "'match' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(110, 115), match='match'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[6, 23] (116)"
                                                                                IterEnd: "[6, 28] (121)"
                                                                                Type: "'value' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(116, 121), match='value'>"
                                                                                Whitespace:
                                                                                  - 115
                                                                                  - 116
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[6, 29] (122)"
                                                                                            IterEnd: "[6, 33] (126)"
                                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(122, 126), match='Func'>"
                                                                                            Whitespace:
                                                                                              - 121
                                                                                              - 122
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[6, 33] (126)"
                                                                                                IterEnd: "[6, 34] (127)"
                                                                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match: "<_sre.SRE_Match object; span=(126, 127), match='('>"
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                    Children:
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                IsIgnored: False
                                                                                                                                IterBegin: "[7, 21] (148)"
                                                                                                                                IterEnd: "[7, 22] (149)"
                                                                                                                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                  Match: "<_sre.SRE_Match object; span=(148, 149), match='a'>"
                                                                                                                                Whitespace: None
                                                                                                                            Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                              Name: "a"
                                                                                                                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                                Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                                Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                            IterBegin: "[7, 21] (148)"
                                                                                                                            IterEnd: "[7, 22] (149)"
                                                                                                                            Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                        IterBegin: "[7, 21] (148)"
                                                                                                                        IterEnd: "[7, 22] (149)"
                                                                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                    Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                        Name: "a"
                                                                                                                        Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                          Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                          Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                      Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                        Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                        Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                    IterBegin: "[7, 21] (148)"
                                                                                                                    IterEnd: "[7, 22] (149)"
                                                                                                                    Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                IterBegin: "[7, 21] (148)"
                                                                                                                IterEnd: "[7, 22] (149)"
                                                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                            IterBegin: "[7, 21] (148)"
                                                                                                            IterEnd: "[7, 22] (149)"
                                                                                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                        IterBegin: "[7, 21] (148)"
                                                                                                        IterEnd: "[7, 22] (149)"
                                                                                                        Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                IsIgnored: False
                                                                                                                IterBegin: "[7, 22] (149)"
                                                                                                                IterEnd: "[7, 23] (150)"
                                                                                                                Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                  Match: "<_sre.SRE_Match object; span=(149, 150), match=','>"
                                                                                                                Whitespace: None
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                    Children:
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                Children:
                                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                    Children:
                                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                        IsIgnored: False
                                                                                                                                        IterBegin: "[8, 21] (171)"
                                                                                                                                        IterEnd: "[8, 22] (172)"
                                                                                                                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                          Match: "<_sre.SRE_Match object; span=(171, 172), match='b'>"
                                                                                                                                        Whitespace: None
                                                                                                                                    Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                      Name: "b"
                                                                                                                                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                                        Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                                        Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                                    IterBegin: "[8, 21] (171)"
                                                                                                                                    IterEnd: "[8, 22] (172)"
                                                                                                                                    Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                                IterBegin: "[8, 21] (171)"
                                                                                                                                IterEnd: "[8, 22] (172)"
                                                                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                            Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                Name: "b"
                                                                                                                                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                                  Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                                  Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                              Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                                Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                                Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                            IterBegin: "[8, 21] (171)"
                                                                                                                            IterEnd: "[8, 22] (172)"
                                                                                                                            Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                        IterBegin: "[8, 21] (171)"
                                                                                                                        IterEnd: "[8, 22] (172)"
                                                                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                    IterBegin: "[8, 21] (171)"
                                                                                                                    IterEnd: "[8, 22] (172)"
                                                                                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                IterBegin: "[8, 21] (171)"
                                                                                                                IterEnd: "[8, 22] (172)"
                                                                                                                Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                            IterBegin: "[7, 22] (149)"
                                                                                                            IterEnd: "[8, 22] (172)"
                                                                                                            Type: "Comma and Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                IsIgnored: False
                                                                                                                IterBegin: "[8, 22] (172)"
                                                                                                                IterEnd: "[8, 23] (173)"
                                                                                                                Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                  Match: "<_sre.SRE_Match object; span=(172, 173), match=','>"
                                                                                                                Whitespace: None
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                    Children:
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                Children:
                                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                    Children:
                                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                        IsIgnored: False
                                                                                                                                        IterBegin: "[9, 21] (194)"
                                                                                                                                        IterEnd: "[9, 22] (195)"
                                                                                                                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                          Match: "<_sre.SRE_Match object; span=(194, 195), match='c'>"
                                                                                                                                        Whitespace: None
                                                                                                                                    Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                      Name: "c"
                                                                                                                                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                                        Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                                        Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                                    IterBegin: "[9, 21] (194)"
                                                                                                                                    IterEnd: "[9, 22] (195)"
                                                                                                                                    Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                                IterBegin: "[9, 21] (194)"
                                                                                                                                IterEnd: "[9, 22] (195)"
                                                                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                            Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                Name: "c"
                                                                                                                                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                                  Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                                  Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                              Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                                Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                                Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                            IterBegin: "[9, 21] (194)"
                                                                                                                            IterEnd: "[9, 22] (195)"
                                                                                                                            Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                        IterBegin: "[9, 21] (194)"
                                                                                                                        IterEnd: "[9, 22] (195)"
                                                                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                    IterBegin: "[9, 21] (194)"
                                                                                                                    IterEnd: "[9, 22] (195)"
                                                                                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                IterBegin: "[9, 21] (194)"
                                                                                                                IterEnd: "[9, 22] (195)"
                                                                                                                Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                            IterBegin: "[8, 22] (172)"
                                                                                                            IterEnd: "[9, 22] (195)"
                                                                                                            Type: "Comma and Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                        IterBegin: "[7, 22] (149)"
                                                                                                        IterEnd: "[9, 22] (195)"
                                                                                                        Type: "Repeat: {Comma and Argument, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                            IsIgnored: False
                                                                                                            IterBegin: "[9, 22] (195)"
                                                                                                            IterEnd: "[9, 23] (196)"
                                                                                                            Type: "Trailing Comma <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                              Match: "<_sre.SRE_Match object; span=(195, 196), match=','>"
                                                                                                            Whitespace: None
                                                                                                        IterBegin: "[9, 22] (195)"
                                                                                                        IterEnd: "[9, 23] (196)"
                                                                                                        Type: "Repeat: {Trailing Comma, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                                                    IterBegin: "[7, 21] (148)"
                                                                                                    IterEnd: "[9, 23] (196)"
                                                                                                    Type: "Argument Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                IterBegin: "[7, 21] (148)"
                                                                                                IterEnd: "[9, 23] (196)"
                                                                                                Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[10, 17] (213)"
                                                                                                IterEnd: "[10, 18] (214)"
                                                                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match: "<_sre.SRE_Match object; span=(213, 214), match=')'>"
                                                                                                Whitespace: None
                                                                                            IterBegin: "[6, 33] (126)"
                                                                                            IterEnd: "[10, 18] (214)"
                                                                                            Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        Info: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                                                                                          Arguments:
                                                                                            - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                                                                              Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                  Name: "a"
                                                                                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                    Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                    Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                  Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                  Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                              Keyword: None
                                                                                              Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                                                                                Expression: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                Keyword: None
                                                                                                Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                            - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                                                                              Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                  Name: "b"
                                                                                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                    Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                    Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                  Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                  Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                              Keyword: None
                                                                                              Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                                                                                Expression: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                Keyword: None
                                                                                                Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                            - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                                                                              Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                  Name: "c"
                                                                                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                    Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                    Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                  Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                  Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                              Keyword: None
                                                                                              Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                                                                                Expression: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                Keyword: None
                                                                                                Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                          Name: "Func"
                                                                                          Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                                                                                            Arguments: "[Ln 6, Col 33] -> [Ln 10, Col 18]"
                                                                                            Name: "[Ln 6, Col 29] -> [Ln 6, Col 33]"
                                                                                            Self__: "[Ln 6, Col 29] -> [Ln 10, Col 18]"
                                                                                        IterBegin: "[6, 29] (122)"
                                                                                        IterEnd: "[10, 18] (214)"
                                                                                        Type: "Func Invocation Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                    IterBegin: "[6, 29] (122)"
                                                                                    IterEnd: "[10, 18] (214)"
                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                IterBegin: "[6, 29] (122)"
                                                                                IterEnd: "[10, 18] (214)"
                                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[10, 18] (214)"
                                                                                IterEnd: "[10, 19] (215)"
                                                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(214, 215), match=':'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[10, 19] (215)"
                                                                                IterEnd: "[11, 1] (216)"
                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                  End: 216
                                                                                  Start: 215
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[11, 1] (216)"
                                                                                IterEnd: "[11, 21] (236)"
                                                                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                  End: 236
                                                                                  Start: 216
                                                                                  Value: 20
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[11, 21] (236)"
                                                                                        IterEnd: "[11, 25] (240)"
                                                                                        Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(236, 240), match='case'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                    IsIgnored: False
                                                                                                                    IterBegin: "[11, 26] (241)"
                                                                                                                    IterEnd: "[11, 31] (246)"
                                                                                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                      Match: "<_sre.SRE_Match object; span=(241, 246), match='case3'>"
                                                                                                                    Whitespace:
                                                                                                                      - 240
                                                                                                                      - 241
                                                                                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                  Name: "case3"
                                                                                                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                    Name: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                                                                    Self__: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                                                                IterBegin: "[11, 26] (241)"
                                                                                                                IterEnd: "[11, 31] (246)"
                                                                                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                            IterBegin: "[11, 26] (241)"
                                                                                                            IterEnd: "[11, 31] (246)"
                                                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                            Name: "case3"
                                                                                                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                              Name: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                                                              Self__: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                                                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                            Name: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                                                            Self__: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                                                        IterBegin: "[11, 26] (241)"
                                                                                                        IterEnd: "[11, 31] (246)"
                                                                                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                    IterBegin: "[11, 26] (241)"
                                                                                                    IterEnd: "[11, 31] (246)"
                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                IterBegin: "[11, 26] (241)"
                                                                                                IterEnd: "[11, 31] (246)"
                                                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                            IterBegin: "[11, 26] (241)"
                                                                                            IterEnd: "[11, 31] (246)"
                                                                                            Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[11, 26] (241)"
                                                                                        IterEnd: "[11, 31] (246)"
                                                                                        Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[11, 31] (246)"
                                                                                        IterEnd: "[11, 32] (247)"
                                                                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(246, 247), match=':'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[11, 32] (247)"
                                                                                                IterEnd: "[12, 1] (248)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 248
                                                                                                  Start: 247
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[12, 1] (248)"
                                                                                                IterEnd: "[12, 25] (272)"
                                                                                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                                  End: 272
                                                                                                  Start: 248
                                                                                                  Value: 24
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                    IsIgnored: False
                                                                                                                    IterBegin: "[12, 25] (272)"
                                                                                                                    IterEnd: "[12, 31] (278)"
                                                                                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                      Match: "<_sre.SRE_Match object; span=(272, 278), match='value3'>"
                                                                                                                    Whitespace: None
                                                                                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                  Name: "value3"
                                                                                                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                    Name: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                                    Self__: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                                IterBegin: "[12, 25] (272)"
                                                                                                                IterEnd: "[12, 31] (278)"
                                                                                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                            IterBegin: "[12, 25] (272)"
                                                                                                            IterEnd: "[12, 31] (278)"
                                                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                            Name: "value3"
                                                                                                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                              Name: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                              Self__: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                            Name: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                            Self__: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                        IterBegin: "[12, 25] (272)"
                                                                                                        IterEnd: "[12, 31] (278)"
                                                                                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                    IterBegin: "[12, 25] (272)"
                                                                                                    IterEnd: "[12, 31] (278)"
                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                IterBegin: "[12, 25] (272)"
                                                                                                IterEnd: "[12, 31] (278)"
                                                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[12, 31] (278)"
                                                                                                IterEnd: "[14, 1] (280)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 280
                                                                                                  Start: 278
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[14, 1] (280)"
                                                                                                IterEnd: "[14, 21] (300)"
                                                                                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                                  {}
                                                                                                Whitespace: None
                                                                                            IterBegin: "[11, 32] (247)"
                                                                                            IterEnd: "[14, 21] (300)"
                                                                                            Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[11, 32] (247)"
                                                                                        IterEnd: "[14, 21] (300)"
                                                                                        Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                    IterBegin: "[11, 21] (236)"
                                                                                    IterEnd: "[14, 21] (300)"
                                                                                    Type: "Case Phrase <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[14, 21] (300)"
                                                                                        IterEnd: "[14, 25] (304)"
                                                                                        Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(300, 304), match='case'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                    IsIgnored: False
                                                                                                                    IterBegin: "[14, 26] (305)"
                                                                                                                    IterEnd: "[14, 31] (310)"
                                                                                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                      Match: "<_sre.SRE_Match object; span=(305, 310), match='case4'>"
                                                                                                                    Whitespace:
                                                                                                                      - 304
                                                                                                                      - 305
                                                                                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                  Name: "case4"
                                                                                                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                    Name: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                                                                    Self__: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                                                                IterBegin: "[14, 26] (305)"
                                                                                                                IterEnd: "[14, 31] (310)"
                                                                                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                            IterBegin: "[14, 26] (305)"
                                                                                                            IterEnd: "[14, 31] (310)"
                                                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                            Name: "case4"
                                                                                                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                              Name: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                                                              Self__: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                                                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                            Name: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                                                            Self__: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                                                        IterBegin: "[14, 26] (305)"
                                                                                                        IterEnd: "[14, 31] (310)"
                                                                                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                    IterBegin: "[14, 26] (305)"
                                                                                                    IterEnd: "[14, 31] (310)"
                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                IterBegin: "[14, 26] (305)"
                                                                                                IterEnd: "[14, 31] (310)"
                                                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                            IterBegin: "[14, 26] (305)"
                                                                                            IterEnd: "[14, 31] (310)"
                                                                                            Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[14, 26] (305)"
                                                                                        IterEnd: "[14, 31] (310)"
                                                                                        Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[14, 31] (310)"
                                                                                        IterEnd: "[14, 32] (311)"
                                                                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(310, 311), match=':'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[14, 32] (311)"
                                                                                                IterEnd: "[15, 1] (312)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 312
                                                                                                  Start: 311
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[15, 1] (312)"
                                                                                                IterEnd: "[15, 25] (336)"
                                                                                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                                  End: 336
                                                                                                  Start: 312
                                                                                                  Value: 24
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                    IsIgnored: False
                                                                                                                    IterBegin: "[15, 25] (336)"
                                                                                                                    IterEnd: "[15, 31] (342)"
                                                                                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                      Match: "<_sre.SRE_Match object; span=(336, 342), match='value4'>"
                                                                                                                    Whitespace: None
                                                                                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                  Name: "value4"
                                                                                                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                    Name: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                                    Self__: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                                IterBegin: "[15, 25] (336)"
                                                                                                                IterEnd: "[15, 31] (342)"
                                                                                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                            IterBegin: "[15, 25] (336)"
                                                                                                            IterEnd: "[15, 31] (342)"
                                                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                            Name: "value4"
                                                                                                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                              Name: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                              Self__: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                            Name: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                            Self__: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                        IterBegin: "[15, 25] (336)"
                                                                                                        IterEnd: "[15, 31] (342)"
                                                                                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                    IterBegin: "[15, 25] (336)"
                                                                                                    IterEnd: "[15, 31] (342)"
                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                IterBegin: "[15, 25] (336)"
                                                                                                IterEnd: "[15, 31] (342)"
                                                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[15, 31] (342)"
                                                                                                IterEnd: "[17, 1] (344)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 344
                                                                                                  Start: 342
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[17, 1] (344)"
                                                                                                IterEnd: "[17, 21] (364)"
                                                                                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                                  {}
                                                                                                Whitespace: None
                                                                                            IterBegin: "[14, 32] (311)"
                                                                                            IterEnd: "[17, 21] (364)"
                                                                                            Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[14, 32] (311)"
                                                                                        IterEnd: "[17, 21] (364)"
                                                                                        Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                    IterBegin: "[14, 21] (300)"
                                                                                    IterEnd: "[17, 21] (364)"
                                                                                    Type: "Case Phrase <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[11, 21] (236)"
                                                                                IterEnd: "[17, 21] (364)"
                                                                                Type: "Repeat: {Case Phrase, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[17, 21] (364)"
                                                                                        IterEnd: "[17, 28] (371)"
                                                                                        Type: "'default' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(364, 371), match='default'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[17, 28] (371)"
                                                                                        IterEnd: "[17, 29] (372)"
                                                                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(371, 372), match=':'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[17, 29] (372)"
                                                                                                IterEnd: "[18, 1] (373)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 373
                                                                                                  Start: 372
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[18, 1] (373)"
                                                                                                IterEnd: "[18, 25] (397)"
                                                                                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                                  End: 397
                                                                                                  Start: 373
                                                                                                  Value: 24
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                            IsIgnored: False
                                                                                                            IterBegin: "[18, 25] (397)"
                                                                                                            IterEnd: "[18, 26] (398)"
                                                                                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                              Match: "<_sre.SRE_Match object; span=(397, 398), match='('>"
                                                                                                            Whitespace: None
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                    Children:
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                Children:
                                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                    Children:
                                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                        Children:
                                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                            IsIgnored: False
                                                                                                                                            IterBegin: "[19, 29] (427)"
                                                                                                                                            IterEnd: "[19, 33] (431)"
                                                                                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                              Match: "<_sre.SRE_Match object; span=(427, 431), match='true'>"
                                                                                                                                            Whitespace: None
                                                                                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                          Name: "true"
                                                                                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                                            Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                            Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                        IterBegin: "[19, 29] (427)"
                                                                                                                                        IterEnd: "[19, 33] (431)"
                                                                                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                                    IterBegin: "[19, 29] (427)"
                                                                                                                                    IterEnd: "[19, 33] (431)"
                                                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                    Name: "true"
                                                                                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                                      Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                      Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                                    Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                    Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                IterBegin: "[19, 29] (427)"
                                                                                                                                IterEnd: "[19, 33] (431)"
                                                                                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                            IterBegin: "[19, 29] (427)"
                                                                                                                            IterEnd: "[19, 33] (431)"
                                                                                                                            Type: "Left Recursive Wrapper <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                        IterBegin: "[19, 29] (427)"
                                                                                                                        IterEnd: "[19, 33] (431)"
                                                                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                        IsIgnored: False
                                                                                                                        IterBegin: "[20, 29] (460)"
                                                                                                                        IterEnd: "[20, 31] (462)"
                                                                                                                        Type: "'if' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match: "<_sre.SRE_Match object; span=(460, 462), match='if'>"
                                                                                                                        Whitespace: None
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                Children:
                                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                    Children:
                                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                        Children:
                                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                            IsIgnored: False
                                                                                                                                            IterBegin: "[20, 32] (463)"
                                                                                                                                            IterEnd: "[20, 37] (468)"
                                                                                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                              Match: "<_sre.SRE_Match object; span=(463, 468), match='cond1'>"
                                                                                                                                            Whitespace:
                                                                                                                                              - 462
                                                                                                                                              - 463
                                                                                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                          Name: "cond1"
                                                                                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                                            Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                            Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                        IterBegin: "[20, 32] (463)"
                                                                                                                                        IterEnd: "[20, 37] (468)"
                                                                                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                                    IterBegin: "[20, 32] (463)"
                                                                                                                                    IterEnd: "[20, 37] (468)"
                                                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                    Name: "cond1"
                                                                                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                                      Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                      Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                                    Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                    Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                IterBegin: "[20, 32] (463)"
                                                                                                                                IterEnd: "[20, 37] (468)"
                                                                                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                            IterBegin: "[20, 32] (463)"
                                                                                                                            IterEnd: "[20, 37] (468)"
                                                                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                        IterBegin: "[20, 32] (463)"
                                                                                                                        IterEnd: "[20, 37] (468)"
                                                                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                        IsIgnored: False
                                                                                                                        IterBegin: "[20, 38] (469)"
                                                                                                                        IterEnd: "[20, 42] (473)"
                                                                                                                        Type: "'else' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match: "<_sre.SRE_Match object; span=(469, 473), match='else'>"
                                                                                                                        Whitespace:
                                                                                                                          - 468
                                                                                                                          - 469
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                Children:
                                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                    Children:
                                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                        Children:
                                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                            IsIgnored: False
                                                                                                                                            IterBegin: "[21, 29] (502)"
                                                                                                                                            IterEnd: "[21, 34] (507)"
                                                                                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                              Match: "<_sre.SRE_Match object; span=(502, 507), match='false'>"
                                                                                                                                            Whitespace: None
                                                                                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                          Name: "false"
                                                                                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                                            Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                            Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                        IterBegin: "[21, 29] (502)"
                                                                                                                                        IterEnd: "[21, 34] (507)"
                                                                                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                                    IterBegin: "[21, 29] (502)"
                                                                                                                                    IterEnd: "[21, 34] (507)"
                                                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                    Name: "false"
                                                                                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                                      Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                      Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                                    Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                    Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                IterBegin: "[21, 29] (502)"
                                                                                                                                IterEnd: "[21, 34] (507)"
                                                                                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                            IterBegin: "[21, 29] (502)"
                                                                                                                            IterEnd: "[21, 34] (507)"
                                                                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                        IterBegin: "[21, 29] (502)"
                                                                                                                        IterEnd: "[21, 34] (507)"
                                                                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                    Info: # <class 'TheLanguage.Lexer.Expressions.TernaryExpressionLexerInfo.TernaryExpressionLexerInfo'>
                                                                                                                      ConditionExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                          Name: "cond1"
                                                                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                            Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                            Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                          Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                          Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                      FalseExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                          Name: "false"
                                                                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                            Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                            Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                          Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                          Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                      Regions: # <class 'types.TernaryExpressionLexerInfoRegions'>
                                                                                                                        ConditionExpression: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                        FalseExpression: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                        Self__: "[Ln 19, Col 29] -> [Ln 21, Col 34]"
                                                                                                                        TrueExpression: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                      TrueExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                          Name: "true"
                                                                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                            Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                            Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                          Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                          Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                    IterBegin: "[19, 29] (427)"
                                                                                                                    IterEnd: "[21, 34] (507)"
                                                                                                                    Type: "Ternary Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                IterBegin: "[19, 29] (427)"
                                                                                                                IterEnd: "[21, 34] (507)"
                                                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                            IterBegin: "[19, 29] (427)"
                                                                                                            IterEnd: "[21, 34] (507)"
                                                                                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                            IsIgnored: False
                                                                                                            IterBegin: "[22, 25] (532)"
                                                                                                            IterEnd: "[22, 26] (533)"
                                                                                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                              Match: "<_sre.SRE_Match object; span=(532, 533), match=')'>"
                                                                                                            Whitespace: None
                                                                                                        Info: # <class 'TheLanguage.Lexer.Expressions.GroupExpressionLexerInfo.GroupExpressionLexerInfo'>
                                                                                                          Expression: # <class 'TheLanguage.Lexer.Expressions.TernaryExpressionLexerInfo.TernaryExpressionLexerInfo'>
                                                                                                            ConditionExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                Name: "cond1"
                                                                                                                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                  Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                  Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                              Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                            FalseExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                Name: "false"
                                                                                                                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                  Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                  Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                              Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                            Regions: # <class 'types.TernaryExpressionLexerInfoRegions'>
                                                                                                              ConditionExpression: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                              FalseExpression: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                              Self__: "[Ln 19, Col 29] -> [Ln 21, Col 34]"
                                                                                                              TrueExpression: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                            TrueExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                Name: "true"
                                                                                                                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                                                                  Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                  Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                              Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                                                                Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                          Regions: # <class 'types.GroupExpressionLexerInfoRegions'>
                                                                                                            Expression: "[Ln 19, Col 29] -> [Ln 21, Col 34]"
                                                                                                            Self__: "[Ln 18, Col 25] -> [Ln 22, Col 26]"
                                                                                                        IterBegin: "[18, 25] (397)"
                                                                                                        IterEnd: "[22, 26] (533)"
                                                                                                        Type: "Group Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                    IterBegin: "[18, 25] (397)"
                                                                                                    IterEnd: "[22, 26] (533)"
                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                IterBegin: "[18, 25] (397)"
                                                                                                IterEnd: "[22, 26] (533)"
                                                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[22, 26] (533)"
                                                                                                IterEnd: "[23, 1] (534)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 534
                                                                                                  Start: 533
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[23, 1] (534)"
                                                                                                IterEnd: "[23, 1] (534)"
                                                                                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                                  {}
                                                                                                Whitespace: None
                                                                                            IterBegin: "[17, 29] (372)"
                                                                                            IterEnd: "[23, 1] (534)"
                                                                                            Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[17, 29] (372)"
                                                                                        IterEnd: "[23, 1] (534)"
                                                                                        Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                    IterBegin: "[17, 21] (364)"
                                                                                    IterEnd: "[23, 1] (534)"
                                                                                    Type: "Default <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[17, 21] (364)"
                                                                                IterEnd: "[23, 1] (534)"
                                                                                Type: "Repeat: {Default, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[23, 1] (534)"
                                                                                IterEnd: "[23, 1] (534)"
                                                                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                  {}
                                                                                Whitespace: None
                                                                            IterBegin: "[6, 17] (110)"
                                                                            IterEnd: "[23, 1] (534)"
                                                                            Type: "Match <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[23, 1] (534)"
                                                                            IterEnd: "[23, 13] (546)"
                                                                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                              {}
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[23, 13] (546)"
                                                                            IterEnd: "[23, 14] (547)"
                                                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(546, 547), match=')'>"
                                                                            Whitespace: None
                                                                        IterBegin: "[5, 13] (92)"
                                                                        IterEnd: "[23, 14] (547)"
                                                                        Type: "Allman-like <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[5, 13] (92)"
                                                                    IterEnd: "[23, 14] (547)"
                                                                    Type: "Style <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.MatchValueExpressionLexerInfo.MatchValueExpressionLexerInfo'>
                                                                  CasePhrases:
                                                                    - # <class 'TheLanguage.Lexer.Expressions.MatchValueExpressionLexerInfo.MatchValueCasePhraseLexerInfo'>
                                                                      Cases:
                                                                        - # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                            Name: "case3"
                                                                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                              Name: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                              Self__: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                            Name: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                            Self__: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                      Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value3"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                            Self__: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                          Name: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                          Self__: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                      Regions: # <class 'types.MatchValueCasePhraseLexerInfoRegions'>
                                                                        Cases: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                        Expression: "[Ln 11, Col 32] -> [Ln 14, Col 21]"
                                                                        Self__: "[Ln 11, Col 21] -> [Ln 14, Col 21]"
                                                                    - # <class 'TheLanguage.Lexer.Expressions.MatchValueExpressionLexerInfo.MatchValueCasePhraseLexerInfo'>
                                                                      Cases:
                                                                        - # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                            Name: "case4"
                                                                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                              Name: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                              Self__: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                            Name: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                            Self__: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                      Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value4"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                            Self__: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                          Name: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                          Self__: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                      Regions: # <class 'types.MatchValueCasePhraseLexerInfoRegions'>
                                                                        Cases: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                        Expression: "[Ln 14, Col 32] -> [Ln 17, Col 21]"
                                                                        Self__: "[Ln 14, Col 21] -> [Ln 17, Col 21]"
                                                                  Default: # <class 'TheLanguage.Lexer.Expressions.GroupExpressionLexerInfo.GroupExpressionLexerInfo'>
                                                                    Expression: # <class 'TheLanguage.Lexer.Expressions.TernaryExpressionLexerInfo.TernaryExpressionLexerInfo'>
                                                                      ConditionExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "cond1"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                            Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                          Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                          Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                      FalseExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "false"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                            Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                          Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                          Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                      Regions: # <class 'types.TernaryExpressionLexerInfoRegions'>
                                                                        ConditionExpression: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                        FalseExpression: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                        Self__: "[Ln 19, Col 29] -> [Ln 21, Col 34]"
                                                                        TrueExpression: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                      TrueExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "true"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                            Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                          Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                          Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                    Regions: # <class 'types.GroupExpressionLexerInfoRegions'>
                                                                      Expression: "[Ln 19, Col 29] -> [Ln 21, Col 34]"
                                                                      Self__: "[Ln 18, Col 25] -> [Ln 22, Col 26]"
                                                                  Expression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                                                                    Arguments:
                                                                      - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                                                        Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                            Name: "a"
                                                                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                              Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                              Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                            Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                            Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                        Keyword: None
                                                                        Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                                                          Expression: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                          Keyword: None
                                                                          Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                      - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                                                        Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                            Name: "b"
                                                                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                              Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                              Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                            Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                            Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                        Keyword: None
                                                                        Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                                                          Expression: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                          Keyword: None
                                                                          Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                      - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                                                        Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                            Name: "c"
                                                                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                              Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                              Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                            Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                            Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                        Keyword: None
                                                                        Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                                                          Expression: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                          Keyword: None
                                                                          Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                    Name: "Func"
                                                                    Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                                                                      Arguments: "[Ln 6, Col 33] -> [Ln 10, Col 18]"
                                                                      Name: "[Ln 6, Col 29] -> [Ln 6, Col 33]"
                                                                      Self__: "[Ln 6, Col 29] -> [Ln 10, Col 18]"
                                                                  Regions: # <class 'types.MatchValueExpressionLexerInfoRegions'>
                                                                    CasePhrases: "[Ln 11, Col 21] -> [Ln 17, Col 21]"
                                                                    Default: "[Ln 17, Col 29] -> [Ln 23, Col 1]"
                                                                    Expression: "[Ln 6, Col 29] -> [Ln 10, Col 18]"
                                                                    Self__: "[Ln 5, Col 13] -> [Ln 23, Col 14]"
                                                                IterBegin: "[5, 13] (92)"
                                                                IterEnd: "[23, 14] (547)"
                                                                Type: "Match Value Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[5, 13] (92)"
                                                            IterEnd: "[23, 14] (547)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[5, 13] (92)"
                                                        IterEnd: "[23, 14] (547)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[23, 14] (547)"
                                                        IterEnd: "[24, 1] (548)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 548
                                                          Start: 547
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[24, 1] (548)"
                                                        IterEnd: "[24, 9] (556)"
                                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                          {}
                                                        Whitespace: None
                                                    IterBegin: "[4, 20] (79)"
                                                    IterEnd: "[24, 9] (556)"
                                                    Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[4, 20] (79)"
                                                IterEnd: "[24, 9] (556)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[4, 9] (68)"
                                            IterEnd: "[24, 9] (556)"
                                            Type: "Case Phrase <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[24, 9] (556)"
                                                IterEnd: "[24, 13] (560)"
                                                Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(556, 560), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[24, 14] (561)"
                                                                            IterEnd: "[24, 19] (566)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(561, 566), match='case5'>"
                                                                            Whitespace:
                                                                              - 560
                                                                              - 561
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "case5"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 24, Col 14] -> [Ln 24, Col 19]"
                                                                            Self__: "[Ln 24, Col 14] -> [Ln 24, Col 19]"
                                                                        IterBegin: "[24, 14] (561)"
                                                                        IterEnd: "[24, 19] (566)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[24, 14] (561)"
                                                                    IterEnd: "[24, 19] (566)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "case5"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 24, Col 14] -> [Ln 24, Col 19]"
                                                                      Self__: "[Ln 24, Col 14] -> [Ln 24, Col 19]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 24, Col 14] -> [Ln 24, Col 19]"
                                                                    Self__: "[Ln 24, Col 14] -> [Ln 24, Col 19]"
                                                                IterBegin: "[24, 14] (561)"
                                                                IterEnd: "[24, 19] (566)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[24, 14] (561)"
                                                            IterEnd: "[24, 19] (566)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[24, 14] (561)"
                                                        IterEnd: "[24, 19] (566)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[24, 14] (561)"
                                                    IterEnd: "[24, 19] (566)"
                                                    Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[24, 14] (561)"
                                                IterEnd: "[24, 19] (566)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[24, 19] (566)"
                                                IterEnd: "[24, 20] (567)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(566, 567), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[24, 20] (567)"
                                                        IterEnd: "[25, 1] (568)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 568
                                                          Start: 567
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[25, 1] (568)"
                                                        IterEnd: "[25, 13] (580)"
                                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                          End: 580
                                                          Start: 568
                                                          Value: 12
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[25, 13] (580)"
                                                                            IterEnd: "[25, 19] (586)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(580, 586), match='value5'>"
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value5"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                            Self__: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                        IterBegin: "[25, 13] (580)"
                                                                        IterEnd: "[25, 19] (586)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[25, 13] (580)"
                                                                    IterEnd: "[25, 19] (586)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "value5"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                      Self__: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                    Self__: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                IterBegin: "[25, 13] (580)"
                                                                IterEnd: "[25, 19] (586)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[25, 13] (580)"
                                                            IterEnd: "[25, 19] (586)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[25, 13] (580)"
                                                        IterEnd: "[25, 19] (586)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[25, 19] (586)"
                                                        IterEnd: "[27, 1] (588)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 588
                                                          Start: 586
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[27, 1] (588)"
                                                        IterEnd: "[27, 9] (596)"
                                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                          {}
                                                        Whitespace: None
                                                    IterBegin: "[24, 20] (567)"
                                                    IterEnd: "[27, 9] (596)"
                                                    Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[24, 20] (567)"
                                                IterEnd: "[27, 9] (596)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[24, 9] (556)"
                                            IterEnd: "[27, 9] (596)"
                                            Type: "Case Phrase <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[3, 9] (41)"
                                        IterEnd: "[27, 9] (596)"
                                        Type: "Repeat: {Case Phrase, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[27, 9] (596)"
                                                IterEnd: "[27, 16] (603)"
                                                Type: "'default' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(596, 603), match='default'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[27, 16] (603)"
                                                IterEnd: "[27, 17] (604)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(603, 604), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[27, 18] (605)"
                                                                            IterEnd: "[27, 24] (611)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(605, 611), match='value6'>"
                                                                            Whitespace:
                                                                              - 604
                                                                              - 605
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value6"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                            Self__: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                        IterBegin: "[27, 18] (605)"
                                                                        IterEnd: "[27, 24] (611)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[27, 18] (605)"
                                                                    IterEnd: "[27, 24] (611)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "value6"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                      Self__: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                    Self__: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                IterBegin: "[27, 18] (605)"
                                                                IterEnd: "[27, 24] (611)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[27, 18] (605)"
                                                            IterEnd: "[27, 24] (611)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[27, 18] (605)"
                                                        IterEnd: "[27, 24] (611)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[27, 24] (611)"
                                                        IterEnd: "[30, 1] (614)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 614
                                                          Start: 611
                                                        Whitespace: None
                                                    IterBegin: "[27, 18] (605)"
                                                    IterEnd: "[30, 1] (614)"
                                                    Type: "Single Line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[27, 18] (605)"
                                                IterEnd: "[30, 1] (614)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[27, 9] (596)"
                                            IterEnd: "[30, 1] (614)"
                                            Type: "Default <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[27, 9] (596)"
                                        IterEnd: "[30, 1] (614)"
                                        Type: "Repeat: {Default, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[30, 1] (614)"
                                        IterEnd: "[30, 1] (614)"
                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                          {}
                                        Whitespace: None
                                    IterBegin: "[2, 5] (14)"
                                    IterEnd: "[30, 1] (614)"
                                    Type: "Match <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[30, 1] (614)"
                                    IterEnd: "[30, 1] (614)"
                                    Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[30, 1] (614)"
                                    IterEnd: "[30, 2] (615)"
                                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(614, 615), match=')'>"
                                    Whitespace: None
                                IterBegin: "[1, 9] (8)"
                                IterEnd: "[30, 2] (615)"
                                Type: "Allman-like <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 9] (8)"
                            IterEnd: "[30, 2] (615)"
                            Type: "Style <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.Expressions.MatchValueExpressionLexerInfo.MatchValueExpressionLexerInfo'>
                          CasePhrases:
                            - # <class 'TheLanguage.Lexer.Expressions.MatchValueExpressionLexerInfo.MatchValueCasePhraseLexerInfo'>
                              Cases:
                                - # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                    Name: "case1"
                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                      Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                      Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                    Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                    Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                              Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                  Name: "value1"
                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                    Name: "[Ln 3, Col 21] -> [Ln 3, Col 27]"
                                    Self__: "[Ln 3, Col 21] -> [Ln 3, Col 27]"
                                Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                  Name: "[Ln 3, Col 21] -> [Ln 3, Col 27]"
                                  Self__: "[Ln 3, Col 21] -> [Ln 3, Col 27]"
                              Regions: # <class 'types.MatchValueCasePhraseLexerInfoRegions'>
                                Cases: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                Expression: "[Ln 3, Col 21] -> [Ln 4, Col 1]"
                                Self__: "[Ln 3, Col 9] -> [Ln 4, Col 1]"
                            - # <class 'TheLanguage.Lexer.Expressions.MatchValueExpressionLexerInfo.MatchValueCasePhraseLexerInfo'>
                              Cases:
                                - # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                    Name: "case2"
                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                      Name: "[Ln 4, Col 14] -> [Ln 4, Col 19]"
                                      Self__: "[Ln 4, Col 14] -> [Ln 4, Col 19]"
                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                    Name: "[Ln 4, Col 14] -> [Ln 4, Col 19]"
                                    Self__: "[Ln 4, Col 14] -> [Ln 4, Col 19]"
                              Expression: # <class 'TheLanguage.Lexer.Expressions.MatchValueExpressionLexerInfo.MatchValueExpressionLexerInfo'>
                                CasePhrases:
                                  - # <class 'TheLanguage.Lexer.Expressions.MatchValueExpressionLexerInfo.MatchValueCasePhraseLexerInfo'>
                                    Cases:
                                      - # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                          Name: "case3"
                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                            Name: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                            Self__: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                          Name: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                          Self__: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                    Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                        Name: "value3"
                                        Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                          Name: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                          Self__: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                      Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                        Name: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                        Self__: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                    Regions: # <class 'types.MatchValueCasePhraseLexerInfoRegions'>
                                      Cases: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                      Expression: "[Ln 11, Col 32] -> [Ln 14, Col 21]"
                                      Self__: "[Ln 11, Col 21] -> [Ln 14, Col 21]"
                                  - # <class 'TheLanguage.Lexer.Expressions.MatchValueExpressionLexerInfo.MatchValueCasePhraseLexerInfo'>
                                    Cases:
                                      - # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                          Name: "case4"
                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                            Name: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                            Self__: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                          Name: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                          Self__: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                    Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                        Name: "value4"
                                        Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                          Name: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                          Self__: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                      Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                        Name: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                        Self__: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                    Regions: # <class 'types.MatchValueCasePhraseLexerInfoRegions'>
                                      Cases: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                      Expression: "[Ln 14, Col 32] -> [Ln 17, Col 21]"
                                      Self__: "[Ln 14, Col 21] -> [Ln 17, Col 21]"
                                Default: # <class 'TheLanguage.Lexer.Expressions.GroupExpressionLexerInfo.GroupExpressionLexerInfo'>
                                  Expression: # <class 'TheLanguage.Lexer.Expressions.TernaryExpressionLexerInfo.TernaryExpressionLexerInfo'>
                                    ConditionExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                        Name: "cond1"
                                        Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                          Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                          Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                      Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                        Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                        Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                    FalseExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                        Name: "false"
                                        Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                          Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                          Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                      Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                        Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                        Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                    Regions: # <class 'types.TernaryExpressionLexerInfoRegions'>
                                      ConditionExpression: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                      FalseExpression: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                      Self__: "[Ln 19, Col 29] -> [Ln 21, Col 34]"
                                      TrueExpression: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                    TrueExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                        Name: "true"
                                        Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                          Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                          Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                      Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                        Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                        Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                  Regions: # <class 'types.GroupExpressionLexerInfoRegions'>
                                    Expression: "[Ln 19, Col 29] -> [Ln 21, Col 34]"
                                    Self__: "[Ln 18, Col 25] -> [Ln 22, Col 26]"
                                Expression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                                  Arguments:
                                    - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                      Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                          Name: "a"
                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                            Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                            Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                          Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                          Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                      Keyword: None
                                      Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                        Expression: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                        Keyword: None
                                        Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                    - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                      Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                          Name: "b"
                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                            Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                            Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                          Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                          Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                      Keyword: None
                                      Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                        Expression: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                        Keyword: None
                                        Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                    - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                      Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                          Name: "c"
                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                            Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                            Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                          Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                          Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                      Keyword: None
                                      Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                        Expression: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                        Keyword: None
                                        Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                  Name: "Func"
                                  Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                                    Arguments: "[Ln 6, Col 33] -> [Ln 10, Col 18]"
                                    Name: "[Ln 6, Col 29] -> [Ln 6, Col 33]"
                                    Self__: "[Ln 6, Col 29] -> [Ln 10, Col 18]"
                                Regions: # <class 'types.MatchValueExpressionLexerInfoRegions'>
                                  CasePhrases: "[Ln 11, Col 21] -> [Ln 17, Col 21]"
                                  Default: "[Ln 17, Col 29] -> [Ln 23, Col 1]"
                                  Expression: "[Ln 6, Col 29] -> [Ln 10, Col 18]"
                                  Self__: "[Ln 5, Col 13] -> [Ln 23, Col 14]"
                              Regions: # <class 'types.MatchValueCasePhraseLexerInfoRegions'>
                                Cases: "[Ln 4, Col 14] -> [Ln 4, Col 19]"
                                Expression: "[Ln 4, Col 20] -> [Ln 24, Col 9]"
                                Self__: "[Ln 4, Col 9] -> [Ln 24, Col 9]"
                            - # <class 'TheLanguage.Lexer.Expressions.MatchValueExpressionLexerInfo.MatchValueCasePhraseLexerInfo'>
                              Cases:
                                - # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                    Name: "case5"
                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                      Name: "[Ln 24, Col 14] -> [Ln 24, Col 19]"
                                      Self__: "[Ln 24, Col 14] -> [Ln 24, Col 19]"
                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                    Name: "[Ln 24, Col 14] -> [Ln 24, Col 19]"
                                    Self__: "[Ln 24, Col 14] -> [Ln 24, Col 19]"
                              Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                  Name: "value5"
                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                    Name: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                    Self__: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                  Name: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                  Self__: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                              Regions: # <class 'types.MatchValueCasePhraseLexerInfoRegions'>
                                Cases: "[Ln 24, Col 14] -> [Ln 24, Col 19]"
                                Expression: "[Ln 24, Col 20] -> [Ln 27, Col 9]"
                                Self__: "[Ln 24, Col 9] -> [Ln 27, Col 9]"
                          Default: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                              Name: "value6"
                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                Name: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                Self__: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                            Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                              Name: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                              Self__: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                          Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                              Name: "expr1"
                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                            Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                              Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                              Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                          Regions: # <class 'types.MatchValueExpressionLexerInfoRegions'>
                            CasePhrases: "[Ln 3, Col 9] -> [Ln 27, Col 9]"
                            Default: "[Ln 27, Col 18] -> [Ln 30, Col 1]"
                            Expression: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                            Self__: "[Ln 1, Col 9] -> [Ln 30, Col 2]"
                        IterBegin: "[1, 9] (8)"
                        IterEnd: "[30, 2] (615)"
                        Type: "Match Value Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 9] (8)"
                    IterEnd: "[30, 2] (615)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 9] (8)"
                IterEnd: "[30, 2] (615)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[30, 2] (615)"
                IterEnd: "[31, 1] (616)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 616
                  Start: 615
                Whitespace: None
            IterBegin: "[1, 1] (0)"
            IterEnd: "[31, 1] (616)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[31, 1] (616)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[31, 1] (616)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[31, 1] (616)"
Type: "<None>"
