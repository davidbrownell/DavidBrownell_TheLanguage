# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 6] (5)"
                    Type: "'class' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(0, 5), match='class'>"
                    Whitespace: None
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Type: "Class Type <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 7] (6)"
                IterEnd: "[1, 10] (9)"
                Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(6, 9), match='Foo'>"
                Whitespace:
                  - 5
                  - 6
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 10] (9)"
                IterEnd: "[1, 11] (10)"
                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(9, 10), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 11] (10)"
                IterEnd: "[1, 12] (11)"
                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(10, 11), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 12] (11)"
                    IterEnd: "[1, 13] (12)"
                    Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 12), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 13] (12)"
                            IterEnd: "[2, 1] (13)"
                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                              End: 13
                              Start: 12
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 1] (13)"
                            IterEnd: "[2, 5] (17)"
                            Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                              End: 17
                              Start: 13
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 5] (17)"
                                                    IterEnd: "[2, 11] (23)"
                                                    Type: "'public' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(17, 23), match='public'>"
                                                    Whitespace: None
                                                IterBegin: "[2, 5] (17)"
                                                IterEnd: "[2, 11] (23)"
                                                Type: "Visibility <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[2, 5] (17)"
                                            IterEnd: "[2, 11] (23)"
                                            Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 12] (24)"
                                                    IterEnd: "[2, 20] (32)"
                                                    Type: "'abstract' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(24, 32), match='abstract'>"
                                                    Whitespace:
                                                      - 23
                                                      - 24
                                                IterBegin: "[2, 12] (24)"
                                                IterEnd: "[2, 20] (32)"
                                                Type: "Method Type <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[2, 12] (24)"
                                            IterEnd: "[2, 20] (32)"
                                            Type: "Repeat: {Method Type, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[2, 21] (33)"
                                                        IterEnd: "[2, 24] (36)"
                                                        Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(33, 36), match='Int'>"
                                                        Whitespace:
                                                          - 32
                                                          - 33
                                                    Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                                      Modifier: None
                                                      Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                                        Modifier: None
                                                        Self__: "[Ln 2, Col 21] -> [Ln 2, Col 24]"
                                                        TypeName: "[Ln 2, Col 21] -> [Ln 2, Col 24]"
                                                      TypeName: "Int"
                                                    IterBegin: "[2, 21] (33)"
                                                    IterEnd: "[2, 24] (36)"
                                                    Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[2, 21] (33)"
                                                IterEnd: "[2, 24] (36)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[2, 21] (33)"
                                            IterEnd: "[2, 24] (36)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 25] (37)"
                                            IterEnd: "[2, 45] (57)"
                                            Type: "<method_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(37, 57), match='PublicAbstractMethod'>"
                                            Whitespace:
                                              - 36
                                              - 37
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 45] (57)"
                                                IterEnd: "[2, 46] (58)"
                                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(57, 58), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 46] (58)"
                                                IterEnd: "[2, 47] (59)"
                                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(58, 59), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[2, 45] (57)"
                                            IterEnd: "[2, 47] (59)"
                                            Type: "Parameters <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 47] (59)"
                                                IterEnd: "[3, 1] (60)"
                                                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                  End: 60
                                                  Start: 59
                                                Whitespace: None
                                            IterBegin: "[2, 47] (59)"
                                            IterEnd: "[3, 1] (60)"
                                            Type: "Or: (Statements, Newline+) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        Info: # <class 'TheLanguage.Parser.Statements.FuncAndMethodDefinitionStatementParserInfo.FuncAndMethodDefinitionStatementParserInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          Documentation: None
                                          MethodType: "MethodType.abstract"
                                          Name: "PublicAbstractMethod"
                                          Parameters: None
                                          Regions: # <class 'types.FuncAndMethodDefinitionStatementParserInfoRegions'>
                                            ClassModifier: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                                            Documentation: None
                                            MethodType: "[Ln 2, Col 12] -> [Ln 2, Col 20]"
                                            Name: "[Ln 2, Col 25] -> [Ln 2, Col 45]"
                                            Parameters: None
                                            ReturnType: "[Ln 2, Col 21] -> [Ln 2, Col 24]"
                                            Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                                            Statements: None
                                            Visibility: "[Ln 2, Col 5] -> [Ln 2, Col 11]"
                                          ReturnType: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                            Modifier: None
                                            Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                              Modifier: None
                                              Self__: "[Ln 2, Col 21] -> [Ln 2, Col 24]"
                                              TypeName: "[Ln 2, Col 21] -> [Ln 2, Col 24]"
                                            TypeName: "Int"
                                          Statements: None
                                          Visibility: "VisibilityModifier.public"
                                        IterBegin: "[2, 5] (17)"
                                        IterEnd: "[3, 1] (60)"
                                        Type: "Func And Method Definition Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[2, 5] (17)"
                                    IterEnd: "[3, 1] (60)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 5] (17)"
                                IterEnd: "[3, 1] (60)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[3, 5] (64)"
                                                    IterEnd: "[3, 14] (73)"
                                                    Type: "'protected' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(64, 73), match='protected'>"
                                                    Whitespace: None
                                                IterBegin: "[3, 5] (64)"
                                                IterEnd: "[3, 14] (73)"
                                                Type: "Visibility <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 5] (64)"
                                            IterEnd: "[3, 14] (73)"
                                            Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[3, 15] (74)"
                                                    IterEnd: "[3, 23] (82)"
                                                    Type: "'abstract' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(74, 82), match='abstract'>"
                                                    Whitespace:
                                                      - 73
                                                      - 74
                                                IterBegin: "[3, 15] (74)"
                                                IterEnd: "[3, 23] (82)"
                                                Type: "Method Type <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 15] (74)"
                                            IterEnd: "[3, 23] (82)"
                                            Type: "Repeat: {Method Type, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[3, 24] (83)"
                                                        IterEnd: "[3, 28] (87)"
                                                        Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(83, 87), match='Bool'>"
                                                        Whitespace:
                                                          - 82
                                                          - 83
                                                    Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                                      Modifier: None
                                                      Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                                        Modifier: None
                                                        Self__: "[Ln 3, Col 24] -> [Ln 3, Col 28]"
                                                        TypeName: "[Ln 3, Col 24] -> [Ln 3, Col 28]"
                                                      TypeName: "Bool"
                                                    IterBegin: "[3, 24] (83)"
                                                    IterEnd: "[3, 28] (87)"
                                                    Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 24] (83)"
                                                IterEnd: "[3, 28] (87)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 24] (83)"
                                            IterEnd: "[3, 28] (87)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 29] (88)"
                                            IterEnd: "[3, 52] (111)"
                                            Type: "<method_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(88, 111), match='ProtectedAbstractMethod'>"
                                            Whitespace:
                                              - 87
                                              - 88
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 52] (111)"
                                                IterEnd: "[3, 53] (112)"
                                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(111, 112), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 53] (112)"
                                                IterEnd: "[3, 54] (113)"
                                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(112, 113), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[3, 52] (111)"
                                            IterEnd: "[3, 54] (113)"
                                            Type: "Parameters <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 54] (113)"
                                                IterEnd: "[4, 1] (114)"
                                                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                  End: 114
                                                  Start: 113
                                                Whitespace: None
                                            IterBegin: "[3, 54] (113)"
                                            IterEnd: "[4, 1] (114)"
                                            Type: "Or: (Statements, Newline+) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        Info: # <class 'TheLanguage.Parser.Statements.FuncAndMethodDefinitionStatementParserInfo.FuncAndMethodDefinitionStatementParserInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          Documentation: None
                                          MethodType: "MethodType.abstract"
                                          Name: "ProtectedAbstractMethod"
                                          Parameters: None
                                          Regions: # <class 'types.FuncAndMethodDefinitionStatementParserInfoRegions'>
                                            ClassModifier: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
                                            Documentation: None
                                            MethodType: "[Ln 3, Col 15] -> [Ln 3, Col 23]"
                                            Name: "[Ln 3, Col 29] -> [Ln 3, Col 52]"
                                            Parameters: None
                                            ReturnType: "[Ln 3, Col 24] -> [Ln 3, Col 28]"
                                            Self__: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
                                            Statements: None
                                            Visibility: "[Ln 3, Col 5] -> [Ln 3, Col 14]"
                                          ReturnType: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                            Modifier: None
                                            Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                              Modifier: None
                                              Self__: "[Ln 3, Col 24] -> [Ln 3, Col 28]"
                                              TypeName: "[Ln 3, Col 24] -> [Ln 3, Col 28]"
                                            TypeName: "Bool"
                                          Statements: None
                                          Visibility: "VisibilityModifier.protected"
                                        IterBegin: "[3, 5] (64)"
                                        IterEnd: "[4, 1] (114)"
                                        Type: "Func And Method Definition Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[3, 5] (64)"
                                    IterEnd: "[4, 1] (114)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[3, 5] (64)"
                                IterEnd: "[4, 1] (114)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[4, 5] (118)"
                                                    IterEnd: "[4, 12] (125)"
                                                    Type: "'private' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(118, 125), match='private'>"
                                                    Whitespace: None
                                                IterBegin: "[4, 5] (118)"
                                                IterEnd: "[4, 12] (125)"
                                                Type: "Visibility <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[4, 5] (118)"
                                            IterEnd: "[4, 12] (125)"
                                            Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[4, 13] (126)"
                                                    IterEnd: "[4, 21] (134)"
                                                    Type: "'abstract' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(126, 134), match='abstract'>"
                                                    Whitespace:
                                                      - 125
                                                      - 126
                                                IterBegin: "[4, 13] (126)"
                                                IterEnd: "[4, 21] (134)"
                                                Type: "Method Type <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[4, 13] (126)"
                                            IterEnd: "[4, 21] (134)"
                                            Type: "Repeat: {Method Type, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 22] (135)"
                                                        IterEnd: "[4, 26] (139)"
                                                        Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(135, 139), match='Char'>"
                                                        Whitespace:
                                                          - 134
                                                          - 135
                                                    Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                                      Modifier: None
                                                      Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                                        Modifier: None
                                                        Self__: "[Ln 4, Col 22] -> [Ln 4, Col 26]"
                                                        TypeName: "[Ln 4, Col 22] -> [Ln 4, Col 26]"
                                                      TypeName: "Char"
                                                    IterBegin: "[4, 22] (135)"
                                                    IterEnd: "[4, 26] (139)"
                                                    Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[4, 22] (135)"
                                                IterEnd: "[4, 26] (139)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[4, 22] (135)"
                                            IterEnd: "[4, 26] (139)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[4, 27] (140)"
                                            IterEnd: "[4, 48] (161)"
                                            Type: "<method_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(140, 161), match='PrivateAbstractMethod'>"
                                            Whitespace:
                                              - 139
                                              - 140
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 48] (161)"
                                                IterEnd: "[4, 49] (162)"
                                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(161, 162), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 49] (162)"
                                                IterEnd: "[4, 50] (163)"
                                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(162, 163), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[4, 48] (161)"
                                            IterEnd: "[4, 50] (163)"
                                            Type: "Parameters <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 50] (163)"
                                                IterEnd: "[6, 1] (165)"
                                                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                  End: 165
                                                  Start: 163
                                                Whitespace: None
                                            IterBegin: "[4, 50] (163)"
                                            IterEnd: "[6, 1] (165)"
                                            Type: "Or: (Statements, Newline+) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        Info: # <class 'TheLanguage.Parser.Statements.FuncAndMethodDefinitionStatementParserInfo.FuncAndMethodDefinitionStatementParserInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          Documentation: None
                                          MethodType: "MethodType.abstract"
                                          Name: "PrivateAbstractMethod"
                                          Parameters: None
                                          Regions: # <class 'types.FuncAndMethodDefinitionStatementParserInfoRegions'>
                                            ClassModifier: "[Ln 4, Col 5] -> [Ln 6, Col 1]"
                                            Documentation: None
                                            MethodType: "[Ln 4, Col 13] -> [Ln 4, Col 21]"
                                            Name: "[Ln 4, Col 27] -> [Ln 4, Col 48]"
                                            Parameters: None
                                            ReturnType: "[Ln 4, Col 22] -> [Ln 4, Col 26]"
                                            Self__: "[Ln 4, Col 5] -> [Ln 6, Col 1]"
                                            Statements: None
                                            Visibility: "[Ln 4, Col 5] -> [Ln 4, Col 12]"
                                          ReturnType: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                            Modifier: None
                                            Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                              Modifier: None
                                              Self__: "[Ln 4, Col 22] -> [Ln 4, Col 26]"
                                              TypeName: "[Ln 4, Col 22] -> [Ln 4, Col 26]"
                                            TypeName: "Char"
                                          Statements: None
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[4, 5] (118)"
                                        IterEnd: "[6, 1] (165)"
                                        Type: "Func And Method Definition Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[4, 5] (118)"
                                    IterEnd: "[6, 1] (165)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[4, 5] (118)"
                                IterEnd: "[6, 1] (165)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[6, 5] (169)"
                                                    IterEnd: "[6, 12] (176)"
                                                    Type: "'private' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(169, 176), match='private'>"
                                                    Whitespace: None
                                                IterBegin: "[6, 5] (169)"
                                                IterEnd: "[6, 12] (176)"
                                                Type: "Visibility <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[6, 5] (169)"
                                            IterEnd: "[6, 12] (176)"
                                            Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[6, 13] (177)"
                                                    IterEnd: "[6, 21] (185)"
                                                    Type: "'abstract' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(177, 185), match='abstract'>"
                                                    Whitespace:
                                                      - 176
                                                      - 177
                                                IterBegin: "[6, 13] (177)"
                                                IterEnd: "[6, 21] (185)"
                                                Type: "Method Type <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[6, 13] (177)"
                                            IterEnd: "[6, 21] (185)"
                                            Type: "Repeat: {Method Type, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[6, 22] (186)"
                                                        IterEnd: "[6, 26] (190)"
                                                        Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(186, 190), match='Char'>"
                                                        Whitespace:
                                                          - 185
                                                          - 186
                                                    Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                                      Modifier: None
                                                      Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                                        Modifier: None
                                                        Self__: "[Ln 6, Col 22] -> [Ln 6, Col 26]"
                                                        TypeName: "[Ln 6, Col 22] -> [Ln 6, Col 26]"
                                                      TypeName: "Char"
                                                    IterBegin: "[6, 22] (186)"
                                                    IterEnd: "[6, 26] (190)"
                                                    Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[6, 22] (186)"
                                                IterEnd: "[6, 26] (190)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[6, 22] (186)"
                                            IterEnd: "[6, 26] (190)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[6, 27] (191)"
                                            IterEnd: "[6, 61] (225)"
                                            Type: "<method_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(191, 225), match='PrivateAbstractMethodWithDocstring'>"
                                            Whitespace:
                                              - 190
                                              - 191
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[6, 61] (225)"
                                                IterEnd: "[6, 62] (226)"
                                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(225, 226), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[6, 62] (226)"
                                                IterEnd: "[6, 63] (227)"
                                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(226, 227), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[6, 61] (225)"
                                            IterEnd: "[6, 63] (227)"
                                            Type: "Parameters <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[6, 63] (227)"
                                                    IterEnd: "[6, 64] (228)"
                                                    Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(227, 228), match=':'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[6, 64] (228)"
                                                            IterEnd: "[7, 1] (229)"
                                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                              End: 229
                                                              Start: 228
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[7, 1] (229)"
                                                            IterEnd: "[7, 9] (237)"
                                                            Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                                                              End: 237
                                                              Start: 229
                                                              Value: 8
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[7, 9] (237)"
                                                                            IterEnd: "[9, 12] (329)"
                                                                            Type: "Multi-line Content <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(237, 329), match='<<<\\n        An abstract method can have a docstr>"
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[9, 12] (329)"
                                                                            IterEnd: "[10, 1] (330)"
                                                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                                              End: 330
                                                                              Start: 329
                                                                            Whitespace: None
                                                                        Info: None
                                                                        IterBegin: "[7, 9] (237)"
                                                                        IterEnd: "[10, 1] (330)"
                                                                        Type: "Docstring Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[7, 9] (237)"
                                                                    IterEnd: "[10, 1] (330)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[7, 9] (237)"
                                                                IterEnd: "[10, 1] (330)"
                                                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[7, 9] (237)"
                                                            IterEnd: "[10, 1] (330)"
                                                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[10, 1] (330)"
                                                            IterEnd: "[10, 1] (330)"
                                                            Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                                                              {}
                                                            Whitespace: None
                                                        IterBegin: "[6, 64] (228)"
                                                        IterEnd: "[10, 1] (330)"
                                                        Type: "Multi-line <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[6, 64] (228)"
                                                    IterEnd: "[10, 1] (330)"
                                                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[6, 63] (227)"
                                                IterEnd: "[10, 1] (330)"
                                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[6, 63] (227)"
                                            IterEnd: "[10, 1] (330)"
                                            Type: "Or: (Statements, Newline+) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        Info: # <class 'TheLanguage.Parser.Statements.FuncAndMethodDefinitionStatementParserInfo.FuncAndMethodDefinitionStatementParserInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          Documentation: "An abstract method can have a docstring, but cannot have statements."
                                          MethodType: "MethodType.abstract"
                                          Name: "PrivateAbstractMethodWithDocstring"
                                          Parameters: None
                                          Regions: # <class 'types.FuncAndMethodDefinitionStatementParserInfoRegions'>
                                            ClassModifier: "[Ln 6, Col 5] -> [Ln 10, Col 1]"
                                            Documentation: "[Ln 7, Col 9] -> [Ln 9, Col 12]"
                                            MethodType: "[Ln 6, Col 13] -> [Ln 6, Col 21]"
                                            Name: "[Ln 6, Col 27] -> [Ln 6, Col 61]"
                                            Parameters: None
                                            ReturnType: "[Ln 6, Col 22] -> [Ln 6, Col 26]"
                                            Self__: "[Ln 6, Col 5] -> [Ln 10, Col 1]"
                                            Statements: "[Ln 6, Col 63] -> [Ln 10, Col 1]"
                                            Visibility: "[Ln 6, Col 5] -> [Ln 6, Col 12]"
                                          ReturnType: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                            Modifier: None
                                            Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                              Modifier: None
                                              Self__: "[Ln 6, Col 22] -> [Ln 6, Col 26]"
                                              TypeName: "[Ln 6, Col 22] -> [Ln 6, Col 26]"
                                            TypeName: "Char"
                                          Statements: []
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[6, 5] (169)"
                                        IterEnd: "[10, 1] (330)"
                                        Type: "Func And Method Definition Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[6, 5] (169)"
                                    IterEnd: "[10, 1] (330)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[6, 5] (169)"
                                IterEnd: "[10, 1] (330)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[2, 5] (17)"
                            IterEnd: "[10, 1] (330)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[10, 1] (330)"
                            IterEnd: "[10, 1] (330)"
                            Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[1, 13] (12)"
                        IterEnd: "[10, 1] (330)"
                        Type: "Multi-line <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 13] (12)"
                    IterEnd: "[10, 1] (330)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 12] (11)"
                IterEnd: "[10, 1] (330)"
                Type: "Statements <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            Info: # <class 'TheLanguage.Parser.Statements.ClassStatementParserInfo.ClassStatementParserInfo'>
              Base: None
              ClassModifier: "ClassModifier.immutable"
              ClassType: "ClassType.Class"
              Documentation: None
              Interfaces: None
              Mixins: None
              Name: "Foo"
              Regions: # <class 'types.ClassStatementParserInfoRegions'>
                Base: None
                ClassModifier: "[Ln 1, Col 1] -> [Ln 10, Col 1]"
                ClassType: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
                Documentation: None
                Interfaces: None
                Mixins: None
                Name: "[Ln 1, Col 7] -> [Ln 1, Col 10]"
                Self__: "[Ln 1, Col 1] -> [Ln 10, Col 1]"
                Statements: "[Ln 1, Col 12] -> [Ln 10, Col 1]"
                Visibility: "[Ln 1, Col 1] -> [Ln 10, Col 1]"
              Statements:
                - # <class 'TheLanguage.Parser.Statements.FuncAndMethodDefinitionStatementParserInfo.FuncAndMethodDefinitionStatementParserInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  Documentation: None
                  MethodType: "MethodType.abstract"
                  Name: "PublicAbstractMethod"
                  Parameters: None
                  Regions: # <class 'types.FuncAndMethodDefinitionStatementParserInfoRegions'>
                    ClassModifier: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                    Documentation: None
                    MethodType: "[Ln 2, Col 12] -> [Ln 2, Col 20]"
                    Name: "[Ln 2, Col 25] -> [Ln 2, Col 45]"
                    Parameters: None
                    ReturnType: "[Ln 2, Col 21] -> [Ln 2, Col 24]"
                    Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                    Statements: None
                    Visibility: "[Ln 2, Col 5] -> [Ln 2, Col 11]"
                  ReturnType: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                    Modifier: None
                    Regions: # <class 'types.StandardTypeParserInfoRegions'>
                      Modifier: None
                      Self__: "[Ln 2, Col 21] -> [Ln 2, Col 24]"
                      TypeName: "[Ln 2, Col 21] -> [Ln 2, Col 24]"
                    TypeName: "Int"
                  Statements: None
                  Visibility: "VisibilityModifier.public"
                - # <class 'TheLanguage.Parser.Statements.FuncAndMethodDefinitionStatementParserInfo.FuncAndMethodDefinitionStatementParserInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  Documentation: None
                  MethodType: "MethodType.abstract"
                  Name: "ProtectedAbstractMethod"
                  Parameters: None
                  Regions: # <class 'types.FuncAndMethodDefinitionStatementParserInfoRegions'>
                    ClassModifier: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
                    Documentation: None
                    MethodType: "[Ln 3, Col 15] -> [Ln 3, Col 23]"
                    Name: "[Ln 3, Col 29] -> [Ln 3, Col 52]"
                    Parameters: None
                    ReturnType: "[Ln 3, Col 24] -> [Ln 3, Col 28]"
                    Self__: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
                    Statements: None
                    Visibility: "[Ln 3, Col 5] -> [Ln 3, Col 14]"
                  ReturnType: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                    Modifier: None
                    Regions: # <class 'types.StandardTypeParserInfoRegions'>
                      Modifier: None
                      Self__: "[Ln 3, Col 24] -> [Ln 3, Col 28]"
                      TypeName: "[Ln 3, Col 24] -> [Ln 3, Col 28]"
                    TypeName: "Bool"
                  Statements: None
                  Visibility: "VisibilityModifier.protected"
                - # <class 'TheLanguage.Parser.Statements.FuncAndMethodDefinitionStatementParserInfo.FuncAndMethodDefinitionStatementParserInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  Documentation: None
                  MethodType: "MethodType.abstract"
                  Name: "PrivateAbstractMethod"
                  Parameters: None
                  Regions: # <class 'types.FuncAndMethodDefinitionStatementParserInfoRegions'>
                    ClassModifier: "[Ln 4, Col 5] -> [Ln 6, Col 1]"
                    Documentation: None
                    MethodType: "[Ln 4, Col 13] -> [Ln 4, Col 21]"
                    Name: "[Ln 4, Col 27] -> [Ln 4, Col 48]"
                    Parameters: None
                    ReturnType: "[Ln 4, Col 22] -> [Ln 4, Col 26]"
                    Self__: "[Ln 4, Col 5] -> [Ln 6, Col 1]"
                    Statements: None
                    Visibility: "[Ln 4, Col 5] -> [Ln 4, Col 12]"
                  ReturnType: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                    Modifier: None
                    Regions: # <class 'types.StandardTypeParserInfoRegions'>
                      Modifier: None
                      Self__: "[Ln 4, Col 22] -> [Ln 4, Col 26]"
                      TypeName: "[Ln 4, Col 22] -> [Ln 4, Col 26]"
                    TypeName: "Char"
                  Statements: None
                  Visibility: "VisibilityModifier.private"
                - # <class 'TheLanguage.Parser.Statements.FuncAndMethodDefinitionStatementParserInfo.FuncAndMethodDefinitionStatementParserInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  Documentation: "An abstract method can have a docstring, but cannot have statements."
                  MethodType: "MethodType.abstract"
                  Name: "PrivateAbstractMethodWithDocstring"
                  Parameters: None
                  Regions: # <class 'types.FuncAndMethodDefinitionStatementParserInfoRegions'>
                    ClassModifier: "[Ln 6, Col 5] -> [Ln 10, Col 1]"
                    Documentation: "[Ln 7, Col 9] -> [Ln 9, Col 12]"
                    MethodType: "[Ln 6, Col 13] -> [Ln 6, Col 21]"
                    Name: "[Ln 6, Col 27] -> [Ln 6, Col 61]"
                    Parameters: None
                    ReturnType: "[Ln 6, Col 22] -> [Ln 6, Col 26]"
                    Self__: "[Ln 6, Col 5] -> [Ln 10, Col 1]"
                    Statements: "[Ln 6, Col 63] -> [Ln 10, Col 1]"
                    Visibility: "[Ln 6, Col 5] -> [Ln 6, Col 12]"
                  ReturnType: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                    Modifier: None
                    Regions: # <class 'types.StandardTypeParserInfoRegions'>
                      Modifier: None
                      Self__: "[Ln 6, Col 22] -> [Ln 6, Col 26]"
                      TypeName: "[Ln 6, Col 22] -> [Ln 6, Col 26]"
                    TypeName: "Char"
                  Statements: []
                  Visibility: "VisibilityModifier.private"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[10, 1] (330)"
            Type: "Class Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[10, 1] (330)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[10, 1] (330)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[10, 1] (330)"
Type: "<None>"
