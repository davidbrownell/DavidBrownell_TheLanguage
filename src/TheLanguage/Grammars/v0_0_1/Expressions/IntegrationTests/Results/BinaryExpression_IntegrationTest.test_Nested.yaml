# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 5] (4)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 4), match='var1'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Name: "var1"
                          Regions:
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
                            Name: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 5] (4)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 5] (4)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 5] (4)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 6] (5)"
                IterEnd: "[1, 7] (6)"
                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(5, 6), match='='>"
                Whitespace:
                  - 4
                  - 5
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[1, 8] (7)"
                                                IterEnd: "[1, 11] (10)"
                                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(7, 10), match='one'>"
                                                Whitespace:
                                                  - 6
                                                  - 7
                                            Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                              Name: "one"
                                              Regions:
                                                Self__: "[Ln 1, Col 8] -> [Ln 1, Col 11]"
                                                Name: "[Ln 1, Col 8] -> [Ln 1, Col 11]"
                                            IterBegin: "[1, 8] (7)"
                                            IterEnd: "[1, 11] (10)"
                                            Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[1, 8] (7)"
                                        IterEnd: "[1, 11] (10)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                        Name: "one"
                                        Regions:
                                          Self__: "[Ln 1, Col 8] -> [Ln 1, Col 11]"
                                          Name: "[Ln 1, Col 8] -> [Ln 1, Col 11]"
                                      Regions:
                                        Self__: "[Ln 1, Col 8] -> [Ln 1, Col 11]"
                                        Name: "[Ln 1, Col 8] -> [Ln 1, Col 11]"
                                    IterBegin: "[1, 8] (7)"
                                    IterEnd: "[1, 11] (10)"
                                    Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                IterBegin: "[1, 8] (7)"
                                IterEnd: "[1, 11] (10)"
                                Type: "Left Recursive Wrapper <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[1, 8] (7)"
                            IterEnd: "[1, 11] (10)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 12] (11)"
                                IterEnd: "[1, 13] (12)"
                                Type: "'+' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(11, 12), match='+'>"
                                Whitespace:
                                  - 10
                                  - 11
                            IterBegin: "[1, 12] (11)"
                            IterEnd: "[1, 13] (12)"
                            Type: "Operator <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 14] (13)"
                                                            IterEnd: "[1, 17] (16)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(13, 16), match='two'>"
                                                            Whitespace:
                                                              - 12
                                                              - 13
                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                          Name: "two"
                                                          Regions:
                                                            Self__: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                                            Name: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                                        IterBegin: "[1, 14] (13)"
                                                        IterEnd: "[1, 17] (16)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[1, 14] (13)"
                                                    IterEnd: "[1, 17] (16)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                    Name: "two"
                                                    Regions:
                                                      Self__: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                                      Name: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                                  Regions:
                                                    Self__: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                                    Name: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                                IterBegin: "[1, 14] (13)"
                                                IterEnd: "[1, 17] (16)"
                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[1, 14] (13)"
                                            IterEnd: "[1, 17] (16)"
                                            Type: "Left Recursive Wrapper <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[1, 14] (13)"
                                        IterEnd: "[1, 17] (16)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 18] (17)"
                                            IterEnd: "[1, 19] (18)"
                                            Type: "'+' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(17, 18), match='+'>"
                                            Whitespace:
                                              - 16
                                              - 17
                                        IterBegin: "[1, 18] (17)"
                                        IterEnd: "[1, 19] (18)"
                                        Type: "Operator <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                        IsIgnored: False
                                                                        IterBegin: "[1, 20] (19)"
                                                                        IterEnd: "[1, 25] (24)"
                                                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                          Match: "<_sre.SRE_Match object; span=(19, 24), match='three'>"
                                                                        Whitespace:
                                                                          - 18
                                                                          - 19
                                                                    Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                      Name: "three"
                                                                      Regions:
                                                                        Self__: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                                                        Name: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                                                    IterBegin: "[1, 20] (19)"
                                                                    IterEnd: "[1, 25] (24)"
                                                                    Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[1, 20] (19)"
                                                                IterEnd: "[1, 25] (24)"
                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                            Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                Name: "three"
                                                                Regions:
                                                                  Self__: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                                                  Name: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                                              Regions:
                                                                Self__: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                                                Name: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                                            IterBegin: "[1, 20] (19)"
                                                            IterEnd: "[1, 25] (24)"
                                                            Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                        IterBegin: "[1, 20] (19)"
                                                        IterEnd: "[1, 25] (24)"
                                                        Type: "Left Recursive Wrapper <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                    IterBegin: "[1, 20] (19)"
                                                    IterEnd: "[1, 25] (24)"
                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 26] (25)"
                                                        IterEnd: "[1, 27] (26)"
                                                        Type: "'-' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(25, 26), match='-'>"
                                                        Whitespace:
                                                          - 24
                                                          - 25
                                                    IterBegin: "[1, 26] (25)"
                                                    IterEnd: "[1, 27] (26)"
                                                    Type: "Operator <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                    IsIgnored: False
                                                                                    IterBegin: "[1, 28] (27)"
                                                                                    IterEnd: "[1, 32] (31)"
                                                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                      Match: "<_sre.SRE_Match object; span=(27, 31), match='four'>"
                                                                                    Whitespace:
                                                                                      - 26
                                                                                      - 27
                                                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                  Name: "four"
                                                                                  Regions:
                                                                                    Self__: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                                                    Name: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                                                IterBegin: "[1, 28] (27)"
                                                                                IterEnd: "[1, 32] (31)"
                                                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                            IterBegin: "[1, 28] (27)"
                                                                            IterEnd: "[1, 32] (31)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                            Name: "four"
                                                                            Regions:
                                                                              Self__: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                                              Name: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                                          Regions:
                                                                            Self__: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                                            Name: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                                        IterBegin: "[1, 28] (27)"
                                                                        IterEnd: "[1, 32] (31)"
                                                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[1, 28] (27)"
                                                                    IterEnd: "[1, 32] (31)"
                                                                    Type: "Left Recursive Wrapper <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[1, 28] (27)"
                                                                IterEnd: "[1, 32] (31)"
                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[1, 33] (32)"
                                                                    IterEnd: "[1, 35] (34)"
                                                                    Type: "'==' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(32, 34), match='=='>"
                                                                    Whitespace:
                                                                      - 31
                                                                      - 32
                                                                IterBegin: "[1, 33] (32)"
                                                                IterEnd: "[1, 35] (34)"
                                                                Type: "Operator <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                    IsIgnored: False
                                                                                    IterBegin: "[1, 36] (35)"
                                                                                    IterEnd: "[1, 40] (39)"
                                                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                      Match: "<_sre.SRE_Match object; span=(35, 39), match='five'>"
                                                                                    Whitespace:
                                                                                      - 34
                                                                                      - 35
                                                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                  Name: "five"
                                                                                  Regions:
                                                                                    Self__: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                                                    Name: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                                                IterBegin: "[1, 36] (35)"
                                                                                IterEnd: "[1, 40] (39)"
                                                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                            IterBegin: "[1, 36] (35)"
                                                                            IterEnd: "[1, 40] (39)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                            Name: "five"
                                                                            Regions:
                                                                              Self__: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                                              Name: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                                          Regions:
                                                                            Self__: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                                            Name: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                                        IterBegin: "[1, 36] (35)"
                                                                        IterEnd: "[1, 40] (39)"
                                                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[1, 36] (35)"
                                                                    IterEnd: "[1, 40] (39)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[1, 36] (35)"
                                                                IterEnd: "[1, 40] (39)"
                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            Info: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                                                              Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                  Name: "four"
                                                                  Regions:
                                                                    Self__: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                                    Name: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                                Regions:
                                                                  Self__: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                                  Name: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                              Operator: "OperatorType.Equal"
                                                              Regions:
                                                                Self__: "[Ln 1, Col 28] -> [Ln 1, Col 40]"
                                                                Left: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                                Operator: "[Ln 1, Col 33] -> [Ln 1, Col 35]"
                                                                Right: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                              Right: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                  Name: "five"
                                                                  Regions:
                                                                    Self__: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                                    Name: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                                Regions:
                                                                  Self__: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                                  Name: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                            IterBegin: "[1, 28] (27)"
                                                            IterEnd: "[1, 40] (39)"
                                                            Type: "Binary Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[1, 28] (27)"
                                                        IterEnd: "[1, 40] (39)"
                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                    IterBegin: "[1, 28] (27)"
                                                    IterEnd: "[1, 40] (39)"
                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                Info: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                                                  Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                      Name: "three"
                                                      Regions:
                                                        Self__: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                                        Name: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                                    Regions:
                                                      Self__: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                                      Name: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                                  Operator: "OperatorType.Subtract"
                                                  Regions:
                                                    Self__: "[Ln 1, Col 20] -> [Ln 1, Col 40]"
                                                    Left: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                                    Operator: "[Ln 1, Col 26] -> [Ln 1, Col 27]"
                                                    Right: "[Ln 1, Col 28] -> [Ln 1, Col 40]"
                                                  Right: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                                                    Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                        Name: "four"
                                                        Regions:
                                                          Self__: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                          Name: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                      Regions:
                                                        Self__: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                        Name: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                    Operator: "OperatorType.Equal"
                                                    Regions:
                                                      Self__: "[Ln 1, Col 28] -> [Ln 1, Col 40]"
                                                      Left: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                      Operator: "[Ln 1, Col 33] -> [Ln 1, Col 35]"
                                                      Right: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                    Right: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                        Name: "five"
                                                        Regions:
                                                          Self__: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                          Name: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                      Regions:
                                                        Self__: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                        Name: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                IterBegin: "[1, 20] (19)"
                                                IterEnd: "[1, 40] (39)"
                                                Type: "Binary Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[1, 20] (19)"
                                            IterEnd: "[1, 40] (39)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[1, 20] (19)"
                                        IterEnd: "[1, 40] (39)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                                      Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                          Name: "two"
                                          Regions:
                                            Self__: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                            Name: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                        Regions:
                                          Self__: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                          Name: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                      Operator: "OperatorType.Add"
                                      Regions:
                                        Self__: "[Ln 1, Col 14] -> [Ln 1, Col 40]"
                                        Left: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                        Operator: "[Ln 1, Col 18] -> [Ln 1, Col 19]"
                                        Right: "[Ln 1, Col 20] -> [Ln 1, Col 40]"
                                      Right: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                                        Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                            Name: "three"
                                            Regions:
                                              Self__: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                              Name: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                          Regions:
                                            Self__: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                            Name: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                        Operator: "OperatorType.Subtract"
                                        Regions:
                                          Self__: "[Ln 1, Col 20] -> [Ln 1, Col 40]"
                                          Left: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                          Operator: "[Ln 1, Col 26] -> [Ln 1, Col 27]"
                                          Right: "[Ln 1, Col 28] -> [Ln 1, Col 40]"
                                        Right: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                                          Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                              Name: "four"
                                              Regions:
                                                Self__: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                                Name: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                            Regions:
                                              Self__: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                              Name: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                          Operator: "OperatorType.Equal"
                                          Regions:
                                            Self__: "[Ln 1, Col 28] -> [Ln 1, Col 40]"
                                            Left: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                            Operator: "[Ln 1, Col 33] -> [Ln 1, Col 35]"
                                            Right: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                          Right: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                              Name: "five"
                                              Regions:
                                                Self__: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                                Name: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                            Regions:
                                              Self__: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                              Name: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                    IterBegin: "[1, 14] (13)"
                                    IterEnd: "[1, 40] (39)"
                                    Type: "Binary Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[1, 14] (13)"
                                IterEnd: "[1, 40] (39)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[1, 14] (13)"
                            IterEnd: "[1, 40] (39)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                          Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                              Name: "one"
                              Regions:
                                Self__: "[Ln 1, Col 8] -> [Ln 1, Col 11]"
                                Name: "[Ln 1, Col 8] -> [Ln 1, Col 11]"
                            Regions:
                              Self__: "[Ln 1, Col 8] -> [Ln 1, Col 11]"
                              Name: "[Ln 1, Col 8] -> [Ln 1, Col 11]"
                          Operator: "OperatorType.Add"
                          Regions:
                            Self__: "[Ln 1, Col 8] -> [Ln 1, Col 40]"
                            Left: "[Ln 1, Col 8] -> [Ln 1, Col 11]"
                            Operator: "[Ln 1, Col 12] -> [Ln 1, Col 13]"
                            Right: "[Ln 1, Col 14] -> [Ln 1, Col 40]"
                          Right: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                            Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                Name: "two"
                                Regions:
                                  Self__: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                  Name: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                              Regions:
                                Self__: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                                Name: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                            Operator: "OperatorType.Add"
                            Regions:
                              Self__: "[Ln 1, Col 14] -> [Ln 1, Col 40]"
                              Left: "[Ln 1, Col 14] -> [Ln 1, Col 17]"
                              Operator: "[Ln 1, Col 18] -> [Ln 1, Col 19]"
                              Right: "[Ln 1, Col 20] -> [Ln 1, Col 40]"
                            Right: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                              Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                  Name: "three"
                                  Regions:
                                    Self__: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                    Name: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                Regions:
                                  Self__: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                  Name: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                              Operator: "OperatorType.Subtract"
                              Regions:
                                Self__: "[Ln 1, Col 20] -> [Ln 1, Col 40]"
                                Left: "[Ln 1, Col 20] -> [Ln 1, Col 25]"
                                Operator: "[Ln 1, Col 26] -> [Ln 1, Col 27]"
                                Right: "[Ln 1, Col 28] -> [Ln 1, Col 40]"
                              Right: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                                Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                    Name: "four"
                                    Regions:
                                      Self__: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                      Name: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                  Regions:
                                    Self__: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                    Name: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                Operator: "OperatorType.Equal"
                                Regions:
                                  Self__: "[Ln 1, Col 28] -> [Ln 1, Col 40]"
                                  Left: "[Ln 1, Col 28] -> [Ln 1, Col 32]"
                                  Operator: "[Ln 1, Col 33] -> [Ln 1, Col 35]"
                                  Right: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                Right: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                    Name: "five"
                                    Regions:
                                      Self__: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                      Name: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                  Regions:
                                    Self__: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                                    Name: "[Ln 1, Col 36] -> [Ln 1, Col 40]"
                        IterBegin: "[1, 8] (7)"
                        IterEnd: "[1, 40] (39)"
                        Type: "Binary Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 8] (7)"
                    IterEnd: "[1, 40] (39)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 8] (7)"
                IterEnd: "[1, 40] (39)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 40] (39)"
                IterEnd: "[2, 1] (40)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 40
                  Start: 39
                Whitespace: None
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (40)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (40)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (40)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[2, 1] (40)"
Type: "<None>"
