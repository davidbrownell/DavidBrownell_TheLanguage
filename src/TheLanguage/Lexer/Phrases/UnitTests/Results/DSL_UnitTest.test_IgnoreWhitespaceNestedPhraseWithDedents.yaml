# <class 'TheLanguage.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
    DataItems:
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 1] (0)"
          IterEnd: "[1, 9] (8)"
          Token: "Word Token"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(0, 8), match='newscope'>"
          Whitespace: None
        Phrase: "Word Token"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 9] (8)"
          IterEnd: "[1, 10] (9)"
          Token: "':'"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(8, 9), match=':'>"
          Whitespace: None
        Phrase: "':'"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 10] (9)"
          IterEnd: "[4, 1] (12)"
          Token: "Newline+"
          Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 12
            Start: 9
          Whitespace: None
        Phrase: "Newline+"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[4, 1] (12)"
          IterEnd: "[4, 5] (16)"
          Token: "Indent"
          Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
            End: 16
            Start: 12
            Value: 4
          Whitespace: None
        Phrase: "Indent"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
          DataItems:
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[4, 5] (16)"
                IterEnd: "[4, 10] (21)"
                Token: "Word Token"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(16, 21), match='worda'>"
                Whitespace: None
              Phrase: "Word Token"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[4, 10] (21)"
              IterEnd: "[5, 1] (22)"
              Token: "Newline+"
              Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                End: 22
                Start: 21
              Whitespace: None
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[5, 1] (22)"
              IterEnd: "[5, 9] (30)"
              Token: "Indent"
              Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                End: 30
                Start: 22
                Value: 8
              Whitespace: None
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[5, 9] (30)"
                IterEnd: "[5, 14] (35)"
                Token: "Word Token"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(30, 35), match='wordb'>"
                Whitespace: None
              Phrase: "Word Token"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[5, 14] (35)"
              IterEnd: "[7, 1] (37)"
              Token: "Newline+"
              Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                End: 37
                Start: 35
              Whitespace: None
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[7, 1] (37)"
              IterEnd: "[7, 5] (41)"
              Token: "Dedent"
              Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                {}
              Whitespace: None
          IsComplete: True
        Phrase: "Nested"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[7, 5] (41)"
          IterEnd: "[7, 10] (46)"
          Token: "Word Token"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(41, 46), match='wordc'>"
          Whitespace: None
        Phrase: "Word Token"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[7, 10] (46)"
          IterEnd: "[8, 1] (47)"
          Token: "Newline+"
          Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 47
            Start: 46
          Whitespace: None
        Phrase: "Newline+"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[8, 1] (47)"
          IterEnd: "[8, 1] (47)"
          Token: "Dedent"
          Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
            {}
          Whitespace: None
        Phrase: "Dedent"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[8, 1] (47)"
          IterEnd: "[8, 6] (52)"
          Token: "Word Token"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(47, 52), match='wordd'>"
          Whitespace: None
        Phrase: "Word Token"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[8, 6] (52)"
          IterEnd: "[9, 1] (53)"
          Token: "Newline+"
          Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 53
            Start: 52
          Whitespace: None
        Phrase: "Newline+"
    IsComplete: True
  Phrase: "Phrase"
IterBegin: "[1, 1] (0)"
IterEnd: "[9, 1] (53)"
Success: True
