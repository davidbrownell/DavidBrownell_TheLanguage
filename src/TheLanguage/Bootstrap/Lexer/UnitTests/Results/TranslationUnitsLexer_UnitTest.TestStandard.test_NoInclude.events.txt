0) 0, 3
    # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[1, 4] (3)"
    Type: "Lower Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
      Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
    Whitespace: None
1) 3, 4
    # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
    IsIgnored: False
    IterBegin: "[1, 4] (3)"
    IterEnd: "[2, 1] (4)"
    Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
    Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
      End: 4
      Start: 3
    Whitespace: None
2) 0, 4
    # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[1, 4] (3)"
        Type: "Lower Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
        Whitespace: None
      - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
        IsIgnored: False
        IterBegin: "[1, 4] (3)"
        IterEnd: "[2, 1] (4)"
        Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
        Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
          End: 4
          Start: 3
        Whitespace: None
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (4)"
    Type: "Lower <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
3) 0, 4
    # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 4] (3)"
            Type: "Lower Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
            Whitespace: None
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[1, 4] (3)"
            IterEnd: "[2, 1] (4)"
            Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 4
              Start: 3
            Whitespace: None
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (4)"
        Type: "Lower <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (4)"
    Type: "(Include | Upper | Lower | Number | New Scope) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
4) 0, 4
    # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "Lower Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                Whitespace: None
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 4] (3)"
                IterEnd: "[2, 1] (4)"
                Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 4
                  Start: 3
                Whitespace: None
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (4)"
            Type: "Lower <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (4)"
        Type: "(Include | Upper | Lower | Number | New Scope) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (4)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
5) 4, 7
    # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
    IsIgnored: False
    IterBegin: "[2, 1] (4)"
    IterEnd: "[2, 4] (7)"
    Type: "Upper Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
      Match: "<_sre.SRE_Match object; span=(4, 7), match='TWO'>"
    Whitespace: None
6) 7, 8
    # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
    IsIgnored: False
    IterBegin: "[2, 4] (7)"
    IterEnd: "[3, 1] (8)"
    Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
    Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
      End: 8
      Start: 7
    Whitespace: None
7) 4, 8
    # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
        IsIgnored: False
        IterBegin: "[2, 1] (4)"
        IterEnd: "[2, 4] (7)"
        Type: "Upper Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(4, 7), match='TWO'>"
        Whitespace: None
      - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
        IsIgnored: False
        IterBegin: "[2, 4] (7)"
        IterEnd: "[3, 1] (8)"
        Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
        Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
          End: 8
          Start: 7
        Whitespace: None
    IsIgnored: False
    IterBegin: "[2, 1] (4)"
    IterEnd: "[3, 1] (8)"
    Type: "Upper <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
8) 4, 7
    # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
    IsIgnored: False
    IterBegin: "[2, 1] (4)"
    IterEnd: "[2, 4] (7)"
    Type: "Upper Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
      Match: "<_sre.SRE_Match object; span=(4, 7), match='TWO'>"
    Whitespace: None
9) 4, 8
    # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[2, 4] (7)"
            Type: "Upper Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 7), match='TWO'>"
            Whitespace: None
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[2, 4] (7)"
            IterEnd: "[3, 1] (8)"
            Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 8
              Start: 7
            Whitespace: None
        IsIgnored: False
        IterBegin: "[2, 1] (4)"
        IterEnd: "[3, 1] (8)"
        Type: "Upper <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
    IsIgnored: False
    IterBegin: "[2, 1] (4)"
    IterEnd: "[3, 1] (8)"
    Type: "(Include | Upper | Lower | Number | New Scope) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
10) 4, 8
    # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 1] (4)"
                IterEnd: "[2, 4] (7)"
                Type: "Upper Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(4, 7), match='TWO'>"
                Whitespace: None
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 4] (7)"
                IterEnd: "[3, 1] (8)"
                Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 8
                  Start: 7
                Whitespace: None
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[3, 1] (8)"
            Type: "Upper <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[2, 1] (4)"
        IterEnd: "[3, 1] (8)"
        Type: "(Include | Upper | Lower | Number | New Scope) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[2, 1] (4)"
    IterEnd: "[3, 1] (8)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
11) 8, 9
    # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
    IsIgnored: False
    IterBegin: "[3, 1] (8)"
    IterEnd: "[3, 2] (9)"
    Type: "Number Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
      Match: "<_sre.SRE_Match object; span=(8, 9), match='3'>"
    Whitespace: None
12) 9, 10
    # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
    IsIgnored: False
    IterBegin: "[3, 2] (9)"
    IterEnd: "[4, 1] (10)"
    Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
    Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
      End: 10
      Start: 9
    Whitespace: None
13) 8, 10
    # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
        IsIgnored: False
        IterBegin: "[3, 1] (8)"
        IterEnd: "[3, 2] (9)"
        Type: "Number Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(8, 9), match='3'>"
        Whitespace: None
      - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
        IsIgnored: False
        IterBegin: "[3, 2] (9)"
        IterEnd: "[4, 1] (10)"
        Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
        Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
          End: 10
          Start: 9
        Whitespace: None
    IsIgnored: False
    IterBegin: "[3, 1] (8)"
    IterEnd: "[4, 1] (10)"
    Type: "Number <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
14) 8, 10
    # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[3, 1] (8)"
            IterEnd: "[3, 2] (9)"
            Type: "Number Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 9), match='3'>"
            Whitespace: None
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[3, 2] (9)"
            IterEnd: "[4, 1] (10)"
            Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 10
              Start: 9
            Whitespace: None
        IsIgnored: False
        IterBegin: "[3, 1] (8)"
        IterEnd: "[4, 1] (10)"
        Type: "Number <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
    IsIgnored: False
    IterBegin: "[3, 1] (8)"
    IterEnd: "[4, 1] (10)"
    Type: "(Include | Upper | Lower | Number | New Scope) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
15) 8, 10
    # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 1] (8)"
                IterEnd: "[3, 2] (9)"
                Type: "Number Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(8, 9), match='3'>"
                Whitespace: None
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 2] (9)"
                IterEnd: "[4, 1] (10)"
                Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 10
                  Start: 9
                Whitespace: None
            IsIgnored: False
            IterBegin: "[3, 1] (8)"
            IterEnd: "[4, 1] (10)"
            Type: "Number <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[3, 1] (8)"
        IterEnd: "[4, 1] (10)"
        Type: "(Include | Upper | Lower | Number | New Scope) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[3, 1] (8)"
    IterEnd: "[4, 1] (10)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
