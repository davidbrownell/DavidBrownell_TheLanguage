# <class 'Original.Parser.RootParserInfo.RootParserInfo'>
Documentation: None
Regions__: # <class 'types.RootParserInfoRegions'>
  Documentation: None
  Self__: "[Ln 1, Col 1] -> [Ln 9, Col 1]"
Statements:
  - # <class 'Original.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
    Expression: # <class 'Original.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
      Left: # <class 'Original.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
        Left: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
          Arguments: False
          Expression: # <class 'Original.Parser.Expressions.GenericNameExpressionParserInfo.GenericNameExpressionParserInfo'>
            Name: "func1"
            Regions__: # <class 'types.GenericNameExpressionParserInfoRegions'>
              Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
              Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
          Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
            Arguments: "[Ln 1, Col 13] -> [Ln 1, Col 15]"
            Expression: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
            Self__: "[Ln 1, Col 8] -> [Ln 1, Col 15]"
        Operator: "OperatorType.ChainedFunc"
        Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
          Left: "[Ln 1, Col 8] -> [Ln 1, Col 15]"
          Operator: "[Ln 1, Col 15] -> [Ln 1, Col 16]"
          Right: "[Ln 1, Col 16] -> [Ln 1, Col 23]"
          Self__: "[Ln 1, Col 8] -> [Ln 1, Col 23]"
        Right: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
          Arguments: False
          Expression: # <class 'Original.Parser.Expressions.GenericNameExpressionParserInfo.GenericNameExpressionParserInfo'>
            Name: "func2"
            Regions__: # <class 'types.GenericNameExpressionParserInfoRegions'>
              Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
              Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
          Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
            Arguments: "[Ln 1, Col 21] -> [Ln 1, Col 23]"
            Expression: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
            Self__: "[Ln 1, Col 16] -> [Ln 1, Col 23]"
      Operator: "OperatorType.ChainedFunc"
      Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
        Left: "[Ln 1, Col 8] -> [Ln 1, Col 23]"
        Operator: "[Ln 1, Col 23] -> [Ln 1, Col 24]"
        Right: "[Ln 1, Col 24] -> [Ln 1, Col 31]"
        Self__: "[Ln 1, Col 8] -> [Ln 1, Col 31]"
      Right: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
        Arguments: False
        Expression: # <class 'Original.Parser.Expressions.GenericNameExpressionParserInfo.GenericNameExpressionParserInfo'>
          Name: "func3"
          Regions__: # <class 'types.GenericNameExpressionParserInfoRegions'>
            Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
            Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
        Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
          Arguments: "[Ln 1, Col 29] -> [Ln 1, Col 31]"
          Expression: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
          Self__: "[Ln 1, Col 24] -> [Ln 1, Col 31]"
    Modifier: None
    Name: # <class 'Original.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
      Name: "var1"
      Regions__: # <class 'types.VariableNameParserInfoRegions'>
        Name: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
        Self__: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
    Regions__: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
      Expression: "[Ln 1, Col 8] -> [Ln 1, Col 31]"
      Modifier: None
      Name: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
      Self__: "[Ln 1, Col 1] -> [Ln 2, Col 1]"
  - # <class 'Original.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
    Expression: # <class 'Original.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
      Left: # <class 'Original.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
        Left: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
          Arguments: False
          Expression: # <class 'Original.Parser.Expressions.GenericNameExpressionParserInfo.GenericNameExpressionParserInfo'>
            Name: "func4"
            Regions__: # <class 'types.GenericNameExpressionParserInfoRegions'>
              Name: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
              Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
          Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
            Arguments: "[Ln 2, Col 13] -> [Ln 2, Col 15]"
            Expression: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
            Self__: "[Ln 2, Col 8] -> [Ln 2, Col 15]"
        Operator: "OperatorType.ChainedFunc"
        Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
          Left: "[Ln 2, Col 8] -> [Ln 2, Col 15]"
          Operator: "[Ln 2, Col 15] -> [Ln 2, Col 16]"
          Right: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
          Self__: "[Ln 2, Col 8] -> [Ln 2, Col 23]"
        Right: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
          Arguments: False
          Expression: # <class 'Original.Parser.Expressions.GenericNameExpressionParserInfo.GenericNameExpressionParserInfo'>
            Name: "func5"
            Regions__: # <class 'types.GenericNameExpressionParserInfoRegions'>
              Name: "[Ln 2, Col 16] -> [Ln 2, Col 21]"
              Self__: "[Ln 2, Col 16] -> [Ln 2, Col 21]"
          Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
            Arguments: "[Ln 2, Col 21] -> [Ln 2, Col 23]"
            Expression: "[Ln 2, Col 16] -> [Ln 2, Col 21]"
            Self__: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
      Operator: "OperatorType.ChainedFuncReturnSelf"
      Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
        Left: "[Ln 2, Col 8] -> [Ln 2, Col 23]"
        Operator: "[Ln 2, Col 23] -> [Ln 2, Col 25]"
        Right: "[Ln 2, Col 25] -> [Ln 2, Col 32]"
        Self__: "[Ln 2, Col 8] -> [Ln 2, Col 32]"
      Right: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
        Arguments: False
        Expression: # <class 'Original.Parser.Expressions.GenericNameExpressionParserInfo.GenericNameExpressionParserInfo'>
          Name: "func6"
          Regions__: # <class 'types.GenericNameExpressionParserInfoRegions'>
            Name: "[Ln 2, Col 25] -> [Ln 2, Col 30]"
            Self__: "[Ln 2, Col 25] -> [Ln 2, Col 30]"
        Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
          Arguments: "[Ln 2, Col 30] -> [Ln 2, Col 32]"
          Expression: "[Ln 2, Col 25] -> [Ln 2, Col 30]"
          Self__: "[Ln 2, Col 25] -> [Ln 2, Col 32]"
    Modifier: None
    Name: # <class 'Original.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
      Name: "var2"
      Regions__: # <class 'types.VariableNameParserInfoRegions'>
        Name: "[Ln 2, Col 1] -> [Ln 2, Col 5]"
        Self__: "[Ln 2, Col 1] -> [Ln 2, Col 5]"
    Regions__: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
      Expression: "[Ln 2, Col 8] -> [Ln 2, Col 32]"
      Modifier: None
      Name: "[Ln 2, Col 1] -> [Ln 2, Col 5]"
      Self__: "[Ln 2, Col 1] -> [Ln 4, Col 1]"
  - # <class 'Original.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
    Expression: # <class 'Original.Parser.Expressions.GroupExpressionParserInfo.GroupExpressionParserInfo'>
      Expression: # <class 'Original.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
        Left: # <class 'Original.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
          Left: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
            Arguments: False
            Expression: # <class 'Original.Parser.Expressions.GenericNameExpressionParserInfo.GenericNameExpressionParserInfo'>
              Name: "funcA"
              Regions__: # <class 'types.GenericNameExpressionParserInfoRegions'>
                Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
            Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
              Arguments: "[Ln 5, Col 10] -> [Ln 5, Col 12]"
              Expression: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
              Self__: "[Ln 5, Col 5] -> [Ln 5, Col 12]"
          Operator: "OperatorType.ChainedFunc"
          Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
            Left: "[Ln 5, Col 5] -> [Ln 5, Col 12]"
            Operator: "[Ln 6, Col 9] -> [Ln 6, Col 10]"
            Right: "[Ln 6, Col 10] -> [Ln 6, Col 17]"
            Self__: "[Ln 5, Col 5] -> [Ln 6, Col 17]"
          Right: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
            Arguments: False
            Expression: # <class 'Original.Parser.Expressions.GenericNameExpressionParserInfo.GenericNameExpressionParserInfo'>
              Name: "funcB"
              Regions__: # <class 'types.GenericNameExpressionParserInfoRegions'>
                Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
            Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
              Arguments: "[Ln 6, Col 15] -> [Ln 6, Col 17]"
              Expression: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
              Self__: "[Ln 6, Col 10] -> [Ln 6, Col 17]"
        Operator: "OperatorType.ChainedFunc"
        Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
          Left: "[Ln 5, Col 5] -> [Ln 6, Col 17]"
          Operator: "[Ln 7, Col 9] -> [Ln 7, Col 10]"
          Right: "[Ln 7, Col 10] -> [Ln 7, Col 17]"
          Self__: "[Ln 5, Col 5] -> [Ln 7, Col 17]"
        Right: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
          Arguments: False
          Expression: # <class 'Original.Parser.Expressions.GenericNameExpressionParserInfo.GenericNameExpressionParserInfo'>
            Name: "funcC"
            Regions__: # <class 'types.GenericNameExpressionParserInfoRegions'>
              Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
              Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
          Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
            Arguments: "[Ln 7, Col 15] -> [Ln 7, Col 17]"
            Expression: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
            Self__: "[Ln 7, Col 10] -> [Ln 7, Col 17]"
      Regions__: # <class 'types.GroupExpressionParserInfoRegions'>
        Expression: "[Ln 5, Col 5] -> [Ln 7, Col 17]"
        Self__: "[Ln 4, Col 8] -> [Ln 8, Col 2]"
    Modifier: None
    Name: # <class 'Original.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
      Name: "var3"
      Regions__: # <class 'types.VariableNameParserInfoRegions'>
        Name: "[Ln 4, Col 1] -> [Ln 4, Col 5]"
        Self__: "[Ln 4, Col 1] -> [Ln 4, Col 5]"
    Regions__: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
      Expression: "[Ln 4, Col 8] -> [Ln 8, Col 2]"
      Modifier: None
      Name: "[Ln 4, Col 1] -> [Ln 4, Col 5]"
      Self__: "[Ln 4, Col 1] -> [Ln 9, Col 1]"
