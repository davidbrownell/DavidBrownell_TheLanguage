# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 1] (0)"
                                IterEnd: "[1, 2] (1)"
                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(0, 1), match='('>"
                                Whitespace: None
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 2] (1)"
                                            IterEnd: "[1, 5] (4)"
                                            Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(1, 4), match='Int'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 6] (5)"
                                                    IterEnd: "[1, 9] (8)"
                                                    Type: "'var' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(5, 8), match='var'>"
                                                    Whitespace:
                                                      - 4
                                                      - 5
                                                IterBegin: "[1, 6] (5)"
                                                IterEnd: "[1, 9] (8)"
                                                Type: "Modifier <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[1, 6] (5)"
                                            IterEnd: "[1, 9] (8)"
                                            Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                        Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                          Modifier: TypeModifier.var
                                          Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                            Modifier: "[Ln 1, Col 6] -> [Ln 1, Col 9]"
                                            Self__: "[Ln 1, Col 2] -> [Ln 1, Col 9]"
                                            TypeName: "[Ln 1, Col 2] -> [Ln 1, Col 5]"
                                          TypeName: "Int"
                                        IterBegin: "[1, 2] (1)"
                                        IterEnd: "[1, 9] (8)"
                                        Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[1, 2] (1)"
                                    IterEnd: "[1, 9] (8)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[1, 2] (1)"
                                IterEnd: "[1, 9] (8)"
                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 9] (8)"
                                IterEnd: "[1, 10] (9)"
                                Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(8, 9), match=','>"
                                Whitespace: None
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 10] (9)"
                                IterEnd: "[1, 11] (10)"
                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(9, 10), match=')'>"
                                Whitespace: None
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 11] (10)"
                            Type: "Single <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        Info: # <class 'TheLanguage.Parser.Types.TupleTypeParserInfo.TupleTypeParserInfo'>
                          Regions: # <class 'types.TupleTypeParserInfoRegions'>
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 11]"
                            Types: "[Ln 1, Col 1] -> [Ln 1, Col 11]"
                          Types:
                            - # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                              Modifier: TypeModifier.var
                              Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                Modifier: "[Ln 1, Col 6] -> [Ln 1, Col 9]"
                                Self__: "[Ln 1, Col 2] -> [Ln 1, Col 9]"
                                TypeName: "[Ln 1, Col 2] -> [Ln 1, Col 5]"
                              TypeName: "Int"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 11] (10)"
                        Type: "Tuple Type <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 11] (10)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 11] (10)"
                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 12] (11)"
                IterEnd: "[1, 16] (15)"
                Type: "<method_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(11, 15), match='Func'>"
                Whitespace:
                  - 10
                  - 11
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 16] (15)"
                    IterEnd: "[1, 17] (16)"
                    Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(15, 16), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 17] (16)"
                    IterEnd: "[1, 18] (17)"
                    Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(16, 17), match=')'>"
                    Whitespace: None
                IterBegin: "[1, 16] (15)"
                IterEnd: "[1, 18] (17)"
                Type: "Parameters <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[1, 18] (17)"
                        IterEnd: "[1, 19] (18)"
                        Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(17, 18), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 19] (18)"
                                IterEnd: "[2, 1] (19)"
                                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                  End: 19
                                  Start: 18
                                Whitespace: None
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[2, 1] (19)"
                                IterEnd: "[2, 5] (23)"
                                Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                                  End: 23
                                  Start: 19
                                  Value: 4
                                Whitespace: None
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 5] (23)"
                                                IterEnd: "[2, 9] (27)"
                                                Type: "'pass' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(23, 27), match='pass'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 9] (27)"
                                                IterEnd: "[3, 1] (28)"
                                                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                  End: 28
                                                  Start: 27
                                                Whitespace: None
                                            Info: # <class 'TheLanguage.Parser.Statements.PassStatementParserInfo.PassStatementParserInfo'>
                                              Regions: # <class 'types.PassStatementParserInfoRegions'>
                                                Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                                            IterBegin: "[2, 5] (23)"
                                            IterEnd: "[3, 1] (28)"
                                            Type: "Pass Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[2, 5] (23)"
                                        IterEnd: "[3, 1] (28)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[2, 5] (23)"
                                    IterEnd: "[3, 1] (28)"
                                    Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                IterBegin: "[2, 5] (23)"
                                IterEnd: "[3, 1] (28)"
                                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[3, 1] (28)"
                                IterEnd: "[3, 1] (28)"
                                Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                                  {}
                                Whitespace: None
                            IterBegin: "[1, 19] (18)"
                            IterEnd: "[3, 1] (28)"
                            Type: "Multi-line <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[1, 19] (18)"
                        IterEnd: "[3, 1] (28)"
                        Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[1, 18] (17)"
                    IterEnd: "[3, 1] (28)"
                    Type: "Statements <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[1, 18] (17)"
                IterEnd: "[3, 1] (28)"
                Type: "Or: (Statements, Newline+) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
            Info: # <class 'TheLanguage.Parser.Statements.FuncAndMethodDefinitionStatementParserInfo.FuncAndMethodDefinitionStatementParserInfo'>
              ClassModifier: None
              Documentation: None
              MethodType: "MethodType.standard"
              Name: "Func"
              Parameters: None
              Regions: # <class 'types.FuncAndMethodDefinitionStatementParserInfoRegions'>
                ClassModifier: None
                Documentation: None
                MethodType: "[Ln 1, Col 1] -> [Ln 3, Col 1]"
                Name: "[Ln 1, Col 12] -> [Ln 1, Col 16]"
                Parameters: None
                ReturnType: "[Ln 1, Col 1] -> [Ln 1, Col 11]"
                Self__: "[Ln 1, Col 1] -> [Ln 3, Col 1]"
                Statements: "[Ln 1, Col 18] -> [Ln 3, Col 1]"
                Visibility: "[Ln 1, Col 1] -> [Ln 3, Col 1]"
              ReturnType: # <class 'TheLanguage.Parser.Types.TupleTypeParserInfo.TupleTypeParserInfo'>
                Regions: # <class 'types.TupleTypeParserInfoRegions'>
                  Self__: "[Ln 1, Col 1] -> [Ln 1, Col 11]"
                  Types: "[Ln 1, Col 1] -> [Ln 1, Col 11]"
                Types:
                  - # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                    Modifier: TypeModifier.var
                    Regions: # <class 'types.StandardTypeParserInfoRegions'>
                      Modifier: "[Ln 1, Col 6] -> [Ln 1, Col 9]"
                      Self__: "[Ln 1, Col 2] -> [Ln 1, Col 9]"
                      TypeName: "[Ln 1, Col 2] -> [Ln 1, Col 5]"
                    TypeName: "Int"
              Statements:
                - # <class 'TheLanguage.Parser.Statements.PassStatementParserInfo.PassStatementParserInfo'>
                  Regions: # <class 'types.PassStatementParserInfoRegions'>
                    Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[3, 1] (28)"
            Type: "Func And Method Definition Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[3, 1] (28)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[3, 1] (28)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[3, 1] (28)"
Type: "<None>"
