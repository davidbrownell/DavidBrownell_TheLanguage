0) StartPhrase, "Phrases"
1) StartPhrase, "Lower", "Phrases"
2) OnInternalPhraseAsync, 0, 3
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 1] (0)"
      IterEnd: "[1, 4] (3)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
3) EndPhrase, "Lower" [True], "Phrases" [None]
4) StartPhrase, "Upper", "Phrases"
5) EndPhrase, "Upper" [False], "Phrases" [None]
6) OnInternalPhraseAsync, 0, 3
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[1, 4] (3)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
7) EndPhrase, "Phrases" [True]
8) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>"
9) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
10) OnInternalPhraseAsync, 4, 5
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 5] (4)"
      IterEnd: "[1, 6] (5)"
      Token: "'+'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
      Whitespace:
        - 3
        - 4
    Phrase: "'+'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
11) EndPhrase, "'+'" [True], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
12) StartPhrase, "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
13) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
14) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
15) OnInternalPhraseAsync, 6, 9
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 7] (6)"
      IterEnd: "[1, 10] (9)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
      Whitespace:
        - 5
        - 6
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
16) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
17) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
18) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
19) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
20) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
21) OnInternalPhraseAsync, 6, 9
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 7] (6)"
      IterEnd: "[1, 10] (9)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
      Whitespace:
        - 5
        - 6
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
22) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
23) OnInternalPhraseAsync, 5, 9
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 7] (6)"
        IterEnd: "[1, 10] (9)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
        Whitespace:
          - 5
          - 6
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
24) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
25) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
26) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
27) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
28) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
29) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
30) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
31) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
32) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
33) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
34) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
35) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
36) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
37) OnInternalPhraseAsync, 9, 10
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 10] (9)"
      IterEnd: "[1, 11] (10)"
      Token: "'['"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
      Whitespace: None
    Phrase: "'['"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
38) EndPhrase, "'['" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
39) StartPhrase, "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
40) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
41) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
42) OnInternalPhraseAsync, 10, 11
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 11] (10)"
      IterEnd: "[1, 12] (11)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 10] (9)"
            IterEnd: "[1, 11] (10)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
43) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
44) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
45) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
46) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
47) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
48) OnInternalPhraseAsync, 10, 11
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 11] (10)"
      IterEnd: "[1, 12] (11)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 11] (10)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 10] (9)"
            IterEnd: "[1, 11] (10)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
49) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
50) OnInternalPhraseAsync, 10, 11
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 11] (10)"
        IterEnd: "[1, 12] (11)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 11] (10)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 10] (9)"
            IterEnd: "[1, 11] (10)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
51) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
52) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
53) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
54) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
55) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
56) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
57) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
58) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
59) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
60) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
61) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
62) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
63) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
64) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
65) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
66) OnInternalPhraseAsync, 10, 11
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 11] (10)"
        IterEnd: "[1, 12] (11)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 10] (9)"
            IterEnd: "[1, 11] (10)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
67) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
68) OnInternalPhraseAsync, 10, 11
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
          IsIgnored: False
          IterBegin: "[1, 11] (10)"
          IterEnd: "[1, 12] (11)"
          Token: "Lower"
          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 10] (9)"
            IterEnd: "[1, 11] (10)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
69) EndPhrase, "DynamicPhrasesType.Statements" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
70) StartPhrase, "']'", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
71) OnInternalPhraseAsync, 11, 12
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 12] (11)"
      IterEnd: "[1, 13] (12)"
      Token: "']'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
      Whitespace: None
    Phrase: "']'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 10] (9)"
            IterEnd: "[1, 11] (10)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
            Whitespace: None
          Phrase: "'['"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 11] (10)"
                IterEnd: "[1, 12] (11)"
                Token: "Lower"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                Whitespace: None
              Phrase: "Lower"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
72) EndPhrase, "']'" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
73) OnInternalPhraseAsync, 9, 12
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 7] (6)"
                  IterEnd: "[1, 10] (9)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                  Whitespace:
                    - 5
                    - 6
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 10] (9)"
              IterEnd: "[1, 11] (10)"
              Token: "'['"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 11] (10)"
                  IterEnd: "[1, 12] (11)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 12] (11)"
              IterEnd: "[1, 13] (12)"
              Token: "']'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
74) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
75) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
76) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
77) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
78) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
79) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
80) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
81) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
82) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
83) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
84) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
85) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
86) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
87) OnInternalPhraseAsync, 12, 13
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 13] (12)"
      IterEnd: "[1, 14] (13)"
      Token: "'['"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
      Whitespace: None
    Phrase: "'['"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
88) EndPhrase, "'['" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
89) StartPhrase, "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
90) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
91) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
92) OnInternalPhraseAsync, 13, 14
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 14] (13)"
      IterEnd: "[1, 15] (14)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 13] (12)"
            IterEnd: "[1, 14] (13)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
93) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
94) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
95) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
96) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
97) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
98) OnInternalPhraseAsync, 13, 14
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 14] (13)"
      IterEnd: "[1, 15] (14)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 14] (13)"
            IterEnd: "[1, 15] (14)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 13] (12)"
            IterEnd: "[1, 14] (13)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
99) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
100) OnInternalPhraseAsync, 13, 14
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 14] (13)"
        IterEnd: "[1, 15] (14)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 14] (13)"
            IterEnd: "[1, 15] (14)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 13] (12)"
            IterEnd: "[1, 14] (13)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
101) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
102) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
103) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
104) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
105) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
106) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
107) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
108) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
109) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
110) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
111) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
112) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
113) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
114) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
115) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
116) OnInternalPhraseAsync, 13, 14
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 14] (13)"
        IterEnd: "[1, 15] (14)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 13] (12)"
            IterEnd: "[1, 14] (13)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
117) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
118) OnInternalPhraseAsync, 13, 14
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
          IsIgnored: False
          IterBegin: "[1, 14] (13)"
          IterEnd: "[1, 15] (14)"
          Token: "Lower"
          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 13] (12)"
            IterEnd: "[1, 14] (13)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
119) EndPhrase, "DynamicPhrasesType.Statements" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
120) StartPhrase, "']'", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
121) OnInternalPhraseAsync, 14, 15
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 15] (14)"
      IterEnd: "[1, 16] (15)"
      Token: "']'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
      Whitespace: None
    Phrase: "']'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 13] (12)"
            IterEnd: "[1, 14] (13)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
            Whitespace: None
          Phrase: "'['"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 14] (13)"
                IterEnd: "[1, 15] (14)"
                Token: "Lower"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                Whitespace: None
              Phrase: "Lower"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
122) EndPhrase, "']'" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
123) OnInternalPhraseAsync, 12, 15
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
              DataItems:
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 7] (6)"
                        IterEnd: "[1, 10] (9)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                        Whitespace:
                          - 5
                          - 6
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 10] (9)"
                    IterEnd: "[1, 11] (10)"
                    Token: "'['"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                    Whitespace: None
                  Phrase: "'['"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 11] (10)"
                        IterEnd: "[1, 12] (11)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                        Whitespace: None
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 12] (11)"
                    IterEnd: "[1, 13] (12)"
                    Token: "']'"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                    Whitespace: None
                  Phrase: "']'"
              IsComplete: True
            Phrase: "Index"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 13] (12)"
              IterEnd: "[1, 14] (13)"
              Token: "'['"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 14] (13)"
                  IterEnd: "[1, 15] (14)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 15] (14)"
              IterEnd: "[1, 16] (15)"
              Token: "']'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
124) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
125) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
126) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
127) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
128) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
129) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
130) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
131) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
132) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
133) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
134) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
135) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
136) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
137) OnInternalPhraseAsync, 15, 16
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 16] (15)"
      IterEnd: "[1, 17] (16)"
      Token: "'['"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
      Whitespace: None
    Phrase: "'['"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
138) EndPhrase, "'['" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
139) StartPhrase, "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
140) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
141) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
142) OnInternalPhraseAsync, 16, 17
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 17] (16)"
      IterEnd: "[1, 18] (17)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 17] (16)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
143) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
144) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
145) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
146) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
147) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
148) OnInternalPhraseAsync, 16, 17
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 17] (16)"
      IterEnd: "[1, 18] (17)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 17] (16)"
            IterEnd: "[1, 18] (17)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 17] (16)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
149) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
150) OnInternalPhraseAsync, 16, 17
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 17] (16)"
        IterEnd: "[1, 18] (17)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 17] (16)"
            IterEnd: "[1, 18] (17)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 17] (16)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
151) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
152) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
153) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
154) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
155) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
156) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
157) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
158) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
159) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
160) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
161) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
162) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
163) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
164) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
165) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
166) OnInternalPhraseAsync, 16, 17
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 17] (16)"
        IterEnd: "[1, 18] (17)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 17] (16)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
167) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
168) OnInternalPhraseAsync, 16, 17
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
          IsIgnored: False
          IterBegin: "[1, 17] (16)"
          IterEnd: "[1, 18] (17)"
          Token: "Lower"
          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 17] (16)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
169) EndPhrase, "DynamicPhrasesType.Statements" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
170) StartPhrase, "']'", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
171) OnInternalPhraseAsync, 17, 18
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 18] (17)"
      IterEnd: "[1, 19] (18)"
      Token: "']'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
      Whitespace: None
    Phrase: "']'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 17] (16)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
            Whitespace: None
          Phrase: "'['"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 17] (16)"
                IterEnd: "[1, 18] (17)"
                Token: "Lower"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                Whitespace: None
              Phrase: "Lower"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
172) EndPhrase, "']'" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
173) OnInternalPhraseAsync, 15, 18
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
              DataItems:
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 7] (6)"
                              IterEnd: "[1, 10] (9)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                              Whitespace:
                                - 5
                                - 6
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 10] (9)"
                          IterEnd: "[1, 11] (10)"
                          Token: "'['"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                          Whitespace: None
                        Phrase: "'['"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 11] (10)"
                              IterEnd: "[1, 12] (11)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                              Whitespace: None
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 12] (11)"
                          IterEnd: "[1, 13] (12)"
                          Token: "']'"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                          Whitespace: None
                        Phrase: "']'"
                    IsComplete: True
                  Phrase: "Index"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 13] (12)"
                    IterEnd: "[1, 14] (13)"
                    Token: "'['"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                    Whitespace: None
                  Phrase: "'['"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 14] (13)"
                        IterEnd: "[1, 15] (14)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                        Whitespace: None
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 15] (14)"
                    IterEnd: "[1, 16] (15)"
                    Token: "']'"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                    Whitespace: None
                  Phrase: "']'"
              IsComplete: True
            Phrase: "Index"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 16] (15)"
              IterEnd: "[1, 17] (16)"
              Token: "'['"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 17] (16)"
                  IterEnd: "[1, 18] (17)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 18] (17)"
              IterEnd: "[1, 19] (18)"
              Token: "']'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
174) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
175) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
176) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
177) OnInternalPhraseAsync, 19, 20
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 20] (19)"
      IterEnd: "[1, 21] (20)"
      Token: "'+'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
      Whitespace:
        - 18
        - 19
    Phrase: "'+'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
178) EndPhrase, "'+'" [True], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
179) StartPhrase, "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
180) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
181) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
182) OnInternalPhraseAsync, 21, 26
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 22] (21)"
      IterEnd: "[1, 27] (26)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
      Whitespace:
        - 20
        - 21
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
183) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
184) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
185) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
186) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
187) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
188) OnInternalPhraseAsync, 21, 26
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 22] (21)"
      IterEnd: "[1, 27] (26)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
      Whitespace:
        - 20
        - 21
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
189) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
190) OnInternalPhraseAsync, 20, 26
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 22] (21)"
        IterEnd: "[1, 27] (26)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
        Whitespace:
          - 20
          - 21
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
191) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
192) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
193) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
194) OnInternalPhraseAsync, 27, 28
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 28] (27)"
      IterEnd: "[1, 29] (28)"
      Token: "'+'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
      Whitespace:
        - 26
        - 27
    Phrase: "'+'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
195) EndPhrase, "'+'" [True], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
196) StartPhrase, "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
197) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
198) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
199) OnInternalPhraseAsync, 29, 33
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 30] (29)"
      IterEnd: "[1, 34] (33)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
      Whitespace:
        - 28
        - 29
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
200) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
201) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
202) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
203) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
204) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
205) OnInternalPhraseAsync, 29, 33
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 30] (29)"
      IterEnd: "[1, 34] (33)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
      Whitespace:
        - 28
        - 29
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
206) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
207) OnInternalPhraseAsync, 28, 33
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 30] (29)"
        IterEnd: "[1, 34] (33)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
        Whitespace:
          - 28
          - 29
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
208) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
209) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
210) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
211) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
212) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
213) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
214) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
215) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
216) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
217) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
218) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
219) OnInternalPhraseAsync, 34, 36
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 35] (34)"
      IterEnd: "[1, 37] (36)"
      Token: "'if'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
      Whitespace:
        - 33
        - 34
    Phrase: "'if'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
220) EndPhrase, "'if'" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
221) StartPhrase, "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
222) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
223) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
224) EndPhrase, "Lower" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
225) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
226) OnInternalPhraseAsync, 37, 46
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 38] (37)"
      IterEnd: "[1, 47] (46)"
      Token: "Upper"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
      Whitespace:
        - 36
        - 37
    Phrase: "Upper"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 35] (34)"
            IterEnd: "[1, 37] (36)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            Whitespace:
              - 33
              - 34
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
227) EndPhrase, "Upper" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
228) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
229) StartPhrase, "Upper", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
230) OnInternalPhraseAsync, 37, 46
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 38] (37)"
      IterEnd: "[1, 47] (46)"
      Token: "Upper"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
      Whitespace:
        - 36
        - 37
    Phrase: "Upper"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 47] (46)"
            Token: "Upper"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 35] (34)"
            IterEnd: "[1, 37] (36)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            Whitespace:
              - 33
              - 34
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
231) EndPhrase, "Upper" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
232) OnInternalPhraseAsync, 36, 46
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 38] (37)"
        IterEnd: "[1, 47] (46)"
        Token: "Upper"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
        Whitespace:
          - 36
          - 37
      Phrase: "Upper"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 47] (46)"
            Token: "Upper"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 35] (34)"
            IterEnd: "[1, 37] (36)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            Whitespace:
              - 33
              - 34
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
233) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
234) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
235) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
236) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
237) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
238) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
239) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
240) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
241) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
242) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
243) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
244) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
245) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
246) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
247) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
248) OnInternalPhraseAsync, 36, 46
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 38] (37)"
        IterEnd: "[1, 47] (46)"
        Token: "Upper"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
        Whitespace:
          - 36
          - 37
      Phrase: "Upper"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 35] (34)"
            IterEnd: "[1, 37] (36)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            Whitespace:
              - 33
              - 34
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
249) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
250) OnInternalPhraseAsync, 36, 46
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
          IsIgnored: False
          IterBegin: "[1, 38] (37)"
          IterEnd: "[1, 47] (46)"
          Token: "Upper"
          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
          Whitespace:
            - 36
            - 37
        Phrase: "Upper"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 35] (34)"
            IterEnd: "[1, 37] (36)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            Whitespace:
              - 33
              - 34
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
251) EndPhrase, "DynamicPhrasesType.Statements" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
252) StartPhrase, "'else'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
253) OnInternalPhraseAsync, 47, 51
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 48] (47)"
      IterEnd: "[1, 52] (51)"
      Token: "'else'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
      Whitespace:
        - 46
        - 47
    Phrase: "'else'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 35] (34)"
            IterEnd: "[1, 37] (36)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            Whitespace:
              - 33
              - 34
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 38] (37)"
                IterEnd: "[1, 47] (46)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                Whitespace:
                  - 36
                  - 37
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
254) EndPhrase, "'else'" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
255) StartPhrase, "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
256) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
257) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
258) OnInternalPhraseAsync, 52, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 53] (52)"
      IterEnd: "[1, 57] (56)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
      Whitespace:
        - 51
        - 52
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 35] (34)"
            IterEnd: "[1, 37] (36)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            Whitespace:
              - 33
              - 34
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 38] (37)"
                IterEnd: "[1, 47] (46)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                Whitespace:
                  - 36
                  - 37
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 48] (47)"
            IterEnd: "[1, 52] (51)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
            Whitespace:
              - 46
              - 47
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
259) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
260) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
261) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
262) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
263) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
264) OnInternalPhraseAsync, 52, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 53] (52)"
      IterEnd: "[1, 57] (56)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
      Whitespace:
        - 51
        - 52
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 53] (52)"
            IterEnd: "[1, 57] (56)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
            Whitespace:
              - 51
              - 52
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 35] (34)"
            IterEnd: "[1, 37] (36)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            Whitespace:
              - 33
              - 34
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 38] (37)"
                IterEnd: "[1, 47] (46)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                Whitespace:
                  - 36
                  - 37
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 48] (47)"
            IterEnd: "[1, 52] (51)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
            Whitespace:
              - 46
              - 47
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
265) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
266) OnInternalPhraseAsync, 51, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 53] (52)"
        IterEnd: "[1, 57] (56)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
        Whitespace:
          - 51
          - 52
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 53] (52)"
            IterEnd: "[1, 57] (56)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
            Whitespace:
              - 51
              - 52
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 35] (34)"
            IterEnd: "[1, 37] (36)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            Whitespace:
              - 33
              - 34
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 38] (37)"
                IterEnd: "[1, 47] (46)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                Whitespace:
                  - 36
                  - 37
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 48] (47)"
            IterEnd: "[1, 52] (51)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
            Whitespace:
              - 46
              - 47
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
267) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
268) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
269) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
270) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
271) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
272) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
273) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
274) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
275) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
276) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
277) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
278) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
279) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
280) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
281) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
282) OnInternalPhraseAsync, 51, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 53] (52)"
        IterEnd: "[1, 57] (56)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
        Whitespace:
          - 51
          - 52
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 35] (34)"
            IterEnd: "[1, 37] (36)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            Whitespace:
              - 33
              - 34
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 38] (37)"
                IterEnd: "[1, 47] (46)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                Whitespace:
                  - 36
                  - 37
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 48] (47)"
            IterEnd: "[1, 52] (51)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
            Whitespace:
              - 46
              - 47
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
283) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
284) OnInternalPhraseAsync, 51, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
          IsIgnored: False
          IterBegin: "[1, 53] (52)"
          IterEnd: "[1, 57] (56)"
          Token: "Lower"
          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
          Whitespace:
            - 51
            - 52
        Phrase: "Lower"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 35] (34)"
            IterEnd: "[1, 37] (36)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            Whitespace:
              - 33
              - 34
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 38] (37)"
                IterEnd: "[1, 47] (46)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                Whitespace:
                  - 36
                  - 37
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 48] (47)"
            IterEnd: "[1, 52] (51)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
            Whitespace:
              - 46
              - 47
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
285) EndPhrase, "DynamicPhrasesType.Statements" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
286) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
287) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
288) OnInternalPhraseAsync, 33, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 30] (29)"
                  IterEnd: "[1, 34] (33)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                  Whitespace:
                    - 28
                    - 29
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 35] (34)"
              IterEnd: "[1, 37] (36)"
              Token: "'if'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
              Whitespace:
                - 33
                - 34
            Phrase: "'if'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 38] (37)"
                  IterEnd: "[1, 47] (46)"
                  Token: "Upper"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                  Whitespace:
                    - 36
                    - 37
                Phrase: "Upper"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 48] (47)"
              IterEnd: "[1, 52] (51)"
              Token: "'else'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
              Whitespace:
                - 46
                - 47
            Phrase: "'else'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 53] (52)"
                  IterEnd: "[1, 57] (56)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                  Whitespace:
                    - 51
                    - 52
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Ter"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 34] (33)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
289) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
290) OnInternalPhraseAsync, 28, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 30] (29)"
                  IterEnd: "[1, 34] (33)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                  Whitespace:
                    - 28
                    - 29
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 35] (34)"
              IterEnd: "[1, 37] (36)"
              Token: "'if'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
              Whitespace:
                - 33
                - 34
            Phrase: "'if'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 38] (37)"
                  IterEnd: "[1, 47] (46)"
                  Token: "Upper"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                  Whitespace:
                    - 36
                    - 37
                Phrase: "Upper"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 48] (47)"
              IterEnd: "[1, 52] (51)"
              Token: "'else'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
              Whitespace:
                - 46
                - 47
            Phrase: "'else'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 53] (52)"
                  IterEnd: "[1, 57] (56)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                  Whitespace:
                    - 51
                    - 52
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Ter"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
291) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
292) OnInternalPhraseAsync, 28, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
          DataItems:
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 30] (29)"
                    IterEnd: "[1, 34] (33)"
                    Token: "Lower"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                    Whitespace:
                      - 28
                      - 29
                  Phrase: "Lower"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 35] (34)"
                IterEnd: "[1, 37] (36)"
                Token: "'if'"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                Whitespace:
                  - 33
                  - 34
              Phrase: "'if'"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 38] (37)"
                    IterEnd: "[1, 47] (46)"
                    Token: "Upper"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                    Whitespace:
                      - 36
                      - 37
                  Phrase: "Upper"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 48] (47)"
                IterEnd: "[1, 52] (51)"
                Token: "'else'"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                Whitespace:
                  - 46
                  - 47
              Phrase: "'else'"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 53] (52)"
                    IterEnd: "[1, 57] (56)"
                    Token: "Lower"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                    Whitespace:
                      - 51
                      - 52
                  Phrase: "Lower"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Ter"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 28] (27)"
            IterEnd: "[1, 29] (28)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            Whitespace:
              - 26
              - 27
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
293) EndPhrase, "DynamicPhrasesType.Statements" [True], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
294) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
295) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
296) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
297) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
298) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
299) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
300) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
301) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
302) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
303) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
304) OnInternalPhraseAsync, 26, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 22] (21)"
                  IterEnd: "[1, 27] (26)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                  Whitespace:
                    - 20
                    - 21
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 28] (27)"
              IterEnd: "[1, 29] (28)"
              Token: "'+'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
              Whitespace:
                - 26
                - 27
            Phrase: "'+'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 30] (29)"
                            IterEnd: "[1, 34] (33)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                            Whitespace:
                              - 28
                              - 29
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 35] (34)"
                        IterEnd: "[1, 37] (36)"
                        Token: "'if'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                        Whitespace:
                          - 33
                          - 34
                      Phrase: "'if'"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 38] (37)"
                            IterEnd: "[1, 47] (46)"
                            Token: "Upper"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                            Whitespace:
                              - 36
                              - 37
                          Phrase: "Upper"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 48] (47)"
                        IterEnd: "[1, 52] (51)"
                        Token: "'else'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                        Whitespace:
                          - 46
                          - 47
                      Phrase: "'else'"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 53] (52)"
                            IterEnd: "[1, 57] (56)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                            Whitespace:
                              - 51
                              - 52
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Ter"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Add"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 22] (21)"
            IterEnd: "[1, 27] (26)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
            Whitespace:
              - 20
              - 21
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
305) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
306) OnInternalPhraseAsync, 20, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 22] (21)"
                  IterEnd: "[1, 27] (26)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                  Whitespace:
                    - 20
                    - 21
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 28] (27)"
              IterEnd: "[1, 29] (28)"
              Token: "'+'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
              Whitespace:
                - 26
                - 27
            Phrase: "'+'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 30] (29)"
                            IterEnd: "[1, 34] (33)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                            Whitespace:
                              - 28
                              - 29
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 35] (34)"
                        IterEnd: "[1, 37] (36)"
                        Token: "'if'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                        Whitespace:
                          - 33
                          - 34
                      Phrase: "'if'"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 38] (37)"
                            IterEnd: "[1, 47] (46)"
                            Token: "Upper"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                            Whitespace:
                              - 36
                              - 37
                          Phrase: "Upper"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 48] (47)"
                        IterEnd: "[1, 52] (51)"
                        Token: "'else'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                        Whitespace:
                          - 46
                          - 47
                      Phrase: "'else'"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 53] (52)"
                            IterEnd: "[1, 57] (56)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                            Whitespace:
                              - 51
                              - 52
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Ter"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Add"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
307) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
308) OnInternalPhraseAsync, 20, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
          DataItems:
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 22] (21)"
                    IterEnd: "[1, 27] (26)"
                    Token: "Lower"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                    Whitespace:
                      - 20
                      - 21
                  Phrase: "Lower"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 28] (27)"
                IterEnd: "[1, 29] (28)"
                Token: "'+'"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
                Whitespace:
                  - 26
                  - 27
              Phrase: "'+'"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 30] (29)"
                              IterEnd: "[1, 34] (33)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                              Whitespace:
                                - 28
                                - 29
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 35] (34)"
                          IterEnd: "[1, 37] (36)"
                          Token: "'if'"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                          Whitespace:
                            - 33
                            - 34
                        Phrase: "'if'"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 38] (37)"
                              IterEnd: "[1, 47] (46)"
                              Token: "Upper"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                              Whitespace:
                                - 36
                                - 37
                            Phrase: "Upper"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 48] (47)"
                          IterEnd: "[1, 52] (51)"
                          Token: "'else'"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                          Whitespace:
                            - 46
                            - 47
                        Phrase: "'else'"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 53] (52)"
                              IterEnd: "[1, 57] (56)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                              Whitespace:
                                - 51
                                - 52
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Ter"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Add"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 21] (20)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
309) EndPhrase, "DynamicPhrasesType.Statements" [True], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
310) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
311) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
312) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
313) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
314) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
315) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
316) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
317) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
318) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
319) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
320) OnInternalPhraseAsync, 18, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
              DataItems:
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 7] (6)"
                                    IterEnd: "[1, 10] (9)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                    Whitespace:
                                      - 5
                                      - 6
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 10] (9)"
                                IterEnd: "[1, 11] (10)"
                                Token: "'['"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                Whitespace: None
                              Phrase: "'['"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 11] (10)"
                                    IterEnd: "[1, 12] (11)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 12] (11)"
                                IterEnd: "[1, 13] (12)"
                                Token: "']'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                Whitespace: None
                              Phrase: "']'"
                          IsComplete: True
                        Phrase: "Index"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 13] (12)"
                          IterEnd: "[1, 14] (13)"
                          Token: "'['"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                          Whitespace: None
                        Phrase: "'['"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 14] (13)"
                              IterEnd: "[1, 15] (14)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                              Whitespace: None
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 15] (14)"
                          IterEnd: "[1, 16] (15)"
                          Token: "']'"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                          Whitespace: None
                        Phrase: "']'"
                    IsComplete: True
                  Phrase: "Index"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 16] (15)"
                    IterEnd: "[1, 17] (16)"
                    Token: "'['"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                    Whitespace: None
                  Phrase: "'['"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 17] (16)"
                        IterEnd: "[1, 18] (17)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                        Whitespace: None
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 18] (17)"
                    IterEnd: "[1, 19] (18)"
                    Token: "']'"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                    Whitespace: None
                  Phrase: "']'"
              IsComplete: True
            Phrase: "Index"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 20] (19)"
              IterEnd: "[1, 21] (20)"
              Token: "'+'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
              Whitespace:
                - 18
                - 19
            Phrase: "'+'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 22] (21)"
                            IterEnd: "[1, 27] (26)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                            Whitespace:
                              - 20
                              - 21
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 28] (27)"
                        IterEnd: "[1, 29] (28)"
                        Token: "'+'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
                        Whitespace:
                          - 26
                          - 27
                      Phrase: "'+'"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                            DataItems:
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 30] (29)"
                                      IterEnd: "[1, 34] (33)"
                                      Token: "Lower"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                                      Whitespace:
                                        - 28
                                        - 29
                                    Phrase: "Lower"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 35] (34)"
                                  IterEnd: "[1, 37] (36)"
                                  Token: "'if'"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                                  Whitespace:
                                    - 33
                                    - 34
                                Phrase: "'if'"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 38] (37)"
                                      IterEnd: "[1, 47] (46)"
                                      Token: "Upper"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                                      Whitespace:
                                        - 36
                                        - 37
                                    Phrase: "Upper"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 48] (47)"
                                  IterEnd: "[1, 52] (51)"
                                  Token: "'else'"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                                  Whitespace:
                                    - 46
                                    - 47
                                Phrase: "'else'"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 53] (52)"
                                      IterEnd: "[1, 57] (56)"
                                      Token: "Lower"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                                      Whitespace:
                                        - 51
                                        - 52
                                    Phrase: "Lower"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                            IsComplete: True
                          Phrase: "Ter"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Add"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Add"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 10] (9)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
321) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
322) OnInternalPhraseAsync, 5, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
              DataItems:
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 7] (6)"
                                    IterEnd: "[1, 10] (9)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                    Whitespace:
                                      - 5
                                      - 6
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 10] (9)"
                                IterEnd: "[1, 11] (10)"
                                Token: "'['"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                Whitespace: None
                              Phrase: "'['"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 11] (10)"
                                    IterEnd: "[1, 12] (11)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 12] (11)"
                                IterEnd: "[1, 13] (12)"
                                Token: "']'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                Whitespace: None
                              Phrase: "']'"
                          IsComplete: True
                        Phrase: "Index"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 13] (12)"
                          IterEnd: "[1, 14] (13)"
                          Token: "'['"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                          Whitespace: None
                        Phrase: "'['"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 14] (13)"
                              IterEnd: "[1, 15] (14)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                              Whitespace: None
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 15] (14)"
                          IterEnd: "[1, 16] (15)"
                          Token: "']'"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                          Whitespace: None
                        Phrase: "']'"
                    IsComplete: True
                  Phrase: "Index"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 16] (15)"
                    IterEnd: "[1, 17] (16)"
                    Token: "'['"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                    Whitespace: None
                  Phrase: "'['"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 17] (16)"
                        IterEnd: "[1, 18] (17)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                        Whitespace: None
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 18] (17)"
                    IterEnd: "[1, 19] (18)"
                    Token: "']'"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                    Whitespace: None
                  Phrase: "']'"
              IsComplete: True
            Phrase: "Index"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 20] (19)"
              IterEnd: "[1, 21] (20)"
              Token: "'+'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
              Whitespace:
                - 18
                - 19
            Phrase: "'+'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 22] (21)"
                            IterEnd: "[1, 27] (26)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                            Whitespace:
                              - 20
                              - 21
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 28] (27)"
                        IterEnd: "[1, 29] (28)"
                        Token: "'+'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
                        Whitespace:
                          - 26
                          - 27
                      Phrase: "'+'"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                            DataItems:
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 30] (29)"
                                      IterEnd: "[1, 34] (33)"
                                      Token: "Lower"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                                      Whitespace:
                                        - 28
                                        - 29
                                    Phrase: "Lower"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 35] (34)"
                                  IterEnd: "[1, 37] (36)"
                                  Token: "'if'"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                                  Whitespace:
                                    - 33
                                    - 34
                                Phrase: "'if'"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 38] (37)"
                                      IterEnd: "[1, 47] (46)"
                                      Token: "Upper"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                                      Whitespace:
                                        - 36
                                        - 37
                                    Phrase: "Upper"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 48] (47)"
                                  IterEnd: "[1, 52] (51)"
                                  Token: "'else'"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                                  Whitespace:
                                    - 46
                                    - 47
                                Phrase: "'else'"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 53] (52)"
                                      IterEnd: "[1, 57] (56)"
                                      Token: "Lower"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                                      Whitespace:
                                        - 51
                                        - 52
                                    Phrase: "Lower"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                            IsComplete: True
                          Phrase: "Ter"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Add"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Add"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
323) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
324) OnInternalPhraseAsync, 5, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
          DataItems:
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                      DataItems:
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                            DataItems:
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 7] (6)"
                                      IterEnd: "[1, 10] (9)"
                                      Token: "Lower"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                      Whitespace:
                                        - 5
                                        - 6
                                    Phrase: "Lower"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 10] (9)"
                                  IterEnd: "[1, 11] (10)"
                                  Token: "'['"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                  Whitespace: None
                                Phrase: "'['"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 11] (10)"
                                      IterEnd: "[1, 12] (11)"
                                      Token: "Lower"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 12] (11)"
                                  IterEnd: "[1, 13] (12)"
                                  Token: "']'"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                  Whitespace: None
                                Phrase: "']'"
                            IsComplete: True
                          Phrase: "Index"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 13] (12)"
                            IterEnd: "[1, 14] (13)"
                            Token: "'['"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                            Whitespace: None
                          Phrase: "'['"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 14] (13)"
                                IterEnd: "[1, 15] (14)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                Whitespace: None
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 15] (14)"
                            IterEnd: "[1, 16] (15)"
                            Token: "']'"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                            Whitespace: None
                          Phrase: "']'"
                      IsComplete: True
                    Phrase: "Index"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 16] (15)"
                      IterEnd: "[1, 17] (16)"
                      Token: "'['"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                      Whitespace: None
                    Phrase: "'['"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 17] (16)"
                          IterEnd: "[1, 18] (17)"
                          Token: "Lower"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                          Whitespace: None
                        Phrase: "Lower"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 18] (17)"
                      IterEnd: "[1, 19] (18)"
                      Token: "']'"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                      Whitespace: None
                    Phrase: "']'"
                IsComplete: True
              Phrase: "Index"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 20] (19)"
                IterEnd: "[1, 21] (20)"
                Token: "'+'"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                Whitespace:
                  - 18
                  - 19
              Phrase: "'+'"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 22] (21)"
                              IterEnd: "[1, 27] (26)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                              Whitespace:
                                - 20
                                - 21
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 28] (27)"
                          IterEnd: "[1, 29] (28)"
                          Token: "'+'"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
                          Whitespace:
                            - 26
                            - 27
                        Phrase: "'+'"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                              DataItems:
                                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 30] (29)"
                                        IterEnd: "[1, 34] (33)"
                                        Token: "Lower"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                                        Whitespace:
                                          - 28
                                          - 29
                                      Phrase: "Lower"
                                    Phrase: "Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 35] (34)"
                                    IterEnd: "[1, 37] (36)"
                                    Token: "'if'"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                                    Whitespace:
                                      - 33
                                      - 34
                                  Phrase: "'if'"
                                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 38] (37)"
                                        IterEnd: "[1, 47] (46)"
                                        Token: "Upper"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                                        Whitespace:
                                          - 36
                                          - 37
                                      Phrase: "Upper"
                                    Phrase: "Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 48] (47)"
                                    IterEnd: "[1, 52] (51)"
                                    Token: "'else'"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                                    Whitespace:
                                      - 46
                                      - 47
                                  Phrase: "'else'"
                                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 53] (52)"
                                        IterEnd: "[1, 57] (56)"
                                        Token: "Lower"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                                        Whitespace:
                                          - 51
                                          - 52
                                      Phrase: "Lower"
                                    Phrase: "Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                              IsComplete: True
                            Phrase: "Ter"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Add"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Add"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
325) EndPhrase, "DynamicPhrasesType.Statements" [True], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
326) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>"
327) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
328) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>"
329) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
330) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>"
331) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
332) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
333) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
334) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>"
335) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
336) OnInternalPhraseAsync, 3, 56
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 1] (0)"
                  IterEnd: "[1, 4] (3)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 5] (4)"
              IterEnd: "[1, 6] (5)"
              Token: "'+'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
              Whitespace:
                - 3
                - 4
            Phrase: "'+'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                        DataItems:
                          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                              DataItems:
                                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                    DataItems:
                                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 7] (6)"
                                              IterEnd: "[1, 10] (9)"
                                              Token: "Lower"
                                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                              Whitespace:
                                                - 5
                                                - 6
                                            Phrase: "Lower"
                                          Phrase: "Phrases"
                                        Phrase: "DynamicPhrasesType.Statements"
                                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 10] (9)"
                                          IterEnd: "[1, 11] (10)"
                                          Token: "'['"
                                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                          Whitespace: None
                                        Phrase: "'['"
                                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 11] (10)"
                                              IterEnd: "[1, 12] (11)"
                                              Token: "Lower"
                                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                              Whitespace: None
                                            Phrase: "Lower"
                                          Phrase: "Phrases"
                                        Phrase: "DynamicPhrasesType.Statements"
                                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 12] (11)"
                                          IterEnd: "[1, 13] (12)"
                                          Token: "']'"
                                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                          Whitespace: None
                                        Phrase: "']'"
                                    IsComplete: True
                                  Phrase: "Index"
                                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 13] (12)"
                                    IterEnd: "[1, 14] (13)"
                                    Token: "'['"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                    Whitespace: None
                                  Phrase: "'['"
                                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 14] (13)"
                                        IterEnd: "[1, 15] (14)"
                                        Token: "Lower"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                        Whitespace: None
                                      Phrase: "Lower"
                                    Phrase: "Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 15] (14)"
                                    IterEnd: "[1, 16] (15)"
                                    Token: "']'"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                    Whitespace: None
                                  Phrase: "']'"
                              IsComplete: True
                            Phrase: "Index"
                          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 16] (15)"
                              IterEnd: "[1, 17] (16)"
                              Token: "'['"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                              Whitespace: None
                            Phrase: "'['"
                          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 17] (16)"
                                  IterEnd: "[1, 18] (17)"
                                  Token: "Lower"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                  Whitespace: None
                                Phrase: "Lower"
                              Phrase: "Phrases"
                            Phrase: "DynamicPhrasesType.Statements"
                          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 18] (17)"
                              IterEnd: "[1, 19] (18)"
                              Token: "']'"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                              Whitespace: None
                            Phrase: "']'"
                        IsComplete: True
                      Phrase: "Index"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 20] (19)"
                        IterEnd: "[1, 21] (20)"
                        Token: "'+'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                        Whitespace:
                          - 18
                          - 19
                      Phrase: "'+'"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                            DataItems:
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 22] (21)"
                                      IterEnd: "[1, 27] (26)"
                                      Token: "Lower"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                                      Whitespace:
                                        - 20
                                        - 21
                                    Phrase: "Lower"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 28] (27)"
                                  IterEnd: "[1, 29] (28)"
                                  Token: "'+'"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
                                  Whitespace:
                                    - 26
                                    - 27
                                Phrase: "'+'"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                                      DataItems:
                                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 30] (29)"
                                                IterEnd: "[1, 34] (33)"
                                                Token: "Lower"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                                                Whitespace:
                                                  - 28
                                                  - 29
                                              Phrase: "Lower"
                                            Phrase: "Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 35] (34)"
                                            IterEnd: "[1, 37] (36)"
                                            Token: "'if'"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                                            Whitespace:
                                              - 33
                                              - 34
                                          Phrase: "'if'"
                                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 38] (37)"
                                                IterEnd: "[1, 47] (46)"
                                                Token: "Upper"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                                                Whitespace:
                                                  - 36
                                                  - 37
                                              Phrase: "Upper"
                                            Phrase: "Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 48] (47)"
                                            IterEnd: "[1, 52] (51)"
                                            Token: "'else'"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                                            Whitespace:
                                              - 46
                                              - 47
                                          Phrase: "'else'"
                                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 53] (52)"
                                                IterEnd: "[1, 57] (56)"
                                                Token: "Lower"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                                                Whitespace:
                                                  - 51
                                                  - 52
                                              Phrase: "Lower"
                                            Phrase: "Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                      IsComplete: True
                                    Phrase: "Ter"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                            IsComplete: True
                          Phrase: "Add"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Add"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Add"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
337) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True]
