# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 8] (7)"
                        Type: "'mutable' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(0, 7), match='mutable'>"
                        Whitespace: None
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 8] (7)"
                    Type: "Class Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 8] (7)"
                Type: "Repeat: {Class Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 9] (8)"
                    IterEnd: "[1, 14] (13)"
                    Type: "'class' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(8, 13), match='class'>"
                    Whitespace:
                      - 7
                      - 8
                IterBegin: "[1, 9] (8)"
                IterEnd: "[1, 14] (13)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 18] (17)"
                Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 17), match='Foo'>"
                Whitespace:
                  - 13
                  - 14
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 18] (17)"
                IterEnd: "[1, 19] (18)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(17, 18), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 19] (18)"
                IterEnd: "[1, 20] (19)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(18, 19), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 20] (19)"
                    IterEnd: "[1, 21] (20)"
                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(19, 20), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 21] (20)"
                            IterEnd: "[2, 1] (21)"
                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                              End: 21
                              Start: 20
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 1] (21)"
                            IterEnd: "[2, 5] (25)"
                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                              End: 25
                              Start: 21
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[2, 5] (25)"
                                                        IterEnd: "[2, 8] (28)"
                                                        Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(25, 28), match='Int'>"
                                                        Whitespace: None
                                                    Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                      Modifier: None
                                                      Regions:
                                                        Self__: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                                                        TypeName: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                                                        Modifier: None
                                                      TypeName: "Int"
                                                    IterBegin: "[2, 5] (25)"
                                                    IterEnd: "[2, 8] (28)"
                                                    Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[2, 5] (25)"
                                                IterEnd: "[2, 8] (28)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[2, 5] (25)"
                                            IterEnd: "[2, 8] (28)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 9] (29)"
                                            IterEnd: "[2, 24] (44)"
                                            Type: "<method_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(29, 44), match='ImmutableMethod'>"
                                            Whitespace:
                                              - 28
                                              - 29
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 24] (44)"
                                                IterEnd: "[2, 25] (45)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(44, 45), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 25] (45)"
                                                IterEnd: "[2, 26] (46)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(45, 46), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[2, 24] (44)"
                                            IterEnd: "[2, 26] (46)"
                                            Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 27] (47)"
                                                    IterEnd: "[2, 36] (56)"
                                                    Type: "'immutable' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(47, 56), match='immutable'>"
                                                    Whitespace:
                                                      - 46
                                                      - 47
                                                IterBegin: "[2, 27] (47)"
                                                IterEnd: "[2, 36] (56)"
                                                Type: "Class Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[2, 27] (47)"
                                            IterEnd: "[2, 36] (56)"
                                            Type: "Repeat: {Class Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 36] (56)"
                                                    IterEnd: "[2, 37] (57)"
                                                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(56, 57), match=':'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 37] (57)"
                                                            IterEnd: "[3, 1] (58)"
                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                              End: 58
                                                              Start: 57
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[3, 1] (58)"
                                                            IterEnd: "[3, 9] (66)"
                                                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                              End: 66
                                                              Start: 58
                                                              Value: 8
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 9] (66)"
                                                                            IterEnd: "[3, 13] (70)"
                                                                            Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(66, 70), match='pass'>"
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 13] (70)"
                                                                            IterEnd: "[5, 1] (72)"
                                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                              End: 72
                                                                              Start: 70
                                                                            Whitespace: None
                                                                        IterBegin: "[3, 9] (66)"
                                                                        IterEnd: "[5, 1] (72)"
                                                                        Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 9] (66)"
                                                                    IterEnd: "[5, 1] (72)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[3, 9] (66)"
                                                                IterEnd: "[5, 1] (72)"
                                                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 9] (66)"
                                                            IterEnd: "[5, 1] (72)"
                                                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[5, 1] (72)"
                                                            IterEnd: "[5, 5] (76)"
                                                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                              {}
                                                            Whitespace: None
                                                        IterBegin: "[2, 37] (57)"
                                                        IterEnd: "[5, 5] (76)"
                                                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[2, 37] (57)"
                                                    IterEnd: "[5, 5] (76)"
                                                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[2, 36] (56)"
                                                IterEnd: "[5, 5] (76)"
                                                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[2, 36] (56)"
                                            IterEnd: "[5, 5] (76)"
                                            Type: "Or: (Statements, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        Info: # <class 'TheLanguage.Lexer.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          MethodType: "MethodType.standard"
                                          Name: "ImmutableMethod"
                                          Paraemters: None
                                          Regions:
                                            Self__: "[Ln 2, Col 5] -> [Ln 5, Col 5]"
                                            Visibility: "[Ln 2, Col 5] -> [Ln 5, Col 5]"
                                            MethodType: "[Ln 2, Col 5] -> [Ln 5, Col 5]"
                                            ReturnType: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                                            Name: "[Ln 2, Col 9] -> [Ln 2, Col 24]"
                                            Paraemters: None
                                            ClassModifier: "[Ln 2, Col 27] -> [Ln 2, Col 36]"
                                            Statements: "[Ln 2, Col 36] -> [Ln 5, Col 5]"
                                          ReturnType: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                            Modifier: None
                                            Regions:
                                              Self__: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                                              TypeName: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                                              Modifier: None
                                            TypeName: "Int"
                                          Statements:
                                            - # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                              Regions:
                                                Self__: "[Ln 1, Col 1] -> [Ln 1, Col 1]"
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[2, 5] (25)"
                                        IterEnd: "[5, 5] (76)"
                                        Type: "Func And Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[2, 5] (25)"
                                    IterEnd: "[5, 5] (76)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 5] (25)"
                                IterEnd: "[5, 5] (76)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[5, 5] (76)"
                                                        IterEnd: "[5, 8] (79)"
                                                        Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(76, 79), match='Int'>"
                                                        Whitespace: None
                                                    Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                      Modifier: None
                                                      Regions:
                                                        Self__: "[Ln 5, Col 5] -> [Ln 5, Col 8]"
                                                        TypeName: "[Ln 5, Col 5] -> [Ln 5, Col 8]"
                                                        Modifier: None
                                                      TypeName: "Int"
                                                    IterBegin: "[5, 5] (76)"
                                                    IterEnd: "[5, 8] (79)"
                                                    Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[5, 5] (76)"
                                                IterEnd: "[5, 8] (79)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[5, 5] (76)"
                                            IterEnd: "[5, 8] (79)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[5, 9] (80)"
                                            IterEnd: "[5, 22] (93)"
                                            Type: "<method_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(80, 93), match='MutableMethod'>"
                                            Whitespace:
                                              - 79
                                              - 80
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[5, 22] (93)"
                                                IterEnd: "[5, 23] (94)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(93, 94), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[5, 23] (94)"
                                                IterEnd: "[5, 24] (95)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(94, 95), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[5, 22] (93)"
                                            IterEnd: "[5, 24] (95)"
                                            Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[5, 25] (96)"
                                                    IterEnd: "[5, 32] (103)"
                                                    Type: "'mutable' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(96, 103), match='mutable'>"
                                                    Whitespace:
                                                      - 95
                                                      - 96
                                                IterBegin: "[5, 25] (96)"
                                                IterEnd: "[5, 32] (103)"
                                                Type: "Class Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[5, 25] (96)"
                                            IterEnd: "[5, 32] (103)"
                                            Type: "Repeat: {Class Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[5, 32] (103)"
                                                    IterEnd: "[5, 33] (104)"
                                                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(103, 104), match=':'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[5, 33] (104)"
                                                            IterEnd: "[6, 1] (105)"
                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                              End: 105
                                                              Start: 104
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[6, 1] (105)"
                                                            IterEnd: "[6, 9] (113)"
                                                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                              End: 113
                                                              Start: 105
                                                              Value: 8
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[6, 9] (113)"
                                                                            IterEnd: "[6, 13] (117)"
                                                                            Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(113, 117), match='pass'>"
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[6, 13] (117)"
                                                                            IterEnd: "[8, 1] (119)"
                                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                              End: 119
                                                                              Start: 117
                                                                            Whitespace: None
                                                                        IterBegin: "[6, 9] (113)"
                                                                        IterEnd: "[8, 1] (119)"
                                                                        Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[6, 9] (113)"
                                                                    IterEnd: "[8, 1] (119)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[6, 9] (113)"
                                                                IterEnd: "[8, 1] (119)"
                                                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[6, 9] (113)"
                                                            IterEnd: "[8, 1] (119)"
                                                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[8, 1] (119)"
                                                            IterEnd: "[8, 5] (123)"
                                                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                              {}
                                                            Whitespace: None
                                                        IterBegin: "[5, 33] (104)"
                                                        IterEnd: "[8, 5] (123)"
                                                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[5, 33] (104)"
                                                    IterEnd: "[8, 5] (123)"
                                                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[5, 32] (103)"
                                                IterEnd: "[8, 5] (123)"
                                                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[5, 32] (103)"
                                            IterEnd: "[8, 5] (123)"
                                            Type: "Or: (Statements, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        Info: # <class 'TheLanguage.Lexer.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
                                          ClassModifier: "ClassModifier.mutable"
                                          MethodType: "MethodType.standard"
                                          Name: "MutableMethod"
                                          Paraemters: None
                                          Regions:
                                            Self__: "[Ln 5, Col 5] -> [Ln 8, Col 5]"
                                            Visibility: "[Ln 5, Col 5] -> [Ln 8, Col 5]"
                                            MethodType: "[Ln 5, Col 5] -> [Ln 8, Col 5]"
                                            ReturnType: "[Ln 5, Col 5] -> [Ln 5, Col 8]"
                                            Name: "[Ln 5, Col 9] -> [Ln 5, Col 22]"
                                            Paraemters: None
                                            ClassModifier: "[Ln 5, Col 25] -> [Ln 5, Col 32]"
                                            Statements: "[Ln 5, Col 32] -> [Ln 8, Col 5]"
                                          ReturnType: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                            Modifier: None
                                            Regions:
                                              Self__: "[Ln 5, Col 5] -> [Ln 5, Col 8]"
                                              TypeName: "[Ln 5, Col 5] -> [Ln 5, Col 8]"
                                              Modifier: None
                                            TypeName: "Int"
                                          Statements:
                                            - # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                              Regions:
                                                Self__: "[Ln 1, Col 1] -> [Ln 1, Col 1]"
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[5, 5] (76)"
                                        IterEnd: "[8, 5] (123)"
                                        Type: "Func And Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[5, 5] (76)"
                                    IterEnd: "[8, 5] (123)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[5, 5] (76)"
                                IterEnd: "[8, 5] (123)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[8, 5] (123)"
                                                        IterEnd: "[8, 8] (126)"
                                                        Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(123, 126), match='Int'>"
                                                        Whitespace: None
                                                    Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                      Modifier: None
                                                      Regions:
                                                        Self__: "[Ln 8, Col 5] -> [Ln 8, Col 8]"
                                                        TypeName: "[Ln 8, Col 5] -> [Ln 8, Col 8]"
                                                        Modifier: None
                                                      TypeName: "Int"
                                                    IterBegin: "[8, 5] (123)"
                                                    IterEnd: "[8, 8] (126)"
                                                    Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[8, 5] (123)"
                                                IterEnd: "[8, 8] (126)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[8, 5] (123)"
                                            IterEnd: "[8, 8] (126)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[8, 9] (127)"
                                            IterEnd: "[8, 22] (140)"
                                            Type: "<method_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(127, 140), match='DefaultMethod'>"
                                            Whitespace:
                                              - 126
                                              - 127
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[8, 22] (140)"
                                                IterEnd: "[8, 23] (141)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(140, 141), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[8, 23] (141)"
                                                IterEnd: "[8, 24] (142)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(141, 142), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[8, 22] (140)"
                                            IterEnd: "[8, 24] (142)"
                                            Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[8, 24] (142)"
                                                    IterEnd: "[8, 25] (143)"
                                                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(142, 143), match=':'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[8, 25] (143)"
                                                            IterEnd: "[9, 1] (144)"
                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                              End: 144
                                                              Start: 143
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[9, 1] (144)"
                                                            IterEnd: "[9, 9] (152)"
                                                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                              End: 152
                                                              Start: 144
                                                              Value: 8
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[9, 9] (152)"
                                                                            IterEnd: "[9, 13] (156)"
                                                                            Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(152, 156), match='pass'>"
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[9, 13] (156)"
                                                                            IterEnd: "[10, 1] (157)"
                                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                              End: 157
                                                                              Start: 156
                                                                            Whitespace: None
                                                                        IterBegin: "[9, 9] (152)"
                                                                        IterEnd: "[10, 1] (157)"
                                                                        Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[9, 9] (152)"
                                                                    IterEnd: "[10, 1] (157)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[9, 9] (152)"
                                                                IterEnd: "[10, 1] (157)"
                                                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[9, 9] (152)"
                                                            IterEnd: "[10, 1] (157)"
                                                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[10, 1] (157)"
                                                            IterEnd: "[10, 1] (157)"
                                                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                              {}
                                                            Whitespace: None
                                                        IterBegin: "[8, 25] (143)"
                                                        IterEnd: "[10, 1] (157)"
                                                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[8, 25] (143)"
                                                    IterEnd: "[10, 1] (157)"
                                                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[8, 24] (142)"
                                                IterEnd: "[10, 1] (157)"
                                                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[8, 24] (142)"
                                            IterEnd: "[10, 1] (157)"
                                            Type: "Or: (Statements, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        Info: # <class 'TheLanguage.Lexer.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          MethodType: "MethodType.standard"
                                          Name: "DefaultMethod"
                                          Paraemters: None
                                          Regions:
                                            Self__: "[Ln 8, Col 5] -> [Ln 10, Col 1]"
                                            Visibility: "[Ln 8, Col 5] -> [Ln 10, Col 1]"
                                            MethodType: "[Ln 8, Col 5] -> [Ln 10, Col 1]"
                                            ReturnType: "[Ln 8, Col 5] -> [Ln 8, Col 8]"
                                            Name: "[Ln 8, Col 9] -> [Ln 8, Col 22]"
                                            Paraemters: None
                                            ClassModifier: "[Ln 8, Col 5] -> [Ln 10, Col 1]"
                                            Statements: "[Ln 8, Col 24] -> [Ln 10, Col 1]"
                                          ReturnType: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                            Modifier: None
                                            Regions:
                                              Self__: "[Ln 8, Col 5] -> [Ln 8, Col 8]"
                                              TypeName: "[Ln 8, Col 5] -> [Ln 8, Col 8]"
                                              Modifier: None
                                            TypeName: "Int"
                                          Statements:
                                            - # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                              Regions:
                                                Self__: "[Ln 1, Col 1] -> [Ln 1, Col 1]"
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[8, 5] (123)"
                                        IterEnd: "[10, 1] (157)"
                                        Type: "Func And Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[8, 5] (123)"
                                    IterEnd: "[10, 1] (157)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[8, 5] (123)"
                                IterEnd: "[10, 1] (157)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[2, 5] (25)"
                            IterEnd: "[10, 1] (157)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[10, 1] (157)"
                            IterEnd: "[10, 1] (157)"
                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[1, 21] (20)"
                        IterEnd: "[10, 1] (157)"
                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 21] (20)"
                    IterEnd: "[10, 1] (157)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 20] (19)"
                IterEnd: "[10, 1] (157)"
                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
            Info: # <class 'TheLanguage.Lexer.Statements.ClassStatementLexerInfo.ClassStatementLexerInfo'>
              Base: None
              ClassModifier: "ClassModifier.mutable"
              ClassType: "ClassType.Class"
              Interfaces: None
              Mixins: None
              Name: "Foo"
              Regions:
                Self__: "[Ln 1, Col 1] -> [Ln 10, Col 1]"
                Visibility: "[Ln 1, Col 1] -> [Ln 10, Col 1]"
                ClassModifier: "[Ln 1, Col 1] -> [Ln 1, Col 8]"
                ClassType: "[Ln 1, Col 9] -> [Ln 1, Col 14]"
                Name: "[Ln 1, Col 15] -> [Ln 1, Col 18]"
                Base: None
                Interfaces: None
                Mixins: None
                Statements: "[Ln 1, Col 20] -> [Ln 10, Col 1]"
              Statements:
                - # <class 'TheLanguage.Lexer.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  MethodType: "MethodType.standard"
                  Name: "ImmutableMethod"
                  Paraemters: None
                  Regions:
                    Self__: "[Ln 2, Col 5] -> [Ln 5, Col 5]"
                    Visibility: "[Ln 2, Col 5] -> [Ln 5, Col 5]"
                    MethodType: "[Ln 2, Col 5] -> [Ln 5, Col 5]"
                    ReturnType: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                    Name: "[Ln 2, Col 9] -> [Ln 2, Col 24]"
                    Paraemters: None
                    ClassModifier: "[Ln 2, Col 27] -> [Ln 2, Col 36]"
                    Statements: "[Ln 2, Col 36] -> [Ln 5, Col 5]"
                  ReturnType: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                    Modifier: None
                    Regions:
                      Self__: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                      TypeName: "[Ln 2, Col 5] -> [Ln 2, Col 8]"
                      Modifier: None
                    TypeName: "Int"
                  Statements:
                    - # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                      Regions:
                        Self__: "[Ln 1, Col 1] -> [Ln 1, Col 1]"
                  Visibility: "VisibilityModifier.private"
                - # <class 'TheLanguage.Lexer.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
                  ClassModifier: "ClassModifier.mutable"
                  MethodType: "MethodType.standard"
                  Name: "MutableMethod"
                  Paraemters: None
                  Regions:
                    Self__: "[Ln 5, Col 5] -> [Ln 8, Col 5]"
                    Visibility: "[Ln 5, Col 5] -> [Ln 8, Col 5]"
                    MethodType: "[Ln 5, Col 5] -> [Ln 8, Col 5]"
                    ReturnType: "[Ln 5, Col 5] -> [Ln 5, Col 8]"
                    Name: "[Ln 5, Col 9] -> [Ln 5, Col 22]"
                    Paraemters: None
                    ClassModifier: "[Ln 5, Col 25] -> [Ln 5, Col 32]"
                    Statements: "[Ln 5, Col 32] -> [Ln 8, Col 5]"
                  ReturnType: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                    Modifier: None
                    Regions:
                      Self__: "[Ln 5, Col 5] -> [Ln 5, Col 8]"
                      TypeName: "[Ln 5, Col 5] -> [Ln 5, Col 8]"
                      Modifier: None
                    TypeName: "Int"
                  Statements:
                    - # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                      Regions:
                        Self__: "[Ln 1, Col 1] -> [Ln 1, Col 1]"
                  Visibility: "VisibilityModifier.private"
                - # <class 'TheLanguage.Lexer.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  MethodType: "MethodType.standard"
                  Name: "DefaultMethod"
                  Paraemters: None
                  Regions:
                    Self__: "[Ln 8, Col 5] -> [Ln 10, Col 1]"
                    Visibility: "[Ln 8, Col 5] -> [Ln 10, Col 1]"
                    MethodType: "[Ln 8, Col 5] -> [Ln 10, Col 1]"
                    ReturnType: "[Ln 8, Col 5] -> [Ln 8, Col 8]"
                    Name: "[Ln 8, Col 9] -> [Ln 8, Col 22]"
                    Paraemters: None
                    ClassModifier: "[Ln 8, Col 5] -> [Ln 10, Col 1]"
                    Statements: "[Ln 8, Col 24] -> [Ln 10, Col 1]"
                  ReturnType: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                    Modifier: None
                    Regions:
                      Self__: "[Ln 8, Col 5] -> [Ln 8, Col 8]"
                      TypeName: "[Ln 8, Col 5] -> [Ln 8, Col 8]"
                      Modifier: None
                    TypeName: "Int"
                  Statements:
                    - # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                      Regions:
                        Self__: "[Ln 1, Col 1] -> [Ln 1, Col 1]"
                  Visibility: "VisibilityModifier.private"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[10, 1] (157)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[10, 1] (157)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[10, 1] (157)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[10, 1] (157)"
Type: "<None>"
