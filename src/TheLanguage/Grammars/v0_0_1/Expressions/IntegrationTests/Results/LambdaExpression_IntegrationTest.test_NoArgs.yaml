# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 5] (4)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 4), match='var1'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "var1"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 5] (4)"
                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 5] (4)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 5] (4)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 6] (5)"
                IterEnd: "[1, 7] (6)"
                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(5, 6), match='='>"
                Whitespace:
                  - 4
                  - 5
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 8] (7)"
                            IterEnd: "[1, 14] (13)"
                            Type: "'lambda' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(7, 13), match='lambda'>"
                            Whitespace:
                              - 6
                              - 7
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 15] (14)"
                                IterEnd: "[1, 16] (15)"
                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(14, 15), match='('>"
                                Whitespace:
                                  - 13
                                  - 14
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 16] (15)"
                                IterEnd: "[1, 17] (16)"
                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(15, 16), match=')'>"
                                Whitespace: None
                            IterBegin: "[1, 15] (14)"
                            IterEnd: "[1, 17] (16)"
                            Type: "Parameters <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 17] (16)"
                            IterEnd: "[1, 18] (17)"
                            Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(16, 17), match=':'>"
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[1, 19] (18)"
                                                IterEnd: "[1, 24] (23)"
                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(18, 23), match='value'>"
                                                Whitespace:
                                                  - 17
                                                  - 18
                                            Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                              Name: "value"
                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                Name: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                                                Self__: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                                            IterBegin: "[1, 19] (18)"
                                            IterEnd: "[1, 24] (23)"
                                            Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[1, 19] (18)"
                                        IterEnd: "[1, 24] (23)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                    Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                        Name: "value"
                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                          Name: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                                          Self__: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                        Name: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                                        Self__: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                                    IterBegin: "[1, 19] (18)"
                                    IterEnd: "[1, 24] (23)"
                                    Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                IterBegin: "[1, 19] (18)"
                                IterEnd: "[1, 24] (23)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[1, 19] (18)"
                            IterEnd: "[1, 24] (23)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                        Info: # <class 'TheLanguage.Parser.Expressions.LambdaExpressionParserInfo.LambdaExpressionParserInfo'>
                          Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                              Name: "value"
                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                Name: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                                Self__: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                            Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                              Name: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                              Self__: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                          Parameters: None
                          Regions: # <class 'types.LambdaExpressionParserInfoRegions'>
                            Expression: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                            Parameters: None
                            Self__: "[Ln 1, Col 8] -> [Ln 1, Col 24]"
                        IterBegin: "[1, 8] (7)"
                        IterEnd: "[1, 24] (23)"
                        Type: "Lambda Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 8] (7)"
                    IterEnd: "[1, 24] (23)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 8] (7)"
                IterEnd: "[1, 24] (23)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 24] (23)"
                IterEnd: "[3, 1] (25)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 25
                  Start: 23
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
              Expression: # <class 'TheLanguage.Parser.Expressions.LambdaExpressionParserInfo.LambdaExpressionParserInfo'>
                Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                    Name: "value"
                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                      Name: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                      Self__: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                    Name: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                    Self__: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                Parameters: None
                Regions: # <class 'types.LambdaExpressionParserInfoRegions'>
                  Expression: "[Ln 1, Col 19] -> [Ln 1, Col 24]"
                  Parameters: None
                  Self__: "[Ln 1, Col 8] -> [Ln 1, Col 24]"
              Modifier: None
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "var1"
                Regions: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
                  Self__: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
              Regions: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
                Expression: "[Ln 1, Col 8] -> [Ln 1, Col 24]"
                Modifier: None
                Name: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
                Self__: "[Ln 1, Col 1] -> [Ln 3, Col 1]"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[3, 1] (25)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[3, 1] (25)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[3, 1] (25)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 1] (25)"
                            IterEnd: "[3, 5] (29)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(25, 29), match='var2'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "var2"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 3, Col 1] -> [Ln 3, Col 5]"
                            Self__: "[Ln 3, Col 1] -> [Ln 3, Col 5]"
                        IterBegin: "[3, 1] (25)"
                        IterEnd: "[3, 5] (29)"
                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[3, 1] (25)"
                    IterEnd: "[3, 5] (29)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[3, 1] (25)"
                IterEnd: "[3, 5] (29)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 6] (30)"
                IterEnd: "[3, 7] (31)"
                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(30, 31), match='='>"
                Whitespace:
                  - 29
                  - 30
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 8] (32)"
                            IterEnd: "[3, 13] (37)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(32, 37), match='Func1'>"
                            Whitespace:
                              - 31
                              - 32
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[3, 13] (37)"
                                IterEnd: "[3, 14] (38)"
                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(37, 38), match='('>"
                                Whitespace: None
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[3, 14] (38)"
                                                                IterEnd: "[3, 15] (39)"
                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(38, 39), match='a'>"
                                                                Whitespace: None
                                                            Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                              Name: "a"
                                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                Name: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                                                                Self__: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                                                            IterBegin: "[3, 14] (38)"
                                                            IterEnd: "[3, 15] (39)"
                                                            Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[3, 14] (38)"
                                                        IterEnd: "[3, 15] (39)"
                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                    Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                        Name: "a"
                                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                          Name: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                                                          Self__: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                        Name: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                                                        Self__: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                                                    IterBegin: "[3, 14] (38)"
                                                    IterEnd: "[3, 15] (39)"
                                                    Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                IterBegin: "[3, 14] (38)"
                                                IterEnd: "[3, 15] (39)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 14] (38)"
                                            IterEnd: "[3, 15] (39)"
                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                        IterBegin: "[3, 14] (38)"
                                        IterEnd: "[3, 15] (39)"
                                        Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 15] (39)"
                                                IterEnd: "[3, 16] (40)"
                                                Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(39, 40), match=','>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[3, 17] (41)"
                                                                IterEnd: "[3, 23] (47)"
                                                                Type: "'lambda' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(41, 47), match='lambda'>"
                                                                Whitespace:
                                                                  - 40
                                                                  - 41
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[3, 24] (48)"
                                                                    IterEnd: "[3, 25] (49)"
                                                                    Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(48, 49), match='('>"
                                                                    Whitespace:
                                                                      - 47
                                                                      - 48
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[3, 25] (49)"
                                                                    IterEnd: "[3, 26] (50)"
                                                                    Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(49, 50), match=')'>"
                                                                    Whitespace: None
                                                                IterBegin: "[3, 24] (48)"
                                                                IterEnd: "[3, 26] (50)"
                                                                Type: "Parameters <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[3, 26] (50)"
                                                                IterEnd: "[3, 27] (51)"
                                                                Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(50, 51), match=':'>"
                                                                Whitespace: None
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                    IsIgnored: False
                                                                                    IterBegin: "[3, 28] (52)"
                                                                                    IterEnd: "[3, 33] (57)"
                                                                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                      Match: "<_sre.SRE_Match object; span=(52, 57), match='value'>"
                                                                                    Whitespace:
                                                                                      - 51
                                                                                      - 52
                                                                                Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                  Name: "value"
                                                                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                    Name: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                                                                    Self__: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                                                                IterBegin: "[3, 28] (52)"
                                                                                IterEnd: "[3, 33] (57)"
                                                                                Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                            IterBegin: "[3, 28] (52)"
                                                                            IterEnd: "[3, 33] (57)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                        Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                            Name: "value"
                                                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                              Name: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                                                              Self__: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                            Name: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                                                            Self__: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                                                        IterBegin: "[3, 28] (52)"
                                                                        IterEnd: "[3, 33] (57)"
                                                                        Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[3, 28] (52)"
                                                                    IterEnd: "[3, 33] (57)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[3, 28] (52)"
                                                                IterEnd: "[3, 33] (57)"
                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            Info: # <class 'TheLanguage.Parser.Expressions.LambdaExpressionParserInfo.LambdaExpressionParserInfo'>
                                                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                  Name: "value"
                                                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                    Name: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                                                    Self__: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                  Name: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                                                  Self__: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                                              Parameters: None
                                                              Regions: # <class 'types.LambdaExpressionParserInfoRegions'>
                                                                Expression: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                                                Parameters: None
                                                                Self__: "[Ln 3, Col 17] -> [Ln 3, Col 33]"
                                                            IterBegin: "[3, 17] (41)"
                                                            IterEnd: "[3, 33] (57)"
                                                            Type: "Lambda Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[3, 17] (41)"
                                                        IterEnd: "[3, 33] (57)"
                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                    IterBegin: "[3, 17] (41)"
                                                    IterEnd: "[3, 33] (57)"
                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                IterBegin: "[3, 17] (41)"
                                                IterEnd: "[3, 33] (57)"
                                                Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[3, 15] (39)"
                                            IterEnd: "[3, 33] (57)"
                                            Type: "Comma and Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 33] (57)"
                                                IterEnd: "[3, 34] (58)"
                                                Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(57, 58), match=','>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                        IsIgnored: False
                                                                        IterBegin: "[3, 35] (59)"
                                                                        IterEnd: "[3, 36] (60)"
                                                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                          Match: "<_sre.SRE_Match object; span=(59, 60), match='b'>"
                                                                        Whitespace:
                                                                          - 58
                                                                          - 59
                                                                    Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                      Name: "b"
                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                        Name: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                                                                        Self__: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                                                                    IterBegin: "[3, 35] (59)"
                                                                    IterEnd: "[3, 36] (60)"
                                                                    Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[3, 35] (59)"
                                                                IterEnd: "[3, 36] (60)"
                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                            Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                Name: "b"
                                                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                  Name: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                                                                  Self__: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                                                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                Name: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                                                                Self__: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                                                            IterBegin: "[3, 35] (59)"
                                                            IterEnd: "[3, 36] (60)"
                                                            Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                        IterBegin: "[3, 35] (59)"
                                                        IterEnd: "[3, 36] (60)"
                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                    IterBegin: "[3, 35] (59)"
                                                    IterEnd: "[3, 36] (60)"
                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                IterBegin: "[3, 35] (59)"
                                                IterEnd: "[3, 36] (60)"
                                                Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[3, 33] (57)"
                                            IterEnd: "[3, 36] (60)"
                                            Type: "Comma and Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[3, 15] (39)"
                                        IterEnd: "[3, 36] (60)"
                                        Type: "Repeat: {Comma and Argument, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                    IterBegin: "[3, 14] (38)"
                                    IterEnd: "[3, 36] (60)"
                                    Type: "Argument Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[3, 14] (38)"
                                IterEnd: "[3, 36] (60)"
                                Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[3, 36] (60)"
                                IterEnd: "[3, 37] (61)"
                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(60, 61), match=')'>"
                                Whitespace: None
                            IterBegin: "[3, 13] (37)"
                            IterEnd: "[3, 37] (61)"
                            Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                          Arguments:
                            - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "a"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                                    Self__: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                                  Self__: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                              Keyword: None
                              Regions: # <class 'types.ArgumentParserInfoRegions'>
                                Expression: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                                Keyword: None
                                Self__: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                            - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                              Expression: # <class 'TheLanguage.Parser.Expressions.LambdaExpressionParserInfo.LambdaExpressionParserInfo'>
                                Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "value"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                      Self__: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                    Self__: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                Parameters: None
                                Regions: # <class 'types.LambdaExpressionParserInfoRegions'>
                                  Expression: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                                  Parameters: None
                                  Self__: "[Ln 3, Col 17] -> [Ln 3, Col 33]"
                              Keyword: None
                              Regions: # <class 'types.ArgumentParserInfoRegions'>
                                Expression: "[Ln 3, Col 17] -> [Ln 3, Col 33]"
                                Keyword: None
                                Self__: "[Ln 3, Col 17] -> [Ln 3, Col 33]"
                            - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "b"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                                    Self__: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                                  Self__: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                              Keyword: None
                              Regions: # <class 'types.ArgumentParserInfoRegions'>
                                Expression: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                                Keyword: None
                                Self__: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                          Name: "Func1"
                          Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                            Arguments: "[Ln 3, Col 13] -> [Ln 3, Col 37]"
                            Name: "[Ln 3, Col 8] -> [Ln 3, Col 13]"
                            Self__: "[Ln 3, Col 8] -> [Ln 3, Col 37]"
                        IterBegin: "[3, 8] (32)"
                        IterEnd: "[3, 37] (61)"
                        Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[3, 8] (32)"
                    IterEnd: "[3, 37] (61)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[3, 8] (32)"
                IterEnd: "[3, 37] (61)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 37] (61)"
                IterEnd: "[5, 1] (63)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 63
                  Start: 61
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
              Expression: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                Arguments:
                  - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "a"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                          Self__: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                        Self__: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                    Keyword: None
                    Regions: # <class 'types.ArgumentParserInfoRegions'>
                      Expression: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                      Keyword: None
                      Self__: "[Ln 3, Col 14] -> [Ln 3, Col 15]"
                  - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                    Expression: # <class 'TheLanguage.Parser.Expressions.LambdaExpressionParserInfo.LambdaExpressionParserInfo'>
                      Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "value"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                            Self__: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                          Self__: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                      Parameters: None
                      Regions: # <class 'types.LambdaExpressionParserInfoRegions'>
                        Expression: "[Ln 3, Col 28] -> [Ln 3, Col 33]"
                        Parameters: None
                        Self__: "[Ln 3, Col 17] -> [Ln 3, Col 33]"
                    Keyword: None
                    Regions: # <class 'types.ArgumentParserInfoRegions'>
                      Expression: "[Ln 3, Col 17] -> [Ln 3, Col 33]"
                      Keyword: None
                      Self__: "[Ln 3, Col 17] -> [Ln 3, Col 33]"
                  - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "b"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                          Self__: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                        Self__: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                    Keyword: None
                    Regions: # <class 'types.ArgumentParserInfoRegions'>
                      Expression: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                      Keyword: None
                      Self__: "[Ln 3, Col 35] -> [Ln 3, Col 36]"
                Name: "Func1"
                Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                  Arguments: "[Ln 3, Col 13] -> [Ln 3, Col 37]"
                  Name: "[Ln 3, Col 8] -> [Ln 3, Col 13]"
                  Self__: "[Ln 3, Col 8] -> [Ln 3, Col 37]"
              Modifier: None
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "var2"
                Regions: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 3, Col 1] -> [Ln 3, Col 5]"
                  Self__: "[Ln 3, Col 1] -> [Ln 3, Col 5]"
              Regions: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
                Expression: "[Ln 3, Col 8] -> [Ln 3, Col 37]"
                Modifier: None
                Name: "[Ln 3, Col 1] -> [Ln 3, Col 5]"
                Self__: "[Ln 3, Col 1] -> [Ln 5, Col 1]"
            IterBegin: "[3, 1] (25)"
            IterEnd: "[5, 1] (63)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[3, 1] (25)"
        IterEnd: "[5, 1] (63)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[3, 1] (25)"
    IterEnd: "[5, 1] (63)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[5, 1] (63)"
                            IterEnd: "[5, 5] (67)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(63, 67), match='var3'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "var3"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 5, Col 1] -> [Ln 5, Col 5]"
                            Self__: "[Ln 5, Col 1] -> [Ln 5, Col 5]"
                        IterBegin: "[5, 1] (63)"
                        IterEnd: "[5, 5] (67)"
                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[5, 1] (63)"
                    IterEnd: "[5, 5] (67)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[5, 1] (63)"
                IterEnd: "[5, 5] (67)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 6] (68)"
                IterEnd: "[5, 7] (69)"
                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(68, 69), match='='>"
                Whitespace:
                  - 67
                  - 68
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[5, 8] (70)"
                            IterEnd: "[5, 13] (75)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(70, 75), match='Func2'>"
                            Whitespace:
                              - 69
                              - 70
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[5, 13] (75)"
                                IterEnd: "[5, 14] (76)"
                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(75, 76), match='('>"
                                Whitespace: None
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[6, 5] (81)"
                                                        IterEnd: "[6, 11] (87)"
                                                        Type: "'lambda' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(81, 87), match='lambda'>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[6, 12] (88)"
                                                            IterEnd: "[6, 13] (89)"
                                                            Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(88, 89), match='('>"
                                                            Whitespace:
                                                              - 87
                                                              - 88
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[6, 13] (89)"
                                                            IterEnd: "[6, 14] (90)"
                                                            Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(89, 90), match=')'>"
                                                            Whitespace: None
                                                        IterBegin: "[6, 12] (88)"
                                                        IterEnd: "[6, 14] (90)"
                                                        Type: "Parameters <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[6, 14] (90)"
                                                        IterEnd: "[6, 15] (91)"
                                                        Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(90, 91), match=':'>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[6, 16] (92)"
                                                                                        IterEnd: "[6, 20] (96)"
                                                                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(92, 96), match='true'>"
                                                                                        Whitespace:
                                                                                          - 91
                                                                                          - 92
                                                                                    Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                      Name: "true"
                                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                        Name: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                                                        Self__: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                                                    IterBegin: "[6, 16] (92)"
                                                                                    IterEnd: "[6, 20] (96)"
                                                                                    Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[6, 16] (92)"
                                                                                IterEnd: "[6, 20] (96)"
                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                            Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                Name: "true"
                                                                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                  Name: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                                                  Self__: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                Name: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                                                Self__: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                                            IterBegin: "[6, 16] (92)"
                                                                            IterEnd: "[6, 20] (96)"
                                                                            Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                        IterBegin: "[6, 16] (92)"
                                                                        IterEnd: "[6, 20] (96)"
                                                                        Type: "Left Recursive Wrapper <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                    IterBegin: "[6, 16] (92)"
                                                                    IterEnd: "[6, 20] (96)"
                                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[6, 21] (97)"
                                                                    IterEnd: "[6, 23] (99)"
                                                                    Type: "'if' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(97, 99), match='if'>"
                                                                    Whitespace:
                                                                      - 96
                                                                      - 97
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[6, 24] (100)"
                                                                                        IterEnd: "[6, 33] (109)"
                                                                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(100, 109), match='condition'>"
                                                                                        Whitespace:
                                                                                          - 99
                                                                                          - 100
                                                                                    Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                      Name: "condition"
                                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                        Name: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                                                        Self__: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                                                    IterBegin: "[6, 24] (100)"
                                                                                    IterEnd: "[6, 33] (109)"
                                                                                    Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[6, 24] (100)"
                                                                                IterEnd: "[6, 33] (109)"
                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                            Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                Name: "condition"
                                                                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                  Name: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                                                  Self__: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                Name: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                                                Self__: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                                            IterBegin: "[6, 24] (100)"
                                                                            IterEnd: "[6, 33] (109)"
                                                                            Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                        IterBegin: "[6, 24] (100)"
                                                                        IterEnd: "[6, 33] (109)"
                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                    IterBegin: "[6, 24] (100)"
                                                                    IterEnd: "[6, 33] (109)"
                                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[6, 34] (110)"
                                                                    IterEnd: "[6, 38] (114)"
                                                                    Type: "'else' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(110, 114), match='else'>"
                                                                    Whitespace:
                                                                      - 109
                                                                      - 110
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[6, 39] (115)"
                                                                                        IterEnd: "[6, 44] (120)"
                                                                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(115, 120), match='false'>"
                                                                                        Whitespace:
                                                                                          - 114
                                                                                          - 115
                                                                                    Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                      Name: "false"
                                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                        Name: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                                                        Self__: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                                                    IterBegin: "[6, 39] (115)"
                                                                                    IterEnd: "[6, 44] (120)"
                                                                                    Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[6, 39] (115)"
                                                                                IterEnd: "[6, 44] (120)"
                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                            Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                Name: "false"
                                                                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                  Name: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                                                  Self__: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                Name: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                                                Self__: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                                            IterBegin: "[6, 39] (115)"
                                                                            IterEnd: "[6, 44] (120)"
                                                                            Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                        IterBegin: "[6, 39] (115)"
                                                                        IterEnd: "[6, 44] (120)"
                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                    IterBegin: "[6, 39] (115)"
                                                                    IterEnd: "[6, 44] (120)"
                                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                Info: # <class 'TheLanguage.Parser.Expressions.TernaryExpressionParserInfo.TernaryExpressionParserInfo'>
                                                                  ConditionExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                      Name: "condition"
                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                        Name: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                                        Self__: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                      Name: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                                      Self__: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                                  FalseExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                      Name: "false"
                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                        Name: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                                        Self__: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                      Name: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                                      Self__: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                                  Regions: # <class 'types.TernaryExpressionParserInfoRegions'>
                                                                    ConditionExpression: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                                    FalseExpression: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                                    Self__: "[Ln 6, Col 16] -> [Ln 6, Col 44]"
                                                                    TrueExpression: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                                  TrueExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                      Name: "true"
                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                        Name: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                                        Self__: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                      Name: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                                      Self__: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                                IterBegin: "[6, 16] (92)"
                                                                IterEnd: "[6, 44] (120)"
                                                                Type: "Ternary Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[6, 16] (92)"
                                                            IterEnd: "[6, 44] (120)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[6, 16] (92)"
                                                        IterEnd: "[6, 44] (120)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    Info: # <class 'TheLanguage.Parser.Expressions.LambdaExpressionParserInfo.LambdaExpressionParserInfo'>
                                                      Expression: # <class 'TheLanguage.Parser.Expressions.TernaryExpressionParserInfo.TernaryExpressionParserInfo'>
                                                        ConditionExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                            Name: "condition"
                                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                              Name: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                              Self__: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                            Name: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                            Self__: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                        FalseExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                            Name: "false"
                                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                              Name: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                              Self__: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                            Name: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                            Self__: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                        Regions: # <class 'types.TernaryExpressionParserInfoRegions'>
                                                          ConditionExpression: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                                          FalseExpression: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                                          Self__: "[Ln 6, Col 16] -> [Ln 6, Col 44]"
                                                          TrueExpression: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                        TrueExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                            Name: "true"
                                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                              Name: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                              Self__: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                            Name: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                            Self__: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                                      Parameters: None
                                                      Regions: # <class 'types.LambdaExpressionParserInfoRegions'>
                                                        Expression: "[Ln 6, Col 16] -> [Ln 6, Col 44]"
                                                        Parameters: None
                                                        Self__: "[Ln 6, Col 5] -> [Ln 6, Col 44]"
                                                    IterBegin: "[6, 5] (81)"
                                                    IterEnd: "[6, 44] (120)"
                                                    Type: "Lambda Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[6, 5] (81)"
                                                IterEnd: "[6, 44] (120)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[6, 5] (81)"
                                            IterEnd: "[6, 44] (120)"
                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                        IterBegin: "[6, 5] (81)"
                                        IterEnd: "[6, 44] (120)"
                                        Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[6, 44] (120)"
                                                IterEnd: "[6, 45] (121)"
                                                Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(120, 121), match=','>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[7, 5] (126)"
                                                                IterEnd: "[7, 11] (132)"
                                                                Type: "'lambda' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(126, 132), match='lambda'>"
                                                                Whitespace: None
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[7, 12] (133)"
                                                                    IterEnd: "[7, 13] (134)"
                                                                    Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(133, 134), match='('>"
                                                                    Whitespace:
                                                                      - 132
                                                                      - 133
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[7, 13] (134)"
                                                                    IterEnd: "[7, 14] (135)"
                                                                    Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(134, 135), match=')'>"
                                                                    Whitespace: None
                                                                IterBegin: "[7, 12] (133)"
                                                                IterEnd: "[7, 14] (135)"
                                                                Type: "Parameters <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[7, 14] (135)"
                                                                IterEnd: "[7, 15] (136)"
                                                                Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(135, 136), match=':'>"
                                                                Whitespace: None
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[7, 16] (137)"
                                                                                                IterEnd: "[7, 19] (140)"
                                                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match: "<_sre.SRE_Match object; span=(137, 140), match='one'>"
                                                                                                Whitespace:
                                                                                                  - 136
                                                                                                  - 137
                                                                                            Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                              Name: "one"
                                                                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                                Name: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                                                Self__: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                                            IterBegin: "[7, 16] (137)"
                                                                                            IterEnd: "[7, 19] (140)"
                                                                                            Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[7, 16] (137)"
                                                                                        IterEnd: "[7, 19] (140)"
                                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                                    Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                        Name: "one"
                                                                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                          Name: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                                          Self__: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                        Name: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                                        Self__: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                                    IterBegin: "[7, 16] (137)"
                                                                                    IterEnd: "[7, 19] (140)"
                                                                                    Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                IterBegin: "[7, 16] (137)"
                                                                                IterEnd: "[7, 19] (140)"
                                                                                Type: "Left Recursive Wrapper <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                            IterBegin: "[7, 16] (137)"
                                                                            IterEnd: "[7, 19] (140)"
                                                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[7, 20] (141)"
                                                                                IterEnd: "[7, 21] (142)"
                                                                                Type: "'+' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(141, 142), match='+'>"
                                                                                Whitespace:
                                                                                  - 140
                                                                                  - 141
                                                                            IterBegin: "[7, 20] (141)"
                                                                            IterEnd: "[7, 21] (142)"
                                                                            Type: "Operator <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[7, 22] (143)"
                                                                                                IterEnd: "[7, 25] (146)"
                                                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match: "<_sre.SRE_Match object; span=(143, 146), match='two'>"
                                                                                                Whitespace:
                                                                                                  - 142
                                                                                                  - 143
                                                                                            Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                              Name: "two"
                                                                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                                Name: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                                                Self__: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                                            IterBegin: "[7, 22] (143)"
                                                                                            IterEnd: "[7, 25] (146)"
                                                                                            Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[7, 22] (143)"
                                                                                        IterEnd: "[7, 25] (146)"
                                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                                    Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                        Name: "two"
                                                                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                          Name: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                                          Self__: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                        Name: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                                        Self__: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                                    IterBegin: "[7, 22] (143)"
                                                                                    IterEnd: "[7, 25] (146)"
                                                                                    Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                IterBegin: "[7, 22] (143)"
                                                                                IterEnd: "[7, 25] (146)"
                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                            IterBegin: "[7, 22] (143)"
                                                                            IterEnd: "[7, 25] (146)"
                                                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                        Info: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                                                                          Left: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                              Name: "one"
                                                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                Name: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                                Self__: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                            Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                              Name: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                              Self__: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                          Operator: "OperatorType.Add"
                                                                          Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                                                                            Left: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                            Operator: "[Ln 7, Col 20] -> [Ln 7, Col 21]"
                                                                            Right: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                            Self__: "[Ln 7, Col 16] -> [Ln 7, Col 25]"
                                                                          Right: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                              Name: "two"
                                                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                Name: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                                Self__: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                            Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                              Name: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                              Self__: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                        IterBegin: "[7, 16] (137)"
                                                                        IterEnd: "[7, 25] (146)"
                                                                        Type: "Binary Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[7, 16] (137)"
                                                                    IterEnd: "[7, 25] (146)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[7, 16] (137)"
                                                                IterEnd: "[7, 25] (146)"
                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            Info: # <class 'TheLanguage.Parser.Expressions.LambdaExpressionParserInfo.LambdaExpressionParserInfo'>
                                                              Expression: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                                                                Left: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "one"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                      Self__: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                    Self__: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                Operator: "OperatorType.Add"
                                                                Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                                                                  Left: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                                                  Operator: "[Ln 7, Col 20] -> [Ln 7, Col 21]"
                                                                  Right: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                  Self__: "[Ln 7, Col 16] -> [Ln 7, Col 25]"
                                                                Right: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "two"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                      Self__: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                                    Self__: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                                              Parameters: None
                                                              Regions: # <class 'types.LambdaExpressionParserInfoRegions'>
                                                                Expression: "[Ln 7, Col 16] -> [Ln 7, Col 25]"
                                                                Parameters: None
                                                                Self__: "[Ln 7, Col 5] -> [Ln 7, Col 25]"
                                                            IterBegin: "[7, 5] (126)"
                                                            IterEnd: "[7, 25] (146)"
                                                            Type: "Lambda Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[7, 5] (126)"
                                                        IterEnd: "[7, 25] (146)"
                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                    IterBegin: "[7, 5] (126)"
                                                    IterEnd: "[7, 25] (146)"
                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                IterBegin: "[7, 5] (126)"
                                                IterEnd: "[7, 25] (146)"
                                                Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[6, 44] (120)"
                                            IterEnd: "[7, 25] (146)"
                                            Type: "Comma and Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[6, 44] (120)"
                                        IterEnd: "[7, 25] (146)"
                                        Type: "Repeat: {Comma and Argument, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[7, 25] (146)"
                                            IterEnd: "[7, 26] (147)"
                                            Type: "Trailing Comma <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(146, 147), match=','>"
                                            Whitespace: None
                                        IterBegin: "[7, 25] (146)"
                                        IterEnd: "[7, 26] (147)"
                                        Type: "Repeat: {Trailing Comma, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                    IterBegin: "[6, 5] (81)"
                                    IterEnd: "[7, 26] (147)"
                                    Type: "Argument Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[6, 5] (81)"
                                IterEnd: "[7, 26] (147)"
                                Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[8, 1] (148)"
                                IterEnd: "[8, 2] (149)"
                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(148, 149), match=')'>"
                                Whitespace: None
                            IterBegin: "[5, 13] (75)"
                            IterEnd: "[8, 2] (149)"
                            Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                          Arguments:
                            - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                              Expression: # <class 'TheLanguage.Parser.Expressions.LambdaExpressionParserInfo.LambdaExpressionParserInfo'>
                                Expression: # <class 'TheLanguage.Parser.Expressions.TernaryExpressionParserInfo.TernaryExpressionParserInfo'>
                                  ConditionExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                      Name: "condition"
                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                        Name: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                        Self__: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                      Name: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                      Self__: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                  FalseExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                      Name: "false"
                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                        Name: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                        Self__: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                      Name: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                      Self__: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                  Regions: # <class 'types.TernaryExpressionParserInfoRegions'>
                                    ConditionExpression: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                                    FalseExpression: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                                    Self__: "[Ln 6, Col 16] -> [Ln 6, Col 44]"
                                    TrueExpression: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                  TrueExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                      Name: "true"
                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                        Name: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                        Self__: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                      Name: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                      Self__: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                                Parameters: None
                                Regions: # <class 'types.LambdaExpressionParserInfoRegions'>
                                  Expression: "[Ln 6, Col 16] -> [Ln 6, Col 44]"
                                  Parameters: None
                                  Self__: "[Ln 6, Col 5] -> [Ln 6, Col 44]"
                              Keyword: None
                              Regions: # <class 'types.ArgumentParserInfoRegions'>
                                Expression: "[Ln 6, Col 5] -> [Ln 6, Col 44]"
                                Keyword: None
                                Self__: "[Ln 6, Col 5] -> [Ln 6, Col 44]"
                            - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                              Expression: # <class 'TheLanguage.Parser.Expressions.LambdaExpressionParserInfo.LambdaExpressionParserInfo'>
                                Expression: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                                  Left: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                      Name: "one"
                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                        Name: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                        Self__: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                      Name: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                      Self__: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                  Operator: "OperatorType.Add"
                                  Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                                    Left: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                                    Operator: "[Ln 7, Col 20] -> [Ln 7, Col 21]"
                                    Right: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                    Self__: "[Ln 7, Col 16] -> [Ln 7, Col 25]"
                                  Right: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                      Name: "two"
                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                        Name: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                        Self__: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                      Name: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                      Self__: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                                Parameters: None
                                Regions: # <class 'types.LambdaExpressionParserInfoRegions'>
                                  Expression: "[Ln 7, Col 16] -> [Ln 7, Col 25]"
                                  Parameters: None
                                  Self__: "[Ln 7, Col 5] -> [Ln 7, Col 25]"
                              Keyword: None
                              Regions: # <class 'types.ArgumentParserInfoRegions'>
                                Expression: "[Ln 7, Col 5] -> [Ln 7, Col 25]"
                                Keyword: None
                                Self__: "[Ln 7, Col 5] -> [Ln 7, Col 25]"
                          Name: "Func2"
                          Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                            Arguments: "[Ln 5, Col 13] -> [Ln 8, Col 2]"
                            Name: "[Ln 5, Col 8] -> [Ln 5, Col 13]"
                            Self__: "[Ln 5, Col 8] -> [Ln 8, Col 2]"
                        IterBegin: "[5, 8] (70)"
                        IterEnd: "[8, 2] (149)"
                        Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[5, 8] (70)"
                    IterEnd: "[8, 2] (149)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[5, 8] (70)"
                IterEnd: "[8, 2] (149)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 2] (149)"
                IterEnd: "[9, 1] (150)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 150
                  Start: 149
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
              Expression: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                Arguments:
                  - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                    Expression: # <class 'TheLanguage.Parser.Expressions.LambdaExpressionParserInfo.LambdaExpressionParserInfo'>
                      Expression: # <class 'TheLanguage.Parser.Expressions.TernaryExpressionParserInfo.TernaryExpressionParserInfo'>
                        ConditionExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                            Name: "condition"
                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                              Name: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                              Self__: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                            Name: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                            Self__: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                        FalseExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                            Name: "false"
                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                              Name: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                              Self__: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                            Name: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                            Self__: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                        Regions: # <class 'types.TernaryExpressionParserInfoRegions'>
                          ConditionExpression: "[Ln 6, Col 24] -> [Ln 6, Col 33]"
                          FalseExpression: "[Ln 6, Col 39] -> [Ln 6, Col 44]"
                          Self__: "[Ln 6, Col 16] -> [Ln 6, Col 44]"
                          TrueExpression: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                        TrueExpression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                            Name: "true"
                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                              Name: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                              Self__: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                            Name: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                            Self__: "[Ln 6, Col 16] -> [Ln 6, Col 20]"
                      Parameters: None
                      Regions: # <class 'types.LambdaExpressionParserInfoRegions'>
                        Expression: "[Ln 6, Col 16] -> [Ln 6, Col 44]"
                        Parameters: None
                        Self__: "[Ln 6, Col 5] -> [Ln 6, Col 44]"
                    Keyword: None
                    Regions: # <class 'types.ArgumentParserInfoRegions'>
                      Expression: "[Ln 6, Col 5] -> [Ln 6, Col 44]"
                      Keyword: None
                      Self__: "[Ln 6, Col 5] -> [Ln 6, Col 44]"
                  - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                    Expression: # <class 'TheLanguage.Parser.Expressions.LambdaExpressionParserInfo.LambdaExpressionParserInfo'>
                      Expression: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                        Left: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                            Name: "one"
                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                              Name: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                              Self__: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                            Name: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                            Self__: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                        Operator: "OperatorType.Add"
                        Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                          Left: "[Ln 7, Col 16] -> [Ln 7, Col 19]"
                          Operator: "[Ln 7, Col 20] -> [Ln 7, Col 21]"
                          Right: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                          Self__: "[Ln 7, Col 16] -> [Ln 7, Col 25]"
                        Right: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                            Name: "two"
                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                              Name: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                              Self__: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                            Name: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                            Self__: "[Ln 7, Col 22] -> [Ln 7, Col 25]"
                      Parameters: None
                      Regions: # <class 'types.LambdaExpressionParserInfoRegions'>
                        Expression: "[Ln 7, Col 16] -> [Ln 7, Col 25]"
                        Parameters: None
                        Self__: "[Ln 7, Col 5] -> [Ln 7, Col 25]"
                    Keyword: None
                    Regions: # <class 'types.ArgumentParserInfoRegions'>
                      Expression: "[Ln 7, Col 5] -> [Ln 7, Col 25]"
                      Keyword: None
                      Self__: "[Ln 7, Col 5] -> [Ln 7, Col 25]"
                Name: "Func2"
                Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                  Arguments: "[Ln 5, Col 13] -> [Ln 8, Col 2]"
                  Name: "[Ln 5, Col 8] -> [Ln 5, Col 13]"
                  Self__: "[Ln 5, Col 8] -> [Ln 8, Col 2]"
              Modifier: None
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "var3"
                Regions: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 5, Col 1] -> [Ln 5, Col 5]"
                  Self__: "[Ln 5, Col 1] -> [Ln 5, Col 5]"
              Regions: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
                Expression: "[Ln 5, Col 8] -> [Ln 8, Col 2]"
                Modifier: None
                Name: "[Ln 5, Col 1] -> [Ln 5, Col 5]"
                Self__: "[Ln 5, Col 1] -> [Ln 9, Col 1]"
            IterBegin: "[5, 1] (63)"
            IterEnd: "[9, 1] (150)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[5, 1] (63)"
        IterEnd: "[9, 1] (150)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[5, 1] (63)"
    IterEnd: "[9, 1] (150)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[9, 1] (150)"
Type: "<None>"
