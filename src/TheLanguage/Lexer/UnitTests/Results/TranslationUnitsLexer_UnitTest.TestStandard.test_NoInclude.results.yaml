# <class 'TheLanguage.Lexer.Components.AST.Node'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "Lower Token <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 4] (3)"
                IterEnd: "[2, 1] (4)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 4
                  Start: 3
                Whitespace: None
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (4)"
            Type: "Lower <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (4)"
        Type: "(Include | Upper | Lower | Number | New Scope) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (4)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 1] (4)"
                IterEnd: "[2, 4] (7)"
                Type: "Upper Token <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(4, 7), match='TWO'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 4] (7)"
                IterEnd: "[3, 1] (8)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 8
                  Start: 7
                Whitespace: None
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[3, 1] (8)"
            Type: "Upper <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[2, 1] (4)"
        IterEnd: "[3, 1] (8)"
        Type: "(Include | Upper | Lower | Number | New Scope) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[2, 1] (4)"
    IterEnd: "[3, 1] (8)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 1] (8)"
                IterEnd: "[3, 2] (9)"
                Type: "Number Token <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(8, 9), match='3'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 2] (9)"
                IterEnd: "[4, 1] (10)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 10
                  Start: 9
                Whitespace: None
            IsIgnored: False
            IterBegin: "[3, 1] (8)"
            IterEnd: "[4, 1] (10)"
            Type: "Number <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[3, 1] (8)"
        IterEnd: "[4, 1] (10)"
        Type: "(Include | Upper | Lower | Number | New Scope) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[3, 1] (8)"
    IterEnd: "[4, 1] (10)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[4, 1] (10)"
Type: "<None>"
