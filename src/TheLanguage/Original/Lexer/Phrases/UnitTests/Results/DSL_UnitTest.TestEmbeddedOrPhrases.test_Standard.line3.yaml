# <class 'Original.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 1] (9)"
            IterEnd: "[3, 6] (14)"
            Token: "Upper Token"
            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(9, 14), match='THREE'>"
            Whitespace: None
          Phrase: "Upper Token"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 6] (14)"
            IterEnd: "[4, 1] (15)"
            Token: "Newline+"
            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 15
              Start: 14
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "[Upper Token, Newline+]"
  Phrase: "([Word Token, Newline+] | [Number Token, Newline+] | [Upper Token, Newline+])"
IterBegin: "[3, 1] (9)"
IterEnd: "[4, 1] (15)"
Success: True
