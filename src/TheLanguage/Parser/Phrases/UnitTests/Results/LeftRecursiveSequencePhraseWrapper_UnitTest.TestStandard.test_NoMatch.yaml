# <class 'TheLanguage.Parser.Components.Phrase.Phrase.ParseResult'>
Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
    DataItems:
      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 20] (19)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 19), match='this_will_not_match'>"
            Whitespace: None
          Phrase: "Lower"
        Phrase: "Phrases"
      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
          DataItems:
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: None
                    Phrase: "'+'"
                IsComplete: True
              Phrase: "Add"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: None
                    Phrase: "'-'"
                IsComplete: True
              Phrase: "Sub"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: None
                    Phrase: "'*'"
                IsComplete: True
              Phrase: "Mul"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: None
                    Phrase: "'/'"
                IsComplete: True
              Phrase: "Div"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: None
                    Phrase: "'if'"
                IsComplete: True
              Phrase: "Ter"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: None
                    Phrase: "'['"
                IsComplete: True
              Phrase: "Index"
          IsComplete: True
        Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    IsComplete: True
  Phrase: "LeftRecursiveSequencePhraseWrapper"
IterBegin: "[1, 1] (0)"
IterEnd: "[1, 20] (19)"
Success: False
