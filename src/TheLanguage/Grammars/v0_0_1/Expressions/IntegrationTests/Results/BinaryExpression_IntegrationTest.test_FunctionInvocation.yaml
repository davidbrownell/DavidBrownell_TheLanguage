# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 5] (4)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 4), match='var1'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "var1"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 5] (4)"
                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 5] (4)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 5] (4)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 6] (5)"
                IterEnd: "[1, 7] (6)"
                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(5, 6), match='='>"
                Whitespace:
                  - 4
                  - 5
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 8] (7)"
                                                    IterEnd: "[1, 13] (12)"
                                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(7, 12), match='func1'>"
                                                    Whitespace:
                                                      - 6
                                                      - 7
                                                Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                  Name: "func1"
                                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                    Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                                    Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                                IterBegin: "[1, 8] (7)"
                                                IterEnd: "[1, 13] (12)"
                                                Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[1, 8] (7)"
                                            IterEnd: "[1, 13] (12)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                            Name: "func1"
                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                              Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                              Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                            Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                            Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                        IterBegin: "[1, 8] (7)"
                                        IterEnd: "[1, 13] (12)"
                                        Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[1, 8] (7)"
                                    IterEnd: "[1, 13] (12)"
                                    Type: "Left Recursive Wrapper <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[1, 8] (7)"
                                IterEnd: "[1, 13] (12)"
                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 13] (12)"
                                    IterEnd: "[1, 14] (13)"
                                    Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(12, 13), match='('>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 14] (13)"
                                    IterEnd: "[1, 15] (14)"
                                    Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(13, 14), match=')'>"
                                    Whitespace: None
                                IterBegin: "[1, 13] (12)"
                                IterEnd: "[1, 15] (14)"
                                Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                              Arguments: None
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "func1"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                    Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                  Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                              Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                Arguments: None
                                Expression: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                Self__: "[Ln 1, Col 8] -> [Ln 1, Col 15]"
                            IterBegin: "[1, 8] (7)"
                            IterEnd: "[1, 15] (14)"
                            Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 15] (14)"
                                IterEnd: "[1, 16] (15)"
                                Type: "'.' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(14, 15), match='.'>"
                                Whitespace: None
                            IterBegin: "[1, 15] (14)"
                            IterEnd: "[1, 16] (15)"
                            Type: "Operator <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[1, 16] (15)"
                                                                IterEnd: "[1, 21] (20)"
                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(15, 20), match='func2'>"
                                                                Whitespace: None
                                                            Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                              Name: "func2"
                                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                                                Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                                            IterBegin: "[1, 16] (15)"
                                                            IterEnd: "[1, 21] (20)"
                                                            Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[1, 16] (15)"
                                                        IterEnd: "[1, 21] (20)"
                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                    Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                        Name: "func2"
                                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                          Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                                          Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                        Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                                        Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                                    IterBegin: "[1, 16] (15)"
                                                    IterEnd: "[1, 21] (20)"
                                                    Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                IterBegin: "[1, 16] (15)"
                                                IterEnd: "[1, 21] (20)"
                                                Type: "Left Recursive Wrapper <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[1, 16] (15)"
                                            IterEnd: "[1, 21] (20)"
                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[1, 21] (20)"
                                                IterEnd: "[1, 22] (21)"
                                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(20, 21), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[1, 22] (21)"
                                                IterEnd: "[1, 23] (22)"
                                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(21, 22), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[1, 21] (20)"
                                            IterEnd: "[1, 23] (22)"
                                            Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                          Arguments: None
                                          Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                              Name: "func2"
                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                                Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                            Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                              Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                              Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                          Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                            Arguments: None
                                            Expression: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                            Self__: "[Ln 1, Col 16] -> [Ln 1, Col 23]"
                                        IterBegin: "[1, 16] (15)"
                                        IterEnd: "[1, 23] (22)"
                                        Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 23] (22)"
                                            IterEnd: "[1, 24] (23)"
                                            Type: "'.' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(22, 23), match='.'>"
                                            Whitespace: None
                                        IterBegin: "[1, 23] (22)"
                                        IterEnd: "[1, 24] (23)"
                                        Type: "Operator <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                        IsIgnored: False
                                                                        IterBegin: "[1, 24] (23)"
                                                                        IterEnd: "[1, 29] (28)"
                                                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                          Match: "<_sre.SRE_Match object; span=(23, 28), match='func3'>"
                                                                        Whitespace: None
                                                                    Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                      Name: "func3"
                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                        Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                                                        Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                                                    IterBegin: "[1, 24] (23)"
                                                                    IterEnd: "[1, 29] (28)"
                                                                    Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[1, 24] (23)"
                                                                IterEnd: "[1, 29] (28)"
                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                            Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                Name: "func3"
                                                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                  Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                                                  Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                                                Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                                            IterBegin: "[1, 24] (23)"
                                                            IterEnd: "[1, 29] (28)"
                                                            Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                        IterBegin: "[1, 24] (23)"
                                                        IterEnd: "[1, 29] (28)"
                                                        Type: "Left Recursive Wrapper <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                    IterBegin: "[1, 24] (23)"
                                                    IterEnd: "[1, 29] (28)"
                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 29] (28)"
                                                        IterEnd: "[1, 30] (29)"
                                                        Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(28, 29), match='('>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 30] (29)"
                                                        IterEnd: "[1, 31] (30)"
                                                        Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(29, 30), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[1, 29] (28)"
                                                    IterEnd: "[1, 31] (30)"
                                                    Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                                  Arguments: None
                                                  Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                      Name: "func3"
                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                        Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                                        Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                      Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                                      Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                                  Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                                    Arguments: None
                                                    Expression: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                                    Self__: "[Ln 1, Col 24] -> [Ln 1, Col 31]"
                                                IterBegin: "[1, 24] (23)"
                                                IterEnd: "[1, 31] (30)"
                                                Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[1, 24] (23)"
                                            IterEnd: "[1, 31] (30)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[1, 24] (23)"
                                        IterEnd: "[1, 31] (30)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    Info: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                                      Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                        Arguments: None
                                        Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                            Name: "func2"
                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                              Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                              Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                            Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                            Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                        Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                          Arguments: None
                                          Expression: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                          Self__: "[Ln 1, Col 16] -> [Ln 1, Col 23]"
                                      Operator: "OperatorType.ChainedFunc"
                                      Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                                        Left: "[Ln 1, Col 16] -> [Ln 1, Col 23]"
                                        Operator: "[Ln 1, Col 23] -> [Ln 1, Col 24]"
                                        Right: "[Ln 1, Col 24] -> [Ln 1, Col 31]"
                                        Self__: "[Ln 1, Col 16] -> [Ln 1, Col 31]"
                                      Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                        Arguments: None
                                        Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                            Name: "func3"
                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                              Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                              Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                            Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                            Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                        Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                          Arguments: None
                                          Expression: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                          Self__: "[Ln 1, Col 24] -> [Ln 1, Col 31]"
                                    IterBegin: "[1, 16] (15)"
                                    IterEnd: "[1, 31] (30)"
                                    Type: "Binary Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[1, 16] (15)"
                                IterEnd: "[1, 31] (30)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[1, 16] (15)"
                            IterEnd: "[1, 31] (30)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                        Info: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                          Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                            Arguments: None
                            Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                Name: "func1"
                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                  Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                  Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                            Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                              Arguments: None
                              Expression: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                              Self__: "[Ln 1, Col 8] -> [Ln 1, Col 15]"
                          Operator: "OperatorType.ChainedFunc"
                          Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                            Left: "[Ln 1, Col 8] -> [Ln 1, Col 15]"
                            Operator: "[Ln 1, Col 15] -> [Ln 1, Col 16]"
                            Right: "[Ln 1, Col 16] -> [Ln 1, Col 31]"
                            Self__: "[Ln 1, Col 8] -> [Ln 1, Col 31]"
                          Right: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                            Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                              Arguments: None
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "func2"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                    Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                  Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                              Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                Arguments: None
                                Expression: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                                Self__: "[Ln 1, Col 16] -> [Ln 1, Col 23]"
                            Operator: "OperatorType.ChainedFunc"
                            Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                              Left: "[Ln 1, Col 16] -> [Ln 1, Col 23]"
                              Operator: "[Ln 1, Col 23] -> [Ln 1, Col 24]"
                              Right: "[Ln 1, Col 24] -> [Ln 1, Col 31]"
                              Self__: "[Ln 1, Col 16] -> [Ln 1, Col 31]"
                            Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                              Arguments: None
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "func3"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                    Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                  Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                              Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                Arguments: None
                                Expression: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                                Self__: "[Ln 1, Col 24] -> [Ln 1, Col 31]"
                        IterBegin: "[1, 8] (7)"
                        IterEnd: "[1, 31] (30)"
                        Type: "Binary Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 8] (7)"
                    IterEnd: "[1, 31] (30)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 8] (7)"
                IterEnd: "[1, 31] (30)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 31] (30)"
                IterEnd: "[2, 1] (31)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 31
                  Start: 30
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
              Expression: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                  Arguments: None
                  Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                      Name: "func1"
                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                        Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                        Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                      Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                      Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                  Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                    Arguments: None
                    Expression: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                    Self__: "[Ln 1, Col 8] -> [Ln 1, Col 15]"
                Operator: "OperatorType.ChainedFunc"
                Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                  Left: "[Ln 1, Col 8] -> [Ln 1, Col 15]"
                  Operator: "[Ln 1, Col 15] -> [Ln 1, Col 16]"
                  Right: "[Ln 1, Col 16] -> [Ln 1, Col 31]"
                  Self__: "[Ln 1, Col 8] -> [Ln 1, Col 31]"
                Right: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                  Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                    Arguments: None
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "func2"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                          Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                        Self__: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                    Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                      Arguments: None
                      Expression: "[Ln 1, Col 16] -> [Ln 1, Col 21]"
                      Self__: "[Ln 1, Col 16] -> [Ln 1, Col 23]"
                  Operator: "OperatorType.ChainedFunc"
                  Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                    Left: "[Ln 1, Col 16] -> [Ln 1, Col 23]"
                    Operator: "[Ln 1, Col 23] -> [Ln 1, Col 24]"
                    Right: "[Ln 1, Col 24] -> [Ln 1, Col 31]"
                    Self__: "[Ln 1, Col 16] -> [Ln 1, Col 31]"
                  Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                    Arguments: None
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "func3"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                          Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                        Self__: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                    Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                      Arguments: None
                      Expression: "[Ln 1, Col 24] -> [Ln 1, Col 29]"
                      Self__: "[Ln 1, Col 24] -> [Ln 1, Col 31]"
              Modifier: None
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "var1"
                Regions: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
                  Self__: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
              Regions: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
                Expression: "[Ln 1, Col 8] -> [Ln 1, Col 31]"
                Modifier: None
                Name: "[Ln 1, Col 1] -> [Ln 1, Col 5]"
                Self__: "[Ln 1, Col 1] -> [Ln 2, Col 1]"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (31)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (31)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (31)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 1] (31)"
                            IterEnd: "[2, 5] (35)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(31, 35), match='var2'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "var2"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 2, Col 1] -> [Ln 2, Col 5]"
                            Self__: "[Ln 2, Col 1] -> [Ln 2, Col 5]"
                        IterBegin: "[2, 1] (31)"
                        IterEnd: "[2, 5] (35)"
                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[2, 1] (31)"
                    IterEnd: "[2, 5] (35)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[2, 1] (31)"
                IterEnd: "[2, 5] (35)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 6] (36)"
                IterEnd: "[2, 7] (37)"
                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(36, 37), match='='>"
                Whitespace:
                  - 35
                  - 36
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 8] (38)"
                                                    IterEnd: "[2, 13] (43)"
                                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(38, 43), match='func4'>"
                                                    Whitespace:
                                                      - 37
                                                      - 38
                                                Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                  Name: "func4"
                                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                    Name: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                                    Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                                IterBegin: "[2, 8] (38)"
                                                IterEnd: "[2, 13] (43)"
                                                Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[2, 8] (38)"
                                            IterEnd: "[2, 13] (43)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                            Name: "func4"
                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                              Name: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                              Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                            Name: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                            Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                        IterBegin: "[2, 8] (38)"
                                        IterEnd: "[2, 13] (43)"
                                        Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[2, 8] (38)"
                                    IterEnd: "[2, 13] (43)"
                                    Type: "Left Recursive Wrapper <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 8] (38)"
                                IterEnd: "[2, 13] (43)"
                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 13] (43)"
                                    IterEnd: "[2, 14] (44)"
                                    Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(43, 44), match='('>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 14] (44)"
                                    IterEnd: "[2, 15] (45)"
                                    Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(44, 45), match=')'>"
                                    Whitespace: None
                                IterBegin: "[2, 13] (43)"
                                IterEnd: "[2, 15] (45)"
                                Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                              Arguments: None
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "func4"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                    Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                  Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                              Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                Arguments: None
                                Expression: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                Self__: "[Ln 2, Col 8] -> [Ln 2, Col 15]"
                            IterBegin: "[2, 8] (38)"
                            IterEnd: "[2, 15] (45)"
                            Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[2, 15] (45)"
                                IterEnd: "[2, 17] (47)"
                                Type: "'->' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(45, 47), match='->'>"
                                Whitespace: None
                            IterBegin: "[2, 15] (45)"
                            IterEnd: "[2, 17] (47)"
                            Type: "Operator <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[2, 17] (47)"
                                                                IterEnd: "[2, 22] (52)"
                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(47, 52), match='func5'>"
                                                                Whitespace: None
                                                            Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                              Name: "func5"
                                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                                Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                            IterBegin: "[2, 17] (47)"
                                                            IterEnd: "[2, 22] (52)"
                                                            Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[2, 17] (47)"
                                                        IterEnd: "[2, 22] (52)"
                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                    Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                        Name: "func5"
                                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                          Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                          Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                        Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                        Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                    IterBegin: "[2, 17] (47)"
                                                    IterEnd: "[2, 22] (52)"
                                                    Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                IterBegin: "[2, 17] (47)"
                                                IterEnd: "[2, 22] (52)"
                                                Type: "Left Recursive Wrapper <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[2, 17] (47)"
                                            IterEnd: "[2, 22] (52)"
                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 22] (52)"
                                                IterEnd: "[2, 23] (53)"
                                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(52, 53), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 23] (53)"
                                                IterEnd: "[2, 24] (54)"
                                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(53, 54), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[2, 22] (52)"
                                            IterEnd: "[2, 24] (54)"
                                            Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                          Arguments: None
                                          Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                              Name: "func5"
                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                            Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                              Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                              Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                          Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                            Arguments: None
                                            Expression: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                            Self__: "[Ln 2, Col 17] -> [Ln 2, Col 24]"
                                        IterBegin: "[2, 17] (47)"
                                        IterEnd: "[2, 24] (54)"
                                        Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 24] (54)"
                                            IterEnd: "[2, 26] (56)"
                                            Type: "'->' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(54, 56), match='->'>"
                                            Whitespace: None
                                        IterBegin: "[2, 24] (54)"
                                        IterEnd: "[2, 26] (56)"
                                        Type: "Operator <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                        IsIgnored: False
                                                                        IterBegin: "[2, 26] (56)"
                                                                        IterEnd: "[2, 31] (61)"
                                                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                          Match: "<_sre.SRE_Match object; span=(56, 61), match='func6'>"
                                                                        Whitespace: None
                                                                    Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                      Name: "func6"
                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                        Name: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                                                        Self__: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                                                    IterBegin: "[2, 26] (56)"
                                                                    IterEnd: "[2, 31] (61)"
                                                                    Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[2, 26] (56)"
                                                                IterEnd: "[2, 31] (61)"
                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                            Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                Name: "func6"
                                                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                  Name: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                                                  Self__: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                Name: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                                                Self__: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                                            IterBegin: "[2, 26] (56)"
                                                            IterEnd: "[2, 31] (61)"
                                                            Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                        IterBegin: "[2, 26] (56)"
                                                        IterEnd: "[2, 31] (61)"
                                                        Type: "Left Recursive Wrapper <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                    IterBegin: "[2, 26] (56)"
                                                    IterEnd: "[2, 31] (61)"
                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[2, 31] (61)"
                                                        IterEnd: "[2, 32] (62)"
                                                        Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(61, 62), match='('>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[2, 32] (62)"
                                                        IterEnd: "[2, 33] (63)"
                                                        Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(62, 63), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[2, 31] (61)"
                                                    IterEnd: "[2, 33] (63)"
                                                    Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                                  Arguments: None
                                                  Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                      Name: "func6"
                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                        Name: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                                        Self__: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                      Name: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                                      Self__: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                                  Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                                    Arguments: None
                                                    Expression: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                                    Self__: "[Ln 2, Col 26] -> [Ln 2, Col 33]"
                                                IterBegin: "[2, 26] (56)"
                                                IterEnd: "[2, 33] (63)"
                                                Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[2, 26] (56)"
                                            IterEnd: "[2, 33] (63)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[2, 26] (56)"
                                        IterEnd: "[2, 33] (63)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    Info: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                                      Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                        Arguments: None
                                        Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                            Name: "func5"
                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                              Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                              Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                            Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                            Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                        Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                          Arguments: None
                                          Expression: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                          Self__: "[Ln 2, Col 17] -> [Ln 2, Col 24]"
                                      Operator: "OperatorType.ChainedFuncReturnSelf"
                                      Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                                        Left: "[Ln 2, Col 17] -> [Ln 2, Col 24]"
                                        Operator: "[Ln 2, Col 24] -> [Ln 2, Col 26]"
                                        Right: "[Ln 2, Col 26] -> [Ln 2, Col 33]"
                                        Self__: "[Ln 2, Col 17] -> [Ln 2, Col 33]"
                                      Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                        Arguments: None
                                        Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                            Name: "func6"
                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                              Name: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                              Self__: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                            Name: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                            Self__: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                        Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                          Arguments: None
                                          Expression: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                          Self__: "[Ln 2, Col 26] -> [Ln 2, Col 33]"
                                    IterBegin: "[2, 17] (47)"
                                    IterEnd: "[2, 33] (63)"
                                    Type: "Binary Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[2, 17] (47)"
                                IterEnd: "[2, 33] (63)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[2, 17] (47)"
                            IterEnd: "[2, 33] (63)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                        Info: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                          Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                            Arguments: None
                            Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                Name: "func4"
                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                  Name: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                  Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                Name: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                            Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                              Arguments: None
                              Expression: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                              Self__: "[Ln 2, Col 8] -> [Ln 2, Col 15]"
                          Operator: "OperatorType.ChainedFuncReturnSelf"
                          Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                            Left: "[Ln 2, Col 8] -> [Ln 2, Col 15]"
                            Operator: "[Ln 2, Col 15] -> [Ln 2, Col 17]"
                            Right: "[Ln 2, Col 17] -> [Ln 2, Col 33]"
                            Self__: "[Ln 2, Col 8] -> [Ln 2, Col 33]"
                          Right: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                            Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                              Arguments: None
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "func5"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                    Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                  Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                              Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                Arguments: None
                                Expression: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                Self__: "[Ln 2, Col 17] -> [Ln 2, Col 24]"
                            Operator: "OperatorType.ChainedFuncReturnSelf"
                            Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                              Left: "[Ln 2, Col 17] -> [Ln 2, Col 24]"
                              Operator: "[Ln 2, Col 24] -> [Ln 2, Col 26]"
                              Right: "[Ln 2, Col 26] -> [Ln 2, Col 33]"
                              Self__: "[Ln 2, Col 17] -> [Ln 2, Col 33]"
                            Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                              Arguments: None
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "func6"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                    Self__: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                  Self__: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                              Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                Arguments: None
                                Expression: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                                Self__: "[Ln 2, Col 26] -> [Ln 2, Col 33]"
                        IterBegin: "[2, 8] (38)"
                        IterEnd: "[2, 33] (63)"
                        Type: "Binary Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[2, 8] (38)"
                    IterEnd: "[2, 33] (63)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[2, 8] (38)"
                IterEnd: "[2, 33] (63)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 33] (63)"
                IterEnd: "[4, 1] (65)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 65
                  Start: 63
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
              Expression: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                  Arguments: None
                  Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                    Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                      Name: "func4"
                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                        Name: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                        Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                    Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                      Name: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                      Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                  Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                    Arguments: None
                    Expression: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                    Self__: "[Ln 2, Col 8] -> [Ln 2, Col 15]"
                Operator: "OperatorType.ChainedFuncReturnSelf"
                Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                  Left: "[Ln 2, Col 8] -> [Ln 2, Col 15]"
                  Operator: "[Ln 2, Col 15] -> [Ln 2, Col 17]"
                  Right: "[Ln 2, Col 17] -> [Ln 2, Col 33]"
                  Self__: "[Ln 2, Col 8] -> [Ln 2, Col 33]"
                Right: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                  Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                    Arguments: None
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "func5"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                          Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                        Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                    Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                      Arguments: None
                      Expression: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                      Self__: "[Ln 2, Col 17] -> [Ln 2, Col 24]"
                  Operator: "OperatorType.ChainedFuncReturnSelf"
                  Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                    Left: "[Ln 2, Col 17] -> [Ln 2, Col 24]"
                    Operator: "[Ln 2, Col 24] -> [Ln 2, Col 26]"
                    Right: "[Ln 2, Col 26] -> [Ln 2, Col 33]"
                    Self__: "[Ln 2, Col 17] -> [Ln 2, Col 33]"
                  Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                    Arguments: None
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "func6"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                          Self__: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                        Self__: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                    Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                      Arguments: None
                      Expression: "[Ln 2, Col 26] -> [Ln 2, Col 31]"
                      Self__: "[Ln 2, Col 26] -> [Ln 2, Col 33]"
              Modifier: None
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "var2"
                Regions: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 2, Col 1] -> [Ln 2, Col 5]"
                  Self__: "[Ln 2, Col 1] -> [Ln 2, Col 5]"
              Regions: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
                Expression: "[Ln 2, Col 8] -> [Ln 2, Col 33]"
                Modifier: None
                Name: "[Ln 2, Col 1] -> [Ln 2, Col 5]"
                Self__: "[Ln 2, Col 1] -> [Ln 4, Col 1]"
            IterBegin: "[2, 1] (31)"
            IterEnd: "[4, 1] (65)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[2, 1] (31)"
        IterEnd: "[4, 1] (65)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[2, 1] (31)"
    IterEnd: "[4, 1] (65)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 1] (65)"
                            IterEnd: "[4, 5] (69)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(65, 69), match='var3'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "var3"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 4, Col 1] -> [Ln 4, Col 5]"
                            Self__: "[Ln 4, Col 1] -> [Ln 4, Col 5]"
                        IterBegin: "[4, 1] (65)"
                        IterEnd: "[4, 5] (69)"
                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[4, 1] (65)"
                    IterEnd: "[4, 5] (69)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[4, 1] (65)"
                IterEnd: "[4, 5] (69)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 6] (70)"
                IterEnd: "[4, 7] (71)"
                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(70, 71), match='='>"
                Whitespace:
                  - 69
                  - 70
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 8] (72)"
                            IterEnd: "[4, 9] (73)"
                            Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(72, 73), match='('>"
                            Whitespace:
                              - 71
                              - 72
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[5, 5] (78)"
                                                                IterEnd: "[5, 10] (83)"
                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(78, 83), match='funcA'>"
                                                                Whitespace: None
                                                            Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                              Name: "funcA"
                                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                                                Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                                            IterBegin: "[5, 5] (78)"
                                                            IterEnd: "[5, 10] (83)"
                                                            Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[5, 5] (78)"
                                                        IterEnd: "[5, 10] (83)"
                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                    Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                        Name: "funcA"
                                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                          Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                                          Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                        Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                                        Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                                    IterBegin: "[5, 5] (78)"
                                                    IterEnd: "[5, 10] (83)"
                                                    Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                IterBegin: "[5, 5] (78)"
                                                IterEnd: "[5, 10] (83)"
                                                Type: "Left Recursive Wrapper <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[5, 5] (78)"
                                            IterEnd: "[5, 10] (83)"
                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[5, 10] (83)"
                                                IterEnd: "[5, 11] (84)"
                                                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(83, 84), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[5, 11] (84)"
                                                IterEnd: "[5, 12] (85)"
                                                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(84, 85), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[5, 10] (83)"
                                            IterEnd: "[5, 12] (85)"
                                            Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                          Arguments: None
                                          Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                              Name: "funcA"
                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                                Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                            Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                              Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                              Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                          Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                            Arguments: None
                                            Expression: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                            Self__: "[Ln 5, Col 5] -> [Ln 5, Col 12]"
                                        IterBegin: "[5, 5] (78)"
                                        IterEnd: "[5, 12] (85)"
                                        Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[6, 9] (94)"
                                            IterEnd: "[6, 10] (95)"
                                            Type: "'.' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(94, 95), match='.'>"
                                            Whitespace: None
                                        IterBegin: "[6, 9] (94)"
                                        IterEnd: "[6, 10] (95)"
                                        Type: "Operator <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[6, 10] (95)"
                                                                            IterEnd: "[6, 15] (100)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(95, 100), match='funcB'>"
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                          Name: "funcB"
                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                            Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                                            Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                                        IterBegin: "[6, 10] (95)"
                                                                        IterEnd: "[6, 15] (100)"
                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[6, 10] (95)"
                                                                    IterEnd: "[6, 15] (100)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "funcB"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                                      Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                                    Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                                IterBegin: "[6, 10] (95)"
                                                                IterEnd: "[6, 15] (100)"
                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[6, 10] (95)"
                                                            IterEnd: "[6, 15] (100)"
                                                            Type: "Left Recursive Wrapper <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[6, 10] (95)"
                                                        IterEnd: "[6, 15] (100)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[6, 15] (100)"
                                                            IterEnd: "[6, 16] (101)"
                                                            Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(100, 101), match='('>"
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[6, 16] (101)"
                                                            IterEnd: "[6, 17] (102)"
                                                            Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(101, 102), match=')'>"
                                                            Whitespace: None
                                                        IterBegin: "[6, 15] (100)"
                                                        IterEnd: "[6, 17] (102)"
                                                        Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                    Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                                      Arguments: None
                                                      Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                          Name: "funcB"
                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                            Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                            Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                          Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                          Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                      Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                                        Arguments: None
                                                        Expression: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                        Self__: "[Ln 6, Col 10] -> [Ln 6, Col 17]"
                                                    IterBegin: "[6, 10] (95)"
                                                    IterEnd: "[6, 17] (102)"
                                                    Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[7, 9] (111)"
                                                        IterEnd: "[7, 10] (112)"
                                                        Type: "'.' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(111, 112), match='.'>"
                                                        Whitespace: None
                                                    IterBegin: "[7, 9] (111)"
                                                    IterEnd: "[7, 10] (112)"
                                                    Type: "Operator <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                    IsIgnored: False
                                                                                    IterBegin: "[7, 10] (112)"
                                                                                    IterEnd: "[7, 15] (117)"
                                                                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                      Match: "<_sre.SRE_Match object; span=(112, 117), match='funcC'>"
                                                                                    Whitespace: None
                                                                                Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                  Name: "funcC"
                                                                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                    Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                                                    Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                                                IterBegin: "[7, 10] (112)"
                                                                                IterEnd: "[7, 15] (117)"
                                                                                Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                            IterBegin: "[7, 10] (112)"
                                                                            IterEnd: "[7, 15] (117)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                        Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                            Name: "funcC"
                                                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                              Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                                              Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                            Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                                            Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                                        IterBegin: "[7, 10] (112)"
                                                                        IterEnd: "[7, 15] (117)"
                                                                        Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[7, 10] (112)"
                                                                    IterEnd: "[7, 15] (117)"
                                                                    Type: "Left Recursive Wrapper <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[7, 10] (112)"
                                                                IterEnd: "[7, 15] (117)"
                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[7, 15] (117)"
                                                                    IterEnd: "[7, 16] (118)"
                                                                    Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(117, 118), match='('>"
                                                                    Whitespace: None
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[7, 16] (118)"
                                                                    IterEnd: "[7, 17] (119)"
                                                                    Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(118, 119), match=')'>"
                                                                    Whitespace: None
                                                                IterBegin: "[7, 15] (117)"
                                                                IterEnd: "[7, 17] (119)"
                                                                Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                            Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                                              Arguments: None
                                                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                  Name: "funcC"
                                                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                    Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                                    Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                  Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                                  Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                              Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                                                Arguments: None
                                                                Expression: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                                Self__: "[Ln 7, Col 10] -> [Ln 7, Col 17]"
                                                            IterBegin: "[7, 10] (112)"
                                                            IterEnd: "[7, 17] (119)"
                                                            Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[7, 10] (112)"
                                                        IterEnd: "[7, 17] (119)"
                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                    IterBegin: "[7, 10] (112)"
                                                    IterEnd: "[7, 17] (119)"
                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                Info: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                                                  Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                                    Arguments: None
                                                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                        Name: "funcB"
                                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                          Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                          Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                        Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                        Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                    Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                                      Arguments: None
                                                      Expression: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                      Self__: "[Ln 6, Col 10] -> [Ln 6, Col 17]"
                                                  Operator: "OperatorType.ChainedFunc"
                                                  Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                                                    Left: "[Ln 6, Col 10] -> [Ln 6, Col 17]"
                                                    Operator: "[Ln 7, Col 9] -> [Ln 7, Col 10]"
                                                    Right: "[Ln 7, Col 10] -> [Ln 7, Col 17]"
                                                    Self__: "[Ln 6, Col 10] -> [Ln 7, Col 17]"
                                                  Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                                    Arguments: None
                                                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                        Name: "funcC"
                                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                          Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                          Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                        Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                        Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                    Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                                      Arguments: None
                                                      Expression: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                      Self__: "[Ln 7, Col 10] -> [Ln 7, Col 17]"
                                                IterBegin: "[6, 10] (95)"
                                                IterEnd: "[7, 17] (119)"
                                                Type: "Binary Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[6, 10] (95)"
                                            IterEnd: "[7, 17] (119)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[6, 10] (95)"
                                        IterEnd: "[7, 17] (119)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    Info: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                                      Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                        Arguments: None
                                        Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                            Name: "funcA"
                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                              Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                              Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                            Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                            Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                        Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                          Arguments: None
                                          Expression: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                          Self__: "[Ln 5, Col 5] -> [Ln 5, Col 12]"
                                      Operator: "OperatorType.ChainedFunc"
                                      Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                                        Left: "[Ln 5, Col 5] -> [Ln 5, Col 12]"
                                        Operator: "[Ln 6, Col 9] -> [Ln 6, Col 10]"
                                        Right: "[Ln 6, Col 10] -> [Ln 7, Col 17]"
                                        Self__: "[Ln 5, Col 5] -> [Ln 7, Col 17]"
                                      Right: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                                        Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                          Arguments: None
                                          Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                              Name: "funcB"
                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                                Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                            Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                              Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                              Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                          Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                            Arguments: None
                                            Expression: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                            Self__: "[Ln 6, Col 10] -> [Ln 6, Col 17]"
                                        Operator: "OperatorType.ChainedFunc"
                                        Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                                          Left: "[Ln 6, Col 10] -> [Ln 6, Col 17]"
                                          Operator: "[Ln 7, Col 9] -> [Ln 7, Col 10]"
                                          Right: "[Ln 7, Col 10] -> [Ln 7, Col 17]"
                                          Self__: "[Ln 6, Col 10] -> [Ln 7, Col 17]"
                                        Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                          Arguments: None
                                          Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                              Name: "funcC"
                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                                Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                            Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                              Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                              Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                          Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                            Arguments: None
                                            Expression: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                            Self__: "[Ln 7, Col 10] -> [Ln 7, Col 17]"
                                    IterBegin: "[5, 5] (78)"
                                    IterEnd: "[7, 17] (119)"
                                    Type: "Binary Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[5, 5] (78)"
                                IterEnd: "[7, 17] (119)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[5, 5] (78)"
                            IterEnd: "[7, 17] (119)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[8, 1] (120)"
                            IterEnd: "[8, 2] (121)"
                            Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(120, 121), match=')'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Parser.Expressions.GroupExpressionParserInfo.GroupExpressionParserInfo'>
                          Expression: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                            Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                              Arguments: None
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "funcA"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                    Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                  Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                              Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                Arguments: None
                                Expression: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                                Self__: "[Ln 5, Col 5] -> [Ln 5, Col 12]"
                            Operator: "OperatorType.ChainedFunc"
                            Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                              Left: "[Ln 5, Col 5] -> [Ln 5, Col 12]"
                              Operator: "[Ln 6, Col 9] -> [Ln 6, Col 10]"
                              Right: "[Ln 6, Col 10] -> [Ln 7, Col 17]"
                              Self__: "[Ln 5, Col 5] -> [Ln 7, Col 17]"
                            Right: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                              Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                Arguments: None
                                Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "funcB"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                      Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                    Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                  Arguments: None
                                  Expression: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                                  Self__: "[Ln 6, Col 10] -> [Ln 6, Col 17]"
                              Operator: "OperatorType.ChainedFunc"
                              Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                                Left: "[Ln 6, Col 10] -> [Ln 6, Col 17]"
                                Operator: "[Ln 7, Col 9] -> [Ln 7, Col 10]"
                                Right: "[Ln 7, Col 10] -> [Ln 7, Col 17]"
                                Self__: "[Ln 6, Col 10] -> [Ln 7, Col 17]"
                              Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                Arguments: None
                                Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "funcC"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                      Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                    Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                  Arguments: None
                                  Expression: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                                  Self__: "[Ln 7, Col 10] -> [Ln 7, Col 17]"
                          Regions: # <class 'types.GroupExpressionParserInfoRegions'>
                            Expression: "[Ln 5, Col 5] -> [Ln 7, Col 17]"
                            Self__: "[Ln 4, Col 8] -> [Ln 8, Col 2]"
                        IterBegin: "[4, 8] (72)"
                        IterEnd: "[8, 2] (121)"
                        Type: "Group Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[4, 8] (72)"
                    IterEnd: "[8, 2] (121)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[4, 8] (72)"
                IterEnd: "[8, 2] (121)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 2] (121)"
                IterEnd: "[9, 1] (122)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 122
                  Start: 121
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
              Expression: # <class 'TheLanguage.Parser.Expressions.GroupExpressionParserInfo.GroupExpressionParserInfo'>
                Expression: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                  Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                    Arguments: None
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "funcA"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                          Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                        Self__: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                    Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                      Arguments: None
                      Expression: "[Ln 5, Col 5] -> [Ln 5, Col 10]"
                      Self__: "[Ln 5, Col 5] -> [Ln 5, Col 12]"
                  Operator: "OperatorType.ChainedFunc"
                  Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                    Left: "[Ln 5, Col 5] -> [Ln 5, Col 12]"
                    Operator: "[Ln 6, Col 9] -> [Ln 6, Col 10]"
                    Right: "[Ln 6, Col 10] -> [Ln 7, Col 17]"
                    Self__: "[Ln 5, Col 5] -> [Ln 7, Col 17]"
                  Right: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
                    Left: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                      Arguments: None
                      Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "funcB"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                            Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                          Self__: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                      Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                        Arguments: None
                        Expression: "[Ln 6, Col 10] -> [Ln 6, Col 15]"
                        Self__: "[Ln 6, Col 10] -> [Ln 6, Col 17]"
                    Operator: "OperatorType.ChainedFunc"
                    Regions: # <class 'types.BinaryExpressionParserInfoRegions'>
                      Left: "[Ln 6, Col 10] -> [Ln 6, Col 17]"
                      Operator: "[Ln 7, Col 9] -> [Ln 7, Col 10]"
                      Right: "[Ln 7, Col 10] -> [Ln 7, Col 17]"
                      Self__: "[Ln 6, Col 10] -> [Ln 7, Col 17]"
                    Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                      Arguments: None
                      Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "funcC"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                            Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                          Self__: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                      Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                        Arguments: None
                        Expression: "[Ln 7, Col 10] -> [Ln 7, Col 15]"
                        Self__: "[Ln 7, Col 10] -> [Ln 7, Col 17]"
                Regions: # <class 'types.GroupExpressionParserInfoRegions'>
                  Expression: "[Ln 5, Col 5] -> [Ln 7, Col 17]"
                  Self__: "[Ln 4, Col 8] -> [Ln 8, Col 2]"
              Modifier: None
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "var3"
                Regions: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 4, Col 1] -> [Ln 4, Col 5]"
                  Self__: "[Ln 4, Col 1] -> [Ln 4, Col 5]"
              Regions: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
                Expression: "[Ln 4, Col 8] -> [Ln 8, Col 2]"
                Modifier: None
                Name: "[Ln 4, Col 1] -> [Ln 4, Col 5]"
                Self__: "[Ln 4, Col 1] -> [Ln 9, Col 1]"
            IterBegin: "[4, 1] (65)"
            IterEnd: "[9, 1] (122)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[4, 1] (65)"
        IterEnd: "[9, 1] (122)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[4, 1] (65)"
    IterEnd: "[9, 1] (122)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[9, 1] (122)"
Type: "<None>"
