# <class 'TheLanguage.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
    DataItems:
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[7, 1] (66)"
          IterEnd: "[7, 6] (71)"
          Token: "Word Token"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(66, 71), match='seven'>"
          Whitespace: None
        Phrase: "Word Token"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[7, 6] (71)"
          IterEnd: "[7, 7] (72)"
          Token: "Colon"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(71, 72), match=':'>"
          Whitespace: None
        Phrase: "Colon"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[7, 7] (72)"
          IterEnd: "[8, 1] (73)"
          Token: "Newline+"
          Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 73
            Start: 72
          Whitespace: None
        Phrase: "Newline+"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[8, 1] (73)"
          IterEnd: "[8, 5] (77)"
          Token: "Indent"
          Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
            End: 77
            Start: 73
            Value: 4
          Whitespace: None
        Phrase: "Indent"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
          DataItems:
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[8, 5] (77)"
                IterEnd: "[8, 10] (82)"
                Token: "Upper Token"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(77, 82), match='EIGHT'>"
                Whitespace: None
              Phrase: "Upper Token"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[8, 10] (82)"
                IterEnd: "[9, 1] (83)"
                Token: "Newline+"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 83
                  Start: 82
                Whitespace: None
              Phrase: "Newline+"
          IsComplete: True
        Phrase: "Sequence: [Upper Token, Newline+]"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
          DataItems:
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[9, 5] (87)"
                IterEnd: "[9, 8] (90)"
                Token: "Number Token"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(87, 90), match='999'>"
                Whitespace: None
              Phrase: "Number Token"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[9, 29] (111)"
              IterEnd: "[9, 40] (122)"
              Token: "Comment"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(111, 122), match='# Comment 9'>"
              Whitespace:
                - 90
                - 111
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[9, 40] (122)"
                IterEnd: "[10, 1] (123)"
                Token: "Newline+"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 123
                  Start: 122
                Whitespace: None
              Phrase: "Newline+"
          IsComplete: True
        Phrase: "Sequence: [Number Token, Newline+]"
      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[10, 1] (123)"
          IterEnd: "[10, 1] (123)"
          Token: "Dedent"
          Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
            {}
          Whitespace: None
        Phrase: "Dedent"
    IsComplete: True
  Phrase: "Indent"
IterBegin: "[7, 1] (66)"
IterEnd: "[10, 1] (123)"
Success: True
