# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 3] (2)"
                Type: "'if' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 2), match='if'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 4] (3)"
                                        IterEnd: "[1, 14] (13)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(3, 13), match='Condition1'>"
                                        Whitespace:
                                          - 2
                                          - 3
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 14] (13)"
                                            IterEnd: "[1, 15] (14)"
                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(13, 14), match='('>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 15] (14)"
                                            IterEnd: "[1, 16] (15)"
                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(14, 15), match=')'>"
                                            Whitespace: None
                                        IterBegin: "[1, 14] (13)"
                                        IterEnd: "[1, 16] (15)"
                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                                      Arguments: None
                                      Name: "Condition1"
                                      Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                                        Arguments: None
                                        Name: "[Ln 1, Col 4] -> [Ln 1, Col 14]"
                                        Self__: "[Ln 1, Col 4] -> [Ln 1, Col 16]"
                                    IterBegin: "[1, 4] (3)"
                                    IterEnd: "[1, 16] (15)"
                                    Type: "Func Invocation Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[1, 4] (3)"
                                IterEnd: "[1, 16] (15)"
                                Type: "Left Recursive Wrapper <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[1, 4] (3)"
                            IterEnd: "[1, 16] (15)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 17] (16)"
                                IterEnd: "[1, 20] (19)"
                                Type: "'and' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(16, 19), match='and'>"
                                Whitespace:
                                  - 15
                                  - 16
                            IterBegin: "[1, 17] (16)"
                            IterEnd: "[1, 20] (19)"
                            Type: "Operator <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 21] (20)"
                                        IterEnd: "[1, 31] (30)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(20, 30), match='Condition2'>"
                                        Whitespace:
                                          - 19
                                          - 20
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 31] (30)"
                                            IterEnd: "[1, 32] (31)"
                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(30, 31), match='('>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 32] (31)"
                                            IterEnd: "[1, 33] (32)"
                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(31, 32), match=')'>"
                                            Whitespace: None
                                        IterBegin: "[1, 31] (30)"
                                        IterEnd: "[1, 33] (32)"
                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                                      Arguments: None
                                      Name: "Condition2"
                                      Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                                        Arguments: None
                                        Name: "[Ln 1, Col 21] -> [Ln 1, Col 31]"
                                        Self__: "[Ln 1, Col 21] -> [Ln 1, Col 33]"
                                    IterBegin: "[1, 21] (20)"
                                    IterEnd: "[1, 33] (32)"
                                    Type: "Func Invocation Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[1, 21] (20)"
                                IterEnd: "[1, 33] (32)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[1, 21] (20)"
                            IterEnd: "[1, 33] (32)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                          Left: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                            Arguments: None
                            Name: "Condition1"
                            Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                              Arguments: None
                              Name: "[Ln 1, Col 4] -> [Ln 1, Col 14]"
                              Self__: "[Ln 1, Col 4] -> [Ln 1, Col 16]"
                          Operator: "OperatorType.LogicalAnd"
                          Regions: # <class 'types.BinaryExpressionLexerInfoRegions'>
                            Left: "[Ln 1, Col 4] -> [Ln 1, Col 16]"
                            Operator: "[Ln 1, Col 17] -> [Ln 1, Col 20]"
                            Right: "[Ln 1, Col 21] -> [Ln 1, Col 33]"
                            Self__: "[Ln 1, Col 4] -> [Ln 1, Col 33]"
                          Right: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                            Arguments: None
                            Name: "Condition2"
                            Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                              Arguments: None
                              Name: "[Ln 1, Col 21] -> [Ln 1, Col 31]"
                              Self__: "[Ln 1, Col 21] -> [Ln 1, Col 33]"
                        IterBegin: "[1, 4] (3)"
                        IterEnd: "[1, 33] (32)"
                        Type: "Binary Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 4] (3)"
                    IterEnd: "[1, 33] (32)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 4] (3)"
                IterEnd: "[1, 33] (32)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 33] (32)"
                    IterEnd: "[1, 34] (33)"
                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(32, 33), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 34] (33)"
                            IterEnd: "[2, 1] (34)"
                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                              End: 34
                              Start: 33
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 1] (34)"
                            IterEnd: "[2, 5] (38)"
                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                              End: 38
                              Start: 34
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 5] (38)"
                                            IterEnd: "[2, 11] (44)"
                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(38, 44), match='Func1a'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 11] (44)"
                                                IterEnd: "[2, 12] (45)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(44, 45), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 12] (45)"
                                                IterEnd: "[2, 13] (46)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(45, 46), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[2, 11] (44)"
                                            IterEnd: "[2, 13] (46)"
                                            Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 13] (46)"
                                            IterEnd: "[4, 1] (48)"
                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                              End: 48
                                              Start: 46
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                          Arguments: None
                                          Name: "Func1a"
                                          Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                            Arguments: None
                                            Name: "[Ln 2, Col 5] -> [Ln 2, Col 11]"
                                            Self__: "[Ln 2, Col 5] -> [Ln 4, Col 1]"
                                        IterBegin: "[2, 5] (38)"
                                        IterEnd: "[4, 1] (48)"
                                        Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[2, 5] (38)"
                                    IterEnd: "[4, 1] (48)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 5] (38)"
                                IterEnd: "[4, 1] (48)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[5, 5] (68)"
                                            IterEnd: "[5, 9] (72)"
                                            Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(68, 72), match='pass'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[5, 9] (72)"
                                            IterEnd: "[7, 1] (74)"
                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                              End: 74
                                              Start: 72
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                                          Regions: # <class 'types.PassStatementLexerInfoRegions'>
                                            Self__: "[Ln 5, Col 5] -> [Ln 7, Col 1]"
                                        IterBegin: "[5, 5] (68)"
                                        IterEnd: "[7, 1] (74)"
                                        Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[5, 5] (68)"
                                    IterEnd: "[7, 1] (74)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[5, 5] (68)"
                                IterEnd: "[7, 1] (74)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[2, 5] (38)"
                            IterEnd: "[7, 1] (74)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[7, 1] (74)"
                            IterEnd: "[7, 1] (74)"
                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[1, 34] (33)"
                        IterEnd: "[7, 1] (74)"
                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 34] (33)"
                    IterEnd: "[7, 1] (74)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 33] (32)"
                IterEnd: "[7, 1] (74)"
                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[7, 1] (74)"
                        IterEnd: "[7, 5] (78)"
                        Type: "'elif' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(74, 78), match='elif'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[7, 6] (79)"
                                            IterEnd: "[7, 11] (84)"
                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(79, 84), match='cond3'>"
                                            Whitespace:
                                              - 78
                                              - 79
                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                          Name: "cond3"
                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                            Name: "[Ln 7, Col 6] -> [Ln 7, Col 11]"
                                            Self__: "[Ln 7, Col 6] -> [Ln 7, Col 11]"
                                        IterBegin: "[7, 6] (79)"
                                        IterEnd: "[7, 11] (84)"
                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[7, 6] (79)"
                                    IterEnd: "[7, 11] (84)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                    Name: "cond3"
                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                      Name: "[Ln 7, Col 6] -> [Ln 7, Col 11]"
                                      Self__: "[Ln 7, Col 6] -> [Ln 7, Col 11]"
                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                    Name: "[Ln 7, Col 6] -> [Ln 7, Col 11]"
                                    Self__: "[Ln 7, Col 6] -> [Ln 7, Col 11]"
                                IterBegin: "[7, 6] (79)"
                                IterEnd: "[7, 11] (84)"
                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[7, 6] (79)"
                            IterEnd: "[7, 11] (84)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[7, 6] (79)"
                        IterEnd: "[7, 11] (84)"
                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[7, 11] (84)"
                            IterEnd: "[7, 12] (85)"
                            Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(84, 85), match=':'>"
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[7, 12] (85)"
                                    IterEnd: "[8, 1] (86)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 86
                                      Start: 85
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[8, 1] (86)"
                                    IterEnd: "[8, 5] (90)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 90
                                      Start: 86
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[8, 5] (90)"
                                                    IterEnd: "[8, 11] (96)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(90, 96), match='Func2a'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[8, 11] (96)"
                                                        IterEnd: "[8, 12] (97)"
                                                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(96, 97), match='('>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[8, 12] (97)"
                                                        IterEnd: "[8, 13] (98)"
                                                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(97, 98), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[8, 11] (96)"
                                                    IterEnd: "[8, 13] (98)"
                                                    Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[8, 13] (98)"
                                                    IterEnd: "[9, 1] (99)"
                                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                      End: 99
                                                      Start: 98
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                  Arguments: None
                                                  Name: "Func2a"
                                                  Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                                    Arguments: None
                                                    Name: "[Ln 8, Col 5] -> [Ln 8, Col 11]"
                                                    Self__: "[Ln 8, Col 5] -> [Ln 9, Col 1]"
                                                IterBegin: "[8, 5] (90)"
                                                IterEnd: "[9, 1] (99)"
                                                Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[8, 5] (90)"
                                            IterEnd: "[9, 1] (99)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[8, 5] (90)"
                                        IterEnd: "[9, 1] (99)"
                                        Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[9, 5] (103)"
                                                    IterEnd: "[9, 11] (109)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(103, 109), match='Func2b'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[9, 11] (109)"
                                                        IterEnd: "[9, 12] (110)"
                                                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(109, 110), match='('>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[9, 12] (110)"
                                                        IterEnd: "[9, 13] (111)"
                                                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(110, 111), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[9, 11] (109)"
                                                    IterEnd: "[9, 13] (111)"
                                                    Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[9, 13] (111)"
                                                    IterEnd: "[11, 1] (113)"
                                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                      End: 113
                                                      Start: 111
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                  Arguments: None
                                                  Name: "Func2b"
                                                  Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                                    Arguments: None
                                                    Name: "[Ln 9, Col 5] -> [Ln 9, Col 11]"
                                                    Self__: "[Ln 9, Col 5] -> [Ln 11, Col 1]"
                                                IterBegin: "[9, 5] (103)"
                                                IterEnd: "[11, 1] (113)"
                                                Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[9, 5] (103)"
                                            IterEnd: "[11, 1] (113)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[9, 5] (103)"
                                        IterEnd: "[11, 1] (113)"
                                        Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[11, 5] (117)"
                                                    IterEnd: "[11, 7] (119)"
                                                    Type: "'if' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(117, 119), match='if'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                        IsIgnored: False
                                                                        IterBegin: "[11, 8] (120)"
                                                                        IterEnd: "[11, 20] (132)"
                                                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                          Match: "<_sre.SRE_Match object; span=(120, 132), match='nested_cond1'>"
                                                                        Whitespace:
                                                                          - 119
                                                                          - 120
                                                                    Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                      Name: "nested_cond1"
                                                                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                        Name: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                                                        Self__: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                                                    IterBegin: "[11, 8] (120)"
                                                                    IterEnd: "[11, 20] (132)"
                                                                    Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[11, 8] (120)"
                                                                IterEnd: "[11, 20] (132)"
                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                            Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                Name: "nested_cond1"
                                                                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                  Name: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                                                  Self__: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                                              Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                Name: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                                                Self__: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                                            IterBegin: "[11, 8] (120)"
                                                            IterEnd: "[11, 20] (132)"
                                                            Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                        IterBegin: "[11, 8] (120)"
                                                        IterEnd: "[11, 20] (132)"
                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                    IterBegin: "[11, 8] (120)"
                                                    IterEnd: "[11, 20] (132)"
                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[11, 20] (132)"
                                                        IterEnd: "[11, 21] (133)"
                                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(132, 133), match=':'>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[11, 21] (133)"
                                                                IterEnd: "[12, 1] (134)"
                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                  End: 134
                                                                  Start: 133
                                                                Whitespace: None
                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[12, 1] (134)"
                                                                IterEnd: "[12, 9] (142)"
                                                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                  End: 142
                                                                  Start: 134
                                                                  Value: 8
                                                                Whitespace: None
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[12, 9] (142)"
                                                                                IterEnd: "[12, 15] (148)"
                                                                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(142, 148), match='Func2c'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                    IsIgnored: False
                                                                                    IterBegin: "[12, 15] (148)"
                                                                                    IterEnd: "[12, 16] (149)"
                                                                                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                      Match: "<_sre.SRE_Match object; span=(148, 149), match='('>"
                                                                                    Whitespace: None
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                    IsIgnored: False
                                                                                    IterBegin: "[12, 16] (149)"
                                                                                    IterEnd: "[12, 17] (150)"
                                                                                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                      Match: "<_sre.SRE_Match object; span=(149, 150), match=')'>"
                                                                                    Whitespace: None
                                                                                IterBegin: "[12, 15] (148)"
                                                                                IterEnd: "[12, 17] (150)"
                                                                                Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[12, 17] (150)"
                                                                                IterEnd: "[13, 1] (151)"
                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                  End: 151
                                                                                  Start: 150
                                                                                Whitespace: None
                                                                            Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                                              Arguments: None
                                                                              Name: "Func2c"
                                                                              Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                                                                Arguments: None
                                                                                Name: "[Ln 12, Col 9] -> [Ln 12, Col 15]"
                                                                                Self__: "[Ln 12, Col 9] -> [Ln 13, Col 1]"
                                                                            IterBegin: "[12, 9] (142)"
                                                                            IterEnd: "[13, 1] (151)"
                                                                            Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[12, 9] (142)"
                                                                        IterEnd: "[13, 1] (151)"
                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                    IterBegin: "[12, 9] (142)"
                                                                    IterEnd: "[13, 1] (151)"
                                                                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                IterBegin: "[12, 9] (142)"
                                                                IterEnd: "[13, 1] (151)"
                                                                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[13, 1] (151)"
                                                                IterEnd: "[13, 5] (155)"
                                                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                  {}
                                                                Whitespace: None
                                                            IterBegin: "[11, 21] (133)"
                                                            IterEnd: "[13, 5] (155)"
                                                            Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[11, 21] (133)"
                                                        IterEnd: "[13, 5] (155)"
                                                        Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                    IterBegin: "[11, 20] (132)"
                                                    IterEnd: "[13, 5] (155)"
                                                    Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[13, 5] (155)"
                                                            IterEnd: "[13, 9] (159)"
                                                            Type: "'else' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(155, 159), match='else'>"
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[13, 9] (159)"
                                                                IterEnd: "[13, 10] (160)"
                                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(159, 160), match=':'>"
                                                                Whitespace: None
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                        IsIgnored: False
                                                                        IterBegin: "[13, 10] (160)"
                                                                        IterEnd: "[14, 1] (161)"
                                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                          End: 161
                                                                          Start: 160
                                                                        Whitespace: None
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                        IsIgnored: False
                                                                        IterBegin: "[14, 1] (161)"
                                                                        IterEnd: "[14, 9] (169)"
                                                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                          End: 169
                                                                          Start: 161
                                                                          Value: 8
                                                                        Whitespace: None
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[14, 9] (169)"
                                                                                        IterEnd: "[14, 15] (175)"
                                                                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(169, 175), match='Func2d'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[14, 15] (175)"
                                                                                            IterEnd: "[14, 16] (176)"
                                                                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(175, 176), match='('>"
                                                                                            Whitespace: None
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[14, 16] (176)"
                                                                                            IterEnd: "[14, 17] (177)"
                                                                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(176, 177), match=')'>"
                                                                                            Whitespace: None
                                                                                        IterBegin: "[14, 15] (175)"
                                                                                        IterEnd: "[14, 17] (177)"
                                                                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[14, 17] (177)"
                                                                                        IterEnd: "[16, 1] (179)"
                                                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                          End: 179
                                                                                          Start: 177
                                                                                        Whitespace: None
                                                                                    Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                                                      Arguments: None
                                                                                      Name: "Func2d"
                                                                                      Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                                                                        Arguments: None
                                                                                        Name: "[Ln 14, Col 9] -> [Ln 14, Col 15]"
                                                                                        Self__: "[Ln 14, Col 9] -> [Ln 16, Col 1]"
                                                                                    IterBegin: "[14, 9] (169)"
                                                                                    IterEnd: "[16, 1] (179)"
                                                                                    Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[14, 9] (169)"
                                                                                IterEnd: "[16, 1] (179)"
                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                            IterBegin: "[14, 9] (169)"
                                                                            IterEnd: "[16, 1] (179)"
                                                                            Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                        IterBegin: "[14, 9] (169)"
                                                                        IterEnd: "[16, 1] (179)"
                                                                        Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                        IsIgnored: False
                                                                        IterBegin: "[16, 1] (179)"
                                                                        IterEnd: "[16, 5] (183)"
                                                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                          {}
                                                                        Whitespace: None
                                                                    IterBegin: "[13, 10] (160)"
                                                                    IterEnd: "[16, 5] (183)"
                                                                    Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[13, 10] (160)"
                                                                IterEnd: "[16, 5] (183)"
                                                                Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                            IterBegin: "[13, 9] (159)"
                                                            IterEnd: "[16, 5] (183)"
                                                            Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[13, 5] (155)"
                                                        IterEnd: "[16, 5] (183)"
                                                        Type: "Else <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[13, 5] (155)"
                                                    IterEnd: "[16, 5] (183)"
                                                    Type: "Repeat: {Else, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                Info: # <class 'TheLanguage.Lexer.Statements.IfStatementLexerInfo.IfStatementLexerInfo'>
                                                  Clauses:
                                                    - # <class 'TheLanguage.Lexer.Statements.IfStatementLexerInfo.IfStatementClauseLexerInfo'>
                                                      Condition: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                          Name: "nested_cond1"
                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                            Name: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                                            Self__: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                          Name: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                                          Self__: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                                      Regions: # <class 'types.IfStatementClauseLexerInfoRegions'>
                                                        Condition: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                                        Self__: "[Ln 11, Col 5] -> [Ln 16, Col 5]"
                                                        Statements: "[Ln 11, Col 20] -> [Ln 13, Col 5]"
                                                      Statements:
                                                        - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                          Arguments: None
                                                          Name: "Func2c"
                                                          Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                                            Arguments: None
                                                            Name: "[Ln 12, Col 9] -> [Ln 12, Col 15]"
                                                            Self__: "[Ln 12, Col 9] -> [Ln 13, Col 1]"
                                                  ElseStatements:
                                                    - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                      Arguments: None
                                                      Name: "Func2d"
                                                      Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                                        Arguments: None
                                                        Name: "[Ln 14, Col 9] -> [Ln 14, Col 15]"
                                                        Self__: "[Ln 14, Col 9] -> [Ln 16, Col 1]"
                                                  Regions: # <class 'types.IfStatementLexerInfoRegions'>
                                                    Clauses: "[Ln 11, Col 5] -> [Ln 16, Col 5]"
                                                    ElseStatements: "[Ln 13, Col 5] -> [Ln 16, Col 5]"
                                                    Self__: "[Ln 11, Col 5] -> [Ln 16, Col 5]"
                                                IterBegin: "[11, 5] (117)"
                                                IterEnd: "[16, 5] (183)"
                                                Type: "If Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[11, 5] (117)"
                                            IterEnd: "[16, 5] (183)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[11, 5] (117)"
                                        IterEnd: "[16, 5] (183)"
                                        Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[16, 5] (183)"
                                                    IterEnd: "[16, 11] (189)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(183, 189), match='Func2e'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[16, 11] (189)"
                                                        IterEnd: "[16, 12] (190)"
                                                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(189, 190), match='('>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[16, 12] (190)"
                                                        IterEnd: "[16, 13] (191)"
                                                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(190, 191), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[16, 11] (189)"
                                                    IterEnd: "[16, 13] (191)"
                                                    Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[16, 13] (191)"
                                                    IterEnd: "[18, 1] (193)"
                                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                      End: 193
                                                      Start: 191
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                  Arguments: None
                                                  Name: "Func2e"
                                                  Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                                    Arguments: None
                                                    Name: "[Ln 16, Col 5] -> [Ln 16, Col 11]"
                                                    Self__: "[Ln 16, Col 5] -> [Ln 18, Col 1]"
                                                IterBegin: "[16, 5] (183)"
                                                IterEnd: "[18, 1] (193)"
                                                Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[16, 5] (183)"
                                            IterEnd: "[18, 1] (193)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[16, 5] (183)"
                                        IterEnd: "[18, 1] (193)"
                                        Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[8, 5] (90)"
                                    IterEnd: "[18, 1] (193)"
                                    Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[18, 1] (193)"
                                    IterEnd: "[18, 1] (193)"
                                    Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                IterBegin: "[7, 12] (85)"
                                IterEnd: "[18, 1] (193)"
                                Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[7, 12] (85)"
                            IterEnd: "[18, 1] (193)"
                            Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[7, 11] (84)"
                        IterEnd: "[18, 1] (193)"
                        Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[7, 1] (74)"
                    IterEnd: "[18, 1] (193)"
                    Type: "Elif <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[18, 1] (193)"
                        IterEnd: "[18, 5] (197)"
                        Type: "'elif' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(193, 197), match='elif'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[18, 6] (198)"
                                            IterEnd: "[18, 11] (203)"
                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(198, 203), match='cond4'>"
                                            Whitespace:
                                              - 197
                                              - 198
                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                          Name: "cond4"
                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                            Name: "[Ln 18, Col 6] -> [Ln 18, Col 11]"
                                            Self__: "[Ln 18, Col 6] -> [Ln 18, Col 11]"
                                        IterBegin: "[18, 6] (198)"
                                        IterEnd: "[18, 11] (203)"
                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[18, 6] (198)"
                                    IterEnd: "[18, 11] (203)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                    Name: "cond4"
                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                      Name: "[Ln 18, Col 6] -> [Ln 18, Col 11]"
                                      Self__: "[Ln 18, Col 6] -> [Ln 18, Col 11]"
                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                    Name: "[Ln 18, Col 6] -> [Ln 18, Col 11]"
                                    Self__: "[Ln 18, Col 6] -> [Ln 18, Col 11]"
                                IterBegin: "[18, 6] (198)"
                                IterEnd: "[18, 11] (203)"
                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[18, 6] (198)"
                            IterEnd: "[18, 11] (203)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[18, 6] (198)"
                        IterEnd: "[18, 11] (203)"
                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[18, 11] (203)"
                            IterEnd: "[18, 12] (204)"
                            Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(203, 204), match=':'>"
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[18, 12] (204)"
                                    IterEnd: "[19, 1] (205)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 205
                                      Start: 204
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[19, 1] (205)"
                                    IterEnd: "[19, 5] (209)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 209
                                      Start: 205
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[19, 5] (209)"
                                                    IterEnd: "[19, 11] (215)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(209, 215), match='Func3a'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[19, 11] (215)"
                                                        IterEnd: "[19, 12] (216)"
                                                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(215, 216), match='('>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[19, 12] (216)"
                                                        IterEnd: "[19, 13] (217)"
                                                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(216, 217), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[19, 11] (215)"
                                                    IterEnd: "[19, 13] (217)"
                                                    Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[19, 13] (217)"
                                                    IterEnd: "[21, 1] (219)"
                                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                      End: 219
                                                      Start: 217
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                  Arguments: None
                                                  Name: "Func3a"
                                                  Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                                    Arguments: None
                                                    Name: "[Ln 19, Col 5] -> [Ln 19, Col 11]"
                                                    Self__: "[Ln 19, Col 5] -> [Ln 21, Col 1]"
                                                IterBegin: "[19, 5] (209)"
                                                IterEnd: "[21, 1] (219)"
                                                Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[19, 5] (209)"
                                            IterEnd: "[21, 1] (219)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[19, 5] (209)"
                                        IterEnd: "[21, 1] (219)"
                                        Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[19, 5] (209)"
                                    IterEnd: "[21, 1] (219)"
                                    Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[21, 1] (219)"
                                    IterEnd: "[21, 1] (219)"
                                    Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                IterBegin: "[18, 12] (204)"
                                IterEnd: "[21, 1] (219)"
                                Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[18, 12] (204)"
                            IterEnd: "[21, 1] (219)"
                            Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[18, 11] (203)"
                        IterEnd: "[21, 1] (219)"
                        Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[18, 1] (193)"
                    IterEnd: "[21, 1] (219)"
                    Type: "Elif <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[7, 1] (74)"
                IterEnd: "[21, 1] (219)"
                Type: "Repeat: {Elif, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[21, 1] (219)"
                        IterEnd: "[21, 5] (223)"
                        Type: "'else' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(219, 223), match='else'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[21, 5] (223)"
                            IterEnd: "[21, 6] (224)"
                            Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(223, 224), match=':'>"
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[21, 6] (224)"
                                    IterEnd: "[22, 1] (225)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 225
                                      Start: 224
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[22, 1] (225)"
                                    IterEnd: "[22, 5] (229)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 229
                                      Start: 225
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[22, 5] (229)"
                                                    IterEnd: "[22, 9] (233)"
                                                    Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(229, 233), match='pass'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[22, 9] (233)"
                                                    IterEnd: "[23, 1] (234)"
                                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                      End: 234
                                                      Start: 233
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                                                  Regions: # <class 'types.PassStatementLexerInfoRegions'>
                                                    Self__: "[Ln 22, Col 5] -> [Ln 23, Col 1]"
                                                IterBegin: "[22, 5] (229)"
                                                IterEnd: "[23, 1] (234)"
                                                Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[22, 5] (229)"
                                            IterEnd: "[23, 1] (234)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[22, 5] (229)"
                                        IterEnd: "[23, 1] (234)"
                                        Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[22, 5] (229)"
                                    IterEnd: "[23, 1] (234)"
                                    Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[23, 1] (234)"
                                    IterEnd: "[23, 1] (234)"
                                    Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                IterBegin: "[21, 6] (224)"
                                IterEnd: "[23, 1] (234)"
                                Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[21, 6] (224)"
                            IterEnd: "[23, 1] (234)"
                            Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[21, 5] (223)"
                        IterEnd: "[23, 1] (234)"
                        Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[21, 1] (219)"
                    IterEnd: "[23, 1] (234)"
                    Type: "Else <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[21, 1] (219)"
                IterEnd: "[23, 1] (234)"
                Type: "Repeat: {Else, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
            Info: # <class 'TheLanguage.Lexer.Statements.IfStatementLexerInfo.IfStatementLexerInfo'>
              Clauses:
                - # <class 'TheLanguage.Lexer.Statements.IfStatementLexerInfo.IfStatementClauseLexerInfo'>
                  Condition: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                    Left: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                      Arguments: None
                      Name: "Condition1"
                      Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                        Arguments: None
                        Name: "[Ln 1, Col 4] -> [Ln 1, Col 14]"
                        Self__: "[Ln 1, Col 4] -> [Ln 1, Col 16]"
                    Operator: "OperatorType.LogicalAnd"
                    Regions: # <class 'types.BinaryExpressionLexerInfoRegions'>
                      Left: "[Ln 1, Col 4] -> [Ln 1, Col 16]"
                      Operator: "[Ln 1, Col 17] -> [Ln 1, Col 20]"
                      Right: "[Ln 1, Col 21] -> [Ln 1, Col 33]"
                      Self__: "[Ln 1, Col 4] -> [Ln 1, Col 33]"
                    Right: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                      Arguments: None
                      Name: "Condition2"
                      Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                        Arguments: None
                        Name: "[Ln 1, Col 21] -> [Ln 1, Col 31]"
                        Self__: "[Ln 1, Col 21] -> [Ln 1, Col 33]"
                  Regions: # <class 'types.IfStatementClauseLexerInfoRegions'>
                    Condition: "[Ln 1, Col 4] -> [Ln 1, Col 33]"
                    Self__: "[Ln 1, Col 1] -> [Ln 23, Col 1]"
                    Statements: "[Ln 1, Col 33] -> [Ln 7, Col 1]"
                  Statements:
                    - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                      Arguments: None
                      Name: "Func1a"
                      Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                        Arguments: None
                        Name: "[Ln 2, Col 5] -> [Ln 2, Col 11]"
                        Self__: "[Ln 2, Col 5] -> [Ln 4, Col 1]"
                    - # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                      Regions: # <class 'types.PassStatementLexerInfoRegions'>
                        Self__: "[Ln 5, Col 5] -> [Ln 7, Col 1]"
                - # <class 'TheLanguage.Lexer.Statements.IfStatementLexerInfo.IfStatementClauseLexerInfo'>
                  Condition: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                      Name: "cond3"
                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                        Name: "[Ln 7, Col 6] -> [Ln 7, Col 11]"
                        Self__: "[Ln 7, Col 6] -> [Ln 7, Col 11]"
                    Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                      Name: "[Ln 7, Col 6] -> [Ln 7, Col 11]"
                      Self__: "[Ln 7, Col 6] -> [Ln 7, Col 11]"
                  Regions: # <class 'types.IfStatementClauseLexerInfoRegions'>
                    Condition: "[Ln 7, Col 6] -> [Ln 7, Col 11]"
                    Self__: "[Ln 7, Col 1] -> [Ln 18, Col 1]"
                    Statements: "[Ln 7, Col 11] -> [Ln 18, Col 1]"
                  Statements:
                    - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                      Arguments: None
                      Name: "Func2a"
                      Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                        Arguments: None
                        Name: "[Ln 8, Col 5] -> [Ln 8, Col 11]"
                        Self__: "[Ln 8, Col 5] -> [Ln 9, Col 1]"
                    - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                      Arguments: None
                      Name: "Func2b"
                      Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                        Arguments: None
                        Name: "[Ln 9, Col 5] -> [Ln 9, Col 11]"
                        Self__: "[Ln 9, Col 5] -> [Ln 11, Col 1]"
                    - # <class 'TheLanguage.Lexer.Statements.IfStatementLexerInfo.IfStatementLexerInfo'>
                      Clauses:
                        - # <class 'TheLanguage.Lexer.Statements.IfStatementLexerInfo.IfStatementClauseLexerInfo'>
                          Condition: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                              Name: "nested_cond1"
                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                Name: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                                Self__: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                            Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                              Name: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                              Self__: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                          Regions: # <class 'types.IfStatementClauseLexerInfoRegions'>
                            Condition: "[Ln 11, Col 8] -> [Ln 11, Col 20]"
                            Self__: "[Ln 11, Col 5] -> [Ln 16, Col 5]"
                            Statements: "[Ln 11, Col 20] -> [Ln 13, Col 5]"
                          Statements:
                            - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                              Arguments: None
                              Name: "Func2c"
                              Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                Arguments: None
                                Name: "[Ln 12, Col 9] -> [Ln 12, Col 15]"
                                Self__: "[Ln 12, Col 9] -> [Ln 13, Col 1]"
                      ElseStatements:
                        - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                          Arguments: None
                          Name: "Func2d"
                          Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                            Arguments: None
                            Name: "[Ln 14, Col 9] -> [Ln 14, Col 15]"
                            Self__: "[Ln 14, Col 9] -> [Ln 16, Col 1]"
                      Regions: # <class 'types.IfStatementLexerInfoRegions'>
                        Clauses: "[Ln 11, Col 5] -> [Ln 16, Col 5]"
                        ElseStatements: "[Ln 13, Col 5] -> [Ln 16, Col 5]"
                        Self__: "[Ln 11, Col 5] -> [Ln 16, Col 5]"
                    - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                      Arguments: None
                      Name: "Func2e"
                      Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                        Arguments: None
                        Name: "[Ln 16, Col 5] -> [Ln 16, Col 11]"
                        Self__: "[Ln 16, Col 5] -> [Ln 18, Col 1]"
                - # <class 'TheLanguage.Lexer.Statements.IfStatementLexerInfo.IfStatementClauseLexerInfo'>
                  Condition: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                      Name: "cond4"
                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                        Name: "[Ln 18, Col 6] -> [Ln 18, Col 11]"
                        Self__: "[Ln 18, Col 6] -> [Ln 18, Col 11]"
                    Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                      Name: "[Ln 18, Col 6] -> [Ln 18, Col 11]"
                      Self__: "[Ln 18, Col 6] -> [Ln 18, Col 11]"
                  Regions: # <class 'types.IfStatementClauseLexerInfoRegions'>
                    Condition: "[Ln 18, Col 6] -> [Ln 18, Col 11]"
                    Self__: "[Ln 18, Col 1] -> [Ln 21, Col 1]"
                    Statements: "[Ln 18, Col 11] -> [Ln 21, Col 1]"
                  Statements:
                    - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                      Arguments: None
                      Name: "Func3a"
                      Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                        Arguments: None
                        Name: "[Ln 19, Col 5] -> [Ln 19, Col 11]"
                        Self__: "[Ln 19, Col 5] -> [Ln 21, Col 1]"
              ElseStatements:
                - # <class 'TheLanguage.Lexer.Statements.PassStatementLexerInfo.PassStatementLexerInfo'>
                  Regions: # <class 'types.PassStatementLexerInfoRegions'>
                    Self__: "[Ln 22, Col 5] -> [Ln 23, Col 1]"
              Regions: # <class 'types.IfStatementLexerInfoRegions'>
                Clauses: "[Ln 1, Col 1] -> [Ln 23, Col 1]"
                ElseStatements: "[Ln 21, Col 1] -> [Ln 23, Col 1]"
                Self__: "[Ln 1, Col 1] -> [Ln 23, Col 1]"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[23, 1] (234)"
            Type: "If Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[23, 1] (234)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[23, 1] (234)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[23, 1] (234)"
Type: "<None>"
