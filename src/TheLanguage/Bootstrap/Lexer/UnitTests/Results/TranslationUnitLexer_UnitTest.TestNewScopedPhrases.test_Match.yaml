# <class 'Bootstrap.Lexer.Components.AST.Node'>
Children:
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 4] (3)"
            Type: "Upper <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 3), match='ONE'>"
            Whitespace: None
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[1, 4] (3)"
        Type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[1, 4] (3)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[1, 4] (3)"
            IterEnd: "[2, 1] (4)"
            Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 4
              Start: 3
            Whitespace: None
        IsIgnored: False
        IterBegin: "[1, 4] (3)"
        IterEnd: "[2, 1] (4)"
        Type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 4] (3)"
    IterEnd: "[2, 1] (4)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[2, 5] (8)"
            Type: "Indent <class 'Bootstrap.Lexer.Components.Token.IndentToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.IndentToken.MatchResult'>
              End: 8
              Start: 4
              Value: 4
            Whitespace: None
        IsIgnored: False
        IterBegin: "[2, 1] (4)"
        IterEnd: "[2, 5] (8)"
        Type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[2, 1] (4)"
    IterEnd: "[2, 5] (8)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[2, 5] (8)"
            IterEnd: "[2, 8] (11)"
            Type: "Lower <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='two'>"
            Whitespace: None
        IsIgnored: False
        IterBegin: "[2, 5] (8)"
        IterEnd: "[2, 8] (11)"
        Type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) Statements / (Lower Phrase) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[2, 5] (8)"
    IterEnd: "[2, 8] (11)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[2, 8] (11)"
            IterEnd: "[3, 1] (12)"
            Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 12
              Start: 11
            Whitespace: None
        IsIgnored: False
        IterBegin: "[2, 8] (11)"
        IterEnd: "[3, 1] (12)"
        Type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) Statements / (Lower Phrase) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[2, 8] (11)"
    IterEnd: "[3, 1] (12)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[3, 1] (12)"
            IterEnd: "[3, 1] (12)"
            Type: "Dedent <class 'Bootstrap.Lexer.Components.Token.DedentToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.DedentToken.MatchResult'>
              {}
            Whitespace: None
        IsIgnored: False
        IterBegin: "[3, 1] (12)"
        IterEnd: "[3, 1] (12)"
        Type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) Statements / (Lower Phrase) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[3, 1] (12)"
    IterEnd: "[3, 1] (12)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[3, 1] (12)"
Type: "<None>"
