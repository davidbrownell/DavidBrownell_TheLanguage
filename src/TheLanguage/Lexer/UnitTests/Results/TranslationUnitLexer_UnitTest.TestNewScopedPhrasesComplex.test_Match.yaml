# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 9] (8)"
                Type: "Upper <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 8), match='NEWSCOPE'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 9] (8)"
                IterEnd: "[1, 10] (9)"
                Type: "Colon <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(8, 9), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 10] (9)"
                IterEnd: "[2, 1] (10)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 10
                  Start: 9
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 1] (10)"
                IterEnd: "[2, 5] (14)"
                Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                  End: 14
                  Start: 10
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[2, 5] (14)"
                        IterEnd: "[2, 10] (19)"
                        Type: "Upper <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(14, 19), match='UPPER'>"
                        Whitespace: None
                    IterBegin: "[2, 5] (14)"
                    IterEnd: "[2, 10] (19)"
                    Type: "(Newline Phrase, New Scope) / (Upper Phrase, Lower Phrase) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[2, 5] (14)"
                IterEnd: "[2, 10] (19)"
                Type: "DynamicPhrasesType.Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[2, 10] (19)"
                        IterEnd: "[4, 1] (21)"
                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                          End: 21
                          Start: 19
                        Whitespace: None
                    IterBegin: "[2, 10] (19)"
                    IterEnd: "[4, 1] (21)"
                    Type: "(Newline Phrase, New Scope) / (Upper Phrase, Lower Phrase) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[2, 10] (19)"
                IterEnd: "[4, 1] (21)"
                Type: "DynamicPhrasesType.Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[4, 5] (25)"
                        IterEnd: "[4, 10] (30)"
                        Type: "Lower <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(25, 30), match='lower'>"
                        Whitespace: None
                    IterBegin: "[4, 5] (25)"
                    IterEnd: "[4, 10] (30)"
                    Type: "(Newline Phrase, New Scope) / (Upper Phrase, Lower Phrase) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[4, 5] (25)"
                IterEnd: "[4, 10] (30)"
                Type: "DynamicPhrasesType.Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[4, 10] (30)"
                        IterEnd: "[5, 1] (31)"
                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                          End: 31
                          Start: 30
                        Whitespace: None
                    IterBegin: "[4, 10] (30)"
                    IterEnd: "[5, 1] (31)"
                    Type: "(Newline Phrase, New Scope) / (Upper Phrase, Lower Phrase) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[4, 10] (30)"
                IterEnd: "[5, 1] (31)"
                Type: "DynamicPhrasesType.Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 1] (31)"
                IterEnd: "[5, 1] (31)"
                Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            IterBegin: "[1, 1] (0)"
            IterEnd: "[5, 1] (31)"
            Type: "New Scope <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[5, 1] (31)"
        Type: "(Newline Phrase, New Scope) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[5, 1] (31)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[5, 1] (31)"
Type: "<None>"
