# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 7] (6)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 6), match='value1'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "value1"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 7] (6)"
                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 7] (6)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 7] (6)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 8] (7)"
                IterEnd: "[1, 9] (8)"
                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(7, 8), match='='>"
                Whitespace:
                  - 6
                  - 7
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 10] (9)"
                                    IterEnd: "[1, 11] (10)"
                                    Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(9, 10), match='('>"
                                    Whitespace:
                                      - 8
                                      - 9
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 11] (10)"
                                    IterEnd: "[2, 1] (11)"
                                    Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                      End: 11
                                      Start: 10
                                    Whitespace: None
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 1] (11)"
                                    IterEnd: "[2, 5] (15)"
                                    Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                                      End: 15
                                      Start: 11
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 5] (15)"
                                        IterEnd: "[2, 10] (20)"
                                        Type: "'match' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(15, 20), match='match'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 11] (21)"
                                        IterEnd: "[2, 16] (26)"
                                        Type: "'value' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(21, 26), match='value'>"
                                        Whitespace:
                                          - 20
                                          - 21
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 17] (27)"
                                                    IterEnd: "[2, 21] (31)"
                                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(27, 31), match='Add1'>"
                                                    Whitespace:
                                                      - 26
                                                      - 27
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[2, 21] (31)"
                                                        IterEnd: "[2, 22] (32)"
                                                        Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(31, 32), match='('>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[2, 22] (32)"
                                                                                        IterEnd: "[2, 25] (35)"
                                                                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(32, 35), match='one'>"
                                                                                        Whitespace: None
                                                                                    Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                      Name: "one"
                                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                        Name: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                                                        Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                                                    IterBegin: "[2, 22] (32)"
                                                                                    IterEnd: "[2, 25] (35)"
                                                                                    Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[2, 22] (32)"
                                                                                IterEnd: "[2, 25] (35)"
                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                            Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                Name: "one"
                                                                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                  Name: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                                                  Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                Name: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                                                Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                                            IterBegin: "[2, 22] (32)"
                                                                            IterEnd: "[2, 25] (35)"
                                                                            Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                        IterBegin: "[2, 22] (32)"
                                                                        IterEnd: "[2, 25] (35)"
                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                    IterBegin: "[2, 22] (32)"
                                                                    IterEnd: "[2, 25] (35)"
                                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                IterBegin: "[2, 22] (32)"
                                                                IterEnd: "[2, 25] (35)"
                                                                Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                        IsIgnored: False
                                                                        IterBegin: "[2, 25] (35)"
                                                                        IterEnd: "[2, 26] (36)"
                                                                        Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                          Match: "<_sre.SRE_Match object; span=(35, 36), match=','>"
                                                                        Whitespace: None
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[2, 27] (37)"
                                                                                                IterEnd: "[2, 30] (40)"
                                                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                                                                                                Whitespace:
                                                                                                  - 36
                                                                                                  - 37
                                                                                            Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                              Name: "two"
                                                                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                                Name: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                                                                Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                                                            IterBegin: "[2, 27] (37)"
                                                                                            IterEnd: "[2, 30] (40)"
                                                                                            Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[2, 27] (37)"
                                                                                        IterEnd: "[2, 30] (40)"
                                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                                    Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                        Name: "two"
                                                                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                          Name: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                                                          Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                        Name: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                                                        Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                                                    IterBegin: "[2, 27] (37)"
                                                                                    IterEnd: "[2, 30] (40)"
                                                                                    Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                IterBegin: "[2, 27] (37)"
                                                                                IterEnd: "[2, 30] (40)"
                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                            IterBegin: "[2, 27] (37)"
                                                                            IterEnd: "[2, 30] (40)"
                                                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                        IterBegin: "[2, 27] (37)"
                                                                        IterEnd: "[2, 30] (40)"
                                                                        Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[2, 25] (35)"
                                                                    IterEnd: "[2, 30] (40)"
                                                                    Type: "Comma and Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[2, 25] (35)"
                                                                IterEnd: "[2, 30] (40)"
                                                                Type: "Repeat: {Comma and Argument, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                            IterBegin: "[2, 22] (32)"
                                                            IterEnd: "[2, 30] (40)"
                                                            Type: "Argument Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[2, 22] (32)"
                                                        IterEnd: "[2, 30] (40)"
                                                        Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[2, 30] (40)"
                                                        IterEnd: "[2, 31] (41)"
                                                        Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(40, 41), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[2, 21] (31)"
                                                    IterEnd: "[2, 31] (41)"
                                                    Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                Info: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                                                  Arguments:
                                                    - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                                                      Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                          Name: "one"
                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                            Name: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                            Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                          Name: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                          Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                      Keyword: None
                                                      Regions: # <class 'types.ArgumentParserInfoRegions'>
                                                        Expression: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                        Keyword: None
                                                        Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                                    - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                                                      Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                          Name: "two"
                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                            Name: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                            Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                          Name: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                          Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                      Keyword: None
                                                      Regions: # <class 'types.ArgumentParserInfoRegions'>
                                                        Expression: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                        Keyword: None
                                                        Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                                  Name: "Add1"
                                                  Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                                                    Arguments: "[Ln 2, Col 21] -> [Ln 2, Col 31]"
                                                    Name: "[Ln 2, Col 17] -> [Ln 2, Col 21]"
                                                    Self__: "[Ln 2, Col 17] -> [Ln 2, Col 31]"
                                                IterBegin: "[2, 17] (27)"
                                                IterEnd: "[2, 31] (41)"
                                                Type: "Func Invocation Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[2, 17] (27)"
                                            IterEnd: "[2, 31] (41)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[2, 17] (27)"
                                        IterEnd: "[2, 31] (41)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 31] (41)"
                                        IterEnd: "[2, 32] (42)"
                                        Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(41, 42), match=':'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 32] (42)"
                                        IterEnd: "[3, 1] (43)"
                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                          End: 43
                                          Start: 42
                                        Whitespace: None
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[3, 1] (43)"
                                        IterEnd: "[3, 9] (51)"
                                        Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                                          End: 51
                                          Start: 43
                                          Value: 8
                                        Whitespace: None
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 9] (51)"
                                                IterEnd: "[3, 13] (55)"
                                                Type: "'case' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(51, 55), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 14] (56)"
                                                                            IterEnd: "[3, 19] (61)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(56, 61), match='three'>"
                                                                            Whitespace:
                                                                              - 55
                                                                              - 56
                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                          Name: "three"
                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                            Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                            Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                        IterBegin: "[3, 14] (56)"
                                                                        IterEnd: "[3, 19] (61)"
                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 14] (56)"
                                                                    IterEnd: "[3, 19] (61)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "three"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                      Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                    Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                IterBegin: "[3, 14] (56)"
                                                                IterEnd: "[3, 19] (61)"
                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 14] (56)"
                                                            IterEnd: "[3, 19] (61)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 14] (56)"
                                                        IterEnd: "[3, 19] (61)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[3, 14] (56)"
                                                    IterEnd: "[3, 19] (61)"
                                                    Type: "Case Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 14] (56)"
                                                IterEnd: "[3, 19] (61)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 19] (61)"
                                                IterEnd: "[3, 20] (62)"
                                                Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(61, 62), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 21] (63)"
                                                                            IterEnd: "[3, 30] (72)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(63, 72), match='expected1'>"
                                                                            Whitespace:
                                                                              - 62
                                                                              - 63
                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                          Name: "expected1"
                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                            Name: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                                                                            Self__: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                                                                        IterBegin: "[3, 21] (63)"
                                                                        IterEnd: "[3, 30] (72)"
                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 21] (63)"
                                                                    IterEnd: "[3, 30] (72)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "expected1"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                                                                      Self__: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                                                                    Self__: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                                                                IterBegin: "[3, 21] (63)"
                                                                IterEnd: "[3, 30] (72)"
                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 21] (63)"
                                                            IterEnd: "[3, 30] (72)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 21] (63)"
                                                        IterEnd: "[3, 30] (72)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[3, 30] (72)"
                                                        IterEnd: "[4, 1] (73)"
                                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                          End: 73
                                                          Start: 72
                                                        Whitespace: None
                                                    IterBegin: "[3, 21] (63)"
                                                    IterEnd: "[4, 1] (73)"
                                                    Type: "Single Line <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 21] (63)"
                                                IterEnd: "[4, 1] (73)"
                                                Type: "Expression <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 9] (51)"
                                            IterEnd: "[4, 1] (73)"
                                            Type: "Case Phrase <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 9] (81)"
                                                IterEnd: "[4, 13] (85)"
                                                Type: "'case' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(81, 85), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[4, 14] (86)"
                                                                            IterEnd: "[4, 18] (90)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(86, 90), match='four'>"
                                                                            Whitespace:
                                                                              - 85
                                                                              - 86
                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                          Name: "four"
                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                            Name: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                                                            Self__: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                                                        IterBegin: "[4, 14] (86)"
                                                                        IterEnd: "[4, 18] (90)"
                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[4, 14] (86)"
                                                                    IterEnd: "[4, 18] (90)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "four"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                                                      Self__: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                                                    Self__: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                                                IterBegin: "[4, 14] (86)"
                                                                IterEnd: "[4, 18] (90)"
                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[4, 14] (86)"
                                                            IterEnd: "[4, 18] (90)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[4, 14] (86)"
                                                        IterEnd: "[4, 18] (90)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[4, 14] (86)"
                                                    IterEnd: "[4, 18] (90)"
                                                    Type: "Case Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[4, 14] (86)"
                                                IterEnd: "[4, 18] (90)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 18] (90)"
                                                IterEnd: "[4, 19] (91)"
                                                Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(90, 91), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 19] (91)"
                                                        IterEnd: "[5, 1] (92)"
                                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                          End: 92
                                                          Start: 91
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[5, 1] (92)"
                                                        IterEnd: "[5, 13] (104)"
                                                        Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                                                          End: 104
                                                          Start: 92
                                                          Value: 12
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[5, 13] (104)"
                                                                            IterEnd: "[5, 24] (115)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(104, 115), match='unexpected1'>"
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                          Name: "unexpected1"
                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                            Name: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                                                                            Self__: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                                                                        IterBegin: "[5, 13] (104)"
                                                                        IterEnd: "[5, 24] (115)"
                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[5, 13] (104)"
                                                                    IterEnd: "[5, 24] (115)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "unexpected1"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                                                                      Self__: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                                                                    Self__: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                                                                IterBegin: "[5, 13] (104)"
                                                                IterEnd: "[5, 24] (115)"
                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[5, 13] (104)"
                                                            IterEnd: "[5, 24] (115)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[5, 13] (104)"
                                                        IterEnd: "[5, 24] (115)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[5, 24] (115)"
                                                        IterEnd: "[6, 1] (116)"
                                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                          End: 116
                                                          Start: 115
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[6, 1] (116)"
                                                        IterEnd: "[6, 1] (116)"
                                                        Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                                                          {}
                                                        Whitespace: None
                                                    IterBegin: "[4, 19] (91)"
                                                    IterEnd: "[6, 1] (116)"
                                                    Type: "Multiple Lines <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[4, 19] (91)"
                                                IterEnd: "[6, 1] (116)"
                                                Type: "Expression <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[4, 9] (81)"
                                            IterEnd: "[6, 1] (116)"
                                            Type: "Case Phrase <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[3, 9] (51)"
                                        IterEnd: "[6, 1] (116)"
                                        Type: "Repeat: {Case Phrase, 1, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[6, 1] (116)"
                                        IterEnd: "[6, 1] (116)"
                                        Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                                          {}
                                        Whitespace: None
                                    IterBegin: "[2, 5] (15)"
                                    IterEnd: "[6, 1] (116)"
                                    Type: "Match <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[6, 1] (116)"
                                    IterEnd: "[6, 1] (116)"
                                    Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[6, 1] (116)"
                                    IterEnd: "[6, 2] (117)"
                                    Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(116, 117), match=')'>"
                                    Whitespace: None
                                IterBegin: "[1, 10] (9)"
                                IterEnd: "[6, 2] (117)"
                                Type: "Allman-like <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 10] (9)"
                            IterEnd: "[6, 2] (117)"
                            Type: "Style <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                        Info: # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueExpressionParserInfo'>
                          CasePhrases:
                            - # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueCasePhraseParserInfo'>
                              Cases:
                                - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "three"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                      Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                    Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "expected1"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                                    Self__: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                                  Self__: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                              Regions: # <class 'types.MatchValueCasePhraseParserInfoRegions'>
                                Cases: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                Expression: "[Ln 3, Col 21] -> [Ln 4, Col 1]"
                                Self__: "[Ln 3, Col 9] -> [Ln 4, Col 1]"
                            - # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueCasePhraseParserInfo'>
                              Cases:
                                - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "four"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                      Self__: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                    Self__: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "unexpected1"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                                    Self__: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                                  Self__: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                              Regions: # <class 'types.MatchValueCasePhraseParserInfoRegions'>
                                Cases: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                Expression: "[Ln 4, Col 19] -> [Ln 6, Col 1]"
                                Self__: "[Ln 4, Col 9] -> [Ln 6, Col 1]"
                          Default: None
                          Expression: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                            Arguments:
                              - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                                Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "one"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                      Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                    Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                Keyword: None
                                Regions: # <class 'types.ArgumentParserInfoRegions'>
                                  Expression: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                                  Keyword: None
                                  Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                              - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                                Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "two"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                      Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                    Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                Keyword: None
                                Regions: # <class 'types.ArgumentParserInfoRegions'>
                                  Expression: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                                  Keyword: None
                                  Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                            Name: "Add1"
                            Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                              Arguments: "[Ln 2, Col 21] -> [Ln 2, Col 31]"
                              Name: "[Ln 2, Col 17] -> [Ln 2, Col 21]"
                              Self__: "[Ln 2, Col 17] -> [Ln 2, Col 31]"
                          Regions: # <class 'types.MatchValueExpressionParserInfoRegions'>
                            CasePhrases: "[Ln 3, Col 9] -> [Ln 6, Col 1]"
                            Default: None
                            Expression: "[Ln 2, Col 17] -> [Ln 2, Col 31]"
                            Self__: "[Ln 1, Col 10] -> [Ln 6, Col 2]"
                        IterBegin: "[1, 10] (9)"
                        IterEnd: "[6, 2] (117)"
                        Type: "Match Value Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 10] (9)"
                    IterEnd: "[6, 2] (117)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 10] (9)"
                IterEnd: "[6, 2] (117)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[6, 2] (117)"
                IterEnd: "[7, 1] (118)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 118
                  Start: 117
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
              Expression: # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueExpressionParserInfo'>
                CasePhrases:
                  - # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueCasePhraseParserInfo'>
                    Cases:
                      - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "three"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                            Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                          Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "expected1"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                          Self__: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                        Self__: "[Ln 3, Col 21] -> [Ln 3, Col 30]"
                    Regions: # <class 'types.MatchValueCasePhraseParserInfoRegions'>
                      Cases: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                      Expression: "[Ln 3, Col 21] -> [Ln 4, Col 1]"
                      Self__: "[Ln 3, Col 9] -> [Ln 4, Col 1]"
                  - # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueCasePhraseParserInfo'>
                    Cases:
                      - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "four"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                            Self__: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                          Self__: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "unexpected1"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                          Self__: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                        Self__: "[Ln 5, Col 13] -> [Ln 5, Col 24]"
                    Regions: # <class 'types.MatchValueCasePhraseParserInfoRegions'>
                      Cases: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                      Expression: "[Ln 4, Col 19] -> [Ln 6, Col 1]"
                      Self__: "[Ln 4, Col 9] -> [Ln 6, Col 1]"
                Default: None
                Expression: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
                  Arguments:
                    - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                      Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "one"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                            Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                          Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                      Keyword: None
                      Regions: # <class 'types.ArgumentParserInfoRegions'>
                        Expression: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                        Keyword: None
                        Self__: "[Ln 2, Col 22] -> [Ln 2, Col 25]"
                    - # <class 'TheLanguage.Parser.Common.ArgumentParserInfo.ArgumentParserInfo'>
                      Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "two"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                            Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                          Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                      Keyword: None
                      Regions: # <class 'types.ArgumentParserInfoRegions'>
                        Expression: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                        Keyword: None
                        Self__: "[Ln 2, Col 27] -> [Ln 2, Col 30]"
                  Name: "Add1"
                  Regions: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
                    Arguments: "[Ln 2, Col 21] -> [Ln 2, Col 31]"
                    Name: "[Ln 2, Col 17] -> [Ln 2, Col 21]"
                    Self__: "[Ln 2, Col 17] -> [Ln 2, Col 31]"
                Regions: # <class 'types.MatchValueExpressionParserInfoRegions'>
                  CasePhrases: "[Ln 3, Col 9] -> [Ln 6, Col 1]"
                  Default: None
                  Expression: "[Ln 2, Col 17] -> [Ln 2, Col 31]"
                  Self__: "[Ln 1, Col 10] -> [Ln 6, Col 2]"
              Modifier: None
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "value1"
                Regions: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
                  Self__: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
              Regions: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
                Expression: "[Ln 1, Col 10] -> [Ln 6, Col 2]"
                Modifier: None
                Name: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
                Self__: "[Ln 1, Col 1] -> [Ln 7, Col 1]"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[7, 1] (118)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[7, 1] (118)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[7, 1] (118)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[7, 1] (118)"
Type: "<None>"
