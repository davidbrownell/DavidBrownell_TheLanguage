0) StartPhrase, "Phrase"
1) StartPhrase, "Word Token", "Phrase"
2) OnInternalPhraseAsync, 0, 3
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 1] (0)"
      IterEnd: "[1, 4] (3)"
      Token: "Word Token"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
      Whitespace: None
    Phrase: "Word Token"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrase"
3) EndPhrase, "Word Token" [True], "Phrase" [None]
4) StartPhrase, "Newline+", "Phrase"
5) OnInternalPhraseAsync, 3, 4
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 4] (3)"
      IterEnd: "[2, 1] (4)"
      Token: "Newline+"
      Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
        End: 4
        Start: 3
      Whitespace: None
    Phrase: "Newline+"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 4] (3)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
            Whitespace: None
          Phrase: "Word Token"
      IsComplete: False
    Phrase: "Phrase"
6) EndPhrase, "Newline+" [True], "Phrase" [None]
7) StartPhrase, "Indent", "Phrase"
8) OnIndentAsync, 4, 8
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[2, 1] (4)"
      IterEnd: "[2, 5] (8)"
      Token: "Indent"
      Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
        End: 8
        Start: 4
        Value: 4
      Whitespace: None
    Phrase: "Indent"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 4] (3)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 4] (3)"
            IterEnd: "[2, 1] (4)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 4
              Start: 3
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: False
    Phrase: "Phrase"
9) EndPhrase, "Indent" [True], "Phrase" [None]
10) StartPhrase, "Word Token", "Phrase"
11) OnInternalPhraseAsync, 8, 11
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[2, 5] (8)"
      IterEnd: "[2, 8] (11)"
      Token: "Word Token"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(8, 11), match='two'>"
      Whitespace: None
    Phrase: "Word Token"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 4] (3)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 4] (3)"
            IterEnd: "[2, 1] (4)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 4
              Start: 3
            Whitespace: None
          Phrase: "Newline+"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[2, 5] (8)"
            Token: "Indent"
            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
              End: 8
              Start: 4
              Value: 4
            Whitespace: None
          Phrase: "Indent"
      IsComplete: False
    Phrase: "Phrase"
12) EndPhrase, "Word Token" [True], "Phrase" [None]
13) StartPhrase, "Newline+", "Phrase"
14) OnInternalPhraseAsync, 11, 12
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[2, 8] (11)"
      IterEnd: "[3, 1] (12)"
      Token: "Newline+"
      Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
        End: 12
        Start: 11
      Whitespace: None
    Phrase: "Newline+"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 4] (3)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 4] (3)"
            IterEnd: "[2, 1] (4)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 4
              Start: 3
            Whitespace: None
          Phrase: "Newline+"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[2, 5] (8)"
            Token: "Indent"
            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
              End: 8
              Start: 4
              Value: 4
            Whitespace: None
          Phrase: "Indent"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 5] (8)"
            IterEnd: "[2, 8] (11)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='two'>"
            Whitespace: None
          Phrase: "Word Token"
      IsComplete: False
    Phrase: "Phrase"
15) EndPhrase, "Newline+" [True], "Phrase" [None]
16) StartPhrase, "Word Token", "Phrase"
17) OnInternalPhraseAsync, 16, 21
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[3, 5] (16)"
      IterEnd: "[3, 10] (21)"
      Token: "Word Token"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(16, 21), match='three'>"
      Whitespace: None
    Phrase: "Word Token"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 4] (3)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 4] (3)"
            IterEnd: "[2, 1] (4)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 4
              Start: 3
            Whitespace: None
          Phrase: "Newline+"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[2, 5] (8)"
            Token: "Indent"
            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
              End: 8
              Start: 4
              Value: 4
            Whitespace: None
          Phrase: "Indent"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 5] (8)"
            IterEnd: "[2, 8] (11)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='two'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 8] (11)"
            IterEnd: "[3, 1] (12)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 12
              Start: 11
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: False
    Phrase: "Phrase"
18) EndPhrase, "Word Token" [True], "Phrase" [None]
19) StartPhrase, "Newline+", "Phrase"
20) OnInternalPhraseAsync, 21, 22
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[3, 10] (21)"
      IterEnd: "[4, 1] (22)"
      Token: "Newline+"
      Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
        End: 22
        Start: 21
      Whitespace: None
    Phrase: "Newline+"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 4] (3)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 4] (3)"
            IterEnd: "[2, 1] (4)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 4
              Start: 3
            Whitespace: None
          Phrase: "Newline+"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[2, 5] (8)"
            Token: "Indent"
            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
              End: 8
              Start: 4
              Value: 4
            Whitespace: None
          Phrase: "Indent"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 5] (8)"
            IterEnd: "[2, 8] (11)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='two'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 8] (11)"
            IterEnd: "[3, 1] (12)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 12
              Start: 11
            Whitespace: None
          Phrase: "Newline+"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 5] (16)"
            IterEnd: "[3, 10] (21)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(16, 21), match='three'>"
            Whitespace: None
          Phrase: "Word Token"
      IsComplete: False
    Phrase: "Phrase"
21) EndPhrase, "Newline+" [True], "Phrase" [None]
22) StartPhrase, "Dedent", "Phrase"
23) OnDedentAsync, 22, 22
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[4, 1] (22)"
      IterEnd: "[4, 1] (22)"
      Token: "Dedent"
      Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
        {}
      Whitespace: None
    Phrase: "Dedent"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 4] (3)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 4] (3)"
            IterEnd: "[2, 1] (4)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 4
              Start: 3
            Whitespace: None
          Phrase: "Newline+"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[2, 5] (8)"
            Token: "Indent"
            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
              End: 8
              Start: 4
              Value: 4
            Whitespace: None
          Phrase: "Indent"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 5] (8)"
            IterEnd: "[2, 8] (11)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='two'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 8] (11)"
            IterEnd: "[3, 1] (12)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 12
              Start: 11
            Whitespace: None
          Phrase: "Newline+"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 5] (16)"
            IterEnd: "[3, 10] (21)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(16, 21), match='three'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 10] (21)"
            IterEnd: "[4, 1] (22)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 22
              Start: 21
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: False
    Phrase: "Phrase"
24) EndPhrase, "Dedent" [True], "Phrase" [None]
25) OnInternalPhraseAsync, 0, 22
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 4] (3)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 4] (3)"
            IterEnd: "[2, 1] (4)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 4
              Start: 3
            Whitespace: None
          Phrase: "Newline+"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[2, 5] (8)"
            Token: "Indent"
            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
              End: 8
              Start: 4
              Value: 4
            Whitespace: None
          Phrase: "Indent"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 5] (8)"
            IterEnd: "[2, 8] (11)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='two'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 8] (11)"
            IterEnd: "[3, 1] (12)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 12
              Start: 11
            Whitespace: None
          Phrase: "Newline+"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 5] (16)"
            IterEnd: "[3, 10] (21)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(16, 21), match='three'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 10] (21)"
            IterEnd: "[4, 1] (22)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 22
              Start: 21
            Whitespace: None
          Phrase: "Newline+"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[4, 1] (22)"
            IterEnd: "[4, 1] (22)"
            Token: "Dedent"
            Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
              {}
            Whitespace: None
          Phrase: "Dedent"
      IsComplete: True
    Phrase: "Phrase"
26) EndPhrase, "Phrase" [True]
