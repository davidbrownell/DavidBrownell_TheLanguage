# <class 'TheLanguage.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[2, 5] (8)"
            Token: "Number Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 8), match='2222'>"
            Whitespace: None
          Phrase: "Number Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 5] (8)"
            IterEnd: "[3, 1] (9)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 9
              Start: 8
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "Sequence: [Number Token, Newline+]"
  Phrase: "Or: (Sequence: [Word Token, Newline+], Sequence: [Number Token, Newline+], Sequence: [Upper Token, Newline+])"
IterBegin: "[2, 1] (4)"
IterEnd: "[3, 1] (9)"
Success: True
