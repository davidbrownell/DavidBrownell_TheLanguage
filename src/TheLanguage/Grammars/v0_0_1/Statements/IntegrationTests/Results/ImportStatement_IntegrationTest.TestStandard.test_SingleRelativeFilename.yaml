# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 5] (4)"
                Type: "'from' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 4), match='from'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 6] (5)"
                IterEnd: "[1, 12] (11)"
                Type: "<dotted_generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(5, 11), match='.File1'>"
                Whitespace:
                  - 4
                  - 5
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 13] (12)"
                IterEnd: "[1, 19] (18)"
                Type: "'import' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(12, 18), match='import'>"
                Whitespace:
                  - 11
                  - 12
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 20] (19)"
                            IterEnd: "[1, 24] (23)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(19, 23), match='obj1'>"
                            Whitespace:
                              - 18
                              - 19
                        IterBegin: "[1, 20] (19)"
                        IterEnd: "[1, 24] (23)"
                        Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 20] (19)"
                    IterEnd: "[1, 24] (23)"
                    Type: "Content Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[1, 20] (19)"
                IterEnd: "[1, 24] (23)"
                Type: "Or: (Grouped, Content Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 24] (23)"
                IterEnd: "[2, 1] (24)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 24
                  Start: 23
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportStatementParserInfo'>
              ImportItems:
                - # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportItemParserInfo'>
                  Alias: None
                  Name: "obj1"
                  Regions: # <class 'types.ImportItemParserInfoRegions'>
                    Alias: None
                    Name: "[Ln 1, Col 20] -> [Ln 1, Col 24]"
                    Self__: "[Ln 1, Col 20] -> [Ln 1, Col 24]"
              ImportType: "ImportType.SourceIsModule"
              Regions: # <class 'types.ImportStatementParserInfoRegions'>
                ImportItems: "[Ln 1, Col 20] -> [Ln 1, Col 24]"
                ImportType: "[Ln 1, Col 1] -> [Ln 2, Col 1]"
                Self__: "[Ln 1, Col 1] -> [Ln 2, Col 1]"
                SourceFilename: "[Ln 1, Col 6] -> [Ln 1, Col 12]"
                Visibility: "[Ln 1, Col 1] -> [Ln 2, Col 1]"
              SourceFilename: ".File1"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (24)"
            Type: "Import Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (24)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (24)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 1] (24)"
                IterEnd: "[2, 5] (28)"
                Type: "'from' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(24, 28), match='from'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 6] (29)"
                IterEnd: "[2, 12] (35)"
                Type: "<dotted_generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(29, 35), match='.File1'>"
                Whitespace:
                  - 28
                  - 29
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 13] (36)"
                IterEnd: "[2, 19] (42)"
                Type: "'import' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(36, 42), match='import'>"
                Whitespace:
                  - 35
                  - 36
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 20] (43)"
                            IterEnd: "[2, 24] (47)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(43, 47), match='obj1'>"
                            Whitespace:
                              - 42
                              - 43
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 25] (48)"
                                    IterEnd: "[2, 27] (50)"
                                    Type: "'as' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(48, 50), match='as'>"
                                    Whitespace:
                                      - 47
                                      - 48
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 28] (51)"
                                    IterEnd: "[2, 41] (64)"
                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(51, 64), match='obj1Decorated'>"
                                    Whitespace:
                                      - 50
                                      - 51
                                IterBegin: "[2, 25] (48)"
                                IterEnd: "[2, 41] (64)"
                                Type: "Suffix <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[2, 25] (48)"
                            IterEnd: "[2, 41] (64)"
                            Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                        IterBegin: "[2, 20] (43)"
                        IterEnd: "[2, 41] (64)"
                        Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[2, 20] (43)"
                    IterEnd: "[2, 41] (64)"
                    Type: "Content Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[2, 20] (43)"
                IterEnd: "[2, 41] (64)"
                Type: "Or: (Grouped, Content Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 41] (64)"
                IterEnd: "[4, 1] (66)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 66
                  Start: 64
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportStatementParserInfo'>
              ImportItems:
                - # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportItemParserInfo'>
                  Alias: "obj1Decorated"
                  Name: "obj1"
                  Regions: # <class 'types.ImportItemParserInfoRegions'>
                    Alias: "[Ln 2, Col 28] -> [Ln 2, Col 41]"
                    Name: "[Ln 2, Col 20] -> [Ln 2, Col 24]"
                    Self__: "[Ln 2, Col 20] -> [Ln 2, Col 41]"
              ImportType: "ImportType.SourceIsModule"
              Regions: # <class 'types.ImportStatementParserInfoRegions'>
                ImportItems: "[Ln 2, Col 20] -> [Ln 2, Col 41]"
                ImportType: "[Ln 2, Col 1] -> [Ln 4, Col 1]"
                Self__: "[Ln 2, Col 1] -> [Ln 4, Col 1]"
                SourceFilename: "[Ln 2, Col 6] -> [Ln 2, Col 12]"
                Visibility: "[Ln 2, Col 1] -> [Ln 4, Col 1]"
              SourceFilename: ".File1"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[2, 1] (24)"
            IterEnd: "[4, 1] (66)"
            Type: "Import Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[2, 1] (24)"
        IterEnd: "[4, 1] (66)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[2, 1] (24)"
    IterEnd: "[4, 1] (66)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 1] (66)"
                IterEnd: "[4, 5] (70)"
                Type: "'from' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(66, 70), match='from'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 6] (71)"
                IterEnd: "[4, 14] (79)"
                Type: "<dotted_generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(71, 79), match='...File2'>"
                Whitespace:
                  - 70
                  - 71
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 15] (80)"
                IterEnd: "[4, 21] (86)"
                Type: "'import' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(80, 86), match='import'>"
                Whitespace:
                  - 79
                  - 80
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 22] (87)"
                            IterEnd: "[4, 26] (91)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(87, 91), match='obj2'>"
                            Whitespace:
                              - 86
                              - 87
                        IterBegin: "[4, 22] (87)"
                        IterEnd: "[4, 26] (91)"
                        Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[4, 22] (87)"
                    IterEnd: "[4, 26] (91)"
                    Type: "Content Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[4, 22] (87)"
                IterEnd: "[4, 26] (91)"
                Type: "Or: (Grouped, Content Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 26] (91)"
                IterEnd: "[5, 1] (92)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 92
                  Start: 91
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportStatementParserInfo'>
              ImportItems:
                - # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportItemParserInfo'>
                  Alias: None
                  Name: "obj2"
                  Regions: # <class 'types.ImportItemParserInfoRegions'>
                    Alias: None
                    Name: "[Ln 4, Col 22] -> [Ln 4, Col 26]"
                    Self__: "[Ln 4, Col 22] -> [Ln 4, Col 26]"
              ImportType: "ImportType.SourceIsModule"
              Regions: # <class 'types.ImportStatementParserInfoRegions'>
                ImportItems: "[Ln 4, Col 22] -> [Ln 4, Col 26]"
                ImportType: "[Ln 4, Col 1] -> [Ln 5, Col 1]"
                Self__: "[Ln 4, Col 1] -> [Ln 5, Col 1]"
                SourceFilename: "[Ln 4, Col 6] -> [Ln 4, Col 14]"
                Visibility: "[Ln 4, Col 1] -> [Ln 5, Col 1]"
              SourceFilename: "...File2"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[4, 1] (66)"
            IterEnd: "[5, 1] (92)"
            Type: "Import Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[4, 1] (66)"
        IterEnd: "[5, 1] (92)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[4, 1] (66)"
    IterEnd: "[5, 1] (92)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 1] (92)"
                IterEnd: "[5, 5] (96)"
                Type: "'from' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(92, 96), match='from'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 6] (97)"
                IterEnd: "[5, 14] (105)"
                Type: "<dotted_generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(97, 105), match='...File2'>"
                Whitespace:
                  - 96
                  - 97
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 15] (106)"
                IterEnd: "[5, 21] (112)"
                Type: "'import' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(106, 112), match='import'>"
                Whitespace:
                  - 105
                  - 106
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[5, 22] (113)"
                            IterEnd: "[5, 26] (117)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(113, 117), match='obj2'>"
                            Whitespace:
                              - 112
                              - 113
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[5, 27] (118)"
                                    IterEnd: "[5, 29] (120)"
                                    Type: "'as' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(118, 120), match='as'>"
                                    Whitespace:
                                      - 117
                                      - 118
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[5, 30] (121)"
                                    IterEnd: "[5, 43] (134)"
                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(121, 134), match='obj2Decorated'>"
                                    Whitespace:
                                      - 120
                                      - 121
                                IterBegin: "[5, 27] (118)"
                                IterEnd: "[5, 43] (134)"
                                Type: "Suffix <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[5, 27] (118)"
                            IterEnd: "[5, 43] (134)"
                            Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                        IterBegin: "[5, 22] (113)"
                        IterEnd: "[5, 43] (134)"
                        Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[5, 22] (113)"
                    IterEnd: "[5, 43] (134)"
                    Type: "Content Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[5, 22] (113)"
                IterEnd: "[5, 43] (134)"
                Type: "Or: (Grouped, Content Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 43] (134)"
                IterEnd: "[7, 1] (136)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 136
                  Start: 134
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportStatementParserInfo'>
              ImportItems:
                - # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportItemParserInfo'>
                  Alias: "obj2Decorated"
                  Name: "obj2"
                  Regions: # <class 'types.ImportItemParserInfoRegions'>
                    Alias: "[Ln 5, Col 30] -> [Ln 5, Col 43]"
                    Name: "[Ln 5, Col 22] -> [Ln 5, Col 26]"
                    Self__: "[Ln 5, Col 22] -> [Ln 5, Col 43]"
              ImportType: "ImportType.SourceIsModule"
              Regions: # <class 'types.ImportStatementParserInfoRegions'>
                ImportItems: "[Ln 5, Col 22] -> [Ln 5, Col 43]"
                ImportType: "[Ln 5, Col 1] -> [Ln 7, Col 1]"
                Self__: "[Ln 5, Col 1] -> [Ln 7, Col 1]"
                SourceFilename: "[Ln 5, Col 6] -> [Ln 5, Col 14]"
                Visibility: "[Ln 5, Col 1] -> [Ln 7, Col 1]"
              SourceFilename: "...File2"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[5, 1] (92)"
            IterEnd: "[7, 1] (136)"
            Type: "Import Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[5, 1] (92)"
        IterEnd: "[7, 1] (136)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[5, 1] (92)"
    IterEnd: "[7, 1] (136)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 1] (136)"
                IterEnd: "[7, 5] (140)"
                Type: "'from' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(136, 140), match='from'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 6] (141)"
                IterEnd: "[7, 19] (154)"
                Type: "<dotted_generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(141, 154), match='...Dir1.File3'>"
                Whitespace:
                  - 140
                  - 141
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 20] (155)"
                IterEnd: "[7, 26] (161)"
                Type: "'import' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(155, 161), match='import'>"
                Whitespace:
                  - 154
                  - 155
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[7, 27] (162)"
                            IterEnd: "[7, 31] (166)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(162, 166), match='obj3'>"
                            Whitespace:
                              - 161
                              - 162
                        IterBegin: "[7, 27] (162)"
                        IterEnd: "[7, 31] (166)"
                        Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[7, 27] (162)"
                    IterEnd: "[7, 31] (166)"
                    Type: "Content Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[7, 27] (162)"
                IterEnd: "[7, 31] (166)"
                Type: "Or: (Grouped, Content Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 31] (166)"
                IterEnd: "[8, 1] (167)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 167
                  Start: 166
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportStatementParserInfo'>
              ImportItems:
                - # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportItemParserInfo'>
                  Alias: None
                  Name: "obj3"
                  Regions: # <class 'types.ImportItemParserInfoRegions'>
                    Alias: None
                    Name: "[Ln 7, Col 27] -> [Ln 7, Col 31]"
                    Self__: "[Ln 7, Col 27] -> [Ln 7, Col 31]"
              ImportType: "ImportType.SourceIsModule"
              Regions: # <class 'types.ImportStatementParserInfoRegions'>
                ImportItems: "[Ln 7, Col 27] -> [Ln 7, Col 31]"
                ImportType: "[Ln 7, Col 1] -> [Ln 8, Col 1]"
                Self__: "[Ln 7, Col 1] -> [Ln 8, Col 1]"
                SourceFilename: "[Ln 7, Col 6] -> [Ln 7, Col 19]"
                Visibility: "[Ln 7, Col 1] -> [Ln 8, Col 1]"
              SourceFilename: "...Dir1.File3"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[7, 1] (136)"
            IterEnd: "[8, 1] (167)"
            Type: "Import Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[7, 1] (136)"
        IterEnd: "[8, 1] (167)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[7, 1] (136)"
    IterEnd: "[8, 1] (167)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 1] (167)"
                IterEnd: "[8, 5] (171)"
                Type: "'from' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(167, 171), match='from'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 6] (172)"
                IterEnd: "[8, 19] (185)"
                Type: "<dotted_generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(172, 185), match='...Dir1.File3'>"
                Whitespace:
                  - 171
                  - 172
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 20] (186)"
                IterEnd: "[8, 26] (192)"
                Type: "'import' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(186, 192), match='import'>"
                Whitespace:
                  - 185
                  - 186
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[8, 27] (193)"
                            IterEnd: "[8, 31] (197)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(193, 197), match='obj3'>"
                            Whitespace:
                              - 192
                              - 193
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[8, 32] (198)"
                                    IterEnd: "[8, 34] (200)"
                                    Type: "'as' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(198, 200), match='as'>"
                                    Whitespace:
                                      - 197
                                      - 198
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[8, 35] (201)"
                                    IterEnd: "[8, 48] (214)"
                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(201, 214), match='obj3Decorated'>"
                                    Whitespace:
                                      - 200
                                      - 201
                                IterBegin: "[8, 32] (198)"
                                IterEnd: "[8, 48] (214)"
                                Type: "Suffix <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[8, 32] (198)"
                            IterEnd: "[8, 48] (214)"
                            Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                        IterBegin: "[8, 27] (193)"
                        IterEnd: "[8, 48] (214)"
                        Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[8, 27] (193)"
                    IterEnd: "[8, 48] (214)"
                    Type: "Content Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[8, 27] (193)"
                IterEnd: "[8, 48] (214)"
                Type: "Or: (Grouped, Content Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 48] (214)"
                IterEnd: "[10, 1] (216)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 216
                  Start: 214
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportStatementParserInfo'>
              ImportItems:
                - # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportItemParserInfo'>
                  Alias: "obj3Decorated"
                  Name: "obj3"
                  Regions: # <class 'types.ImportItemParserInfoRegions'>
                    Alias: "[Ln 8, Col 35] -> [Ln 8, Col 48]"
                    Name: "[Ln 8, Col 27] -> [Ln 8, Col 31]"
                    Self__: "[Ln 8, Col 27] -> [Ln 8, Col 48]"
              ImportType: "ImportType.SourceIsModule"
              Regions: # <class 'types.ImportStatementParserInfoRegions'>
                ImportItems: "[Ln 8, Col 27] -> [Ln 8, Col 48]"
                ImportType: "[Ln 8, Col 1] -> [Ln 10, Col 1]"
                Self__: "[Ln 8, Col 1] -> [Ln 10, Col 1]"
                SourceFilename: "[Ln 8, Col 6] -> [Ln 8, Col 19]"
                Visibility: "[Ln 8, Col 1] -> [Ln 10, Col 1]"
              SourceFilename: "...Dir1.File3"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[8, 1] (167)"
            IterEnd: "[10, 1] (216)"
            Type: "Import Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[8, 1] (167)"
        IterEnd: "[10, 1] (216)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[8, 1] (167)"
    IterEnd: "[10, 1] (216)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[10, 1] (216)"
                IterEnd: "[10, 5] (220)"
                Type: "'from' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(216, 220), match='from'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[10, 6] (221)"
                IterEnd: "[10, 22] (237)"
                Type: "<dotted_generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(221, 237), match='.Dir2.Dir3.File4'>"
                Whitespace:
                  - 220
                  - 221
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[10, 23] (238)"
                IterEnd: "[10, 29] (244)"
                Type: "'import' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(238, 244), match='import'>"
                Whitespace:
                  - 237
                  - 238
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[10, 30] (245)"
                            IterEnd: "[10, 34] (249)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(245, 249), match='obj4'>"
                            Whitespace:
                              - 244
                              - 245
                        IterBegin: "[10, 30] (245)"
                        IterEnd: "[10, 34] (249)"
                        Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[10, 30] (245)"
                    IterEnd: "[10, 34] (249)"
                    Type: "Content Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[10, 30] (245)"
                IterEnd: "[10, 34] (249)"
                Type: "Or: (Grouped, Content Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[10, 34] (249)"
                IterEnd: "[11, 1] (250)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 250
                  Start: 249
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportStatementParserInfo'>
              ImportItems:
                - # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportItemParserInfo'>
                  Alias: None
                  Name: "obj4"
                  Regions: # <class 'types.ImportItemParserInfoRegions'>
                    Alias: None
                    Name: "[Ln 10, Col 30] -> [Ln 10, Col 34]"
                    Self__: "[Ln 10, Col 30] -> [Ln 10, Col 34]"
              ImportType: "ImportType.SourceIsModule"
              Regions: # <class 'types.ImportStatementParserInfoRegions'>
                ImportItems: "[Ln 10, Col 30] -> [Ln 10, Col 34]"
                ImportType: "[Ln 10, Col 1] -> [Ln 11, Col 1]"
                Self__: "[Ln 10, Col 1] -> [Ln 11, Col 1]"
                SourceFilename: "[Ln 10, Col 6] -> [Ln 10, Col 22]"
                Visibility: "[Ln 10, Col 1] -> [Ln 11, Col 1]"
              SourceFilename: ".Dir2.Dir3.File4"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[10, 1] (216)"
            IterEnd: "[11, 1] (250)"
            Type: "Import Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[10, 1] (216)"
        IterEnd: "[11, 1] (250)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[10, 1] (216)"
    IterEnd: "[11, 1] (250)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 1] (250)"
                IterEnd: "[11, 5] (254)"
                Type: "'from' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(250, 254), match='from'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 6] (255)"
                IterEnd: "[11, 22] (271)"
                Type: "<dotted_generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(255, 271), match='.Dir2.Dir3.File4'>"
                Whitespace:
                  - 254
                  - 255
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 23] (272)"
                IterEnd: "[11, 29] (278)"
                Type: "'import' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(272, 278), match='import'>"
                Whitespace:
                  - 271
                  - 272
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[11, 30] (279)"
                            IterEnd: "[11, 34] (283)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(279, 283), match='obj4'>"
                            Whitespace:
                              - 278
                              - 279
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[11, 35] (284)"
                                    IterEnd: "[11, 37] (286)"
                                    Type: "'as' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(284, 286), match='as'>"
                                    Whitespace:
                                      - 283
                                      - 284
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[11, 38] (287)"
                                    IterEnd: "[11, 51] (300)"
                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(287, 300), match='obj4Decorated'>"
                                    Whitespace:
                                      - 286
                                      - 287
                                IterBegin: "[11, 35] (284)"
                                IterEnd: "[11, 51] (300)"
                                Type: "Suffix <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[11, 35] (284)"
                            IterEnd: "[11, 51] (300)"
                            Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                        IterBegin: "[11, 30] (279)"
                        IterEnd: "[11, 51] (300)"
                        Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[11, 30] (279)"
                    IterEnd: "[11, 51] (300)"
                    Type: "Content Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[11, 30] (279)"
                IterEnd: "[11, 51] (300)"
                Type: "Or: (Grouped, Content Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 51] (300)"
                IterEnd: "[12, 1] (301)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 301
                  Start: 300
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportStatementParserInfo'>
              ImportItems:
                - # <class 'TheLanguage.Parser.Statements.ImportStatementParserInfo.ImportItemParserInfo'>
                  Alias: "obj4Decorated"
                  Name: "obj4"
                  Regions: # <class 'types.ImportItemParserInfoRegions'>
                    Alias: "[Ln 11, Col 38] -> [Ln 11, Col 51]"
                    Name: "[Ln 11, Col 30] -> [Ln 11, Col 34]"
                    Self__: "[Ln 11, Col 30] -> [Ln 11, Col 51]"
              ImportType: "ImportType.SourceIsModule"
              Regions: # <class 'types.ImportStatementParserInfoRegions'>
                ImportItems: "[Ln 11, Col 30] -> [Ln 11, Col 51]"
                ImportType: "[Ln 11, Col 1] -> [Ln 12, Col 1]"
                Self__: "[Ln 11, Col 1] -> [Ln 12, Col 1]"
                SourceFilename: "[Ln 11, Col 6] -> [Ln 11, Col 22]"
                Visibility: "[Ln 11, Col 1] -> [Ln 12, Col 1]"
              SourceFilename: ".Dir2.Dir3.File4"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[11, 1] (250)"
            IterEnd: "[12, 1] (301)"
            Type: "Import Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[11, 1] (250)"
        IterEnd: "[12, 1] (301)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[11, 1] (250)"
    IterEnd: "[12, 1] (301)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[12, 1] (301)"
Type: "<None>"
