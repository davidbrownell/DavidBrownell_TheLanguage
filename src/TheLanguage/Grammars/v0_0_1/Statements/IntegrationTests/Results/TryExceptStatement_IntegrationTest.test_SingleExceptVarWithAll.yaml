# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "'try' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 3), match='try'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 4] (3)"
                    IterEnd: "[1, 5] (4)"
                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(3, 4), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 5] (4)"
                            IterEnd: "[2, 1] (5)"
                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                              End: 5
                              Start: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 1] (5)"
                            IterEnd: "[2, 5] (9)"
                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                              End: 9
                              Start: 5
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 5] (9)"
                                            IterEnd: "[2, 11] (15)"
                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(9, 15), match='Func1a'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 11] (15)"
                                                IterEnd: "[2, 12] (16)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(15, 16), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 12] (16)"
                                                IterEnd: "[2, 13] (17)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(16, 17), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[2, 11] (15)"
                                            IterEnd: "[2, 13] (17)"
                                            Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 13] (17)"
                                            IterEnd: "[3, 1] (18)"
                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                              End: 18
                                              Start: 17
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                          Data: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerData'>
                                            Arguments: None
                                            Name: "Func1a"
                                          Regions: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerRegions'>
                                            Arguments: None
                                            Name: "[Ln 2, Col 5] -> [Ln 2, Col 11]"
                                            Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                                        IterBegin: "[2, 5] (9)"
                                        IterEnd: "[3, 1] (18)"
                                        Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[2, 5] (9)"
                                    IterEnd: "[3, 1] (18)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 5] (9)"
                                IterEnd: "[3, 1] (18)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[2, 5] (9)"
                            IterEnd: "[3, 1] (18)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 1] (18)"
                            IterEnd: "[3, 1] (18)"
                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[1, 5] (4)"
                        IterEnd: "[3, 1] (18)"
                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 5] (4)"
                    IterEnd: "[3, 1] (18)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 4] (3)"
                IterEnd: "[3, 1] (18)"
                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[3, 1] (18)"
                        IterEnd: "[3, 7] (24)"
                        Type: "'except' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(18, 24), match='except'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[3, 8] (25)"
                                    IterEnd: "[3, 17] (34)"
                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(25, 34), match='Exception'>"
                                    Whitespace:
                                      - 24
                                      - 25
                                Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                  Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                    Modifier: None
                                    TypeName: "Exception"
                                  Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                    Modifier: None
                                    Self__: "[Ln 3, Col 8] -> [Ln 3, Col 17]"
                                    TypeName: "[Ln 3, Col 8] -> [Ln 3, Col 17]"
                                IterBegin: "[3, 8] (25)"
                                IterEnd: "[3, 17] (34)"
                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[3, 8] (25)"
                            IterEnd: "[3, 17] (34)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[3, 8] (25)"
                        IterEnd: "[3, 17] (34)"
                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[3, 18] (35)"
                                    IterEnd: "[3, 20] (37)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(35, 37), match='ex'>"
                                    Whitespace:
                                      - 34
                                      - 35
                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                  Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                    Name: "ex"
                                  Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                    Name: "[Ln 3, Col 18] -> [Ln 3, Col 20]"
                                    Self__: "[Ln 3, Col 18] -> [Ln 3, Col 20]"
                                IterBegin: "[3, 18] (35)"
                                IterEnd: "[3, 20] (37)"
                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[3, 18] (35)"
                            IterEnd: "[3, 20] (37)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[3, 18] (35)"
                        IterEnd: "[3, 20] (37)"
                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 20] (37)"
                            IterEnd: "[3, 21] (38)"
                            Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(37, 38), match=':'>"
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[3, 21] (38)"
                                    IterEnd: "[4, 1] (39)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 39
                                      Start: 38
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 1] (39)"
                                    IterEnd: "[4, 5] (43)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 43
                                      Start: 39
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[4, 5] (43)"
                                                    IterEnd: "[4, 11] (49)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(43, 49), match='Func2a'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 11] (49)"
                                                        IterEnd: "[4, 12] (50)"
                                                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(49, 50), match='('>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 12] (50)"
                                                        IterEnd: "[4, 13] (51)"
                                                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(50, 51), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[4, 11] (49)"
                                                    IterEnd: "[4, 13] (51)"
                                                    Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[4, 13] (51)"
                                                    IterEnd: "[5, 1] (52)"
                                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                      End: 52
                                                      Start: 51
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerData'>
                                                    Arguments: None
                                                    Name: "Func2a"
                                                  Regions: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerRegions'>
                                                    Arguments: None
                                                    Name: "[Ln 4, Col 5] -> [Ln 4, Col 11]"
                                                    Self__: "[Ln 4, Col 5] -> [Ln 5, Col 1]"
                                                IterBegin: "[4, 5] (43)"
                                                IterEnd: "[5, 1] (52)"
                                                Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[4, 5] (43)"
                                            IterEnd: "[5, 1] (52)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[4, 5] (43)"
                                        IterEnd: "[5, 1] (52)"
                                        Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[4, 5] (43)"
                                    IterEnd: "[5, 1] (52)"
                                    Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[5, 1] (52)"
                                    IterEnd: "[5, 1] (52)"
                                    Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                IterBegin: "[3, 21] (38)"
                                IterEnd: "[5, 1] (52)"
                                Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[3, 21] (38)"
                            IterEnd: "[5, 1] (52)"
                            Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[3, 20] (37)"
                        IterEnd: "[5, 1] (52)"
                        Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[3, 1] (18)"
                    IterEnd: "[5, 1] (52)"
                    Type: "Except Var <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[3, 1] (18)"
                IterEnd: "[5, 1] (52)"
                Type: "Repeat: {Except Var, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[5, 1] (52)"
                        IterEnd: "[5, 7] (58)"
                        Type: "'except' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(52, 58), match='except'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[5, 7] (58)"
                            IterEnd: "[5, 8] (59)"
                            Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(58, 59), match=':'>"
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[5, 8] (59)"
                                    IterEnd: "[6, 1] (60)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 60
                                      Start: 59
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[6, 1] (60)"
                                    IterEnd: "[6, 5] (64)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 64
                                      Start: 60
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[6, 5] (64)"
                                                    IterEnd: "[6, 11] (70)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(64, 70), match='Func3a'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[6, 11] (70)"
                                                        IterEnd: "[6, 12] (71)"
                                                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(70, 71), match='('>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[6, 12] (71)"
                                                        IterEnd: "[6, 13] (72)"
                                                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(71, 72), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[6, 11] (70)"
                                                    IterEnd: "[6, 13] (72)"
                                                    Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[6, 13] (72)"
                                                    IterEnd: "[7, 1] (73)"
                                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                      End: 73
                                                      Start: 72
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerData'>
                                                    Arguments: None
                                                    Name: "Func3a"
                                                  Regions: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerRegions'>
                                                    Arguments: None
                                                    Name: "[Ln 6, Col 5] -> [Ln 6, Col 11]"
                                                    Self__: "[Ln 6, Col 5] -> [Ln 7, Col 1]"
                                                IterBegin: "[6, 5] (64)"
                                                IterEnd: "[7, 1] (73)"
                                                Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[6, 5] (64)"
                                            IterEnd: "[7, 1] (73)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[6, 5] (64)"
                                        IterEnd: "[7, 1] (73)"
                                        Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[6, 5] (64)"
                                    IterEnd: "[7, 1] (73)"
                                    Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[7, 1] (73)"
                                    IterEnd: "[7, 1] (73)"
                                    Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                IterBegin: "[5, 8] (59)"
                                IterEnd: "[7, 1] (73)"
                                Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[5, 8] (59)"
                            IterEnd: "[7, 1] (73)"
                            Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[5, 7] (58)"
                        IterEnd: "[7, 1] (73)"
                        Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[5, 1] (52)"
                    IterEnd: "[7, 1] (73)"
                    Type: "Except <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[5, 1] (52)"
                IterEnd: "[7, 1] (73)"
                Type: "Repeat: {Except, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[7, 1] (73)"
            Type: "Try Except Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[7, 1] (73)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[7, 1] (73)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[7, 1] (73)"
Type: "<None>"
