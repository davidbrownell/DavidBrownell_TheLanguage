0) OnPhraseComplete, Upper, 0, 3
    # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: false
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 1] (0)"
      end: "[1, 4] (3)"
    type: "Upper <class 'v1.Lexer.Components.Tokens.RegexToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
      match: "<_sre.SRE_Match object; span=(0, 3), match='ONE'>"
1) OnPhraseComplete, Newline+, 3, 4
    # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: false
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 4] (3)"
      end: "[2, 1] (4)"
    type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
        begin: 3
        end: 4
2) OnPhraseComplete, Upper Phrase, 0, 4
    # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Leaf'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 1] (0)"
          end: "[1, 4] (3)"
        type: "Upper <class 'v1.Lexer.Components.Tokens.RegexToken'>"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(0, 3), match='ONE'>"
      - # <class 'v1.Lexer.Components.AST.Leaf'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 4] (3)"
          end: "[2, 1] (4)"
        type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
        value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
          range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
            begin: 3
            end: 4
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 1] (0)"
      end: "[2, 1] (4)"
    type: "Upper Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
3) OnPhraseComplete, (Upper Phrase | Lower Phrase | Number Phrase), 0, 4
    # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 1] (0)"
              end: "[1, 4] (3)"
            type: "Upper <class 'v1.Lexer.Components.Tokens.RegexToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(0, 3), match='ONE'>"
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 4] (3)"
              end: "[2, 1] (4)"
            type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 3
                end: 4
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 1] (0)"
          end: "[2, 1] (4)"
        type: "Upper Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 1] (0)"
      end: "[2, 1] (4)"
    type: "(Upper Phrase | Lower Phrase | Number Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
4) OnPhraseComplete, DynamicPhrasesType.Statements, 0, 4
    # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Node'>
            children:
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 1] (0)"
                  end: "[1, 4] (3)"
                type: "Upper <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(0, 3), match='ONE'>"
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 4] (3)"
                  end: "[2, 1] (4)"
                type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                    begin: 3
                    end: 4
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 1] (0)"
              end: "[2, 1] (4)"
            type: "Upper Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 1] (0)"
          end: "[2, 1] (4)"
        type: "(Upper Phrase | Lower Phrase | Number Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 1] (0)"
      end: "[2, 1] (4)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
5) OnPhraseComplete, Lower, 4, 7
    # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: false
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 1] (4)"
      end: "[2, 4] (7)"
    type: "Lower <class 'v1.Lexer.Components.Tokens.RegexToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
      match: "<_sre.SRE_Match object; span=(4, 7), match='two'>"
6) OnPhraseComplete, Newline+, 7, 8
    # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: false
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 4] (7)"
      end: "[3, 1] (8)"
    type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
        begin: 7
        end: 8
7) OnPhraseComplete, Lower Phrase, 4, 8
    # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Leaf'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[2, 1] (4)"
          end: "[2, 4] (7)"
        type: "Lower <class 'v1.Lexer.Components.Tokens.RegexToken'>"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(4, 7), match='two'>"
      - # <class 'v1.Lexer.Components.AST.Leaf'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[2, 4] (7)"
          end: "[3, 1] (8)"
        type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
        value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
          range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
            begin: 7
            end: 8
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 1] (4)"
      end: "[3, 1] (8)"
    type: "Lower Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
8) OnPhraseComplete, (Upper Phrase | Lower Phrase | Number Phrase), 4, 8
    # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[2, 1] (4)"
              end: "[2, 4] (7)"
            type: "Lower <class 'v1.Lexer.Components.Tokens.RegexToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(4, 7), match='two'>"
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[2, 4] (7)"
              end: "[3, 1] (8)"
            type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 7
                end: 8
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[2, 1] (4)"
          end: "[3, 1] (8)"
        type: "Lower Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 1] (4)"
      end: "[3, 1] (8)"
    type: "(Upper Phrase | Lower Phrase | Number Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
9) OnPhraseComplete, DynamicPhrasesType.Statements, 4, 8
    # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Node'>
            children:
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[2, 1] (4)"
                  end: "[2, 4] (7)"
                type: "Lower <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(4, 7), match='two'>"
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[2, 4] (7)"
                  end: "[3, 1] (8)"
                type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                    begin: 7
                    end: 8
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[2, 1] (4)"
              end: "[3, 1] (8)"
            type: "Lower Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[2, 1] (4)"
          end: "[3, 1] (8)"
        type: "(Upper Phrase | Lower Phrase | Number Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 1] (4)"
      end: "[3, 1] (8)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
10) OnPhraseComplete, Number, 8, 13
    # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: false
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[3, 1] (8)"
      end: "[3, 6] (13)"
    type: "Number <class 'v1.Lexer.Components.Tokens.RegexToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
      match: "<_sre.SRE_Match object; span=(8, 13), match='33333'>"
11) OnPhraseComplete, Newline+, 13, 14
    # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: false
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[3, 6] (13)"
      end: "[4, 1] (14)"
    type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
        begin: 13
        end: 14
12) OnPhraseComplete, Number Phrase, 8, 14
    # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Leaf'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[3, 1] (8)"
          end: "[3, 6] (13)"
        type: "Number <class 'v1.Lexer.Components.Tokens.RegexToken'>"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(8, 13), match='33333'>"
      - # <class 'v1.Lexer.Components.AST.Leaf'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[3, 6] (13)"
          end: "[4, 1] (14)"
        type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
        value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
          range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
            begin: 13
            end: 14
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[3, 1] (8)"
      end: "[4, 1] (14)"
    type: "Number Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
13) OnPhraseComplete, (Upper Phrase | Lower Phrase | Number Phrase), 8, 14
    # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[3, 1] (8)"
              end: "[3, 6] (13)"
            type: "Number <class 'v1.Lexer.Components.Tokens.RegexToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(8, 13), match='33333'>"
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[3, 6] (13)"
              end: "[4, 1] (14)"
            type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 13
                end: 14
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[3, 1] (8)"
          end: "[4, 1] (14)"
        type: "Number Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[3, 1] (8)"
      end: "[4, 1] (14)"
    type: "(Upper Phrase | Lower Phrase | Number Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
14) OnPhraseComplete, DynamicPhrasesType.Statements, 8, 14
    # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Node'>
            children:
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[3, 1] (8)"
                  end: "[3, 6] (13)"
                type: "Number <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(8, 13), match='33333'>"
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[3, 6] (13)"
                  end: "[4, 1] (14)"
                type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                    begin: 13
                    end: 14
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[3, 1] (8)"
              end: "[4, 1] (14)"
            type: "Number Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[3, 1] (8)"
          end: "[4, 1] (14)"
        type: "(Upper Phrase | Lower Phrase | Number Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[3, 1] (8)"
      end: "[4, 1] (14)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
