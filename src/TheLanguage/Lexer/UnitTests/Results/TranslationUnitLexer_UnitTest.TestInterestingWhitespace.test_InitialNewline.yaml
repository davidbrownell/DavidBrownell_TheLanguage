# <class 'TheLanguage.Lexer.Components.AST.Node'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
    IsIgnored: True
    IterBegin: "[1, 1] (0)"
    IterEnd: "[4, 1] (3)"
    Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
    Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
      End: 3
      Start: 0
    Whitespace: None
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[4, 1] (3)"
                    IterEnd: "[4, 4] (6)"
                    Type: "Lower <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(3, 6), match='one'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[4, 4] (6)"
                    IterEnd: "[9, 1] (11)"
                    Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                      End: 11
                      Start: 6
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[4, 1] (3)"
                IterEnd: "[9, 1] (11)"
                Type: "[Lower, Newline+] <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[9, 1] (11)"
                    IterEnd: "[9, 4] (14)"
                    Type: "Lower <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 14), match='two'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[9, 4] (14)"
                    IterEnd: "[10, 1] (15)"
                    Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                      End: 15
                      Start: 14
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[9, 1] (11)"
                IterEnd: "[10, 1] (15)"
                Type: "[Lower, Newline+] <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[10, 1] (15)"
                    IterEnd: "[10, 6] (20)"
                    Type: "Lower <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(15, 20), match='three'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[10, 6] (20)"
                    IterEnd: "[11, 1] (21)"
                    Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                      End: 21
                      Start: 20
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[10, 1] (15)"
                IterEnd: "[11, 1] (21)"
                Type: "[Lower, Newline+] <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            IsIgnored: False
            IterBegin: "[4, 1] (3)"
            IterEnd: "[11, 1] (21)"
            Type: "Phrase <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
        IsIgnored: False
        IterBegin: "[4, 1] (3)"
        IterEnd: "[11, 1] (21)"
        Type: "(Phrase) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[4, 1] (3)"
    IterEnd: "[11, 1] (21)"
    Type: "Dynamic Phrase <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[4, 1] (3)"
IterEnd: "[11, 1] (21)"
Type: "<None>"
