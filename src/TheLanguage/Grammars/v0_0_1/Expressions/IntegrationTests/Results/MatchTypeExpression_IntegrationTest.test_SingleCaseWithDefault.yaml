# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 7] (6)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 6), match='value1'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Name: "value1"
                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                            Name: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 7] (6)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 7] (6)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 7] (6)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 8] (7)"
                IterEnd: "[1, 9] (8)"
                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(7, 8), match='='>"
                Whitespace:
                  - 6
                  - 7
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 10] (9)"
                                    IterEnd: "[1, 11] (10)"
                                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(9, 10), match='('>"
                                    Whitespace:
                                      - 8
                                      - 9
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 11] (10)"
                                        IterEnd: "[1, 16] (15)"
                                        Type: "'match' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(10, 15), match='match'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 17] (16)"
                                        IterEnd: "[1, 21] (20)"
                                        Type: "'type' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(16, 20), match='type'>"
                                        Whitespace:
                                          - 15
                                          - 16
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 22] (21)"
                                                            IterEnd: "[1, 27] (26)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(21, 26), match='expr1'>"
                                                            Whitespace:
                                                              - 20
                                                              - 21
                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                          Name: "expr1"
                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                            Name: "[Ln 1, Col 22] -> [Ln 1, Col 27]"
                                                            Self__: "[Ln 1, Col 22] -> [Ln 1, Col 27]"
                                                        IterBegin: "[1, 22] (21)"
                                                        IterEnd: "[1, 27] (26)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[1, 22] (21)"
                                                    IterEnd: "[1, 27] (26)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                    Name: "expr1"
                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                      Name: "[Ln 1, Col 22] -> [Ln 1, Col 27]"
                                                      Self__: "[Ln 1, Col 22] -> [Ln 1, Col 27]"
                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                    Name: "[Ln 1, Col 22] -> [Ln 1, Col 27]"
                                                    Self__: "[Ln 1, Col 22] -> [Ln 1, Col 27]"
                                                IterBegin: "[1, 22] (21)"
                                                IterEnd: "[1, 27] (26)"
                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[1, 22] (21)"
                                            IterEnd: "[1, 27] (26)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[1, 22] (21)"
                                        IterEnd: "[1, 27] (26)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 27] (26)"
                                        IterEnd: "[1, 28] (27)"
                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(26, 27), match=':'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 28] (27)"
                                        IterEnd: "[2, 1] (28)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 28
                                          Start: 27
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 1] (28)"
                                        IterEnd: "[2, 5] (32)"
                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                          End: 32
                                          Start: 28
                                          Value: 4
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 5] (32)"
                                                IterEnd: "[2, 9] (36)"
                                                Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(32, 36), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[2, 10] (37)"
                                                                    IterEnd: "[2, 14] (41)"
                                                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(37, 41), match='Int1'>"
                                                                    Whitespace:
                                                                      - 36
                                                                      - 37
                                                                Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                                  Modifier: None
                                                                  Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                                                    Modifier: None
                                                                    Self__: "[Ln 2, Col 10] -> [Ln 2, Col 14]"
                                                                    TypeName: "[Ln 2, Col 10] -> [Ln 2, Col 14]"
                                                                  TypeName: "Int1"
                                                                IterBegin: "[2, 10] (37)"
                                                                IterEnd: "[2, 14] (41)"
                                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[2, 10] (37)"
                                                            IterEnd: "[2, 14] (41)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[2, 10] (37)"
                                                        IterEnd: "[2, 14] (41)"
                                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[2, 10] (37)"
                                                    IterEnd: "[2, 14] (41)"
                                                    Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[2, 10] (37)"
                                                IterEnd: "[2, 14] (41)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 14] (41)"
                                                IterEnd: "[2, 15] (42)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(41, 42), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[2, 16] (43)"
                                                                            IterEnd: "[2, 23] (50)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(43, 50), match='value1a'>"
                                                                            Whitespace:
                                                                              - 42
                                                                              - 43
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value1a"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
                                                                            Self__: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
                                                                        IterBegin: "[2, 16] (43)"
                                                                        IterEnd: "[2, 23] (50)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[2, 16] (43)"
                                                                    IterEnd: "[2, 23] (50)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "value1a"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
                                                                      Self__: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
                                                                    Self__: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
                                                                IterBegin: "[2, 16] (43)"
                                                                IterEnd: "[2, 23] (50)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[2, 16] (43)"
                                                            IterEnd: "[2, 23] (50)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[2, 16] (43)"
                                                        IterEnd: "[2, 23] (50)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[2, 23] (50)"
                                                        IterEnd: "[3, 1] (51)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 51
                                                          Start: 50
                                                        Whitespace: None
                                                    IterBegin: "[2, 16] (43)"
                                                    IterEnd: "[3, 1] (51)"
                                                    Type: "Single Line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[2, 16] (43)"
                                                IterEnd: "[3, 1] (51)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[2, 5] (32)"
                                            IterEnd: "[3, 1] (51)"
                                            Type: "Case Phrase <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[2, 5] (32)"
                                        IterEnd: "[3, 1] (51)"
                                        Type: "Repeat: {Case Phrase, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 5] (55)"
                                                IterEnd: "[3, 12] (62)"
                                                Type: "'default' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(55, 62), match='default'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 12] (62)"
                                                IterEnd: "[3, 13] (63)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(62, 63), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 14] (64)"
                                                                            IterEnd: "[3, 21] (71)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(64, 71), match='value1b'>"
                                                                            Whitespace:
                                                                              - 63
                                                                              - 64
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value1b"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 3, Col 14] -> [Ln 3, Col 21]"
                                                                            Self__: "[Ln 3, Col 14] -> [Ln 3, Col 21]"
                                                                        IterBegin: "[3, 14] (64)"
                                                                        IterEnd: "[3, 21] (71)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 14] (64)"
                                                                    IterEnd: "[3, 21] (71)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "value1b"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 3, Col 14] -> [Ln 3, Col 21]"
                                                                      Self__: "[Ln 3, Col 14] -> [Ln 3, Col 21]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 3, Col 14] -> [Ln 3, Col 21]"
                                                                    Self__: "[Ln 3, Col 14] -> [Ln 3, Col 21]"
                                                                IterBegin: "[3, 14] (64)"
                                                                IterEnd: "[3, 21] (71)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 14] (64)"
                                                            IterEnd: "[3, 21] (71)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 14] (64)"
                                                        IterEnd: "[3, 21] (71)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[3, 21] (71)"
                                                        IterEnd: "[4, 1] (72)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 72
                                                          Start: 71
                                                        Whitespace: None
                                                    IterBegin: "[3, 14] (64)"
                                                    IterEnd: "[4, 1] (72)"
                                                    Type: "Single Line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 14] (64)"
                                                IterEnd: "[4, 1] (72)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 5] (55)"
                                            IterEnd: "[4, 1] (72)"
                                            Type: "Default <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[3, 5] (55)"
                                        IterEnd: "[4, 1] (72)"
                                        Type: "Repeat: {Default, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[4, 1] (72)"
                                        IterEnd: "[4, 1] (72)"
                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                          {}
                                        Whitespace: None
                                    IterBegin: "[1, 11] (10)"
                                    IterEnd: "[4, 1] (72)"
                                    Type: "Match <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 1] (72)"
                                    IterEnd: "[4, 2] (73)"
                                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(72, 73), match=')'>"
                                    Whitespace: None
                                IterBegin: "[1, 10] (9)"
                                IterEnd: "[4, 2] (73)"
                                Type: "K&R-like <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 10] (9)"
                            IterEnd: "[4, 2] (73)"
                            Type: "Style <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.Expressions.MatchTypeExpressionLexerInfo.MatchTypeExpressionLexerInfo'>
                          CasePhrases:
                            - # <class 'TheLanguage.Lexer.Expressions.MatchTypeExpressionLexerInfo.MatchTypeCasePhraseLexerInfo'>
                              Cases:
                                - # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                  Modifier: None
                                  Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                    Modifier: None
                                    Self__: "[Ln 2, Col 10] -> [Ln 2, Col 14]"
                                    TypeName: "[Ln 2, Col 10] -> [Ln 2, Col 14]"
                                  TypeName: "Int1"
                              Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                  Name: "value1a"
                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                    Name: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
                                    Self__: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
                                Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                  Name: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
                                  Self__: "[Ln 2, Col 16] -> [Ln 2, Col 23]"
                              Regions: # <class 'types.MatchTypeCasePhraseLexerInfoRegions'>
                                Cases: "[Ln 2, Col 10] -> [Ln 2, Col 14]"
                                Expression: "[Ln 2, Col 16] -> [Ln 3, Col 1]"
                                Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                          Default: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                              Name: "value1b"
                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                Name: "[Ln 3, Col 14] -> [Ln 3, Col 21]"
                                Self__: "[Ln 3, Col 14] -> [Ln 3, Col 21]"
                            Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                              Name: "[Ln 3, Col 14] -> [Ln 3, Col 21]"
                              Self__: "[Ln 3, Col 14] -> [Ln 3, Col 21]"
                          Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                              Name: "expr1"
                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                Name: "[Ln 1, Col 22] -> [Ln 1, Col 27]"
                                Self__: "[Ln 1, Col 22] -> [Ln 1, Col 27]"
                            Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                              Name: "[Ln 1, Col 22] -> [Ln 1, Col 27]"
                              Self__: "[Ln 1, Col 22] -> [Ln 1, Col 27]"
                          Regions: # <class 'types.MatchTypeExpressionLexerInfoRegions'>
                            CasePhrases: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                            Default: "[Ln 3, Col 14] -> [Ln 4, Col 1]"
                            Expression: "[Ln 1, Col 22] -> [Ln 1, Col 27]"
                            Self__: "[Ln 1, Col 10] -> [Ln 4, Col 2]"
                        IterBegin: "[1, 10] (9)"
                        IterEnd: "[4, 2] (73)"
                        Type: "Match Type Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 10] (9)"
                    IterEnd: "[4, 2] (73)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 10] (9)"
                IterEnd: "[4, 2] (73)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 2] (73)"
                IterEnd: "[6, 1] (75)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 75
                  Start: 73
                Whitespace: None
            IterBegin: "[1, 1] (0)"
            IterEnd: "[6, 1] (75)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[6, 1] (75)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[6, 1] (75)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[6, 1] (75)"
                            IterEnd: "[6, 7] (81)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(75, 81), match='value2'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Name: "value2"
                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                            Name: "[Ln 6, Col 1] -> [Ln 6, Col 7]"
                            Self__: "[Ln 6, Col 1] -> [Ln 6, Col 7]"
                        IterBegin: "[6, 1] (75)"
                        IterEnd: "[6, 7] (81)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[6, 1] (75)"
                    IterEnd: "[6, 7] (81)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[6, 1] (75)"
                IterEnd: "[6, 7] (81)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[6, 8] (82)"
                IterEnd: "[6, 9] (83)"
                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(82, 83), match='='>"
                Whitespace:
                  - 81
                  - 82
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[6, 10] (84)"
                                    IterEnd: "[6, 11] (85)"
                                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(84, 85), match='('>"
                                    Whitespace:
                                      - 83
                                      - 84
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[6, 11] (85)"
                                    IterEnd: "[7, 1] (86)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 86
                                      Start: 85
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[7, 1] (86)"
                                    IterEnd: "[7, 5] (90)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 90
                                      Start: 86
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[7, 5] (90)"
                                        IterEnd: "[7, 10] (95)"
                                        Type: "'match' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(90, 95), match='match'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[7, 11] (96)"
                                        IterEnd: "[7, 15] (100)"
                                        Type: "'type' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(96, 100), match='type'>"
                                        Whitespace:
                                          - 95
                                          - 96
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[7, 16] (101)"
                                                            IterEnd: "[7, 21] (106)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(101, 106), match='expr2'>"
                                                            Whitespace:
                                                              - 100
                                                              - 101
                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                          Name: "expr2"
                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                            Name: "[Ln 7, Col 16] -> [Ln 7, Col 21]"
                                                            Self__: "[Ln 7, Col 16] -> [Ln 7, Col 21]"
                                                        IterBegin: "[7, 16] (101)"
                                                        IterEnd: "[7, 21] (106)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[7, 16] (101)"
                                                    IterEnd: "[7, 21] (106)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                    Name: "expr2"
                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                      Name: "[Ln 7, Col 16] -> [Ln 7, Col 21]"
                                                      Self__: "[Ln 7, Col 16] -> [Ln 7, Col 21]"
                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                    Name: "[Ln 7, Col 16] -> [Ln 7, Col 21]"
                                                    Self__: "[Ln 7, Col 16] -> [Ln 7, Col 21]"
                                                IterBegin: "[7, 16] (101)"
                                                IterEnd: "[7, 21] (106)"
                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[7, 16] (101)"
                                            IterEnd: "[7, 21] (106)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[7, 16] (101)"
                                        IterEnd: "[7, 21] (106)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[7, 21] (106)"
                                        IterEnd: "[7, 22] (107)"
                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(106, 107), match=':'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[7, 22] (107)"
                                        IterEnd: "[8, 1] (108)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 108
                                          Start: 107
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[8, 1] (108)"
                                        IterEnd: "[8, 9] (116)"
                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                          End: 116
                                          Start: 108
                                          Value: 8
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[8, 9] (116)"
                                                IterEnd: "[8, 13] (120)"
                                                Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(116, 120), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[8, 14] (121)"
                                                                    IterEnd: "[8, 18] (125)"
                                                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(121, 125), match='Int2'>"
                                                                    Whitespace:
                                                                      - 120
                                                                      - 121
                                                                Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                                  Modifier: None
                                                                  Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                                                    Modifier: None
                                                                    Self__: "[Ln 8, Col 14] -> [Ln 8, Col 18]"
                                                                    TypeName: "[Ln 8, Col 14] -> [Ln 8, Col 18]"
                                                                  TypeName: "Int2"
                                                                IterBegin: "[8, 14] (121)"
                                                                IterEnd: "[8, 18] (125)"
                                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[8, 14] (121)"
                                                            IterEnd: "[8, 18] (125)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[8, 14] (121)"
                                                        IterEnd: "[8, 18] (125)"
                                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[8, 14] (121)"
                                                    IterEnd: "[8, 18] (125)"
                                                    Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[8, 14] (121)"
                                                IterEnd: "[8, 18] (125)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[8, 18] (125)"
                                                IterEnd: "[8, 19] (126)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(125, 126), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[8, 19] (126)"
                                                        IterEnd: "[9, 1] (127)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 127
                                                          Start: 126
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[9, 1] (127)"
                                                        IterEnd: "[9, 13] (139)"
                                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                          End: 139
                                                          Start: 127
                                                          Value: 12
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[9, 13] (139)"
                                                                            IterEnd: "[9, 20] (146)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(139, 146), match='value2a'>"
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value2a"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 9, Col 13] -> [Ln 9, Col 20]"
                                                                            Self__: "[Ln 9, Col 13] -> [Ln 9, Col 20]"
                                                                        IterBegin: "[9, 13] (139)"
                                                                        IterEnd: "[9, 20] (146)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[9, 13] (139)"
                                                                    IterEnd: "[9, 20] (146)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "value2a"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 9, Col 13] -> [Ln 9, Col 20]"
                                                                      Self__: "[Ln 9, Col 13] -> [Ln 9, Col 20]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 9, Col 13] -> [Ln 9, Col 20]"
                                                                    Self__: "[Ln 9, Col 13] -> [Ln 9, Col 20]"
                                                                IterBegin: "[9, 13] (139)"
                                                                IterEnd: "[9, 20] (146)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[9, 13] (139)"
                                                            IterEnd: "[9, 20] (146)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[9, 13] (139)"
                                                        IterEnd: "[9, 20] (146)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[9, 20] (146)"
                                                        IterEnd: "[10, 1] (147)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 147
                                                          Start: 146
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[10, 1] (147)"
                                                        IterEnd: "[10, 9] (155)"
                                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                          {}
                                                        Whitespace: None
                                                    IterBegin: "[8, 19] (126)"
                                                    IterEnd: "[10, 9] (155)"
                                                    Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[8, 19] (126)"
                                                IterEnd: "[10, 9] (155)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[8, 9] (116)"
                                            IterEnd: "[10, 9] (155)"
                                            Type: "Case Phrase <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[8, 9] (116)"
                                        IterEnd: "[10, 9] (155)"
                                        Type: "Repeat: {Case Phrase, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[10, 9] (155)"
                                                IterEnd: "[10, 16] (162)"
                                                Type: "'default' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(155, 162), match='default'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[10, 16] (162)"
                                                IterEnd: "[10, 17] (163)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(162, 163), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[10, 17] (163)"
                                                        IterEnd: "[11, 1] (164)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 164
                                                          Start: 163
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[11, 1] (164)"
                                                        IterEnd: "[11, 13] (176)"
                                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                          End: 176
                                                          Start: 164
                                                          Value: 12
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[11, 13] (176)"
                                                                            IterEnd: "[11, 20] (183)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(176, 183), match='value2b'>"
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value2b"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                            Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                        IterBegin: "[11, 13] (176)"
                                                                        IterEnd: "[11, 20] (183)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[11, 13] (176)"
                                                                    IterEnd: "[11, 20] (183)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "value2b"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                      Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                    Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                IterBegin: "[11, 13] (176)"
                                                                IterEnd: "[11, 20] (183)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[11, 13] (176)"
                                                            IterEnd: "[11, 20] (183)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[11, 13] (176)"
                                                        IterEnd: "[11, 20] (183)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[11, 20] (183)"
                                                        IterEnd: "[12, 1] (184)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 184
                                                          Start: 183
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[12, 1] (184)"
                                                        IterEnd: "[12, 1] (184)"
                                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                          {}
                                                        Whitespace: None
                                                    IterBegin: "[10, 17] (163)"
                                                    IterEnd: "[12, 1] (184)"
                                                    Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[10, 17] (163)"
                                                IterEnd: "[12, 1] (184)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[10, 9] (155)"
                                            IterEnd: "[12, 1] (184)"
                                            Type: "Default <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[10, 9] (155)"
                                        IterEnd: "[12, 1] (184)"
                                        Type: "Repeat: {Default, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[12, 1] (184)"
                                        IterEnd: "[12, 1] (184)"
                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                          {}
                                        Whitespace: None
                                    IterBegin: "[7, 5] (90)"
                                    IterEnd: "[12, 1] (184)"
                                    Type: "Match <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[12, 1] (184)"
                                    IterEnd: "[12, 1] (184)"
                                    Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[12, 1] (184)"
                                    IterEnd: "[12, 2] (185)"
                                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(184, 185), match=')'>"
                                    Whitespace: None
                                IterBegin: "[6, 10] (84)"
                                IterEnd: "[12, 2] (185)"
                                Type: "Allman-like <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[6, 10] (84)"
                            IterEnd: "[12, 2] (185)"
                            Type: "Style <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.Expressions.MatchTypeExpressionLexerInfo.MatchTypeExpressionLexerInfo'>
                          CasePhrases:
                            - # <class 'TheLanguage.Lexer.Expressions.MatchTypeExpressionLexerInfo.MatchTypeCasePhraseLexerInfo'>
                              Cases:
                                - # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                  Modifier: None
                                  Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                    Modifier: None
                                    Self__: "[Ln 8, Col 14] -> [Ln 8, Col 18]"
                                    TypeName: "[Ln 8, Col 14] -> [Ln 8, Col 18]"
                                  TypeName: "Int2"
                              Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                  Name: "value2a"
                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                    Name: "[Ln 9, Col 13] -> [Ln 9, Col 20]"
                                    Self__: "[Ln 9, Col 13] -> [Ln 9, Col 20]"
                                Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                  Name: "[Ln 9, Col 13] -> [Ln 9, Col 20]"
                                  Self__: "[Ln 9, Col 13] -> [Ln 9, Col 20]"
                              Regions: # <class 'types.MatchTypeCasePhraseLexerInfoRegions'>
                                Cases: "[Ln 8, Col 14] -> [Ln 8, Col 18]"
                                Expression: "[Ln 8, Col 19] -> [Ln 10, Col 9]"
                                Self__: "[Ln 8, Col 9] -> [Ln 10, Col 9]"
                          Default: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                              Name: "value2b"
                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                            Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                              Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                              Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                          Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                              Name: "expr2"
                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                Name: "[Ln 7, Col 16] -> [Ln 7, Col 21]"
                                Self__: "[Ln 7, Col 16] -> [Ln 7, Col 21]"
                            Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                              Name: "[Ln 7, Col 16] -> [Ln 7, Col 21]"
                              Self__: "[Ln 7, Col 16] -> [Ln 7, Col 21]"
                          Regions: # <class 'types.MatchTypeExpressionLexerInfoRegions'>
                            CasePhrases: "[Ln 8, Col 9] -> [Ln 10, Col 9]"
                            Default: "[Ln 10, Col 17] -> [Ln 12, Col 1]"
                            Expression: "[Ln 7, Col 16] -> [Ln 7, Col 21]"
                            Self__: "[Ln 6, Col 10] -> [Ln 12, Col 2]"
                        IterBegin: "[6, 10] (84)"
                        IterEnd: "[12, 2] (185)"
                        Type: "Match Type Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[6, 10] (84)"
                    IterEnd: "[12, 2] (185)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[6, 10] (84)"
                IterEnd: "[12, 2] (185)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[12, 2] (185)"
                IterEnd: "[13, 1] (186)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 186
                  Start: 185
                Whitespace: None
            IterBegin: "[6, 1] (75)"
            IterEnd: "[13, 1] (186)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[6, 1] (75)"
        IterEnd: "[13, 1] (186)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[6, 1] (75)"
    IterEnd: "[13, 1] (186)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[13, 1] (186)"
Type: "<None>"
