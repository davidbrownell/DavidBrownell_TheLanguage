# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Type: "'while' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 5), match='while'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 7] (6)"
                                    IterEnd: "[1, 12] (11)"
                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(6, 11), match='value'>"
                                    Whitespace:
                                      - 5
                                      - 6
                                Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "value"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                                    Self__: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                                IterBegin: "[1, 7] (6)"
                                IterEnd: "[1, 12] (11)"
                                Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 7] (6)"
                            IterEnd: "[1, 12] (11)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                        Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                            Name: "value"
                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                              Name: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                              Self__: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                            Name: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                            Self__: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                        IterBegin: "[1, 7] (6)"
                        IterEnd: "[1, 12] (11)"
                        Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[1, 7] (6)"
                    IterEnd: "[1, 12] (11)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 7] (6)"
                IterEnd: "[1, 12] (11)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 12] (11)"
                    IterEnd: "[1, 13] (12)"
                    Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 12), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 14] (13)"
                                    IterEnd: "[1, 19] (18)"
                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(13, 18), match='Func1'>"
                                    Whitespace:
                                      - 12
                                      - 13
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 19] (18)"
                                        IterEnd: "[1, 20] (19)"
                                        Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(18, 19), match='('>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 20] (19)"
                                        IterEnd: "[1, 21] (20)"
                                        Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(19, 20), match=')'>"
                                        Whitespace: None
                                    IterBegin: "[1, 19] (18)"
                                    IterEnd: "[1, 21] (20)"
                                    Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 21] (20)"
                                    IterEnd: "[2, 1] (21)"
                                    Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                      End: 21
                                      Start: 20
                                    Whitespace: None
                                Info: # <class 'TheLanguage.Parser.Statements.FuncInvocationStatementParserInfo.FuncInvocationStatementParserInfo'>
                                  Arguments: None
                                  Name: "Func1"
                                  Regions: # <class 'types.FuncInvocationStatementParserInfoRegions'>
                                    Arguments: None
                                    Name: "[Ln 1, Col 14] -> [Ln 1, Col 19]"
                                    Self__: "[Ln 1, Col 14] -> [Ln 2, Col 1]"
                                IterBegin: "[1, 14] (13)"
                                IterEnd: "[2, 1] (21)"
                                Type: "Func Invocation Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 14] (13)"
                            IterEnd: "[2, 1] (21)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[1, 14] (13)"
                        IterEnd: "[2, 1] (21)"
                        Type: "DynamicPhrasesType.Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[1, 14] (13)"
                    IterEnd: "[2, 1] (21)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 12] (11)"
                IterEnd: "[2, 1] (21)"
                Type: "Statements <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            Info: # <class 'TheLanguage.Parser.Statements.WhileStatementParserInfo.WhileStatementParserInfo'>
              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                  Name: "value"
                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                    Name: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                    Self__: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                  Name: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                  Self__: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
              Regions: # <class 'types.WhileStatementParserInfoRegions'>
                Expression: "[Ln 1, Col 7] -> [Ln 1, Col 12]"
                Self__: "[Ln 1, Col 1] -> [Ln 2, Col 1]"
                Statements: "[Ln 1, Col 12] -> [Ln 2, Col 1]"
              Statements:
                - # <class 'TheLanguage.Parser.Statements.FuncInvocationStatementParserInfo.FuncInvocationStatementParserInfo'>
                  Arguments: None
                  Name: "Func1"
                  Regions: # <class 'types.FuncInvocationStatementParserInfoRegions'>
                    Arguments: None
                    Name: "[Ln 1, Col 14] -> [Ln 1, Col 19]"
                    Self__: "[Ln 1, Col 14] -> [Ln 2, Col 1]"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (21)"
            Type: "While Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (21)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (21)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[2, 1] (21)"
Type: "<None>"
