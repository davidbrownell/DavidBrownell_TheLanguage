# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 4] (3)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 3), match='Int'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: None
                            TypeName: "Int"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: None
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 1
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 4
                                Line: 1
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 1
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 4
                                Line: 1
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 4] (3)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 4] (3)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 5] (4)"
                IterEnd: "[1, 10] (9)"
                Type: "<method_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(4, 9), match='Func1'>"
                Whitespace:
                  - 3
                  - 4
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 10] (9)"
                    IterEnd: "[1, 11] (10)"
                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(9, 10), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 11] (10)"
                                                    IterEnd: "[1, 15] (14)"
                                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(10, 14), match='Bool'>"
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                    Modifier: None
                                                    TypeName: "Bool"
                                                  Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                    Modifier: None
                                                    Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 11
                                                        Line: 1
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 15
                                                        Line: 1
                                                    TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 11
                                                        Line: 1
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 15
                                                        Line: 1
                                                IterBegin: "[1, 11] (10)"
                                                IterEnd: "[1, 15] (14)"
                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[1, 11] (10)"
                                            IterEnd: "[1, 15] (14)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[1, 11] (10)"
                                        IterEnd: "[1, 15] (14)"
                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 16] (15)"
                                                    IterEnd: "[1, 18] (17)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(15, 17), match='b1'>"
                                                    Whitespace:
                                                      - 14
                                                      - 15
                                                Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                    Name: "b1"
                                                  Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                    Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 16
                                                        Line: 1
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 18
                                                        Line: 1
                                                    Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 16
                                                        Line: 1
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 18
                                                        Line: 1
                                                IterBegin: "[1, 16] (15)"
                                                IterEnd: "[1, 18] (17)"
                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[1, 16] (15)"
                                            IterEnd: "[1, 18] (17)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[1, 16] (15)"
                                        IterEnd: "[1, 18] (17)"
                                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[1, 11] (10)"
                                    IterEnd: "[1, 18] (17)"
                                    Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[1, 11] (10)"
                                IterEnd: "[1, 18] (17)"
                                Type: "Or: (Parameter, '/', '*') <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 18] (17)"
                                        IterEnd: "[1, 19] (18)"
                                        Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(17, 18), match=','>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 20] (19)"
                                                            IterEnd: "[1, 24] (23)"
                                                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(19, 23), match='Char'>"
                                                            Whitespace:
                                                              - 18
                                                              - 19
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                            Modifier: None
                                                            TypeName: "Char"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                            Modifier: None
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 20
                                                                Line: 1
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 24
                                                                Line: 1
                                                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 20
                                                                Line: 1
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 24
                                                                Line: 1
                                                        IterBegin: "[1, 20] (19)"
                                                        IterEnd: "[1, 24] (23)"
                                                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[1, 20] (19)"
                                                    IterEnd: "[1, 24] (23)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[1, 20] (19)"
                                                IterEnd: "[1, 24] (23)"
                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 25] (24)"
                                                            IterEnd: "[1, 27] (26)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(24, 26), match='c1'>"
                                                            Whitespace:
                                                              - 23
                                                              - 24
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                            Name: "c1"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 25
                                                                Line: 1
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 27
                                                                Line: 1
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 25
                                                                Line: 1
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 27
                                                                Line: 1
                                                        IterBegin: "[1, 25] (24)"
                                                        IterEnd: "[1, 27] (26)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[1, 25] (24)"
                                                    IterEnd: "[1, 27] (26)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[1, 25] (24)"
                                                IterEnd: "[1, 27] (26)"
                                                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[1, 20] (19)"
                                            IterEnd: "[1, 27] (26)"
                                            Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[1, 20] (19)"
                                        IterEnd: "[1, 27] (26)"
                                        Type: "Or: (Parameter, '/', '*') <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[1, 18] (17)"
                                    IterEnd: "[1, 27] (26)"
                                    Type: "Comma and Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 27] (26)"
                                        IterEnd: "[1, 28] (27)"
                                        Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(26, 27), match=','>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 29] (28)"
                                                            IterEnd: "[1, 35] (34)"
                                                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(28, 34), match='Double'>"
                                                            Whitespace:
                                                              - 27
                                                              - 28
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                            Modifier: None
                                                            TypeName: "Double"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                            Modifier: None
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 29
                                                                Line: 1
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 35
                                                                Line: 1
                                                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 29
                                                                Line: 1
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 35
                                                                Line: 1
                                                        IterBegin: "[1, 29] (28)"
                                                        IterEnd: "[1, 35] (34)"
                                                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[1, 29] (28)"
                                                    IterEnd: "[1, 35] (34)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[1, 29] (28)"
                                                IterEnd: "[1, 35] (34)"
                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 36] (35)"
                                                            IterEnd: "[1, 38] (37)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(35, 37), match='d1'>"
                                                            Whitespace:
                                                              - 34
                                                              - 35
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                            Name: "d1"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 36
                                                                Line: 1
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 38
                                                                Line: 1
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 36
                                                                Line: 1
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 38
                                                                Line: 1
                                                        IterBegin: "[1, 36] (35)"
                                                        IterEnd: "[1, 38] (37)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[1, 36] (35)"
                                                    IterEnd: "[1, 38] (37)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[1, 36] (35)"
                                                IterEnd: "[1, 38] (37)"
                                                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[1, 29] (28)"
                                            IterEnd: "[1, 38] (37)"
                                            Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[1, 29] (28)"
                                        IterEnd: "[1, 38] (37)"
                                        Type: "Or: (Parameter, '/', '*') <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[1, 27] (26)"
                                    IterEnd: "[1, 38] (37)"
                                    Type: "Comma and Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[1, 18] (17)"
                                IterEnd: "[1, 38] (37)"
                                Type: "Repeat: {Comma and Parameter, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                            IterBegin: "[1, 11] (10)"
                            IterEnd: "[1, 38] (37)"
                            Type: "Traditional <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[1, 11] (10)"
                        IterEnd: "[1, 38] (37)"
                        Type: "Or: (Repeat: {New Style, 1, None}, Traditional) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[1, 11] (10)"
                    IterEnd: "[1, 38] (37)"
                    Type: "Repeat: {Or: (Repeat: {New Style, 1, None}, Traditional), 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 38] (37)"
                    IterEnd: "[1, 39] (38)"
                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(37, 38), match=')'>"
                    Whitespace: None
                IterBegin: "[1, 10] (9)"
                IterEnd: "[1, 39] (38)"
                Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[1, 39] (38)"
                        IterEnd: "[1, 40] (39)"
                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(38, 39), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 40] (39)"
                                IterEnd: "[2, 1] (40)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 40
                                  Start: 39
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[2, 1] (40)"
                                IterEnd: "[2, 5] (44)"
                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                  End: 44
                                  Start: 40
                                  Value: 4
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 5] (44)"
                                                IterEnd: "[2, 9] (48)"
                                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(44, 48), match='pass'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 9] (48)"
                                                IterEnd: "[4, 1] (50)"
                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                  End: 50
                                                  Start: 48
                                                Whitespace: None
                                            IterBegin: "[2, 5] (44)"
                                            IterEnd: "[4, 1] (50)"
                                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[2, 5] (44)"
                                        IterEnd: "[4, 1] (50)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[2, 5] (44)"
                                    IterEnd: "[4, 1] (50)"
                                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                IterBegin: "[2, 5] (44)"
                                IterEnd: "[4, 1] (50)"
                                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[4, 1] (50)"
                                IterEnd: "[4, 1] (50)"
                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                  {}
                                Whitespace: None
                            IterBegin: "[1, 40] (39)"
                            IterEnd: "[4, 1] (50)"
                            Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[1, 40] (39)"
                        IterEnd: "[4, 1] (50)"
                        Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[1, 39] (38)"
                    IterEnd: "[4, 1] (50)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[1, 39] (38)"
                IterEnd: "[4, 1] (50)"
                Type: "Or: (Statements, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
            Info: # <class 'TheLanguage.Lexer.ParserInterfaces.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
              Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerData'>
                ClassModifier: None
                MethodType: "MethodType.standard"
                Name: "Func1"
                Parameters:
                  ParametersType.any:
                    - # <class 'TheLanguage.Grammars.v0_0_1.Common.ParametersPhraseItem.Parameter'>
                      Default: None
                      IsVarArgs: False
                      Name: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 16] (15)"
                            IterEnd: "[1, 18] (17)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(15, 17), match='b1'>"
                            Whitespace:
                              - 14
                              - 15
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                            Name: "b1"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 16
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 18
                                Line: 1
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 16
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 18
                                Line: 1
                        IterBegin: "[1, 16] (15)"
                        IterEnd: "[1, 18] (17)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      Type: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 11] (10)"
                            IterEnd: "[1, 15] (14)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(10, 14), match='Bool'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: None
                            TypeName: "Bool"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: None
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 11
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 15
                                Line: 1
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 11
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 15
                                Line: 1
                        IterBegin: "[1, 11] (10)"
                        IterEnd: "[1, 15] (14)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    - # <class 'TheLanguage.Grammars.v0_0_1.Common.ParametersPhraseItem.Parameter'>
                      Default: None
                      IsVarArgs: False
                      Name: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 25] (24)"
                            IterEnd: "[1, 27] (26)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(24, 26), match='c1'>"
                            Whitespace:
                              - 23
                              - 24
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                            Name: "c1"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 25
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 27
                                Line: 1
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 25
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 27
                                Line: 1
                        IterBegin: "[1, 25] (24)"
                        IterEnd: "[1, 27] (26)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      Type: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 20] (19)"
                            IterEnd: "[1, 24] (23)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(19, 23), match='Char'>"
                            Whitespace:
                              - 18
                              - 19
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: None
                            TypeName: "Char"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: None
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 20
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 24
                                Line: 1
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 20
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 24
                                Line: 1
                        IterBegin: "[1, 20] (19)"
                        IterEnd: "[1, 24] (23)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    - # <class 'TheLanguage.Grammars.v0_0_1.Common.ParametersPhraseItem.Parameter'>
                      Default: None
                      IsVarArgs: False
                      Name: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 36] (35)"
                            IterEnd: "[1, 38] (37)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(35, 37), match='d1'>"
                            Whitespace:
                              - 34
                              - 35
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                            Name: "d1"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 36
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 38
                                Line: 1
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 36
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 38
                                Line: 1
                        IterBegin: "[1, 36] (35)"
                        IterEnd: "[1, 38] (37)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      Type: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 29] (28)"
                            IterEnd: "[1, 35] (34)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(28, 34), match='Double'>"
                            Whitespace:
                              - 27
                              - 28
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: None
                            TypeName: "Double"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: None
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 29
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 35
                                Line: 1
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 29
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 35
                                Line: 1
                        IterBegin: "[1, 29] (28)"
                        IterEnd: "[1, 35] (34)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                ReturnType: None
                Visibility: "VisibilityModifier.private"
              Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerRegions'>
                ClassModifier: None
                MethodType: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 4
                Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 5
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 10
                    Line: 1
                Parameters: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 10
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 39
                    Line: 1
                ReturnType: None
                Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 4
                Visibility: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 4
            IterBegin: "[1, 1] (0)"
            IterEnd: "[4, 1] (50)"
            Type: "Func And Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[4, 1] (50)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[4, 1] (50)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 1] (50)"
                            IterEnd: "[4, 4] (53)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(50, 53), match='Int'>"
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 5] (54)"
                                    IterEnd: "[4, 8] (57)"
                                    Type: "'var' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(54, 57), match='var'>"
                                    Whitespace:
                                      - 53
                                      - 54
                                IterBegin: "[4, 5] (54)"
                                IterEnd: "[4, 8] (57)"
                                Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[4, 5] (54)"
                            IterEnd: "[4, 8] (57)"
                            Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: TypeModifier.var
                            TypeName: "Int"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 5
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 8
                                Line: 4
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 1
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 8
                                Line: 4
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 1
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 4
                                Line: 4
                        IterBegin: "[4, 1] (50)"
                        IterEnd: "[4, 8] (57)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[4, 1] (50)"
                    IterEnd: "[4, 8] (57)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[4, 1] (50)"
                IterEnd: "[4, 8] (57)"
                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 9] (58)"
                IterEnd: "[4, 14] (63)"
                Type: "<method_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(58, 63), match='Func2'>"
                Whitespace:
                  - 57
                  - 58
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[4, 14] (63)"
                    IterEnd: "[4, 15] (64)"
                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(63, 64), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[4, 15] (64)"
                                                    IterEnd: "[4, 19] (68)"
                                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(64, 68), match='Bool'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[4, 20] (69)"
                                                            IterEnd: "[4, 23] (72)"
                                                            Type: "'var' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(69, 72), match='var'>"
                                                            Whitespace:
                                                              - 68
                                                              - 69
                                                        IterBegin: "[4, 20] (69)"
                                                        IterEnd: "[4, 23] (72)"
                                                        Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                    IterBegin: "[4, 20] (69)"
                                                    IterEnd: "[4, 23] (72)"
                                                    Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                    Modifier: TypeModifier.var
                                                    TypeName: "Bool"
                                                  Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                    Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 20
                                                        Line: 4
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 23
                                                        Line: 4
                                                    Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 15
                                                        Line: 4
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 23
                                                        Line: 4
                                                    TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 15
                                                        Line: 4
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 19
                                                        Line: 4
                                                IterBegin: "[4, 15] (64)"
                                                IterEnd: "[4, 23] (72)"
                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[4, 15] (64)"
                                            IterEnd: "[4, 23] (72)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[4, 15] (64)"
                                        IterEnd: "[4, 23] (72)"
                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[4, 24] (73)"
                                                    IterEnd: "[4, 26] (75)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(73, 75), match='b2'>"
                                                    Whitespace:
                                                      - 72
                                                      - 73
                                                Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                    Name: "b2"
                                                  Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                    Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 24
                                                        Line: 4
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 26
                                                        Line: 4
                                                    Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 24
                                                        Line: 4
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 26
                                                        Line: 4
                                                IterBegin: "[4, 24] (73)"
                                                IterEnd: "[4, 26] (75)"
                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[4, 24] (73)"
                                            IterEnd: "[4, 26] (75)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[4, 24] (73)"
                                        IterEnd: "[4, 26] (75)"
                                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[4, 15] (64)"
                                    IterEnd: "[4, 26] (75)"
                                    Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[4, 15] (64)"
                                IterEnd: "[4, 26] (75)"
                                Type: "Or: (Parameter, '/', '*') <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[4, 26] (75)"
                                        IterEnd: "[4, 27] (76)"
                                        Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(75, 76), match=','>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[4, 28] (77)"
                                                            IterEnd: "[4, 32] (81)"
                                                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(77, 81), match='Char'>"
                                                            Whitespace:
                                                              - 76
                                                              - 77
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[4, 33] (82)"
                                                                    IterEnd: "[4, 37] (86)"
                                                                    Type: "'view' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(82, 86), match='view'>"
                                                                    Whitespace:
                                                                      - 81
                                                                      - 82
                                                                IterBegin: "[4, 33] (82)"
                                                                IterEnd: "[4, 37] (86)"
                                                                Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                            IterBegin: "[4, 33] (82)"
                                                            IterEnd: "[4, 37] (86)"
                                                            Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                            Modifier: TypeModifier.view
                                                            TypeName: "Char"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                            Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 33
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 37
                                                                Line: 4
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 28
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 37
                                                                Line: 4
                                                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 28
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 32
                                                                Line: 4
                                                        IterBegin: "[4, 28] (77)"
                                                        IterEnd: "[4, 37] (86)"
                                                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[4, 28] (77)"
                                                    IterEnd: "[4, 37] (86)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[4, 28] (77)"
                                                IterEnd: "[4, 37] (86)"
                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[4, 38] (87)"
                                                            IterEnd: "[4, 40] (89)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(87, 89), match='c2'>"
                                                            Whitespace:
                                                              - 86
                                                              - 87
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                            Name: "c2"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 38
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 40
                                                                Line: 4
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 38
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 40
                                                                Line: 4
                                                        IterBegin: "[4, 38] (87)"
                                                        IterEnd: "[4, 40] (89)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[4, 38] (87)"
                                                    IterEnd: "[4, 40] (89)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[4, 38] (87)"
                                                IterEnd: "[4, 40] (89)"
                                                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[4, 28] (77)"
                                            IterEnd: "[4, 40] (89)"
                                            Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[4, 28] (77)"
                                        IterEnd: "[4, 40] (89)"
                                        Type: "Or: (Parameter, '/', '*') <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[4, 26] (75)"
                                    IterEnd: "[4, 40] (89)"
                                    Type: "Comma and Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[4, 40] (89)"
                                        IterEnd: "[4, 41] (90)"
                                        Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(89, 90), match=','>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[4, 42] (91)"
                                                            IterEnd: "[4, 48] (97)"
                                                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(91, 97), match='Double'>"
                                                            Whitespace:
                                                              - 90
                                                              - 91
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[4, 49] (98)"
                                                                    IterEnd: "[4, 52] (101)"
                                                                    Type: "'val' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(98, 101), match='val'>"
                                                                    Whitespace:
                                                                      - 97
                                                                      - 98
                                                                IterBegin: "[4, 49] (98)"
                                                                IterEnd: "[4, 52] (101)"
                                                                Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                            IterBegin: "[4, 49] (98)"
                                                            IterEnd: "[4, 52] (101)"
                                                            Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                            Modifier: TypeModifier.val
                                                            TypeName: "Double"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                            Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 49
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 52
                                                                Line: 4
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 42
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 52
                                                                Line: 4
                                                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 42
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 48
                                                                Line: 4
                                                        IterBegin: "[4, 42] (91)"
                                                        IterEnd: "[4, 52] (101)"
                                                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[4, 42] (91)"
                                                    IterEnd: "[4, 52] (101)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[4, 42] (91)"
                                                IterEnd: "[4, 52] (101)"
                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[4, 53] (102)"
                                                            IterEnd: "[4, 55] (104)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(102, 104), match='d2'>"
                                                            Whitespace:
                                                              - 101
                                                              - 102
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                            Name: "d2"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 53
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 55
                                                                Line: 4
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 53
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 55
                                                                Line: 4
                                                        IterBegin: "[4, 53] (102)"
                                                        IterEnd: "[4, 55] (104)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[4, 53] (102)"
                                                    IterEnd: "[4, 55] (104)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[4, 53] (102)"
                                                IterEnd: "[4, 55] (104)"
                                                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[4, 42] (91)"
                                            IterEnd: "[4, 55] (104)"
                                            Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[4, 42] (91)"
                                        IterEnd: "[4, 55] (104)"
                                        Type: "Or: (Parameter, '/', '*') <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[4, 40] (89)"
                                    IterEnd: "[4, 55] (104)"
                                    Type: "Comma and Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[4, 26] (75)"
                                IterEnd: "[4, 55] (104)"
                                Type: "Repeat: {Comma and Parameter, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                            IterBegin: "[4, 15] (64)"
                            IterEnd: "[4, 55] (104)"
                            Type: "Traditional <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[4, 15] (64)"
                        IterEnd: "[4, 55] (104)"
                        Type: "Or: (Repeat: {New Style, 1, None}, Traditional) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[4, 15] (64)"
                    IterEnd: "[4, 55] (104)"
                    Type: "Repeat: {Or: (Repeat: {New Style, 1, None}, Traditional), 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[4, 55] (104)"
                    IterEnd: "[4, 56] (105)"
                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(104, 105), match=')'>"
                    Whitespace: None
                IterBegin: "[4, 14] (63)"
                IterEnd: "[4, 56] (105)"
                Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[4, 56] (105)"
                        IterEnd: "[4, 57] (106)"
                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(105, 106), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[4, 57] (106)"
                                IterEnd: "[5, 1] (107)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 107
                                  Start: 106
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[5, 1] (107)"
                                IterEnd: "[5, 5] (111)"
                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                  End: 111
                                  Start: 107
                                  Value: 4
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[5, 5] (111)"
                                                IterEnd: "[5, 9] (115)"
                                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(111, 115), match='pass'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[5, 9] (115)"
                                                IterEnd: "[6, 1] (116)"
                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                  End: 116
                                                  Start: 115
                                                Whitespace: None
                                            IterBegin: "[5, 5] (111)"
                                            IterEnd: "[6, 1] (116)"
                                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[5, 5] (111)"
                                        IterEnd: "[6, 1] (116)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[5, 5] (111)"
                                    IterEnd: "[6, 1] (116)"
                                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                IterBegin: "[5, 5] (111)"
                                IterEnd: "[6, 1] (116)"
                                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[6, 1] (116)"
                                IterEnd: "[6, 1] (116)"
                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                  {}
                                Whitespace: None
                            IterBegin: "[4, 57] (106)"
                            IterEnd: "[6, 1] (116)"
                            Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[4, 57] (106)"
                        IterEnd: "[6, 1] (116)"
                        Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[4, 56] (105)"
                    IterEnd: "[6, 1] (116)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[4, 56] (105)"
                IterEnd: "[6, 1] (116)"
                Type: "Or: (Statements, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
            Info: # <class 'TheLanguage.Lexer.ParserInterfaces.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
              Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerData'>
                ClassModifier: None
                MethodType: "MethodType.standard"
                Name: "Func2"
                Parameters:
                  ParametersType.any:
                    - # <class 'TheLanguage.Grammars.v0_0_1.Common.ParametersPhraseItem.Parameter'>
                      Default: None
                      IsVarArgs: False
                      Name: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 24] (73)"
                            IterEnd: "[4, 26] (75)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(73, 75), match='b2'>"
                            Whitespace:
                              - 72
                              - 73
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                            Name: "b2"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 24
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 26
                                Line: 4
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 24
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 26
                                Line: 4
                        IterBegin: "[4, 24] (73)"
                        IterEnd: "[4, 26] (75)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      Type: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 15] (64)"
                            IterEnd: "[4, 19] (68)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(64, 68), match='Bool'>"
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 20] (69)"
                                    IterEnd: "[4, 23] (72)"
                                    Type: "'var' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(69, 72), match='var'>"
                                    Whitespace:
                                      - 68
                                      - 69
                                IterBegin: "[4, 20] (69)"
                                IterEnd: "[4, 23] (72)"
                                Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[4, 20] (69)"
                            IterEnd: "[4, 23] (72)"
                            Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: TypeModifier.var
                            TypeName: "Bool"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 20
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 23
                                Line: 4
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 15
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 23
                                Line: 4
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 15
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 19
                                Line: 4
                        IterBegin: "[4, 15] (64)"
                        IterEnd: "[4, 23] (72)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    - # <class 'TheLanguage.Grammars.v0_0_1.Common.ParametersPhraseItem.Parameter'>
                      Default: None
                      IsVarArgs: False
                      Name: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 38] (87)"
                            IterEnd: "[4, 40] (89)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(87, 89), match='c2'>"
                            Whitespace:
                              - 86
                              - 87
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                            Name: "c2"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 38
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 40
                                Line: 4
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 38
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 40
                                Line: 4
                        IterBegin: "[4, 38] (87)"
                        IterEnd: "[4, 40] (89)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      Type: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 28] (77)"
                            IterEnd: "[4, 32] (81)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(77, 81), match='Char'>"
                            Whitespace:
                              - 76
                              - 77
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 33] (82)"
                                    IterEnd: "[4, 37] (86)"
                                    Type: "'view' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(82, 86), match='view'>"
                                    Whitespace:
                                      - 81
                                      - 82
                                IterBegin: "[4, 33] (82)"
                                IterEnd: "[4, 37] (86)"
                                Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[4, 33] (82)"
                            IterEnd: "[4, 37] (86)"
                            Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: TypeModifier.view
                            TypeName: "Char"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 33
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 37
                                Line: 4
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 28
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 37
                                Line: 4
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 28
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 32
                                Line: 4
                        IterBegin: "[4, 28] (77)"
                        IterEnd: "[4, 37] (86)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    - # <class 'TheLanguage.Grammars.v0_0_1.Common.ParametersPhraseItem.Parameter'>
                      Default: None
                      IsVarArgs: False
                      Name: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 53] (102)"
                            IterEnd: "[4, 55] (104)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(102, 104), match='d2'>"
                            Whitespace:
                              - 101
                              - 102
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                            Name: "d2"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 53
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 55
                                Line: 4
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 53
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 55
                                Line: 4
                        IterBegin: "[4, 53] (102)"
                        IterEnd: "[4, 55] (104)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      Type: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 42] (91)"
                            IterEnd: "[4, 48] (97)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(91, 97), match='Double'>"
                            Whitespace:
                              - 90
                              - 91
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 49] (98)"
                                    IterEnd: "[4, 52] (101)"
                                    Type: "'val' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(98, 101), match='val'>"
                                    Whitespace:
                                      - 97
                                      - 98
                                IterBegin: "[4, 49] (98)"
                                IterEnd: "[4, 52] (101)"
                                Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[4, 49] (98)"
                            IterEnd: "[4, 52] (101)"
                            Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: TypeModifier.val
                            TypeName: "Double"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 49
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 52
                                Line: 4
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 42
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 52
                                Line: 4
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 42
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 48
                                Line: 4
                        IterBegin: "[4, 42] (91)"
                        IterEnd: "[4, 52] (101)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                ReturnType: None
                Visibility: "VisibilityModifier.private"
              Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerRegions'>
                ClassModifier: None
                MethodType: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 4
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 6
                Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 9
                    Line: 4
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 14
                    Line: 4
                Parameters: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 14
                    Line: 4
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 56
                    Line: 4
                ReturnType: None
                Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 4
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 6
                Visibility: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 4
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 6
            IterBegin: "[4, 1] (50)"
            IterEnd: "[6, 1] (116)"
            Type: "Func And Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[4, 1] (50)"
        IterEnd: "[6, 1] (116)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[4, 1] (50)"
    IterEnd: "[6, 1] (116)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[6, 1] (116)"
Type: "<None>"
