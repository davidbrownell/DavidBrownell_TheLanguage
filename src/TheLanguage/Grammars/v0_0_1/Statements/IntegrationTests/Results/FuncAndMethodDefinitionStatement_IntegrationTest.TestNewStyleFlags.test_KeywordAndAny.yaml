# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 4] (3)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 3), match='Int'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: None
                            TypeName: "Int"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: None
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 1
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 4
                                Line: 1
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 1
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 4
                                Line: 1
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 4] (3)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 4] (3)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 5] (4)"
                IterEnd: "[1, 9] (8)"
                Type: "<method_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(4, 8), match='Func'>"
                Whitespace:
                  - 3
                  - 4
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 9] (8)"
                    IterEnd: "[1, 10] (9)"
                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(8, 9), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 5] (14)"
                                        IterEnd: "[2, 8] (17)"
                                        Type: "'key' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(14, 17), match='key'>"
                                        Whitespace: None
                                    IterBegin: "[2, 5] (14)"
                                    IterEnd: "[2, 8] (17)"
                                    Type: "Or: ('pos', 'any', 'key') <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 8] (17)"
                                    IterEnd: "[2, 9] (18)"
                                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(17, 18), match=':'>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[3, 9] (27)"
                                                    IterEnd: "[3, 12] (30)"
                                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(27, 30), match='Int'>"
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                    Modifier: None
                                                    TypeName: "Int"
                                                  Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                    Modifier: None
                                                    Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 9
                                                        Line: 3
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 12
                                                        Line: 3
                                                    TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 9
                                                        Line: 3
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 12
                                                        Line: 3
                                                IterBegin: "[3, 9] (27)"
                                                IterEnd: "[3, 12] (30)"
                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[3, 9] (27)"
                                            IterEnd: "[3, 12] (30)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[3, 9] (27)"
                                        IterEnd: "[3, 12] (30)"
                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[3, 13] (31)"
                                                    IterEnd: "[3, 14] (32)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(31, 32), match='a'>"
                                                    Whitespace:
                                                      - 30
                                                      - 31
                                                Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                    Name: "a"
                                                  Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                    Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 13
                                                        Line: 3
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 14
                                                        Line: 3
                                                    Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 13
                                                        Line: 3
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 14
                                                        Line: 3
                                                IterBegin: "[3, 13] (31)"
                                                IterEnd: "[3, 14] (32)"
                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[3, 13] (31)"
                                            IterEnd: "[3, 14] (32)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[3, 13] (31)"
                                        IterEnd: "[3, 14] (32)"
                                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[3, 9] (27)"
                                    IterEnd: "[3, 14] (32)"
                                    Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 14] (32)"
                                            IterEnd: "[3, 15] (33)"
                                            Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(32, 33), match=','>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[4, 13] (46)"
                                                            IterEnd: "[4, 16] (49)"
                                                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(46, 49), match='Int'>"
                                                            Whitespace: None
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                            Modifier: None
                                                            TypeName: "Int"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                            Modifier: None
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 13
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 16
                                                                Line: 4
                                                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 13
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 16
                                                                Line: 4
                                                        IterBegin: "[4, 13] (46)"
                                                        IterEnd: "[4, 16] (49)"
                                                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[4, 13] (46)"
                                                    IterEnd: "[4, 16] (49)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[4, 13] (46)"
                                                IterEnd: "[4, 16] (49)"
                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[4, 17] (50)"
                                                            IterEnd: "[4, 18] (51)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(50, 51), match='b'>"
                                                            Whitespace:
                                                              - 49
                                                              - 50
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                            Name: "b"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 17
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 18
                                                                Line: 4
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 17
                                                                Line: 4
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 18
                                                                Line: 4
                                                        IterBegin: "[4, 17] (50)"
                                                        IterEnd: "[4, 18] (51)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[4, 17] (50)"
                                                    IterEnd: "[4, 18] (51)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[4, 17] (50)"
                                                IterEnd: "[4, 18] (51)"
                                                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[4, 13] (46)"
                                            IterEnd: "[4, 18] (51)"
                                            Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[3, 14] (32)"
                                        IterEnd: "[4, 18] (51)"
                                        Type: "Comma and Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[3, 14] (32)"
                                    IterEnd: "[4, 18] (51)"
                                    Type: "Repeat: {Comma and Parameter, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                IterBegin: "[2, 5] (14)"
                                IterEnd: "[4, 18] (51)"
                                Type: "New Style <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[5, 5] (56)"
                                        IterEnd: "[5, 8] (59)"
                                        Type: "'any' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(56, 59), match='any'>"
                                        Whitespace: None
                                    IterBegin: "[5, 5] (56)"
                                    IterEnd: "[5, 8] (59)"
                                    Type: "Or: ('pos', 'any', 'key') <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[5, 8] (59)"
                                    IterEnd: "[5, 9] (60)"
                                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(59, 60), match=':'>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[6, 9] (69)"
                                                    IterEnd: "[6, 12] (72)"
                                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(69, 72), match='Int'>"
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                    Modifier: None
                                                    TypeName: "Int"
                                                  Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                    Modifier: None
                                                    Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 9
                                                        Line: 6
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 12
                                                        Line: 6
                                                    TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 9
                                                        Line: 6
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 12
                                                        Line: 6
                                                IterBegin: "[6, 9] (69)"
                                                IterEnd: "[6, 12] (72)"
                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[6, 9] (69)"
                                            IterEnd: "[6, 12] (72)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[6, 9] (69)"
                                        IterEnd: "[6, 12] (72)"
                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[6, 13] (73)"
                                                    IterEnd: "[6, 14] (74)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(73, 74), match='c'>"
                                                    Whitespace:
                                                      - 72
                                                      - 73
                                                Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                    Name: "c"
                                                  Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                    Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 13
                                                        Line: 6
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 14
                                                        Line: 6
                                                    Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 13
                                                        Line: 6
                                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                        Column: 14
                                                        Line: 6
                                                IterBegin: "[6, 13] (73)"
                                                IterEnd: "[6, 14] (74)"
                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[6, 13] (73)"
                                            IterEnd: "[6, 14] (74)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[6, 13] (73)"
                                        IterEnd: "[6, 14] (74)"
                                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[6, 9] (69)"
                                    IterEnd: "[6, 14] (74)"
                                    Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[6, 14] (74)"
                                            IterEnd: "[6, 15] (75)"
                                            Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(74, 75), match=','>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[6, 16] (76)"
                                                            IterEnd: "[6, 19] (79)"
                                                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(76, 79), match='Int'>"
                                                            Whitespace:
                                                              - 75
                                                              - 76
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[6, 20] (80)"
                                                                    IterEnd: "[6, 23] (83)"
                                                                    Type: "'var' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(80, 83), match='var'>"
                                                                    Whitespace:
                                                                      - 79
                                                                      - 80
                                                                IterBegin: "[6, 20] (80)"
                                                                IterEnd: "[6, 23] (83)"
                                                                Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                            IterBegin: "[6, 20] (80)"
                                                            IterEnd: "[6, 23] (83)"
                                                            Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                            Modifier: TypeModifier.var
                                                            TypeName: "Int"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                            Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 20
                                                                Line: 6
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 23
                                                                Line: 6
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 16
                                                                Line: 6
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 23
                                                                Line: 6
                                                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 16
                                                                Line: 6
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 19
                                                                Line: 6
                                                        IterBegin: "[6, 16] (76)"
                                                        IterEnd: "[6, 23] (83)"
                                                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[6, 16] (76)"
                                                    IterEnd: "[6, 23] (83)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[6, 16] (76)"
                                                IterEnd: "[6, 23] (83)"
                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[6, 24] (84)"
                                                            IterEnd: "[6, 25] (85)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(84, 85), match='d'>"
                                                            Whitespace:
                                                              - 83
                                                              - 84
                                                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                            Name: "d"
                                                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 24
                                                                Line: 6
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 25
                                                                Line: 6
                                                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 24
                                                                Line: 6
                                                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                                Column: 25
                                                                Line: 6
                                                        IterBegin: "[6, 24] (84)"
                                                        IterEnd: "[6, 25] (85)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[6, 24] (84)"
                                                    IterEnd: "[6, 25] (85)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[6, 24] (84)"
                                                IterEnd: "[6, 25] (85)"
                                                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[6, 16] (76)"
                                            IterEnd: "[6, 25] (85)"
                                            Type: "Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[6, 14] (74)"
                                        IterEnd: "[6, 25] (85)"
                                        Type: "Comma and Parameter <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[6, 14] (74)"
                                    IterEnd: "[6, 25] (85)"
                                    Type: "Repeat: {Comma and Parameter, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                IterBegin: "[5, 5] (56)"
                                IterEnd: "[6, 25] (85)"
                                Type: "New Style <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[2, 5] (14)"
                            IterEnd: "[6, 25] (85)"
                            Type: "Repeat: {New Style, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                        IterBegin: "[2, 5] (14)"
                        IterEnd: "[6, 25] (85)"
                        Type: "Or: (Repeat: {New Style, 1, None}, Traditional) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[2, 5] (14)"
                    IterEnd: "[6, 25] (85)"
                    Type: "Repeat: {Or: (Repeat: {New Style, 1, None}, Traditional), 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[7, 1] (86)"
                    IterEnd: "[7, 2] (87)"
                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(86, 87), match=')'>"
                    Whitespace: None
                IterBegin: "[1, 9] (8)"
                IterEnd: "[7, 2] (87)"
                Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[7, 2] (87)"
                        IterEnd: "[7, 3] (88)"
                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(87, 88), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[7, 3] (88)"
                                IterEnd: "[8, 1] (89)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 89
                                  Start: 88
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[8, 1] (89)"
                                IterEnd: "[8, 5] (93)"
                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                  End: 93
                                  Start: 89
                                  Value: 4
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[8, 5] (93)"
                                                IterEnd: "[8, 9] (97)"
                                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(93, 97), match='pass'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[8, 9] (97)"
                                                IterEnd: "[9, 1] (98)"
                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                  End: 98
                                                  Start: 97
                                                Whitespace: None
                                            IterBegin: "[8, 5] (93)"
                                            IterEnd: "[9, 1] (98)"
                                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[8, 5] (93)"
                                        IterEnd: "[9, 1] (98)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[8, 5] (93)"
                                    IterEnd: "[9, 1] (98)"
                                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                IterBegin: "[8, 5] (93)"
                                IterEnd: "[9, 1] (98)"
                                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[9, 1] (98)"
                                IterEnd: "[9, 1] (98)"
                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                  {}
                                Whitespace: None
                            IterBegin: "[7, 3] (88)"
                            IterEnd: "[9, 1] (98)"
                            Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[7, 3] (88)"
                        IterEnd: "[9, 1] (98)"
                        Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[7, 2] (87)"
                    IterEnd: "[9, 1] (98)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[7, 2] (87)"
                IterEnd: "[9, 1] (98)"
                Type: "Or: (Statements, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
            Info: # <class 'TheLanguage.Lexer.ParserInterfaces.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
              Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerData'>
                ClassModifier: None
                MethodType: "MethodType.standard"
                Name: "Func"
                Parameters:
                  ParametersType.key:
                    - # <class 'TheLanguage.Grammars.v0_0_1.Common.ParametersPhraseItem.Parameter'>
                      Default: None
                      IsVarArgs: False
                      Name: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 13] (31)"
                            IterEnd: "[3, 14] (32)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(31, 32), match='a'>"
                            Whitespace:
                              - 30
                              - 31
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                            Name: "a"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 13
                                Line: 3
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 14
                                Line: 3
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 13
                                Line: 3
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 14
                                Line: 3
                        IterBegin: "[3, 13] (31)"
                        IterEnd: "[3, 14] (32)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      Type: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 9] (27)"
                            IterEnd: "[3, 12] (30)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(27, 30), match='Int'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: None
                            TypeName: "Int"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: None
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 9
                                Line: 3
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 12
                                Line: 3
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 9
                                Line: 3
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 12
                                Line: 3
                        IterBegin: "[3, 9] (27)"
                        IterEnd: "[3, 12] (30)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    - # <class 'TheLanguage.Grammars.v0_0_1.Common.ParametersPhraseItem.Parameter'>
                      Default: None
                      IsVarArgs: False
                      Name: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 17] (50)"
                            IterEnd: "[4, 18] (51)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(50, 51), match='b'>"
                            Whitespace:
                              - 49
                              - 50
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                            Name: "b"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 17
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 18
                                Line: 4
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 17
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 18
                                Line: 4
                        IterBegin: "[4, 17] (50)"
                        IterEnd: "[4, 18] (51)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      Type: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 13] (46)"
                            IterEnd: "[4, 16] (49)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(46, 49), match='Int'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: None
                            TypeName: "Int"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: None
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 13
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 16
                                Line: 4
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 13
                                Line: 4
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 16
                                Line: 4
                        IterBegin: "[4, 13] (46)"
                        IterEnd: "[4, 16] (49)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                  ParametersType.any:
                    - # <class 'TheLanguage.Grammars.v0_0_1.Common.ParametersPhraseItem.Parameter'>
                      Default: None
                      IsVarArgs: False
                      Name: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[6, 13] (73)"
                            IterEnd: "[6, 14] (74)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(73, 74), match='c'>"
                            Whitespace:
                              - 72
                              - 73
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                            Name: "c"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 13
                                Line: 6
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 14
                                Line: 6
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 13
                                Line: 6
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 14
                                Line: 6
                        IterBegin: "[6, 13] (73)"
                        IterEnd: "[6, 14] (74)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      Type: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[6, 9] (69)"
                            IterEnd: "[6, 12] (72)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(69, 72), match='Int'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: None
                            TypeName: "Int"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: None
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 9
                                Line: 6
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 12
                                Line: 6
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 9
                                Line: 6
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 12
                                Line: 6
                        IterBegin: "[6, 9] (69)"
                        IterEnd: "[6, 12] (72)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    - # <class 'TheLanguage.Grammars.v0_0_1.Common.ParametersPhraseItem.Parameter'>
                      Default: None
                      IsVarArgs: False
                      Name: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[6, 24] (84)"
                            IterEnd: "[6, 25] (85)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(84, 85), match='d'>"
                            Whitespace:
                              - 83
                              - 84
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                            Name: "d"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 24
                                Line: 6
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 25
                                Line: 6
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 24
                                Line: 6
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 25
                                Line: 6
                        IterBegin: "[6, 24] (84)"
                        IterEnd: "[6, 25] (85)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      Type: # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[6, 16] (76)"
                            IterEnd: "[6, 19] (79)"
                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(76, 79), match='Int'>"
                            Whitespace:
                              - 75
                              - 76
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[6, 20] (80)"
                                    IterEnd: "[6, 23] (83)"
                                    Type: "'var' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(80, 83), match='var'>"
                                    Whitespace:
                                      - 79
                                      - 80
                                IterBegin: "[6, 20] (80)"
                                IterEnd: "[6, 23] (83)"
                                Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[6, 20] (80)"
                            IterEnd: "[6, 23] (83)"
                            Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                            Modifier: TypeModifier.var
                            TypeName: "Int"
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                            Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 20
                                Line: 6
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 23
                                Line: 6
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 16
                                Line: 6
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 23
                                Line: 6
                            TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 16
                                Line: 6
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 19
                                Line: 6
                        IterBegin: "[6, 16] (76)"
                        IterEnd: "[6, 23] (83)"
                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                Type: None
                Visibility: "VisibilityModifier.private"
              Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerRegions'>
                ClassModifier: None
                MethodType: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 9
                Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 5
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 9
                    Line: 1
                Parameters: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 9
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 2
                    Line: 7
                Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 9
                Type: None
                Visibility: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 9
            IterBegin: "[1, 1] (0)"
            IterEnd: "[9, 1] (98)"
            Type: "Func And Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[9, 1] (98)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[9, 1] (98)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[9, 1] (98)"
Type: "<None>"
