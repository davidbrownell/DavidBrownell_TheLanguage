# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 6] (5)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 5), match='value'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Name: "value"
                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                            Name: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 6] (5)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 6] (5)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 7] (6)"
                IterEnd: "[1, 8] (7)"
                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(6, 7), match='='>"
                Whitespace:
                  - 5
                  - 6
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 9] (8)"
                                    IterEnd: "[1, 10] (9)"
                                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(8, 9), match='('>"
                                    Whitespace:
                                      - 7
                                      - 8
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 10] (9)"
                                    IterEnd: "[2, 1] (10)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 10
                                      Start: 9
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 1] (10)"
                                    IterEnd: "[2, 5] (14)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 14
                                      Start: 10
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 5] (14)"
                                        IterEnd: "[2, 10] (19)"
                                        Type: "'match' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(14, 19), match='match'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 11] (20)"
                                        IterEnd: "[2, 15] (24)"
                                        Type: "'type' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(20, 24), match='type'>"
                                        Whitespace:
                                          - 19
                                          - 20
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 16] (25)"
                                                            IterEnd: "[2, 20] (29)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(25, 29), match='expr'>"
                                                            Whitespace:
                                                              - 24
                                                              - 25
                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                          Name: "expr"
                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                            Name: "[Ln 2, Col 16] -> [Ln 2, Col 20]"
                                                            Self__: "[Ln 2, Col 16] -> [Ln 2, Col 20]"
                                                        IterBegin: "[2, 16] (25)"
                                                        IterEnd: "[2, 20] (29)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[2, 16] (25)"
                                                    IterEnd: "[2, 20] (29)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                    Name: "expr"
                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                      Name: "[Ln 2, Col 16] -> [Ln 2, Col 20]"
                                                      Self__: "[Ln 2, Col 16] -> [Ln 2, Col 20]"
                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                    Name: "[Ln 2, Col 16] -> [Ln 2, Col 20]"
                                                    Self__: "[Ln 2, Col 16] -> [Ln 2, Col 20]"
                                                IterBegin: "[2, 16] (25)"
                                                IterEnd: "[2, 20] (29)"
                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[2, 16] (25)"
                                            IterEnd: "[2, 20] (29)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[2, 16] (25)"
                                        IterEnd: "[2, 20] (29)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 20] (29)"
                                        IterEnd: "[2, 21] (30)"
                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(29, 30), match=':'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 21] (30)"
                                        IterEnd: "[3, 1] (31)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 31
                                          Start: 30
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[3, 1] (31)"
                                        IterEnd: "[3, 9] (39)"
                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                          End: 39
                                          Start: 31
                                          Value: 8
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 9] (39)"
                                                IterEnd: "[3, 13] (43)"
                                                Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(39, 43), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[3, 14] (44)"
                                                                    IterEnd: "[3, 18] (48)"
                                                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(44, 48), match='Int1'>"
                                                                    Whitespace:
                                                                      - 43
                                                                      - 44
                                                                Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                                  Modifier: None
                                                                  Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                                                    Modifier: None
                                                                    Self__: "[Ln 3, Col 14] -> [Ln 3, Col 18]"
                                                                    TypeName: "[Ln 3, Col 14] -> [Ln 3, Col 18]"
                                                                  TypeName: "Int1"
                                                                IterBegin: "[3, 14] (44)"
                                                                IterEnd: "[3, 18] (48)"
                                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[3, 14] (44)"
                                                            IterEnd: "[3, 18] (48)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 14] (44)"
                                                        IterEnd: "[3, 18] (48)"
                                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[3, 18] (48)"
                                                                IterEnd: "[3, 19] (49)"
                                                                Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(48, 49), match=','>"
                                                                Whitespace: None
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 20] (50)"
                                                                            IterEnd: "[3, 24] (54)"
                                                                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(50, 54), match='Int2'>"
                                                                            Whitespace:
                                                                              - 49
                                                                              - 50
                                                                        Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                                          Modifier: None
                                                                          Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                                                            Modifier: None
                                                                            Self__: "[Ln 3, Col 20] -> [Ln 3, Col 24]"
                                                                            TypeName: "[Ln 3, Col 20] -> [Ln 3, Col 24]"
                                                                          TypeName: "Int2"
                                                                        IterBegin: "[3, 20] (50)"
                                                                        IterEnd: "[3, 24] (54)"
                                                                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 20] (50)"
                                                                    IterEnd: "[3, 24] (54)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[3, 20] (50)"
                                                                IterEnd: "[3, 24] (54)"
                                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 18] (48)"
                                                            IterEnd: "[3, 24] (54)"
                                                            Type: "Comma and Content <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[3, 18] (48)"
                                                        IterEnd: "[3, 24] (54)"
                                                        Type: "Repeat: {Comma and Content, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                    IterBegin: "[3, 14] (44)"
                                                    IterEnd: "[3, 24] (54)"
                                                    Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 14] (44)"
                                                IterEnd: "[3, 24] (54)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 24] (54)"
                                                IterEnd: "[3, 25] (55)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(54, 55), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 26] (56)"
                                                                            IterEnd: "[3, 32] (62)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(56, 62), match='value1'>"
                                                                            Whitespace:
                                                                              - 55
                                                                              - 56
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value1"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 3, Col 26] -> [Ln 3, Col 32]"
                                                                            Self__: "[Ln 3, Col 26] -> [Ln 3, Col 32]"
                                                                        IterBegin: "[3, 26] (56)"
                                                                        IterEnd: "[3, 32] (62)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 26] (56)"
                                                                    IterEnd: "[3, 32] (62)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "value1"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 3, Col 26] -> [Ln 3, Col 32]"
                                                                      Self__: "[Ln 3, Col 26] -> [Ln 3, Col 32]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 3, Col 26] -> [Ln 3, Col 32]"
                                                                    Self__: "[Ln 3, Col 26] -> [Ln 3, Col 32]"
                                                                IterBegin: "[3, 26] (56)"
                                                                IterEnd: "[3, 32] (62)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 26] (56)"
                                                            IterEnd: "[3, 32] (62)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 26] (56)"
                                                        IterEnd: "[3, 32] (62)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[3, 32] (62)"
                                                        IterEnd: "[4, 1] (63)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 63
                                                          Start: 62
                                                        Whitespace: None
                                                    IterBegin: "[3, 26] (56)"
                                                    IterEnd: "[4, 1] (63)"
                                                    Type: "Single Line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 26] (56)"
                                                IterEnd: "[4, 1] (63)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 9] (39)"
                                            IterEnd: "[4, 1] (63)"
                                            Type: "Case Phrase <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[3, 9] (39)"
                                        IterEnd: "[4, 1] (63)"
                                        Type: "Repeat: {Case Phrase, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[4, 1] (63)"
                                        IterEnd: "[4, 1] (63)"
                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                          {}
                                        Whitespace: None
                                    IterBegin: "[2, 5] (14)"
                                    IterEnd: "[4, 1] (63)"
                                    Type: "Match <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 1] (63)"
                                    IterEnd: "[4, 1] (63)"
                                    Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 1] (63)"
                                    IterEnd: "[4, 2] (64)"
                                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(63, 64), match=')'>"
                                    Whitespace: None
                                IterBegin: "[1, 9] (8)"
                                IterEnd: "[4, 2] (64)"
                                Type: "Allman-like <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 9] (8)"
                            IterEnd: "[4, 2] (64)"
                            Type: "Style <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.Expressions.MatchTypeExpressionLexerInfo.MatchTypeExpressionLexerInfo'>
                          CasePhrases:
                            - # <class 'TheLanguage.Lexer.Expressions.MatchTypeExpressionLexerInfo.MatchTypeCasePhraseLexerInfo'>
                              Cases:
                                - # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                  Modifier: None
                                  Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                    Modifier: None
                                    Self__: "[Ln 3, Col 14] -> [Ln 3, Col 18]"
                                    TypeName: "[Ln 3, Col 14] -> [Ln 3, Col 18]"
                                  TypeName: "Int1"
                                - # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                  Modifier: None
                                  Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                    Modifier: None
                                    Self__: "[Ln 3, Col 20] -> [Ln 3, Col 24]"
                                    TypeName: "[Ln 3, Col 20] -> [Ln 3, Col 24]"
                                  TypeName: "Int2"
                              Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                  Name: "value1"
                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                    Name: "[Ln 3, Col 26] -> [Ln 3, Col 32]"
                                    Self__: "[Ln 3, Col 26] -> [Ln 3, Col 32]"
                                Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                  Name: "[Ln 3, Col 26] -> [Ln 3, Col 32]"
                                  Self__: "[Ln 3, Col 26] -> [Ln 3, Col 32]"
                              Regions: # <class 'types.MatchTypeCasePhraseLexerInfoRegions'>
                                Cases: "[Ln 3, Col 14] -> [Ln 3, Col 24]"
                                Expression: "[Ln 3, Col 26] -> [Ln 4, Col 1]"
                                Self__: "[Ln 3, Col 9] -> [Ln 4, Col 1]"
                          Default: None
                          Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                              Name: "expr"
                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                Name: "[Ln 2, Col 16] -> [Ln 2, Col 20]"
                                Self__: "[Ln 2, Col 16] -> [Ln 2, Col 20]"
                            Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                              Name: "[Ln 2, Col 16] -> [Ln 2, Col 20]"
                              Self__: "[Ln 2, Col 16] -> [Ln 2, Col 20]"
                          Regions: # <class 'types.MatchTypeExpressionLexerInfoRegions'>
                            CasePhrases: "[Ln 3, Col 9] -> [Ln 4, Col 1]"
                            Default: None
                            Expression: "[Ln 2, Col 16] -> [Ln 2, Col 20]"
                            Self__: "[Ln 1, Col 9] -> [Ln 4, Col 2]"
                        IterBegin: "[1, 9] (8)"
                        IterEnd: "[4, 2] (64)"
                        Type: "Match Type Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 9] (8)"
                    IterEnd: "[4, 2] (64)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 9] (8)"
                IterEnd: "[4, 2] (64)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 2] (64)"
                IterEnd: "[5, 1] (65)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 65
                  Start: 64
                Whitespace: None
            IterBegin: "[1, 1] (0)"
            IterEnd: "[5, 1] (65)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[5, 1] (65)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[5, 1] (65)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[5, 1] (65)"
Type: "<None>"
