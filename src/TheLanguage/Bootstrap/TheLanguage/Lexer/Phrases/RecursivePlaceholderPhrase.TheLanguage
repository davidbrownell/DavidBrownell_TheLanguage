# ----------------------------------------------------------------------
# |
# |  RecursivePlaceholderPhrase.TheLanguage
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2021-12-17 18:42:24
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2021
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
<<<
Contains the `RecursivePlaceholderPhrase` object.
>>>

from ..Components.Phrase import Phrase


# ----------------------------------------------------------------------
[PrivateCtor]
public mutable class RecursivePlaceholderPhrase
    extends Phrase
:
    <<<
    Temporary phrase that should be replace before participating in lexing activites.

    Instances of this object are used as sentinels within a Phrase hierarchy to implement
    recursive grammars.
    >>>

    # ----------------------------------------------------------------------
    public static RecursivePlaceholderPhrase Create():
        return RecursivePlaceholderPhrase("Recursive")

    # ----------------------------------------------------------------------
    public override immutable (LexResult | None) val Lex(
        any:
            UniqueId val unique_id,
            NormalizedIterator var iter,
            Observer ref observer,
        key:
            Bool val ignore_whitespace=False,
    ):
        raise Exception("This method should never be called on an instance of this object")

    # ----------------------------------------------------------------------
    private override mutable Bool val _PopulateRecursiveImpl(Phrase val new_phrase):
        raise Exception("This method should never be called on an instance of this object")
