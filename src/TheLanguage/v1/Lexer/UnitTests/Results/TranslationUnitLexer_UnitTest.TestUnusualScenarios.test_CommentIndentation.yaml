# <class 'v1.Lexer.Components.AST.Node'>
children:
  - # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: true
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 1] (0)"
      end: "[1, 5] (4)"
    type: "HorizontalWhitespace <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
        begin: 0
        end: 4
  - # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: true
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 5] (4)"
      end: "[1, 16] (15)"
    type: "<comment> <class 'v1.Lexer.Components.Tokens.RegexToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
      match: "<_sre.SRE_Match object; span=(4, 15), match='# Comment 1'>"
  - # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: true
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 16] (15)"
      end: "[2, 1] (16)"
    type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
        begin: 15
        end: 16
  - # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: true
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 1] (16)"
      end: "[2, 12] (27)"
    type: "<comment> <class 'v1.Lexer.Components.Tokens.RegexToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
      match: "<_sre.SRE_Match object; span=(16, 27), match='# Comment 2'>"
  - # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: true
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 12] (27)"
      end: "[4, 1] (29)"
    type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
        begin: 27
        end: 29
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Node'>
            children:
              - # <class 'v1.Lexer.Components.AST.Node'>
                children:
                  - # <class 'v1.Lexer.Components.AST.Leaf'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[4, 1] (29)"
                      end: "[4, 5] (33)"
                    type: "Number <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(29, 33), match='1234'>"
                  - # <class 'v1.Lexer.Components.AST.Leaf'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[4, 5] (33)"
                      end: "[6, 1] (35)"
                    type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                    value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 33
                        end: 35
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[4, 1] (29)"
                  end: "[6, 1] (35)"
                type: "Number Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[4, 1] (29)"
              end: "[6, 1] (35)"
            type: "{Number Phrase, 1, None} <class 'v1.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[4, 1] (29)"
          end: "[6, 1] (35)"
        type: "({Number Phrase, 1, None}) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[4, 1] (29)"
      end: "[6, 1] (35)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: true
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[6, 1] (35)"
      end: "[6, 9] (43)"
    type: "HorizontalWhitespace <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
        begin: 35
        end: 43
  - # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: true
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[6, 9] (43)"
      end: "[6, 20] (54)"
    type: "<comment> <class 'v1.Lexer.Components.Tokens.RegexToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
      match: "<_sre.SRE_Match object; span=(43, 54), match='# Comment 3'>"
  - # <class 'v1.Lexer.Components.AST.Leaf'>
    is_ignored: true
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[6, 20] (54)"
      end: "[8, 1] (56)"
    type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
    value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
        begin: 54
        end: 56
iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
  begin: "[1, 1] (0)"
  end: "[8, 1] (56)"
type: "<None>"
