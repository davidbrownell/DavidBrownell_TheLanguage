# ----------------------------------------------------------------------
# This code was automatically generated by the PythonTarget. Any changes made to this
# file will be overwritten during the next generation!
# ----------------------------------------------------------------------

from v1.Lexer.Location import Location
from v1.Parser.MiniLanguage.Types.BooleanType import BooleanType
from v1.Parser.MiniLanguage.Types.CustomType import CustomType
from v1.Parser.MiniLanguage.Types.IntegerType import IntegerType
from v1.Parser.MiniLanguage.Types.NumberType import NumberType
from v1.Parser.MiniLanguage.Types.StringType import StringType
from v1.Parser.ParserInfos.Common.ClassModifier import ClassModifier
from v1.Parser.ParserInfos.Common.ConstraintArgumentsParserInfo import ConstraintArgumentParserInfo
from v1.Parser.ParserInfos.Common.ConstraintArgumentsParserInfo import ConstraintArgumentsParserInfo
from v1.Parser.ParserInfos.Common.ConstraintParametersParserInfo import ConstraintParameterParserInfo
from v1.Parser.ParserInfos.Common.ConstraintParametersParserInfo import ConstraintParametersParserInfo
from v1.Parser.ParserInfos.Common.FuncArgumentsParserInfo import FuncArgumentParserInfo
from v1.Parser.ParserInfos.Common.FuncArgumentsParserInfo import FuncArgumentsParserInfo
from v1.Parser.ParserInfos.Common.FuncParametersParserInfo import FuncParameterParserInfo
from v1.Parser.ParserInfos.Common.FuncParametersParserInfo import FuncParametersParserInfo
from v1.Parser.ParserInfos.Common.MethodModifier import MethodModifier
from v1.Parser.ParserInfos.Common.MutabilityModifier import MutabilityModifier
from v1.Parser.ParserInfos.Common.TemplateParametersParserInfo import TemplateDecoratorParameterParserInfo
from v1.Parser.ParserInfos.Common.TemplateParametersParserInfo import TemplateParametersParserInfo
from v1.Parser.ParserInfos.Common.TemplateParametersParserInfo import TemplateTypeParameterParserInfo
from v1.Parser.ParserInfos.Common.VisibilityModifier import VisibilityModifier
from v1.Parser.ParserInfos.Expressions.BinaryExpressionParserInfo import BinaryExpressionParserInfo, OperatorType as BinaryExpressionOperatorType
from v1.Parser.ParserInfos.Expressions.BooleanExpressionParserInfo import BooleanExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.CallExpressionParserInfo import CallExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.FuncOrTypeExpressionParserInfo import FuncOrTypeExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.IntegerExpressionParserInfo import IntegerExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.StringExpressionParserInfo import StringExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.TernaryExpressionParserInfo import TernaryExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.UnaryExpressionParserInfo import UnaryExpressionParserInfo, OperatorType as UnaryExpressionParserInfoOperatorType
from v1.Parser.ParserInfos.Expressions.VariableExpressionParserInfo import VariableExpressionParserInfo
from v1.Parser.ParserInfos.ParserInfo import ParserInfoType
from v1.Parser.ParserInfos.Statements.ClassCapabilities.StandardCapabilities import StandardCapabilities
from v1.Parser.ParserInfos.Statements.ClassStatementParserInfo import ClassStatementDependencyParserInfo
from v1.Parser.ParserInfos.Statements.ClassStatementParserInfo import ClassStatementParserInfo
from v1.Parser.ParserInfos.Statements.FuncDefinitionStatementParserInfo import FuncDefinitionStatementParserInfo, OperatorType as FuncDefinitionStatementParserInfoOperatorType
from v1.Parser.ParserInfos.Statements.FuncInvocationStatementParserInfo import FuncInvocationStatementParserInfo
from v1.Parser.ParserInfos.Statements.IfStatementParserInfo import IfStatementClauseParserInfo
from v1.Parser.ParserInfos.Statements.IfStatementParserInfo import IfStatementElseClauseParserInfo
from v1.Parser.ParserInfos.Statements.IfStatementParserInfo import IfStatementParserInfo
from v1.Parser.ParserInfos.Statements.ImportStatementParserInfo import ImportStatementItemParserInfo
from v1.Parser.ParserInfos.Statements.ImportStatementParserInfo import ImportStatementParserInfo, ImportType as ImportStatementParserInfoImportType
from v1.Parser.ParserInfos.Statements.SpecialMethodStatementParserInfo import SpecialMethodStatementParserInfo, SpecialMethodType
from v1.Parser.ParserInfos.Statements.TypeAliasStatementParserInfo import TypeAliasStatementParserInfo
from v1.Parser.Region import Region


# ----------------------------------------------------------------------
region_000000 = Region(begin=Location(line=16, column=34), end=Location(line=16, column=44))
region_000001 = Region(begin=Location(line=16, column=1), end=Location(line=19, column=1))
region_000002 = Region(begin=Location(line=16, column=6), end=Location(line=16, column=26))
region_000003 = Region(begin=Location(line=21, column=5), end=Location(line=21, column=8))
region_000004 = Region(begin=Location(line=21, column=5), end=Location(line=21, column=19))
region_000005 = Region(begin=Location(line=21, column=9), end=Location(line=21, column=19))
region_000006 = Region(begin=Location(line=22, column=5), end=Location(line=22, column=9))
region_000007 = Region(begin=Location(line=22, column=5), end=Location(line=22, column=21))
region_000008 = Region(begin=Location(line=22, column=10), end=Location(line=22, column=21))
region_000009 = Region(begin=Location(line=20, column=31), end=Location(line=23, column=2))
region_000010 = Region(begin=Location(line=21, column=5), end=Location(line=22, column=22))
region_000011 = Region(begin=Location(line=25, column=9), end=Location(line=25, column=13))
region_000012 = Region(begin=Location(line=25, column=9), end=Location(line=25, column=24))
region_000013 = Region(begin=Location(line=25, column=14), end=Location(line=25, column=24))
region_000014 = Region(begin=Location(line=26, column=9), end=Location(line=26, column=12))
region_000015 = Region(begin=Location(line=26, column=67), end=Location(line=26, column=77))
region_000016 = Region(begin=Location(line=26, column=30), end=Location(line=26, column=31))
region_000017 = Region(begin=Location(line=26, column=36), end=Location(line=26, column=46))
region_000018 = Region(begin=Location(line=26, column=49), end=Location(line=26, column=50))
region_000019 = Region(begin=Location(line=26, column=36), end=Location(line=26, column=50))
region_000020 = Region(begin=Location(line=26, column=47), end=Location(line=26, column=48))
region_000021 = Region(begin=Location(line=26, column=30), end=Location(line=26, column=51))
region_000022 = Region(begin=Location(line=26, column=32), end=Location(line=26, column=34))
region_000023 = Region(begin=Location(line=26, column=55), end=Location(line=26, column=56))
region_000024 = Region(begin=Location(line=26, column=29), end=Location(line=26, column=56))
region_000025 = Region(begin=Location(line=26, column=53), end=Location(line=26, column=54))
region_000026 = Region(begin=Location(line=26, column=61), end=Location(line=26, column=62))
region_000027 = Region(begin=Location(line=26, column=28), end=Location(line=26, column=62))
region_000028 = Region(begin=Location(line=26, column=58), end=Location(line=26, column=60))
region_000029 = Region(begin=Location(line=26, column=26), end=Location(line=26, column=63))
region_000030 = Region(begin=Location(line=26, column=26), end=Location(line=26, column=27))
region_000031 = Region(begin=Location(line=26, column=83), end=Location(line=26, column=84))
region_000032 = Region(begin=Location(line=26, column=26), end=Location(line=26, column=84))
region_000033 = Region(begin=Location(line=26, column=9), end=Location(line=26, column=84))
region_000034 = Region(begin=Location(line=26, column=13), end=Location(line=26, column=23))
region_000035 = Region(begin=Location(line=27, column=9), end=Location(line=27, column=12))
region_000036 = Region(begin=Location(line=27, column=70), end=Location(line=27, column=80))
region_000037 = Region(begin=Location(line=27, column=29), end=Location(line=27, column=30))
region_000038 = Region(begin=Location(line=27, column=35), end=Location(line=27, column=45))
region_000039 = Region(begin=Location(line=27, column=48), end=Location(line=27, column=49))
region_000040 = Region(begin=Location(line=27, column=35), end=Location(line=27, column=49))
region_000041 = Region(begin=Location(line=27, column=46), end=Location(line=27, column=47))
region_000042 = Region(begin=Location(line=27, column=53), end=Location(line=27, column=54))
region_000043 = Region(begin=Location(line=27, column=34), end=Location(line=27, column=54))
region_000044 = Region(begin=Location(line=27, column=51), end=Location(line=27, column=52))
region_000045 = Region(begin=Location(line=27, column=29), end=Location(line=27, column=54))
region_000046 = Region(begin=Location(line=27, column=31), end=Location(line=27, column=33))
region_000047 = Region(begin=Location(line=27, column=59), end=Location(line=27, column=60))
region_000048 = Region(begin=Location(line=27, column=28), end=Location(line=27, column=60))
region_000049 = Region(begin=Location(line=27, column=56), end=Location(line=27, column=58))
region_000050 = Region(begin=Location(line=27, column=64), end=Location(line=27, column=65))
region_000051 = Region(begin=Location(line=27, column=27), end=Location(line=27, column=65))
region_000052 = Region(begin=Location(line=27, column=62), end=Location(line=27, column=63))
region_000053 = Region(begin=Location(line=27, column=88), end=Location(line=27, column=89))
region_000054 = Region(begin=Location(line=27, column=94), end=Location(line=27, column=104))
region_000055 = Region(begin=Location(line=27, column=107), end=Location(line=27, column=108))
region_000056 = Region(begin=Location(line=27, column=94), end=Location(line=27, column=108))
region_000057 = Region(begin=Location(line=27, column=105), end=Location(line=27, column=106))
region_000058 = Region(begin=Location(line=27, column=88), end=Location(line=27, column=109))
region_000059 = Region(begin=Location(line=27, column=90), end=Location(line=27, column=92))
region_000060 = Region(begin=Location(line=27, column=113), end=Location(line=27, column=114))
region_000061 = Region(begin=Location(line=27, column=87), end=Location(line=27, column=114))
region_000062 = Region(begin=Location(line=27, column=111), end=Location(line=27, column=112))
region_000063 = Region(begin=Location(line=27, column=26), end=Location(line=27, column=115))
region_000064 = Region(begin=Location(line=27, column=9), end=Location(line=27, column=115))
region_000065 = Region(begin=Location(line=27, column=13), end=Location(line=27, column=23))
region_000066 = Region(begin=Location(line=23, column=3), end=Location(line=28, column=2))
region_000067 = Region(begin=Location(line=24, column=5), end=Location(line=27, column=116))
region_000068 = Region(begin=Location(line=29, column=36), end=Location(line=29, column=46))
region_000069 = Region(begin=Location(line=29, column=48), end=Location(line=29, column=58))
region_000070 = Region(begin=Location(line=29, column=34), end=Location(line=29, column=60))
region_000071 = Region(begin=Location(line=29, column=23), end=Location(line=29, column=60))
region_000072 = Region(begin=Location(line=29, column=23), end=Location(line=29, column=33))
region_000073 = Region(begin=Location(line=29, column=16), end=Location(line=29, column=60))
region_000074 = Region(begin=Location(line=29, column=16), end=Location(line=29, column=22))
region_000075 = Region(begin=Location(line=32, column=9), end=Location(line=32, column=17))
region_000076 = Region(begin=Location(line=33, column=13), end=Location(line=33, column=23))
region_000077 = Region(begin=Location(line=33, column=27), end=Location(line=33, column=28))
region_000078 = Region(begin=Location(line=33, column=13), end=Location(line=33, column=28))
region_000079 = Region(begin=Location(line=33, column=24), end=Location(line=33, column=26))
region_000080 = Region(begin=Location(line=34, column=16), end=Location(line=34, column=26))
region_000081 = Region(begin=Location(line=34, column=30), end=Location(line=34, column=31))
region_000082 = Region(begin=Location(line=34, column=16), end=Location(line=34, column=31))
region_000083 = Region(begin=Location(line=34, column=27), end=Location(line=34, column=29))
region_000084 = Region(begin=Location(line=35, column=16), end=Location(line=35, column=26))
region_000085 = Region(begin=Location(line=35, column=30), end=Location(line=35, column=31))
region_000086 = Region(begin=Location(line=35, column=16), end=Location(line=35, column=31))
region_000087 = Region(begin=Location(line=35, column=27), end=Location(line=35, column=29))
region_000088 = Region(begin=Location(line=36, column=16), end=Location(line=36, column=26))
region_000089 = Region(begin=Location(line=36, column=30), end=Location(line=36, column=31))
region_000090 = Region(begin=Location(line=36, column=16), end=Location(line=36, column=31))
region_000091 = Region(begin=Location(line=36, column=27), end=Location(line=36, column=29))
region_000092 = Region(begin=Location(line=37, column=16), end=Location(line=37, column=26))
region_000093 = Region(begin=Location(line=37, column=30), end=Location(line=37, column=32))
region_000094 = Region(begin=Location(line=37, column=16), end=Location(line=37, column=32))
region_000095 = Region(begin=Location(line=37, column=27), end=Location(line=37, column=29))
region_000096 = Region(begin=Location(line=36, column=16), end=Location(line=37, column=32))
region_000097 = Region(begin=Location(line=37, column=13), end=Location(line=37, column=15))
region_000098 = Region(begin=Location(line=35, column=16), end=Location(line=37, column=32))
region_000099 = Region(begin=Location(line=36, column=13), end=Location(line=36, column=15))
region_000100 = Region(begin=Location(line=34, column=16), end=Location(line=37, column=32))
region_000101 = Region(begin=Location(line=35, column=13), end=Location(line=35, column=15))
region_000102 = Region(begin=Location(line=33, column=13), end=Location(line=37, column=32))
region_000103 = Region(begin=Location(line=34, column=13), end=Location(line=34, column=15))
region_000104 = Region(begin=Location(line=32, column=17), end=Location(line=38, column=10))
region_000105 = Region(begin=Location(line=32, column=9), end=Location(line=38, column=10))
region_000106 = Region(begin=Location(line=32, column=9), end=Location(line=40, column=1))
region_000107 = Region(begin=Location(line=31, column=5), end=Location(line=40, column=5))
region_000108 = Region(begin=Location(line=31, column=5), end=Location(line=31, column=23))
region_000109 = Region(begin=Location(line=31, column=25), end=Location(line=40, column=5))
region_000110 = Region(begin=Location(line=42, column=9), end=Location(line=42, column=17))
region_000111 = Region(begin=Location(line=42, column=18), end=Location(line=42, column=28))
region_000112 = Region(begin=Location(line=42, column=73), end=Location(line=42, column=83))
region_000113 = Region(begin=Location(line=42, column=36), end=Location(line=42, column=37))
region_000114 = Region(begin=Location(line=42, column=42), end=Location(line=42, column=52))
region_000115 = Region(begin=Location(line=42, column=55), end=Location(line=42, column=56))
region_000116 = Region(begin=Location(line=42, column=42), end=Location(line=42, column=56))
region_000117 = Region(begin=Location(line=42, column=53), end=Location(line=42, column=54))
region_000118 = Region(begin=Location(line=42, column=36), end=Location(line=42, column=57))
region_000119 = Region(begin=Location(line=42, column=38), end=Location(line=42, column=40))
region_000120 = Region(begin=Location(line=42, column=61), end=Location(line=42, column=62))
region_000121 = Region(begin=Location(line=42, column=35), end=Location(line=42, column=62))
region_000122 = Region(begin=Location(line=42, column=59), end=Location(line=42, column=60))
region_000123 = Region(begin=Location(line=42, column=67), end=Location(line=42, column=68))
region_000124 = Region(begin=Location(line=42, column=34), end=Location(line=42, column=68))
region_000125 = Region(begin=Location(line=42, column=64), end=Location(line=42, column=66))
region_000126 = Region(begin=Location(line=42, column=32), end=Location(line=42, column=69))
region_000127 = Region(begin=Location(line=42, column=32), end=Location(line=42, column=33))
region_000128 = Region(begin=Location(line=42, column=89), end=Location(line=42, column=90))
region_000129 = Region(begin=Location(line=42, column=32), end=Location(line=42, column=90))
region_000130 = Region(begin=Location(line=42, column=18), end=Location(line=42, column=90))
region_000131 = Region(begin=Location(line=42, column=29), end=Location(line=42, column=31))
region_000132 = Region(begin=Location(line=42, column=17), end=Location(line=42, column=91))
region_000133 = Region(begin=Location(line=42, column=9), end=Location(line=42, column=91))
region_000134 = Region(begin=Location(line=42, column=9), end=Location(line=43, column=1))
region_000135 = Region(begin=Location(line=43, column=9), end=Location(line=43, column=17))
region_000136 = Region(begin=Location(line=43, column=76), end=Location(line=43, column=86))
region_000137 = Region(begin=Location(line=43, column=18), end=Location(line=43, column=28))
region_000138 = Region(begin=Location(line=43, column=35), end=Location(line=43, column=36))
region_000139 = Region(begin=Location(line=43, column=41), end=Location(line=43, column=51))
region_000140 = Region(begin=Location(line=43, column=54), end=Location(line=43, column=55))
region_000141 = Region(begin=Location(line=43, column=41), end=Location(line=43, column=55))
region_000142 = Region(begin=Location(line=43, column=52), end=Location(line=43, column=53))
region_000143 = Region(begin=Location(line=43, column=59), end=Location(line=43, column=60))
region_000144 = Region(begin=Location(line=43, column=40), end=Location(line=43, column=60))
region_000145 = Region(begin=Location(line=43, column=57), end=Location(line=43, column=58))
region_000146 = Region(begin=Location(line=43, column=35), end=Location(line=43, column=60))
region_000147 = Region(begin=Location(line=43, column=37), end=Location(line=43, column=39))
region_000148 = Region(begin=Location(line=43, column=65), end=Location(line=43, column=66))
region_000149 = Region(begin=Location(line=43, column=34), end=Location(line=43, column=66))
region_000150 = Region(begin=Location(line=43, column=62), end=Location(line=43, column=64))
region_000151 = Region(begin=Location(line=43, column=70), end=Location(line=43, column=71))
region_000152 = Region(begin=Location(line=43, column=33), end=Location(line=43, column=71))
region_000153 = Region(begin=Location(line=43, column=68), end=Location(line=43, column=69))
region_000154 = Region(begin=Location(line=43, column=18), end=Location(line=43, column=72))
region_000155 = Region(begin=Location(line=43, column=29), end=Location(line=43, column=31))
region_000156 = Region(begin=Location(line=43, column=94), end=Location(line=43, column=95))
region_000157 = Region(begin=Location(line=43, column=100), end=Location(line=43, column=110))
region_000158 = Region(begin=Location(line=43, column=113), end=Location(line=43, column=114))
region_000159 = Region(begin=Location(line=43, column=100), end=Location(line=43, column=114))
region_000160 = Region(begin=Location(line=43, column=111), end=Location(line=43, column=112))
region_000161 = Region(begin=Location(line=43, column=94), end=Location(line=43, column=115))
region_000162 = Region(begin=Location(line=43, column=96), end=Location(line=43, column=98))
region_000163 = Region(begin=Location(line=43, column=119), end=Location(line=43, column=120))
region_000164 = Region(begin=Location(line=43, column=93), end=Location(line=43, column=120))
region_000165 = Region(begin=Location(line=43, column=117), end=Location(line=43, column=118))
region_000166 = Region(begin=Location(line=43, column=18), end=Location(line=43, column=121))
region_000167 = Region(begin=Location(line=43, column=17), end=Location(line=43, column=122))
region_000168 = Region(begin=Location(line=43, column=9), end=Location(line=43, column=122))
region_000169 = Region(begin=Location(line=43, column=9), end=Location(line=45, column=1))
region_000170 = Region(begin=Location(line=46, column=9), end=Location(line=46, column=17))
region_000171 = Region(begin=Location(line=46, column=18), end=Location(line=46, column=28))
region_000172 = Region(begin=Location(line=46, column=31), end=Location(line=46, column=41))
region_000173 = Region(begin=Location(line=46, column=18), end=Location(line=46, column=41))
region_000174 = Region(begin=Location(line=46, column=29), end=Location(line=46, column=30))
region_000175 = Region(begin=Location(line=46, column=90), end=Location(line=46, column=100))
region_000176 = Region(begin=Location(line=46, column=49), end=Location(line=46, column=50))
region_000177 = Region(begin=Location(line=46, column=55), end=Location(line=46, column=65))
region_000178 = Region(begin=Location(line=46, column=68), end=Location(line=46, column=69))
region_000179 = Region(begin=Location(line=46, column=55), end=Location(line=46, column=69))
region_000180 = Region(begin=Location(line=46, column=66), end=Location(line=46, column=67))
region_000181 = Region(begin=Location(line=46, column=73), end=Location(line=46, column=74))
region_000182 = Region(begin=Location(line=46, column=54), end=Location(line=46, column=74))
region_000183 = Region(begin=Location(line=46, column=71), end=Location(line=46, column=72))
region_000184 = Region(begin=Location(line=46, column=49), end=Location(line=46, column=74))
region_000185 = Region(begin=Location(line=46, column=51), end=Location(line=46, column=53))
region_000186 = Region(begin=Location(line=46, column=79), end=Location(line=46, column=80))
region_000187 = Region(begin=Location(line=46, column=48), end=Location(line=46, column=80))
region_000188 = Region(begin=Location(line=46, column=76), end=Location(line=46, column=78))
region_000189 = Region(begin=Location(line=46, column=84), end=Location(line=46, column=85))
region_000190 = Region(begin=Location(line=46, column=47), end=Location(line=46, column=85))
region_000191 = Region(begin=Location(line=46, column=82), end=Location(line=46, column=83))
region_000192 = Region(begin=Location(line=46, column=108), end=Location(line=46, column=109))
region_000193 = Region(begin=Location(line=46, column=114), end=Location(line=46, column=124))
region_000194 = Region(begin=Location(line=46, column=127), end=Location(line=46, column=128))
region_000195 = Region(begin=Location(line=46, column=114), end=Location(line=46, column=128))
region_000196 = Region(begin=Location(line=46, column=125), end=Location(line=46, column=126))
region_000197 = Region(begin=Location(line=46, column=108), end=Location(line=46, column=129))
region_000198 = Region(begin=Location(line=46, column=110), end=Location(line=46, column=112))
region_000199 = Region(begin=Location(line=46, column=133), end=Location(line=46, column=134))
region_000200 = Region(begin=Location(line=46, column=107), end=Location(line=46, column=134))
region_000201 = Region(begin=Location(line=46, column=131), end=Location(line=46, column=132))
region_000202 = Region(begin=Location(line=46, column=46), end=Location(line=46, column=135))
region_000203 = Region(begin=Location(line=46, column=18), end=Location(line=46, column=136))
region_000204 = Region(begin=Location(line=46, column=42), end=Location(line=46, column=44))
region_000205 = Region(begin=Location(line=46, column=17), end=Location(line=46, column=137))
region_000206 = Region(begin=Location(line=46, column=9), end=Location(line=46, column=137))
region_000207 = Region(begin=Location(line=45, column=1), end=Location(line=47, column=1))
region_000208 = Region(begin=Location(line=47, column=9), end=Location(line=47, column=17))
region_000209 = Region(begin=Location(line=47, column=18), end=Location(line=47, column=28))
region_000210 = Region(begin=Location(line=47, column=31), end=Location(line=47, column=41))
region_000211 = Region(begin=Location(line=47, column=18), end=Location(line=47, column=41))
region_000212 = Region(begin=Location(line=47, column=29), end=Location(line=47, column=30))
region_000213 = Region(begin=Location(line=47, column=87), end=Location(line=47, column=97))
region_000214 = Region(begin=Location(line=47, column=50), end=Location(line=47, column=51))
region_000215 = Region(begin=Location(line=47, column=56), end=Location(line=47, column=66))
region_000216 = Region(begin=Location(line=47, column=69), end=Location(line=47, column=70))
region_000217 = Region(begin=Location(line=47, column=56), end=Location(line=47, column=70))
region_000218 = Region(begin=Location(line=47, column=67), end=Location(line=47, column=68))
region_000219 = Region(begin=Location(line=47, column=50), end=Location(line=47, column=71))
region_000220 = Region(begin=Location(line=47, column=52), end=Location(line=47, column=54))
region_000221 = Region(begin=Location(line=47, column=75), end=Location(line=47, column=76))
region_000222 = Region(begin=Location(line=47, column=49), end=Location(line=47, column=76))
region_000223 = Region(begin=Location(line=47, column=73), end=Location(line=47, column=74))
region_000224 = Region(begin=Location(line=47, column=81), end=Location(line=47, column=82))
region_000225 = Region(begin=Location(line=47, column=48), end=Location(line=47, column=82))
region_000226 = Region(begin=Location(line=47, column=78), end=Location(line=47, column=80))
region_000227 = Region(begin=Location(line=47, column=46), end=Location(line=47, column=83))
region_000228 = Region(begin=Location(line=47, column=46), end=Location(line=47, column=47))
region_000229 = Region(begin=Location(line=47, column=103), end=Location(line=47, column=104))
region_000230 = Region(begin=Location(line=47, column=46), end=Location(line=47, column=104))
region_000231 = Region(begin=Location(line=47, column=18), end=Location(line=47, column=105))
region_000232 = Region(begin=Location(line=47, column=42), end=Location(line=47, column=44))
region_000233 = Region(begin=Location(line=47, column=17), end=Location(line=47, column=106))
region_000234 = Region(begin=Location(line=47, column=9), end=Location(line=47, column=106))
region_000235 = Region(begin=Location(line=47, column=9), end=Location(line=49, column=1))
region_000236 = Region(begin=Location(line=40, column=5), end=Location(line=49, column=5))
region_000237 = Region(begin=Location(line=40, column=5), end=Location(line=40, column=25))
region_000238 = Region(begin=Location(line=40, column=27), end=Location(line=49, column=5))
region_000239 = Region(begin=Location(line=49, column=40), end=Location(line=49, column=52))
region_000240 = Region(begin=Location(line=49, column=40), end=Location(line=49, column=48))
region_000241 = Region(begin=Location(line=49, column=49), end=Location(line=49, column=52))
region_000242 = Region(begin=Location(line=49, column=70), end=Location(line=49, column=78))
region_000243 = Region(begin=Location(line=49, column=69), end=Location(line=49, column=79))
region_000244 = Region(begin=Location(line=49, column=80), end=Location(line=49, column=92))
region_000245 = Region(begin=Location(line=49, column=80), end=Location(line=49, column=88))
region_000246 = Region(begin=Location(line=49, column=89), end=Location(line=49, column=92))
region_000247 = Region(begin=Location(line=49, column=80), end=Location(line=49, column=100))
region_000248 = Region(begin=Location(line=49, column=93), end=Location(line=49, column=100))
region_000249 = Region(begin=Location(line=49, column=79), end=Location(line=49, column=101))
region_000250 = Region(begin=Location(line=49, column=5), end=Location(line=50, column=1))
region_000251 = Region(begin=Location(line=49, column=24), end=Location(line=49, column=30))
region_000252 = Region(begin=Location(line=49, column=31), end=Location(line=49, column=39))
region_000253 = Region(begin=Location(line=49, column=53), end=Location(line=49, column=69))
region_000254 = Region(begin=Location(line=49, column=6), end=Location(line=49, column=14))
region_000255 = Region(begin=Location(line=49, column=16), end=Location(line=49, column=22))
region_000256 = Region(begin=Location(line=50, column=52), end=Location(line=50, column=60))
region_000257 = Region(begin=Location(line=50, column=51), end=Location(line=50, column=61))
region_000258 = Region(begin=Location(line=50, column=62), end=Location(line=50, column=74))
region_000259 = Region(begin=Location(line=50, column=62), end=Location(line=50, column=70))
region_000260 = Region(begin=Location(line=50, column=71), end=Location(line=50, column=74))
region_000261 = Region(begin=Location(line=50, column=62), end=Location(line=50, column=82))
region_000262 = Region(begin=Location(line=50, column=75), end=Location(line=50, column=82))
region_000263 = Region(begin=Location(line=50, column=61), end=Location(line=50, column=83))
region_000264 = Region(begin=Location(line=50, column=5), end=Location(line=51, column=1))
region_000265 = Region(begin=Location(line=50, column=16), end=Location(line=50, column=22))
region_000266 = Region(begin=Location(line=50, column=84), end=Location(line=50, column=93))
region_000267 = Region(begin=Location(line=50, column=23), end=Location(line=50, column=31))
region_000268 = Region(begin=Location(line=50, column=37), end=Location(line=50, column=51))
region_000269 = Region(begin=Location(line=50, column=6), end=Location(line=50, column=14))
region_000270 = Region(begin=Location(line=51, column=52), end=Location(line=51, column=60))
region_000271 = Region(begin=Location(line=51, column=51), end=Location(line=51, column=61))
region_000272 = Region(begin=Location(line=51, column=62), end=Location(line=51, column=74))
region_000273 = Region(begin=Location(line=51, column=62), end=Location(line=51, column=70))
region_000274 = Region(begin=Location(line=51, column=71), end=Location(line=51, column=74))
region_000275 = Region(begin=Location(line=51, column=62), end=Location(line=51, column=82))
region_000276 = Region(begin=Location(line=51, column=75), end=Location(line=51, column=82))
region_000277 = Region(begin=Location(line=51, column=61), end=Location(line=51, column=83))
region_000278 = Region(begin=Location(line=51, column=5), end=Location(line=53, column=1))
region_000279 = Region(begin=Location(line=51, column=16), end=Location(line=51, column=22))
region_000280 = Region(begin=Location(line=51, column=84), end=Location(line=51, column=87))
region_000281 = Region(begin=Location(line=51, column=23), end=Location(line=51, column=31))
region_000282 = Region(begin=Location(line=51, column=37), end=Location(line=51, column=51))
region_000283 = Region(begin=Location(line=51, column=6), end=Location(line=51, column=14))
region_000284 = Region(begin=Location(line=53, column=49), end=Location(line=53, column=57))
region_000285 = Region(begin=Location(line=53, column=48), end=Location(line=53, column=58))
region_000286 = Region(begin=Location(line=53, column=59), end=Location(line=53, column=71))
region_000287 = Region(begin=Location(line=53, column=59), end=Location(line=53, column=67))
region_000288 = Region(begin=Location(line=53, column=68), end=Location(line=53, column=71))
region_000289 = Region(begin=Location(line=53, column=59), end=Location(line=53, column=79))
region_000290 = Region(begin=Location(line=53, column=72), end=Location(line=53, column=79))
region_000291 = Region(begin=Location(line=53, column=58), end=Location(line=53, column=80))
region_000292 = Region(begin=Location(line=53, column=5), end=Location(line=54, column=1))
region_000293 = Region(begin=Location(line=53, column=16), end=Location(line=53, column=22))
region_000294 = Region(begin=Location(line=53, column=81), end=Location(line=53, column=90))
region_000295 = Region(begin=Location(line=53, column=23), end=Location(line=53, column=31))
region_000296 = Region(begin=Location(line=53, column=37), end=Location(line=53, column=48))
region_000297 = Region(begin=Location(line=53, column=6), end=Location(line=53, column=14))
region_000298 = Region(begin=Location(line=54, column=49), end=Location(line=54, column=57))
region_000299 = Region(begin=Location(line=54, column=48), end=Location(line=54, column=58))
region_000300 = Region(begin=Location(line=54, column=59), end=Location(line=54, column=71))
region_000301 = Region(begin=Location(line=54, column=59), end=Location(line=54, column=67))
region_000302 = Region(begin=Location(line=54, column=68), end=Location(line=54, column=71))
region_000303 = Region(begin=Location(line=54, column=59), end=Location(line=54, column=79))
region_000304 = Region(begin=Location(line=54, column=72), end=Location(line=54, column=79))
region_000305 = Region(begin=Location(line=54, column=58), end=Location(line=54, column=80))
region_000306 = Region(begin=Location(line=54, column=5), end=Location(line=56, column=1))
region_000307 = Region(begin=Location(line=54, column=16), end=Location(line=54, column=22))
region_000308 = Region(begin=Location(line=54, column=81), end=Location(line=54, column=84))
region_000309 = Region(begin=Location(line=54, column=23), end=Location(line=54, column=31))
region_000310 = Region(begin=Location(line=54, column=37), end=Location(line=54, column=48))
region_000311 = Region(begin=Location(line=54, column=6), end=Location(line=54, column=14))
region_000312 = Region(begin=Location(line=56, column=32), end=Location(line=56, column=44))
region_000313 = Region(begin=Location(line=56, column=32), end=Location(line=56, column=40))
region_000314 = Region(begin=Location(line=56, column=41), end=Location(line=56, column=44))
region_000315 = Region(begin=Location(line=56, column=5), end=Location(line=58, column=1))
region_000316 = Region(begin=Location(line=56, column=16), end=Location(line=56, column=22))
region_000317 = Region(begin=Location(line=56, column=58), end=Location(line=56, column=67))
region_000318 = Region(begin=Location(line=56, column=23), end=Location(line=56, column=31))
region_000319 = Region(begin=Location(line=56, column=45), end=Location(line=56, column=55))
region_000320 = Region(begin=Location(line=56, column=55), end=Location(line=56, column=57))
region_000321 = Region(begin=Location(line=56, column=6), end=Location(line=56, column=14))
region_000322 = Region(begin=Location(line=58, column=32), end=Location(line=58, column=40))
region_000323 = Region(begin=Location(line=58, column=32), end=Location(line=58, column=36))
region_000324 = Region(begin=Location(line=58, column=37), end=Location(line=58, column=40))
region_000325 = Region(begin=Location(line=58, column=5), end=Location(line=59, column=1))
region_000326 = Region(begin=Location(line=58, column=16), end=Location(line=58, column=22))
region_000327 = Region(begin=Location(line=58, column=54), end=Location(line=58, column=63))
region_000328 = Region(begin=Location(line=58, column=23), end=Location(line=58, column=31))
region_000329 = Region(begin=Location(line=58, column=41), end=Location(line=58, column=51))
region_000330 = Region(begin=Location(line=58, column=51), end=Location(line=58, column=53))
region_000331 = Region(begin=Location(line=58, column=6), end=Location(line=58, column=14))
region_000332 = Region(begin=Location(line=59, column=32), end=Location(line=59, column=39))
region_000333 = Region(begin=Location(line=59, column=32), end=Location(line=59, column=35))
region_000334 = Region(begin=Location(line=59, column=36), end=Location(line=59, column=39))
region_000335 = Region(begin=Location(line=59, column=5), end=Location(line=61, column=1))
region_000336 = Region(begin=Location(line=59, column=16), end=Location(line=59, column=22))
region_000337 = Region(begin=Location(line=59, column=56), end=Location(line=59, column=65))
region_000338 = Region(begin=Location(line=59, column=23), end=Location(line=59, column=31))
region_000339 = Region(begin=Location(line=59, column=40), end=Location(line=59, column=53))
region_000340 = Region(begin=Location(line=59, column=53), end=Location(line=59, column=55))
region_000341 = Region(begin=Location(line=59, column=6), end=Location(line=59, column=14))
region_000342 = Region(begin=Location(line=61, column=40), end=Location(line=61, column=57))
region_000343 = Region(begin=Location(line=61, column=40), end=Location(line=61, column=53))
region_000344 = Region(begin=Location(line=61, column=54), end=Location(line=61, column=57))
region_000345 = Region(begin=Location(line=61, column=70), end=Location(line=61, column=88))
region_000346 = Region(begin=Location(line=61, column=70), end=Location(line=61, column=78))
region_000347 = Region(begin=Location(line=61, column=79), end=Location(line=61, column=88))
region_000348 = Region(begin=Location(line=61, column=70), end=Location(line=61, column=93))
region_000349 = Region(begin=Location(line=61, column=89), end=Location(line=61, column=93))
region_000350 = Region(begin=Location(line=61, column=95), end=Location(line=61, column=112))
region_000351 = Region(begin=Location(line=61, column=95), end=Location(line=61, column=102))
region_000352 = Region(begin=Location(line=61, column=103), end=Location(line=61, column=112))
region_000353 = Region(begin=Location(line=61, column=95), end=Location(line=61, column=117))
region_000354 = Region(begin=Location(line=61, column=113), end=Location(line=61, column=117))
region_000355 = Region(begin=Location(line=61, column=69), end=Location(line=61, column=118))
region_000356 = Region(begin=Location(line=61, column=70), end=Location(line=61, column=117))
region_000357 = Region(begin=Location(line=61, column=5), end=Location(line=63, column=1))
region_000358 = Region(begin=Location(line=61, column=24), end=Location(line=61, column=30))
region_000359 = Region(begin=Location(line=61, column=31), end=Location(line=61, column=39))
region_000360 = Region(begin=Location(line=61, column=58), end=Location(line=61, column=69))
region_000361 = Region(begin=Location(line=61, column=6), end=Location(line=61, column=14))
region_000362 = Region(begin=Location(line=61, column=16), end=Location(line=61, column=22))
region_000363 = Region(begin=Location(line=63, column=32), end=Location(line=63, column=40))
region_000364 = Region(begin=Location(line=63, column=32), end=Location(line=63, column=36))
region_000365 = Region(begin=Location(line=63, column=37), end=Location(line=63, column=40))
region_000366 = Region(begin=Location(line=63, column=51), end=Location(line=63, column=68))
region_000367 = Region(begin=Location(line=63, column=51), end=Location(line=63, column=58))
region_000368 = Region(begin=Location(line=63, column=59), end=Location(line=63, column=68))
region_000369 = Region(begin=Location(line=63, column=51), end=Location(line=63, column=73))
region_000370 = Region(begin=Location(line=63, column=69), end=Location(line=63, column=73))
region_000371 = Region(begin=Location(line=63, column=50), end=Location(line=63, column=74))
region_000372 = Region(begin=Location(line=63, column=5), end=Location(line=64, column=1))
region_000373 = Region(begin=Location(line=63, column=16), end=Location(line=63, column=22))
region_000374 = Region(begin=Location(line=63, column=75), end=Location(line=63, column=84))
region_000375 = Region(begin=Location(line=63, column=23), end=Location(line=63, column=31))
region_000376 = Region(begin=Location(line=63, column=41), end=Location(line=63, column=50))
region_000377 = Region(begin=Location(line=63, column=6), end=Location(line=63, column=14))
region_000378 = Region(begin=Location(line=64, column=32), end=Location(line=64, column=40))
region_000379 = Region(begin=Location(line=64, column=32), end=Location(line=64, column=36))
region_000380 = Region(begin=Location(line=64, column=37), end=Location(line=64, column=40))
region_000381 = Region(begin=Location(line=64, column=54), end=Location(line=64, column=71))
region_000382 = Region(begin=Location(line=64, column=54), end=Location(line=64, column=61))
region_000383 = Region(begin=Location(line=64, column=62), end=Location(line=64, column=71))
region_000384 = Region(begin=Location(line=64, column=54), end=Location(line=64, column=76))
region_000385 = Region(begin=Location(line=64, column=72), end=Location(line=64, column=76))
region_000386 = Region(begin=Location(line=64, column=53), end=Location(line=64, column=77))
region_000387 = Region(begin=Location(line=64, column=5), end=Location(line=65, column=1))
region_000388 = Region(begin=Location(line=64, column=16), end=Location(line=64, column=22))
region_000389 = Region(begin=Location(line=64, column=78), end=Location(line=64, column=87))
region_000390 = Region(begin=Location(line=64, column=23), end=Location(line=64, column=31))
region_000391 = Region(begin=Location(line=64, column=41), end=Location(line=64, column=53))
region_000392 = Region(begin=Location(line=64, column=6), end=Location(line=64, column=14))
region_000393 = Region(begin=Location(line=65, column=32), end=Location(line=65, column=40))
region_000394 = Region(begin=Location(line=65, column=32), end=Location(line=65, column=36))
region_000395 = Region(begin=Location(line=65, column=37), end=Location(line=65, column=40))
region_000396 = Region(begin=Location(line=65, column=50), end=Location(line=65, column=67))
region_000397 = Region(begin=Location(line=65, column=50), end=Location(line=65, column=57))
region_000398 = Region(begin=Location(line=65, column=58), end=Location(line=65, column=67))
region_000399 = Region(begin=Location(line=65, column=50), end=Location(line=65, column=72))
region_000400 = Region(begin=Location(line=65, column=68), end=Location(line=65, column=72))
region_000401 = Region(begin=Location(line=65, column=49), end=Location(line=65, column=73))
region_000402 = Region(begin=Location(line=65, column=5), end=Location(line=66, column=1))
region_000403 = Region(begin=Location(line=65, column=16), end=Location(line=65, column=22))
region_000404 = Region(begin=Location(line=65, column=74), end=Location(line=65, column=83))
region_000405 = Region(begin=Location(line=65, column=23), end=Location(line=65, column=31))
region_000406 = Region(begin=Location(line=65, column=41), end=Location(line=65, column=49))
region_000407 = Region(begin=Location(line=65, column=6), end=Location(line=65, column=14))
region_000408 = Region(begin=Location(line=66, column=32), end=Location(line=66, column=40))
region_000409 = Region(begin=Location(line=66, column=32), end=Location(line=66, column=36))
region_000410 = Region(begin=Location(line=66, column=37), end=Location(line=66, column=40))
region_000411 = Region(begin=Location(line=66, column=55), end=Location(line=66, column=72))
region_000412 = Region(begin=Location(line=66, column=55), end=Location(line=66, column=62))
region_000413 = Region(begin=Location(line=66, column=63), end=Location(line=66, column=72))
region_000414 = Region(begin=Location(line=66, column=55), end=Location(line=66, column=77))
region_000415 = Region(begin=Location(line=66, column=73), end=Location(line=66, column=77))
region_000416 = Region(begin=Location(line=66, column=54), end=Location(line=66, column=78))
region_000417 = Region(begin=Location(line=66, column=5), end=Location(line=67, column=1))
region_000418 = Region(begin=Location(line=66, column=16), end=Location(line=66, column=22))
region_000419 = Region(begin=Location(line=66, column=79), end=Location(line=66, column=88))
region_000420 = Region(begin=Location(line=66, column=23), end=Location(line=66, column=31))
region_000421 = Region(begin=Location(line=66, column=41), end=Location(line=66, column=54))
region_000422 = Region(begin=Location(line=66, column=6), end=Location(line=66, column=14))
region_000423 = Region(begin=Location(line=67, column=32), end=Location(line=67, column=40))
region_000424 = Region(begin=Location(line=67, column=32), end=Location(line=67, column=36))
region_000425 = Region(begin=Location(line=67, column=37), end=Location(line=67, column=40))
region_000426 = Region(begin=Location(line=67, column=53), end=Location(line=67, column=70))
region_000427 = Region(begin=Location(line=67, column=53), end=Location(line=67, column=60))
region_000428 = Region(begin=Location(line=67, column=61), end=Location(line=67, column=70))
region_000429 = Region(begin=Location(line=67, column=53), end=Location(line=67, column=75))
region_000430 = Region(begin=Location(line=67, column=71), end=Location(line=67, column=75))
region_000431 = Region(begin=Location(line=67, column=52), end=Location(line=67, column=76))
region_000432 = Region(begin=Location(line=67, column=5), end=Location(line=68, column=1))
region_000433 = Region(begin=Location(line=67, column=16), end=Location(line=67, column=22))
region_000434 = Region(begin=Location(line=67, column=77), end=Location(line=67, column=86))
region_000435 = Region(begin=Location(line=67, column=23), end=Location(line=67, column=31))
region_000436 = Region(begin=Location(line=67, column=41), end=Location(line=67, column=52))
region_000437 = Region(begin=Location(line=67, column=6), end=Location(line=67, column=14))
region_000438 = Region(begin=Location(line=68, column=32), end=Location(line=68, column=40))
region_000439 = Region(begin=Location(line=68, column=32), end=Location(line=68, column=36))
region_000440 = Region(begin=Location(line=68, column=37), end=Location(line=68, column=40))
region_000441 = Region(begin=Location(line=68, column=58), end=Location(line=68, column=75))
region_000442 = Region(begin=Location(line=68, column=58), end=Location(line=68, column=65))
region_000443 = Region(begin=Location(line=68, column=66), end=Location(line=68, column=75))
region_000444 = Region(begin=Location(line=68, column=58), end=Location(line=68, column=80))
region_000445 = Region(begin=Location(line=68, column=76), end=Location(line=68, column=80))
region_000446 = Region(begin=Location(line=68, column=57), end=Location(line=68, column=81))
region_000447 = Region(begin=Location(line=68, column=5), end=Location(line=70, column=1))
region_000448 = Region(begin=Location(line=68, column=16), end=Location(line=68, column=22))
region_000449 = Region(begin=Location(line=68, column=82), end=Location(line=68, column=91))
region_000450 = Region(begin=Location(line=68, column=23), end=Location(line=68, column=31))
region_000451 = Region(begin=Location(line=68, column=41), end=Location(line=68, column=57))
region_000452 = Region(begin=Location(line=68, column=6), end=Location(line=68, column=14))
region_000453 = Region(begin=Location(line=70, column=32), end=Location(line=70, column=44))
region_000454 = Region(begin=Location(line=70, column=32), end=Location(line=70, column=40))
region_000455 = Region(begin=Location(line=70, column=41), end=Location(line=70, column=44))
region_000456 = Region(begin=Location(line=70, column=5), end=Location(line=71, column=1))
region_000457 = Region(begin=Location(line=70, column=16), end=Location(line=70, column=22))
region_000458 = Region(begin=Location(line=70, column=61), end=Location(line=70, column=70))
region_000459 = Region(begin=Location(line=70, column=23), end=Location(line=70, column=31))
region_000460 = Region(begin=Location(line=70, column=45), end=Location(line=70, column=58))
region_000461 = Region(begin=Location(line=70, column=58), end=Location(line=70, column=60))
region_000462 = Region(begin=Location(line=70, column=6), end=Location(line=70, column=14))
region_000463 = Region(begin=Location(line=71, column=32), end=Location(line=71, column=44))
region_000464 = Region(begin=Location(line=71, column=32), end=Location(line=71, column=40))
region_000465 = Region(begin=Location(line=71, column=41), end=Location(line=71, column=44))
region_000466 = Region(begin=Location(line=71, column=5), end=Location(line=72, column=1))
region_000467 = Region(begin=Location(line=71, column=16), end=Location(line=71, column=22))
region_000468 = Region(begin=Location(line=71, column=61), end=Location(line=71, column=70))
region_000469 = Region(begin=Location(line=71, column=23), end=Location(line=71, column=31))
region_000470 = Region(begin=Location(line=71, column=45), end=Location(line=71, column=58))
region_000471 = Region(begin=Location(line=71, column=58), end=Location(line=71, column=60))
region_000472 = Region(begin=Location(line=71, column=6), end=Location(line=71, column=14))
region_000473 = Region(begin=Location(line=72, column=32), end=Location(line=72, column=44))
region_000474 = Region(begin=Location(line=72, column=32), end=Location(line=72, column=40))
region_000475 = Region(begin=Location(line=72, column=41), end=Location(line=72, column=44))
region_000476 = Region(begin=Location(line=72, column=5), end=Location(line=74, column=1))
region_000477 = Region(begin=Location(line=72, column=16), end=Location(line=72, column=22))
region_000478 = Region(begin=Location(line=72, column=60), end=Location(line=72, column=69))
region_000479 = Region(begin=Location(line=72, column=23), end=Location(line=72, column=31))
region_000480 = Region(begin=Location(line=72, column=45), end=Location(line=72, column=57))
region_000481 = Region(begin=Location(line=72, column=57), end=Location(line=72, column=59))
region_000482 = Region(begin=Location(line=72, column=6), end=Location(line=72, column=14))
region_000483 = Region(begin=Location(line=74, column=32), end=Location(line=74, column=39))
region_000484 = Region(begin=Location(line=74, column=32), end=Location(line=74, column=35))
region_000485 = Region(begin=Location(line=74, column=36), end=Location(line=74, column=39))
region_000486 = Region(begin=Location(line=74, column=52), end=Location(line=74, column=69))
region_000487 = Region(begin=Location(line=74, column=52), end=Location(line=74, column=59))
region_000488 = Region(begin=Location(line=74, column=60), end=Location(line=74, column=69))
region_000489 = Region(begin=Location(line=74, column=52), end=Location(line=74, column=77))
region_000490 = Region(begin=Location(line=74, column=70), end=Location(line=74, column=77))
region_000491 = Region(begin=Location(line=74, column=51), end=Location(line=74, column=78))
region_000492 = Region(begin=Location(line=74, column=5), end=Location(line=75, column=1))
region_000493 = Region(begin=Location(line=74, column=16), end=Location(line=74, column=22))
region_000494 = Region(begin=Location(line=74, column=79), end=Location(line=74, column=88))
region_000495 = Region(begin=Location(line=74, column=23), end=Location(line=74, column=31))
region_000496 = Region(begin=Location(line=74, column=40), end=Location(line=74, column=51))
region_000497 = Region(begin=Location(line=74, column=6), end=Location(line=74, column=14))
region_000498 = Region(begin=Location(line=75, column=32), end=Location(line=75, column=44))
region_000499 = Region(begin=Location(line=75, column=32), end=Location(line=75, column=40))
region_000500 = Region(begin=Location(line=75, column=41), end=Location(line=75, column=44))
region_000501 = Region(begin=Location(line=75, column=62), end=Location(line=75, column=79))
region_000502 = Region(begin=Location(line=75, column=62), end=Location(line=75, column=69))
region_000503 = Region(begin=Location(line=75, column=70), end=Location(line=75, column=79))
region_000504 = Region(begin=Location(line=75, column=62), end=Location(line=75, column=87))
region_000505 = Region(begin=Location(line=75, column=80), end=Location(line=75, column=87))
region_000506 = Region(begin=Location(line=75, column=61), end=Location(line=75, column=88))
region_000507 = Region(begin=Location(line=75, column=5), end=Location(line=76, column=1))
region_000508 = Region(begin=Location(line=75, column=16), end=Location(line=75, column=22))
region_000509 = Region(begin=Location(line=75, column=89), end=Location(line=75, column=98))
region_000510 = Region(begin=Location(line=75, column=23), end=Location(line=75, column=31))
region_000511 = Region(begin=Location(line=75, column=45), end=Location(line=75, column=61))
region_000512 = Region(begin=Location(line=75, column=6), end=Location(line=75, column=14))
region_000513 = Region(begin=Location(line=76, column=32), end=Location(line=76, column=44))
region_000514 = Region(begin=Location(line=76, column=32), end=Location(line=76, column=40))
region_000515 = Region(begin=Location(line=76, column=41), end=Location(line=76, column=44))
region_000516 = Region(begin=Location(line=76, column=57), end=Location(line=76, column=74))
region_000517 = Region(begin=Location(line=76, column=57), end=Location(line=76, column=64))
region_000518 = Region(begin=Location(line=76, column=65), end=Location(line=76, column=74))
region_000519 = Region(begin=Location(line=76, column=57), end=Location(line=76, column=82))
region_000520 = Region(begin=Location(line=76, column=75), end=Location(line=76, column=82))
region_000521 = Region(begin=Location(line=76, column=56), end=Location(line=76, column=83))
region_000522 = Region(begin=Location(line=76, column=5), end=Location(line=77, column=1))
region_000523 = Region(begin=Location(line=76, column=16), end=Location(line=76, column=22))
region_000524 = Region(begin=Location(line=76, column=84), end=Location(line=76, column=93))
region_000525 = Region(begin=Location(line=76, column=23), end=Location(line=76, column=31))
region_000526 = Region(begin=Location(line=76, column=45), end=Location(line=76, column=56))
region_000527 = Region(begin=Location(line=76, column=6), end=Location(line=76, column=14))
region_000528 = Region(begin=Location(line=77, column=32), end=Location(line=77, column=44))
region_000529 = Region(begin=Location(line=77, column=32), end=Location(line=77, column=40))
region_000530 = Region(begin=Location(line=77, column=41), end=Location(line=77, column=44))
region_000531 = Region(begin=Location(line=77, column=59), end=Location(line=77, column=76))
region_000532 = Region(begin=Location(line=77, column=59), end=Location(line=77, column=66))
region_000533 = Region(begin=Location(line=77, column=67), end=Location(line=77, column=76))
region_000534 = Region(begin=Location(line=77, column=59), end=Location(line=77, column=87))
region_000535 = Region(begin=Location(line=77, column=77), end=Location(line=77, column=87))
region_000536 = Region(begin=Location(line=77, column=58), end=Location(line=77, column=88))
region_000537 = Region(begin=Location(line=77, column=5), end=Location(line=78, column=1))
region_000538 = Region(begin=Location(line=77, column=16), end=Location(line=77, column=22))
region_000539 = Region(begin=Location(line=77, column=89), end=Location(line=77, column=98))
region_000540 = Region(begin=Location(line=77, column=23), end=Location(line=77, column=31))
region_000541 = Region(begin=Location(line=77, column=45), end=Location(line=77, column=58))
region_000542 = Region(begin=Location(line=77, column=6), end=Location(line=77, column=14))
region_000543 = Region(begin=Location(line=78, column=32), end=Location(line=78, column=44))
region_000544 = Region(begin=Location(line=78, column=32), end=Location(line=78, column=40))
region_000545 = Region(begin=Location(line=78, column=41), end=Location(line=78, column=44))
region_000546 = Region(begin=Location(line=78, column=56), end=Location(line=78, column=73))
region_000547 = Region(begin=Location(line=78, column=56), end=Location(line=78, column=63))
region_000548 = Region(begin=Location(line=78, column=64), end=Location(line=78, column=73))
region_000549 = Region(begin=Location(line=78, column=56), end=Location(line=78, column=82))
region_000550 = Region(begin=Location(line=78, column=74), end=Location(line=78, column=82))
region_000551 = Region(begin=Location(line=78, column=55), end=Location(line=78, column=83))
region_000552 = Region(begin=Location(line=78, column=5), end=Location(line=80, column=1))
region_000553 = Region(begin=Location(line=78, column=16), end=Location(line=78, column=22))
region_000554 = Region(begin=Location(line=78, column=84), end=Location(line=78, column=93))
region_000555 = Region(begin=Location(line=78, column=23), end=Location(line=78, column=31))
region_000556 = Region(begin=Location(line=78, column=45), end=Location(line=78, column=55))
region_000557 = Region(begin=Location(line=78, column=6), end=Location(line=78, column=14))
region_000558 = Region(begin=Location(line=80, column=32), end=Location(line=80, column=44))
region_000559 = Region(begin=Location(line=80, column=32), end=Location(line=80, column=40))
region_000560 = Region(begin=Location(line=80, column=41), end=Location(line=80, column=44))
region_000561 = Region(begin=Location(line=80, column=54), end=Location(line=80, column=71))
region_000562 = Region(begin=Location(line=80, column=54), end=Location(line=80, column=61))
region_000563 = Region(begin=Location(line=80, column=62), end=Location(line=80, column=71))
region_000564 = Region(begin=Location(line=80, column=54), end=Location(line=80, column=77))
region_000565 = Region(begin=Location(line=80, column=72), end=Location(line=80, column=77))
region_000566 = Region(begin=Location(line=80, column=53), end=Location(line=80, column=78))
region_000567 = Region(begin=Location(line=80, column=5), end=Location(line=81, column=1))
region_000568 = Region(begin=Location(line=80, column=16), end=Location(line=80, column=22))
region_000569 = Region(begin=Location(line=80, column=79), end=Location(line=80, column=88))
region_000570 = Region(begin=Location(line=80, column=23), end=Location(line=80, column=31))
region_000571 = Region(begin=Location(line=80, column=45), end=Location(line=80, column=53))
region_000572 = Region(begin=Location(line=80, column=6), end=Location(line=80, column=14))
region_000573 = Region(begin=Location(line=81, column=32), end=Location(line=81, column=44))
region_000574 = Region(begin=Location(line=81, column=32), end=Location(line=81, column=40))
region_000575 = Region(begin=Location(line=81, column=41), end=Location(line=81, column=44))
region_000576 = Region(begin=Location(line=81, column=59), end=Location(line=81, column=76))
region_000577 = Region(begin=Location(line=81, column=59), end=Location(line=81, column=66))
region_000578 = Region(begin=Location(line=81, column=67), end=Location(line=81, column=76))
region_000579 = Region(begin=Location(line=81, column=59), end=Location(line=81, column=82))
region_000580 = Region(begin=Location(line=81, column=77), end=Location(line=81, column=82))
region_000581 = Region(begin=Location(line=81, column=58), end=Location(line=81, column=83))
region_000582 = Region(begin=Location(line=81, column=5), end=Location(line=83, column=1))
region_000583 = Region(begin=Location(line=81, column=16), end=Location(line=81, column=22))
region_000584 = Region(begin=Location(line=81, column=84), end=Location(line=81, column=93))
region_000585 = Region(begin=Location(line=81, column=23), end=Location(line=81, column=31))
region_000586 = Region(begin=Location(line=81, column=45), end=Location(line=81, column=58))
region_000587 = Region(begin=Location(line=81, column=6), end=Location(line=81, column=14))
region_000588 = Region(begin=Location(line=83, column=32), end=Location(line=83, column=44))
region_000589 = Region(begin=Location(line=83, column=32), end=Location(line=83, column=40))
region_000590 = Region(begin=Location(line=83, column=41), end=Location(line=83, column=44))
region_000591 = Region(begin=Location(line=83, column=63), end=Location(line=83, column=80))
region_000592 = Region(begin=Location(line=83, column=63), end=Location(line=83, column=70))
region_000593 = Region(begin=Location(line=83, column=71), end=Location(line=83, column=80))
region_000594 = Region(begin=Location(line=83, column=63), end=Location(line=83, column=87))
region_000595 = Region(begin=Location(line=83, column=81), end=Location(line=83, column=87))
region_000596 = Region(begin=Location(line=83, column=62), end=Location(line=83, column=88))
region_000597 = Region(begin=Location(line=83, column=5), end=Location(line=84, column=1))
region_000598 = Region(begin=Location(line=83, column=16), end=Location(line=83, column=22))
region_000599 = Region(begin=Location(line=83, column=89), end=Location(line=83, column=98))
region_000600 = Region(begin=Location(line=83, column=23), end=Location(line=83, column=31))
region_000601 = Region(begin=Location(line=83, column=45), end=Location(line=83, column=62))
region_000602 = Region(begin=Location(line=83, column=6), end=Location(line=83, column=14))
region_000603 = Region(begin=Location(line=84, column=32), end=Location(line=84, column=44))
region_000604 = Region(begin=Location(line=84, column=32), end=Location(line=84, column=40))
region_000605 = Region(begin=Location(line=84, column=41), end=Location(line=84, column=44))
region_000606 = Region(begin=Location(line=84, column=64), end=Location(line=84, column=81))
region_000607 = Region(begin=Location(line=84, column=64), end=Location(line=84, column=71))
region_000608 = Region(begin=Location(line=84, column=72), end=Location(line=84, column=81))
region_000609 = Region(begin=Location(line=84, column=64), end=Location(line=84, column=88))
region_000610 = Region(begin=Location(line=84, column=82), end=Location(line=84, column=88))
region_000611 = Region(begin=Location(line=84, column=63), end=Location(line=84, column=89))
region_000612 = Region(begin=Location(line=84, column=5), end=Location(line=86, column=1))
region_000613 = Region(begin=Location(line=84, column=16), end=Location(line=84, column=22))
region_000614 = Region(begin=Location(line=84, column=90), end=Location(line=84, column=99))
region_000615 = Region(begin=Location(line=84, column=23), end=Location(line=84, column=31))
region_000616 = Region(begin=Location(line=84, column=45), end=Location(line=84, column=63))
region_000617 = Region(begin=Location(line=84, column=6), end=Location(line=84, column=14))
region_000618 = Region(begin=Location(line=86, column=32), end=Location(line=86, column=44))
region_000619 = Region(begin=Location(line=86, column=32), end=Location(line=86, column=40))
region_000620 = Region(begin=Location(line=86, column=41), end=Location(line=86, column=44))
region_000621 = Region(begin=Location(line=86, column=57), end=Location(line=86, column=74))
region_000622 = Region(begin=Location(line=86, column=57), end=Location(line=86, column=64))
region_000623 = Region(begin=Location(line=86, column=65), end=Location(line=86, column=74))
region_000624 = Region(begin=Location(line=86, column=57), end=Location(line=86, column=80))
region_000625 = Region(begin=Location(line=86, column=75), end=Location(line=86, column=80))
region_000626 = Region(begin=Location(line=86, column=56), end=Location(line=86, column=81))
region_000627 = Region(begin=Location(line=86, column=5), end=Location(line=87, column=1))
region_000628 = Region(begin=Location(line=86, column=16), end=Location(line=86, column=22))
region_000629 = Region(begin=Location(line=86, column=82), end=Location(line=86, column=91))
region_000630 = Region(begin=Location(line=86, column=23), end=Location(line=86, column=31))
region_000631 = Region(begin=Location(line=86, column=45), end=Location(line=86, column=56))
region_000632 = Region(begin=Location(line=86, column=6), end=Location(line=86, column=14))
region_000633 = Region(begin=Location(line=87, column=32), end=Location(line=87, column=44))
region_000634 = Region(begin=Location(line=87, column=32), end=Location(line=87, column=40))
region_000635 = Region(begin=Location(line=87, column=41), end=Location(line=87, column=44))
region_000636 = Region(begin=Location(line=87, column=57), end=Location(line=87, column=74))
region_000637 = Region(begin=Location(line=87, column=57), end=Location(line=87, column=64))
region_000638 = Region(begin=Location(line=87, column=65), end=Location(line=87, column=74))
region_000639 = Region(begin=Location(line=87, column=57), end=Location(line=87, column=80))
region_000640 = Region(begin=Location(line=87, column=75), end=Location(line=87, column=80))
region_000641 = Region(begin=Location(line=87, column=56), end=Location(line=87, column=81))
region_000642 = Region(begin=Location(line=87, column=5), end=Location(line=88, column=1))
region_000643 = Region(begin=Location(line=87, column=16), end=Location(line=87, column=22))
region_000644 = Region(begin=Location(line=87, column=82), end=Location(line=87, column=91))
region_000645 = Region(begin=Location(line=87, column=23), end=Location(line=87, column=31))
region_000646 = Region(begin=Location(line=87, column=45), end=Location(line=87, column=56))
region_000647 = Region(begin=Location(line=87, column=6), end=Location(line=87, column=14))
region_000648 = Region(begin=Location(line=88, column=32), end=Location(line=88, column=44))
region_000649 = Region(begin=Location(line=88, column=32), end=Location(line=88, column=40))
region_000650 = Region(begin=Location(line=88, column=41), end=Location(line=88, column=44))
region_000651 = Region(begin=Location(line=88, column=56), end=Location(line=88, column=73))
region_000652 = Region(begin=Location(line=88, column=56), end=Location(line=88, column=63))
region_000653 = Region(begin=Location(line=88, column=64), end=Location(line=88, column=73))
region_000654 = Region(begin=Location(line=88, column=56), end=Location(line=88, column=79))
region_000655 = Region(begin=Location(line=88, column=74), end=Location(line=88, column=79))
region_000656 = Region(begin=Location(line=88, column=55), end=Location(line=88, column=80))
region_000657 = Region(begin=Location(line=88, column=5), end=Location(line=90, column=1))
region_000658 = Region(begin=Location(line=88, column=16), end=Location(line=88, column=22))
region_000659 = Region(begin=Location(line=88, column=81), end=Location(line=88, column=90))
region_000660 = Region(begin=Location(line=88, column=23), end=Location(line=88, column=31))
region_000661 = Region(begin=Location(line=88, column=45), end=Location(line=88, column=55))
region_000662 = Region(begin=Location(line=88, column=6), end=Location(line=88, column=14))
region_000663 = Region(begin=Location(line=90, column=5), end=Location(line=92, column=1))
region_000664 = Region(begin=Location(line=90, column=16), end=Location(line=90, column=22))
region_000665 = Region(begin=Location(line=90, column=59), end=Location(line=90, column=62))
region_000666 = Region(begin=Location(line=90, column=23), end=Location(line=90, column=31))
region_000667 = Region(begin=Location(line=90, column=37), end=Location(line=90, column=56))
region_000668 = Region(begin=Location(line=90, column=56), end=Location(line=90, column=58))
region_000669 = Region(begin=Location(line=90, column=6), end=Location(line=90, column=14))
region_000670 = Region(begin=Location(line=92, column=61), end=Location(line=92, column=78))
region_000671 = Region(begin=Location(line=92, column=61), end=Location(line=92, column=68))
region_000672 = Region(begin=Location(line=92, column=69), end=Location(line=92, column=78))
region_000673 = Region(begin=Location(line=92, column=61), end=Location(line=92, column=86))
region_000674 = Region(begin=Location(line=92, column=79), end=Location(line=92, column=86))
region_000675 = Region(begin=Location(line=92, column=60), end=Location(line=92, column=87))
region_000676 = Region(begin=Location(line=92, column=5), end=Location(line=93, column=1))
region_000677 = Region(begin=Location(line=92, column=16), end=Location(line=92, column=22))
region_000678 = Region(begin=Location(line=92, column=88), end=Location(line=92, column=91))
region_000679 = Region(begin=Location(line=92, column=23), end=Location(line=92, column=31))
region_000680 = Region(begin=Location(line=92, column=37), end=Location(line=92, column=60))
region_000681 = Region(begin=Location(line=92, column=6), end=Location(line=92, column=14))
region_000682 = Region(begin=Location(line=93, column=56), end=Location(line=93, column=73))
region_000683 = Region(begin=Location(line=93, column=56), end=Location(line=93, column=63))
region_000684 = Region(begin=Location(line=93, column=64), end=Location(line=93, column=73))
region_000685 = Region(begin=Location(line=93, column=56), end=Location(line=93, column=81))
region_000686 = Region(begin=Location(line=93, column=74), end=Location(line=93, column=81))
region_000687 = Region(begin=Location(line=93, column=55), end=Location(line=93, column=82))
region_000688 = Region(begin=Location(line=93, column=5), end=Location(line=94, column=1))
region_000689 = Region(begin=Location(line=93, column=16), end=Location(line=93, column=22))
region_000690 = Region(begin=Location(line=93, column=83), end=Location(line=93, column=86))
region_000691 = Region(begin=Location(line=93, column=23), end=Location(line=93, column=31))
region_000692 = Region(begin=Location(line=93, column=37), end=Location(line=93, column=55))
region_000693 = Region(begin=Location(line=93, column=6), end=Location(line=93, column=14))
region_000694 = Region(begin=Location(line=94, column=58), end=Location(line=94, column=75))
region_000695 = Region(begin=Location(line=94, column=58), end=Location(line=94, column=65))
region_000696 = Region(begin=Location(line=94, column=66), end=Location(line=94, column=75))
region_000697 = Region(begin=Location(line=94, column=58), end=Location(line=94, column=86))
region_000698 = Region(begin=Location(line=94, column=76), end=Location(line=94, column=86))
region_000699 = Region(begin=Location(line=94, column=57), end=Location(line=94, column=87))
region_000700 = Region(begin=Location(line=94, column=5), end=Location(line=95, column=1))
region_000701 = Region(begin=Location(line=94, column=16), end=Location(line=94, column=22))
region_000702 = Region(begin=Location(line=94, column=88), end=Location(line=94, column=91))
region_000703 = Region(begin=Location(line=94, column=23), end=Location(line=94, column=31))
region_000704 = Region(begin=Location(line=94, column=37), end=Location(line=94, column=57))
region_000705 = Region(begin=Location(line=94, column=6), end=Location(line=94, column=14))
region_000706 = Region(begin=Location(line=95, column=55), end=Location(line=95, column=72))
region_000707 = Region(begin=Location(line=95, column=55), end=Location(line=95, column=62))
region_000708 = Region(begin=Location(line=95, column=63), end=Location(line=95, column=72))
region_000709 = Region(begin=Location(line=95, column=55), end=Location(line=95, column=81))
region_000710 = Region(begin=Location(line=95, column=73), end=Location(line=95, column=81))
region_000711 = Region(begin=Location(line=95, column=54), end=Location(line=95, column=82))
region_000712 = Region(begin=Location(line=95, column=5), end=Location(line=97, column=1))
region_000713 = Region(begin=Location(line=95, column=16), end=Location(line=95, column=22))
region_000714 = Region(begin=Location(line=95, column=83), end=Location(line=95, column=86))
region_000715 = Region(begin=Location(line=95, column=23), end=Location(line=95, column=31))
region_000716 = Region(begin=Location(line=95, column=37), end=Location(line=95, column=54))
region_000717 = Region(begin=Location(line=95, column=6), end=Location(line=95, column=14))
region_000718 = Region(begin=Location(line=97, column=53), end=Location(line=97, column=70))
region_000719 = Region(begin=Location(line=97, column=53), end=Location(line=97, column=60))
region_000720 = Region(begin=Location(line=97, column=61), end=Location(line=97, column=70))
region_000721 = Region(begin=Location(line=97, column=53), end=Location(line=97, column=76))
region_000722 = Region(begin=Location(line=97, column=71), end=Location(line=97, column=76))
region_000723 = Region(begin=Location(line=97, column=52), end=Location(line=97, column=77))
region_000724 = Region(begin=Location(line=97, column=5), end=Location(line=98, column=1))
region_000725 = Region(begin=Location(line=97, column=16), end=Location(line=97, column=22))
region_000726 = Region(begin=Location(line=97, column=78), end=Location(line=97, column=81))
region_000727 = Region(begin=Location(line=97, column=23), end=Location(line=97, column=31))
region_000728 = Region(begin=Location(line=97, column=37), end=Location(line=97, column=52))
region_000729 = Region(begin=Location(line=97, column=6), end=Location(line=97, column=14))
region_000730 = Region(begin=Location(line=98, column=58), end=Location(line=98, column=75))
region_000731 = Region(begin=Location(line=98, column=58), end=Location(line=98, column=65))
region_000732 = Region(begin=Location(line=98, column=66), end=Location(line=98, column=75))
region_000733 = Region(begin=Location(line=98, column=58), end=Location(line=98, column=81))
region_000734 = Region(begin=Location(line=98, column=76), end=Location(line=98, column=81))
region_000735 = Region(begin=Location(line=98, column=57), end=Location(line=98, column=82))
region_000736 = Region(begin=Location(line=98, column=5), end=Location(line=100, column=1))
region_000737 = Region(begin=Location(line=98, column=16), end=Location(line=98, column=22))
region_000738 = Region(begin=Location(line=98, column=83), end=Location(line=98, column=86))
region_000739 = Region(begin=Location(line=98, column=23), end=Location(line=98, column=31))
region_000740 = Region(begin=Location(line=98, column=37), end=Location(line=98, column=57))
region_000741 = Region(begin=Location(line=98, column=6), end=Location(line=98, column=14))
region_000742 = Region(begin=Location(line=100, column=62), end=Location(line=100, column=79))
region_000743 = Region(begin=Location(line=100, column=62), end=Location(line=100, column=69))
region_000744 = Region(begin=Location(line=100, column=70), end=Location(line=100, column=79))
region_000745 = Region(begin=Location(line=100, column=62), end=Location(line=100, column=86))
region_000746 = Region(begin=Location(line=100, column=80), end=Location(line=100, column=86))
region_000747 = Region(begin=Location(line=100, column=61), end=Location(line=100, column=87))
region_000748 = Region(begin=Location(line=100, column=5), end=Location(line=101, column=1))
region_000749 = Region(begin=Location(line=100, column=16), end=Location(line=100, column=22))
region_000750 = Region(begin=Location(line=100, column=88), end=Location(line=100, column=91))
region_000751 = Region(begin=Location(line=100, column=23), end=Location(line=100, column=31))
region_000752 = Region(begin=Location(line=100, column=37), end=Location(line=100, column=61))
region_000753 = Region(begin=Location(line=100, column=6), end=Location(line=100, column=14))
region_000754 = Region(begin=Location(line=101, column=63), end=Location(line=101, column=80))
region_000755 = Region(begin=Location(line=101, column=63), end=Location(line=101, column=70))
region_000756 = Region(begin=Location(line=101, column=71), end=Location(line=101, column=80))
region_000757 = Region(begin=Location(line=101, column=63), end=Location(line=101, column=87))
region_000758 = Region(begin=Location(line=101, column=81), end=Location(line=101, column=87))
region_000759 = Region(begin=Location(line=101, column=62), end=Location(line=101, column=88))
region_000760 = Region(begin=Location(line=101, column=5), end=Location(line=103, column=1))
region_000761 = Region(begin=Location(line=101, column=16), end=Location(line=101, column=22))
region_000762 = Region(begin=Location(line=101, column=89), end=Location(line=101, column=92))
region_000763 = Region(begin=Location(line=101, column=23), end=Location(line=101, column=31))
region_000764 = Region(begin=Location(line=101, column=37), end=Location(line=101, column=62))
region_000765 = Region(begin=Location(line=101, column=6), end=Location(line=101, column=14))
region_000766 = Region(begin=Location(line=103, column=56), end=Location(line=103, column=73))
region_000767 = Region(begin=Location(line=103, column=56), end=Location(line=103, column=63))
region_000768 = Region(begin=Location(line=103, column=64), end=Location(line=103, column=73))
region_000769 = Region(begin=Location(line=103, column=56), end=Location(line=103, column=79))
region_000770 = Region(begin=Location(line=103, column=74), end=Location(line=103, column=79))
region_000771 = Region(begin=Location(line=103, column=55), end=Location(line=103, column=80))
region_000772 = Region(begin=Location(line=103, column=5), end=Location(line=104, column=1))
region_000773 = Region(begin=Location(line=103, column=16), end=Location(line=103, column=22))
region_000774 = Region(begin=Location(line=103, column=81), end=Location(line=103, column=84))
region_000775 = Region(begin=Location(line=103, column=23), end=Location(line=103, column=31))
region_000776 = Region(begin=Location(line=103, column=37), end=Location(line=103, column=55))
region_000777 = Region(begin=Location(line=103, column=6), end=Location(line=103, column=14))
region_000778 = Region(begin=Location(line=104, column=56), end=Location(line=104, column=73))
region_000779 = Region(begin=Location(line=104, column=56), end=Location(line=104, column=63))
region_000780 = Region(begin=Location(line=104, column=64), end=Location(line=104, column=73))
region_000781 = Region(begin=Location(line=104, column=56), end=Location(line=104, column=79))
region_000782 = Region(begin=Location(line=104, column=74), end=Location(line=104, column=79))
region_000783 = Region(begin=Location(line=104, column=55), end=Location(line=104, column=80))
region_000784 = Region(begin=Location(line=104, column=5), end=Location(line=105, column=1))
region_000785 = Region(begin=Location(line=104, column=16), end=Location(line=104, column=22))
region_000786 = Region(begin=Location(line=104, column=81), end=Location(line=104, column=84))
region_000787 = Region(begin=Location(line=104, column=23), end=Location(line=104, column=31))
region_000788 = Region(begin=Location(line=104, column=37), end=Location(line=104, column=55))
region_000789 = Region(begin=Location(line=104, column=6), end=Location(line=104, column=14))
region_000790 = Region(begin=Location(line=105, column=55), end=Location(line=105, column=72))
region_000791 = Region(begin=Location(line=105, column=55), end=Location(line=105, column=62))
region_000792 = Region(begin=Location(line=105, column=63), end=Location(line=105, column=72))
region_000793 = Region(begin=Location(line=105, column=55), end=Location(line=105, column=78))
region_000794 = Region(begin=Location(line=105, column=73), end=Location(line=105, column=78))
region_000795 = Region(begin=Location(line=105, column=54), end=Location(line=105, column=79))
region_000796 = Region(begin=Location(line=105, column=5), end=Location(line=108, column=1))
region_000797 = Region(begin=Location(line=105, column=16), end=Location(line=105, column=22))
region_000798 = Region(begin=Location(line=105, column=80), end=Location(line=105, column=83))
region_000799 = Region(begin=Location(line=105, column=23), end=Location(line=105, column=31))
region_000800 = Region(begin=Location(line=105, column=37), end=Location(line=105, column=54))
region_000801 = Region(begin=Location(line=105, column=6), end=Location(line=105, column=14))
region_000802 = Region(begin=Location(line=20, column=1), end=Location(line=109, column=1))
region_000803 = Region(begin=Location(line=20, column=1), end=Location(line=20, column=7))
region_000804 = Region(begin=Location(line=20, column=8), end=Location(line=20, column=15))
region_000805 = Region(begin=Location(line=20, column=22), end=Location(line=20, column=30))
region_000806 = Region(begin=Location(line=30, column=1), end=Location(line=109, column=1))
region_000807 = Region(begin=Location(line=109, column=57), end=Location(line=109, column=58))
region_000808 = Region(begin=Location(line=109, column=73), end=Location(line=109, column=77))
region_000809 = Region(begin=Location(line=109, column=60), end=Location(line=109, column=77))
region_000810 = Region(begin=Location(line=109, column=60), end=Location(line=109, column=70))
region_000811 = Region(begin=Location(line=109, column=93), end=Location(line=109, column=98))
region_000812 = Region(begin=Location(line=109, column=79), end=Location(line=109, column=98))
region_000813 = Region(begin=Location(line=109, column=79), end=Location(line=109, column=90))
region_000814 = Region(begin=Location(line=109, column=56), end=Location(line=109, column=99))
region_000815 = Region(begin=Location(line=109, column=47), end=Location(line=109, column=99))
region_000816 = Region(begin=Location(line=109, column=47), end=Location(line=109, column=55))
region_000817 = Region(begin=Location(line=109, column=1), end=Location(line=110, column=1))
region_000818 = Region(begin=Location(line=109, column=1), end=Location(line=109, column=7))
region_000819 = Region(begin=Location(line=109, column=8), end=Location(line=109, column=12))
region_000820 = Region(begin=Location(line=110, column=57), end=Location(line=110, column=58))
region_000821 = Region(begin=Location(line=110, column=73), end=Location(line=110, column=77))
region_000822 = Region(begin=Location(line=110, column=60), end=Location(line=110, column=77))
region_000823 = Region(begin=Location(line=110, column=60), end=Location(line=110, column=70))
region_000824 = Region(begin=Location(line=110, column=93), end=Location(line=110, column=97))
region_000825 = Region(begin=Location(line=110, column=79), end=Location(line=110, column=97))
region_000826 = Region(begin=Location(line=110, column=79), end=Location(line=110, column=90))
region_000827 = Region(begin=Location(line=110, column=56), end=Location(line=110, column=98))
region_000828 = Region(begin=Location(line=110, column=47), end=Location(line=110, column=98))
region_000829 = Region(begin=Location(line=110, column=47), end=Location(line=110, column=55))
region_000830 = Region(begin=Location(line=110, column=1), end=Location(line=112, column=1))
region_000831 = Region(begin=Location(line=110, column=1), end=Location(line=110, column=7))
region_000832 = Region(begin=Location(line=110, column=8), end=Location(line=110, column=19))
region_000833 = Region(begin=Location(line=112, column=57), end=Location(line=112, column=58))
region_000834 = Region(begin=Location(line=112, column=73), end=Location(line=112, column=78))
region_000835 = Region(begin=Location(line=112, column=60), end=Location(line=112, column=78))
region_000836 = Region(begin=Location(line=112, column=60), end=Location(line=112, column=70))
region_000837 = Region(begin=Location(line=112, column=94), end=Location(line=112, column=99))
region_000838 = Region(begin=Location(line=112, column=80), end=Location(line=112, column=99))
region_000839 = Region(begin=Location(line=112, column=80), end=Location(line=112, column=91))
region_000840 = Region(begin=Location(line=112, column=56), end=Location(line=112, column=100))
region_000841 = Region(begin=Location(line=112, column=47), end=Location(line=112, column=100))
region_000842 = Region(begin=Location(line=112, column=47), end=Location(line=112, column=55))
region_000843 = Region(begin=Location(line=112, column=1), end=Location(line=113, column=1))
region_000844 = Region(begin=Location(line=112, column=1), end=Location(line=112, column=7))
region_000845 = Region(begin=Location(line=112, column=8), end=Location(line=112, column=13))
region_000846 = Region(begin=Location(line=113, column=57), end=Location(line=113, column=58))
region_000847 = Region(begin=Location(line=113, column=73), end=Location(line=113, column=78))
region_000848 = Region(begin=Location(line=113, column=60), end=Location(line=113, column=78))
region_000849 = Region(begin=Location(line=113, column=60), end=Location(line=113, column=70))
region_000850 = Region(begin=Location(line=113, column=94), end=Location(line=113, column=98))
region_000851 = Region(begin=Location(line=113, column=80), end=Location(line=113, column=98))
region_000852 = Region(begin=Location(line=113, column=80), end=Location(line=113, column=91))
region_000853 = Region(begin=Location(line=113, column=56), end=Location(line=113, column=99))
region_000854 = Region(begin=Location(line=113, column=47), end=Location(line=113, column=99))
region_000855 = Region(begin=Location(line=113, column=47), end=Location(line=113, column=55))
region_000856 = Region(begin=Location(line=113, column=1), end=Location(line=116, column=1))
region_000857 = Region(begin=Location(line=113, column=1), end=Location(line=113, column=7))
region_000858 = Region(begin=Location(line=113, column=8), end=Location(line=113, column=20))
region_000859 = Region(begin=Location(line=117, column=57), end=Location(line=117, column=58))
region_000860 = Region(begin=Location(line=117, column=73), end=Location(line=117, column=77))
region_000861 = Region(begin=Location(line=117, column=60), end=Location(line=117, column=77))
region_000862 = Region(begin=Location(line=117, column=60), end=Location(line=117, column=70))
region_000863 = Region(begin=Location(line=117, column=93), end=Location(line=117, column=98))
region_000864 = Region(begin=Location(line=117, column=79), end=Location(line=117, column=98))
region_000865 = Region(begin=Location(line=117, column=79), end=Location(line=117, column=90))
region_000866 = Region(begin=Location(line=117, column=56), end=Location(line=117, column=99))
region_000867 = Region(begin=Location(line=117, column=47), end=Location(line=117, column=99))
region_000868 = Region(begin=Location(line=117, column=47), end=Location(line=117, column=55))
region_000869 = Region(begin=Location(line=117, column=1), end=Location(line=118, column=1))
region_000870 = Region(begin=Location(line=117, column=1), end=Location(line=117, column=7))
region_000871 = Region(begin=Location(line=117, column=8), end=Location(line=117, column=13))
region_000872 = Region(begin=Location(line=118, column=57), end=Location(line=118, column=58))
region_000873 = Region(begin=Location(line=118, column=73), end=Location(line=118, column=77))
region_000874 = Region(begin=Location(line=118, column=60), end=Location(line=118, column=77))
region_000875 = Region(begin=Location(line=118, column=60), end=Location(line=118, column=70))
region_000876 = Region(begin=Location(line=118, column=93), end=Location(line=118, column=97))
region_000877 = Region(begin=Location(line=118, column=79), end=Location(line=118, column=97))
region_000878 = Region(begin=Location(line=118, column=79), end=Location(line=118, column=90))
region_000879 = Region(begin=Location(line=118, column=56), end=Location(line=118, column=98))
region_000880 = Region(begin=Location(line=118, column=47), end=Location(line=118, column=98))
region_000881 = Region(begin=Location(line=118, column=47), end=Location(line=118, column=55))
region_000882 = Region(begin=Location(line=118, column=1), end=Location(line=120, column=1))
region_000883 = Region(begin=Location(line=118, column=1), end=Location(line=118, column=7))
region_000884 = Region(begin=Location(line=118, column=8), end=Location(line=118, column=20))
region_000885 = Region(begin=Location(line=120, column=57), end=Location(line=120, column=58))
region_000886 = Region(begin=Location(line=120, column=73), end=Location(line=120, column=78))
region_000887 = Region(begin=Location(line=120, column=60), end=Location(line=120, column=78))
region_000888 = Region(begin=Location(line=120, column=60), end=Location(line=120, column=70))
region_000889 = Region(begin=Location(line=120, column=94), end=Location(line=120, column=99))
region_000890 = Region(begin=Location(line=120, column=80), end=Location(line=120, column=99))
region_000891 = Region(begin=Location(line=120, column=80), end=Location(line=120, column=91))
region_000892 = Region(begin=Location(line=120, column=56), end=Location(line=120, column=100))
region_000893 = Region(begin=Location(line=120, column=47), end=Location(line=120, column=100))
region_000894 = Region(begin=Location(line=120, column=47), end=Location(line=120, column=55))
region_000895 = Region(begin=Location(line=120, column=1), end=Location(line=121, column=1))
region_000896 = Region(begin=Location(line=120, column=1), end=Location(line=120, column=7))
region_000897 = Region(begin=Location(line=120, column=8), end=Location(line=120, column=14))
region_000898 = Region(begin=Location(line=121, column=57), end=Location(line=121, column=58))
region_000899 = Region(begin=Location(line=121, column=73), end=Location(line=121, column=78))
region_000900 = Region(begin=Location(line=121, column=60), end=Location(line=121, column=78))
region_000901 = Region(begin=Location(line=121, column=60), end=Location(line=121, column=70))
region_000902 = Region(begin=Location(line=121, column=94), end=Location(line=121, column=98))
region_000903 = Region(begin=Location(line=121, column=80), end=Location(line=121, column=98))
region_000904 = Region(begin=Location(line=121, column=80), end=Location(line=121, column=91))
region_000905 = Region(begin=Location(line=121, column=56), end=Location(line=121, column=99))
region_000906 = Region(begin=Location(line=121, column=47), end=Location(line=121, column=99))
region_000907 = Region(begin=Location(line=121, column=47), end=Location(line=121, column=55))
region_000908 = Region(begin=Location(line=121, column=1), end=Location(line=124, column=1))
region_000909 = Region(begin=Location(line=121, column=1), end=Location(line=121, column=7))
region_000910 = Region(begin=Location(line=121, column=8), end=Location(line=121, column=21))
region_000911 = Region(begin=Location(line=125, column=57), end=Location(line=125, column=58))
region_000912 = Region(begin=Location(line=125, column=73), end=Location(line=125, column=77))
region_000913 = Region(begin=Location(line=125, column=60), end=Location(line=125, column=77))
region_000914 = Region(begin=Location(line=125, column=60), end=Location(line=125, column=70))
region_000915 = Region(begin=Location(line=125, column=93), end=Location(line=125, column=98))
region_000916 = Region(begin=Location(line=125, column=79), end=Location(line=125, column=98))
region_000917 = Region(begin=Location(line=125, column=79), end=Location(line=125, column=90))
region_000918 = Region(begin=Location(line=125, column=56), end=Location(line=125, column=99))
region_000919 = Region(begin=Location(line=125, column=47), end=Location(line=125, column=99))
region_000920 = Region(begin=Location(line=125, column=47), end=Location(line=125, column=55))
region_000921 = Region(begin=Location(line=125, column=1), end=Location(line=126, column=1))
region_000922 = Region(begin=Location(line=125, column=1), end=Location(line=125, column=7))
region_000923 = Region(begin=Location(line=125, column=8), end=Location(line=125, column=13))
region_000924 = Region(begin=Location(line=126, column=57), end=Location(line=126, column=58))
region_000925 = Region(begin=Location(line=126, column=73), end=Location(line=126, column=77))
region_000926 = Region(begin=Location(line=126, column=60), end=Location(line=126, column=77))
region_000927 = Region(begin=Location(line=126, column=60), end=Location(line=126, column=70))
region_000928 = Region(begin=Location(line=126, column=93), end=Location(line=126, column=97))
region_000929 = Region(begin=Location(line=126, column=79), end=Location(line=126, column=97))
region_000930 = Region(begin=Location(line=126, column=79), end=Location(line=126, column=90))
region_000931 = Region(begin=Location(line=126, column=56), end=Location(line=126, column=98))
region_000932 = Region(begin=Location(line=126, column=47), end=Location(line=126, column=98))
region_000933 = Region(begin=Location(line=126, column=47), end=Location(line=126, column=55))
region_000934 = Region(begin=Location(line=126, column=1), end=Location(line=128, column=1))
region_000935 = Region(begin=Location(line=126, column=1), end=Location(line=126, column=7))
region_000936 = Region(begin=Location(line=126, column=8), end=Location(line=126, column=20))
region_000937 = Region(begin=Location(line=128, column=57), end=Location(line=128, column=58))
region_000938 = Region(begin=Location(line=128, column=73), end=Location(line=128, column=78))
region_000939 = Region(begin=Location(line=128, column=60), end=Location(line=128, column=78))
region_000940 = Region(begin=Location(line=128, column=60), end=Location(line=128, column=70))
region_000941 = Region(begin=Location(line=128, column=94), end=Location(line=128, column=99))
region_000942 = Region(begin=Location(line=128, column=80), end=Location(line=128, column=99))
region_000943 = Region(begin=Location(line=128, column=80), end=Location(line=128, column=91))
region_000944 = Region(begin=Location(line=128, column=56), end=Location(line=128, column=100))
region_000945 = Region(begin=Location(line=128, column=47), end=Location(line=128, column=100))
region_000946 = Region(begin=Location(line=128, column=47), end=Location(line=128, column=55))
region_000947 = Region(begin=Location(line=128, column=1), end=Location(line=129, column=1))
region_000948 = Region(begin=Location(line=128, column=1), end=Location(line=128, column=7))
region_000949 = Region(begin=Location(line=128, column=8), end=Location(line=128, column=14))
region_000950 = Region(begin=Location(line=129, column=57), end=Location(line=129, column=58))
region_000951 = Region(begin=Location(line=129, column=73), end=Location(line=129, column=78))
region_000952 = Region(begin=Location(line=129, column=60), end=Location(line=129, column=78))
region_000953 = Region(begin=Location(line=129, column=60), end=Location(line=129, column=70))
region_000954 = Region(begin=Location(line=129, column=94), end=Location(line=129, column=98))
region_000955 = Region(begin=Location(line=129, column=80), end=Location(line=129, column=98))
region_000956 = Region(begin=Location(line=129, column=80), end=Location(line=129, column=91))
region_000957 = Region(begin=Location(line=129, column=56), end=Location(line=129, column=99))
region_000958 = Region(begin=Location(line=129, column=47), end=Location(line=129, column=99))
region_000959 = Region(begin=Location(line=129, column=47), end=Location(line=129, column=55))
region_000960 = Region(begin=Location(line=129, column=1), end=Location(line=132, column=1))
region_000961 = Region(begin=Location(line=129, column=1), end=Location(line=129, column=7))
region_000962 = Region(begin=Location(line=129, column=8), end=Location(line=129, column=21))
region_000963 = Region(begin=Location(line=133, column=57), end=Location(line=133, column=58))
region_000964 = Region(begin=Location(line=133, column=73), end=Location(line=133, column=77))
region_000965 = Region(begin=Location(line=133, column=60), end=Location(line=133, column=77))
region_000966 = Region(begin=Location(line=133, column=60), end=Location(line=133, column=70))
region_000967 = Region(begin=Location(line=133, column=93), end=Location(line=133, column=98))
region_000968 = Region(begin=Location(line=133, column=79), end=Location(line=133, column=98))
region_000969 = Region(begin=Location(line=133, column=79), end=Location(line=133, column=90))
region_000970 = Region(begin=Location(line=133, column=56), end=Location(line=133, column=99))
region_000971 = Region(begin=Location(line=133, column=47), end=Location(line=133, column=99))
region_000972 = Region(begin=Location(line=133, column=47), end=Location(line=133, column=55))
region_000973 = Region(begin=Location(line=133, column=1), end=Location(line=134, column=1))
region_000974 = Region(begin=Location(line=133, column=1), end=Location(line=133, column=7))
region_000975 = Region(begin=Location(line=133, column=8), end=Location(line=133, column=13))
region_000976 = Region(begin=Location(line=134, column=57), end=Location(line=134, column=58))
region_000977 = Region(begin=Location(line=134, column=73), end=Location(line=134, column=77))
region_000978 = Region(begin=Location(line=134, column=60), end=Location(line=134, column=77))
region_000979 = Region(begin=Location(line=134, column=60), end=Location(line=134, column=70))
region_000980 = Region(begin=Location(line=134, column=93), end=Location(line=134, column=97))
region_000981 = Region(begin=Location(line=134, column=79), end=Location(line=134, column=97))
region_000982 = Region(begin=Location(line=134, column=79), end=Location(line=134, column=90))
region_000983 = Region(begin=Location(line=134, column=56), end=Location(line=134, column=98))
region_000984 = Region(begin=Location(line=134, column=47), end=Location(line=134, column=98))
region_000985 = Region(begin=Location(line=134, column=47), end=Location(line=134, column=55))
region_000986 = Region(begin=Location(line=134, column=1), end=Location(line=136, column=1))
region_000987 = Region(begin=Location(line=134, column=1), end=Location(line=134, column=7))
region_000988 = Region(begin=Location(line=134, column=8), end=Location(line=134, column=20))
region_000989 = Region(begin=Location(line=136, column=57), end=Location(line=136, column=58))
region_000990 = Region(begin=Location(line=136, column=73), end=Location(line=136, column=78))
region_000991 = Region(begin=Location(line=136, column=60), end=Location(line=136, column=78))
region_000992 = Region(begin=Location(line=136, column=60), end=Location(line=136, column=70))
region_000993 = Region(begin=Location(line=136, column=94), end=Location(line=136, column=99))
region_000994 = Region(begin=Location(line=136, column=80), end=Location(line=136, column=99))
region_000995 = Region(begin=Location(line=136, column=80), end=Location(line=136, column=91))
region_000996 = Region(begin=Location(line=136, column=56), end=Location(line=136, column=100))
region_000997 = Region(begin=Location(line=136, column=47), end=Location(line=136, column=100))
region_000998 = Region(begin=Location(line=136, column=47), end=Location(line=136, column=55))
region_000999 = Region(begin=Location(line=136, column=1), end=Location(line=137, column=1))
region_001000 = Region(begin=Location(line=136, column=1), end=Location(line=136, column=7))
region_001001 = Region(begin=Location(line=136, column=8), end=Location(line=136, column=14))
region_001002 = Region(begin=Location(line=137, column=57), end=Location(line=137, column=58))
region_001003 = Region(begin=Location(line=137, column=73), end=Location(line=137, column=78))
region_001004 = Region(begin=Location(line=137, column=60), end=Location(line=137, column=78))
region_001005 = Region(begin=Location(line=137, column=60), end=Location(line=137, column=70))
region_001006 = Region(begin=Location(line=137, column=94), end=Location(line=137, column=98))
region_001007 = Region(begin=Location(line=137, column=80), end=Location(line=137, column=98))
region_001008 = Region(begin=Location(line=137, column=80), end=Location(line=137, column=91))
region_001009 = Region(begin=Location(line=137, column=56), end=Location(line=137, column=99))
region_001010 = Region(begin=Location(line=137, column=47), end=Location(line=137, column=99))
region_001011 = Region(begin=Location(line=137, column=47), end=Location(line=137, column=55))
region_001012 = Region(begin=Location(line=137, column=1), end=Location(line=140, column=1))
region_001013 = Region(begin=Location(line=137, column=1), end=Location(line=137, column=7))
region_001014 = Region(begin=Location(line=137, column=8), end=Location(line=137, column=21))
region_001015 = Region(begin=Location(line=141, column=57), end=Location(line=141, column=59))
region_001016 = Region(begin=Location(line=141, column=74), end=Location(line=141, column=78))
region_001017 = Region(begin=Location(line=141, column=61), end=Location(line=141, column=78))
region_001018 = Region(begin=Location(line=141, column=61), end=Location(line=141, column=71))
region_001019 = Region(begin=Location(line=141, column=94), end=Location(line=141, column=99))
region_001020 = Region(begin=Location(line=141, column=80), end=Location(line=141, column=99))
region_001021 = Region(begin=Location(line=141, column=80), end=Location(line=141, column=91))
region_001022 = Region(begin=Location(line=141, column=56), end=Location(line=141, column=100))
region_001023 = Region(begin=Location(line=141, column=47), end=Location(line=141, column=100))
region_001024 = Region(begin=Location(line=141, column=47), end=Location(line=141, column=55))
region_001025 = Region(begin=Location(line=141, column=1), end=Location(line=142, column=1))
region_001026 = Region(begin=Location(line=141, column=1), end=Location(line=141, column=7))
region_001027 = Region(begin=Location(line=141, column=8), end=Location(line=141, column=14))
region_001028 = Region(begin=Location(line=142, column=57), end=Location(line=142, column=59))
region_001029 = Region(begin=Location(line=142, column=74), end=Location(line=142, column=78))
region_001030 = Region(begin=Location(line=142, column=61), end=Location(line=142, column=78))
region_001031 = Region(begin=Location(line=142, column=61), end=Location(line=142, column=71))
region_001032 = Region(begin=Location(line=142, column=94), end=Location(line=142, column=98))
region_001033 = Region(begin=Location(line=142, column=80), end=Location(line=142, column=98))
region_001034 = Region(begin=Location(line=142, column=80), end=Location(line=142, column=91))
region_001035 = Region(begin=Location(line=142, column=56), end=Location(line=142, column=99))
region_001036 = Region(begin=Location(line=142, column=47), end=Location(line=142, column=99))
region_001037 = Region(begin=Location(line=142, column=47), end=Location(line=142, column=55))
region_001038 = Region(begin=Location(line=142, column=1), end=Location(line=144, column=1))
region_001039 = Region(begin=Location(line=142, column=1), end=Location(line=142, column=7))
region_001040 = Region(begin=Location(line=142, column=8), end=Location(line=142, column=21))
region_001041 = Region(begin=Location(line=144, column=57), end=Location(line=144, column=59))
region_001042 = Region(begin=Location(line=144, column=74), end=Location(line=144, column=79))
region_001043 = Region(begin=Location(line=144, column=61), end=Location(line=144, column=79))
region_001044 = Region(begin=Location(line=144, column=61), end=Location(line=144, column=71))
region_001045 = Region(begin=Location(line=144, column=95), end=Location(line=144, column=100))
region_001046 = Region(begin=Location(line=144, column=81), end=Location(line=144, column=100))
region_001047 = Region(begin=Location(line=144, column=81), end=Location(line=144, column=92))
region_001048 = Region(begin=Location(line=144, column=56), end=Location(line=144, column=101))
region_001049 = Region(begin=Location(line=144, column=47), end=Location(line=144, column=101))
region_001050 = Region(begin=Location(line=144, column=47), end=Location(line=144, column=55))
region_001051 = Region(begin=Location(line=144, column=1), end=Location(line=145, column=1))
region_001052 = Region(begin=Location(line=144, column=1), end=Location(line=144, column=7))
region_001053 = Region(begin=Location(line=144, column=8), end=Location(line=144, column=15))
region_001054 = Region(begin=Location(line=145, column=57), end=Location(line=145, column=59))
region_001055 = Region(begin=Location(line=145, column=74), end=Location(line=145, column=79))
region_001056 = Region(begin=Location(line=145, column=61), end=Location(line=145, column=79))
region_001057 = Region(begin=Location(line=145, column=61), end=Location(line=145, column=71))
region_001058 = Region(begin=Location(line=145, column=95), end=Location(line=145, column=99))
region_001059 = Region(begin=Location(line=145, column=81), end=Location(line=145, column=99))
region_001060 = Region(begin=Location(line=145, column=81), end=Location(line=145, column=92))
region_001061 = Region(begin=Location(line=145, column=56), end=Location(line=145, column=100))
region_001062 = Region(begin=Location(line=145, column=47), end=Location(line=145, column=100))
region_001063 = Region(begin=Location(line=145, column=47), end=Location(line=145, column=55))
region_001064 = Region(begin=Location(line=145, column=1), end=Location(line=148, column=1))
region_001065 = Region(begin=Location(line=145, column=1), end=Location(line=145, column=7))
region_001066 = Region(begin=Location(line=145, column=8), end=Location(line=145, column=22))
region_001067 = Region(begin=Location(line=149, column=4), end=Location(line=149, column=25))
region_001068 = Region(begin=Location(line=149, column=29), end=Location(line=149, column=30))
region_001069 = Region(begin=Location(line=149, column=4), end=Location(line=149, column=30))
region_001070 = Region(begin=Location(line=149, column=26), end=Location(line=149, column=28))
region_001071 = Region(begin=Location(line=150, column=47), end=Location(line=150, column=53))
region_001072 = Region(begin=Location(line=150, column=5), end=Location(line=151, column=1))
region_001073 = Region(begin=Location(line=150, column=5), end=Location(line=150, column=11))
region_001074 = Region(begin=Location(line=150, column=12), end=Location(line=150, column=19))
region_001075 = Region(begin=Location(line=151, column=47), end=Location(line=151, column=60))
region_001076 = Region(begin=Location(line=151, column=5), end=Location(line=153, column=1))
region_001077 = Region(begin=Location(line=151, column=5), end=Location(line=151, column=11))
region_001078 = Region(begin=Location(line=151, column=12), end=Location(line=151, column=26))
region_001079 = Region(begin=Location(line=149, column=1), end=Location(line=159, column=1))
region_001080 = Region(begin=Location(line=149, column=30), end=Location(line=153, column=1))
region_001081 = Region(begin=Location(line=153, column=6), end=Location(line=153, column=27))
region_001082 = Region(begin=Location(line=153, column=31), end=Location(line=153, column=32))
region_001083 = Region(begin=Location(line=153, column=6), end=Location(line=153, column=32))
region_001084 = Region(begin=Location(line=153, column=28), end=Location(line=153, column=30))
region_001085 = Region(begin=Location(line=154, column=47), end=Location(line=154, column=53))
region_001086 = Region(begin=Location(line=154, column=5), end=Location(line=155, column=1))
region_001087 = Region(begin=Location(line=154, column=5), end=Location(line=154, column=11))
region_001088 = Region(begin=Location(line=154, column=12), end=Location(line=154, column=19))
region_001089 = Region(begin=Location(line=155, column=47), end=Location(line=155, column=60))
region_001090 = Region(begin=Location(line=155, column=5), end=Location(line=157, column=1))
region_001091 = Region(begin=Location(line=155, column=5), end=Location(line=155, column=11))
region_001092 = Region(begin=Location(line=155, column=12), end=Location(line=155, column=26))
region_001093 = Region(begin=Location(line=153, column=1), end=Location(line=157, column=1))
region_001094 = Region(begin=Location(line=153, column=32), end=Location(line=157, column=1))
region_001095 = Region(begin=Location(line=158, column=5), end=Location(line=158, column=11))
region_001096 = Region(begin=Location(line=158, column=12), end=Location(line=158, column=38))
region_001097 = Region(begin=Location(line=158, column=40), end=Location(line=158, column=61))
region_001098 = Region(begin=Location(line=158, column=11), end=Location(line=158, column=62))
region_001099 = Region(begin=Location(line=158, column=5), end=Location(line=158, column=62))
region_001100 = Region(begin=Location(line=158, column=5), end=Location(line=159, column=1))
region_001101 = Region(begin=Location(line=157, column=1), end=Location(line=159, column=1))
region_001102 = Region(begin=Location(line=157, column=5), end=Location(line=159, column=1))


# ----------------------------------------------------------------------
statement_000000 = ImportStatementItemParserInfo.Create(
    regions=[region_000000, region_000000, None],
    name="MutableInt",
    alias=None,
)

statement_000001 = ImportStatementParserInfo.Create(
    regions=[region_000001, region_000001, region_000002],
    visibility_param=VisibilityModifier.private,
    source_filename=".Concepts.MutableInt",
    import_items=[statement_000000, ],
    import_type=ImportStatementParserInfoImportType.source_is_module,
)

statement_000002 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000003, region_000003, None],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000003 = TemplateDecoratorParameterParserInfo.Create(
    regions=[region_000004, region_000005],
    type=statement_000002,
    name="num_bytes!",
    default_value=None,
)

statement_000004 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000006, region_000006, None],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000005 = TemplateDecoratorParameterParserInfo.Create(
    regions=[region_000007, region_000008],
    type=statement_000004,
    name="is_checked!",
    default_value=None,
)

statement_000006 = TemplateParametersParserInfo.Create(
    regions=[region_000009, None, region_000010, None],
    positional=None,
    any=[statement_000003, statement_000005, ],
    keyword=None,
)

statement_000007 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000011, region_000011, None],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000008 = ConstraintParameterParserInfo.Create(
    regions=[region_000012, region_000013],
    type=statement_000007,
    name="is_signed!",
    default_value=None,
)

statement_000009 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000014, region_000014, None],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000010 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000015, region_000015],
    name="is_signed!",
)

statement_000011 = IntegerExpressionParserInfo.Create(
    regions=[region_000016],
    value=1,
)

statement_000012 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000017, region_000017],
    name="num_bytes!",
)

statement_000013 = IntegerExpressionParserInfo.Create(
    regions=[region_000018],
    value=8,
)

statement_000014 = BinaryExpressionParserInfo.Create(
    regions=[region_000019, region_000020],
    left_expression=statement_000012,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000013,
)

statement_000015 = BinaryExpressionParserInfo.Create(
    regions=[region_000021, region_000022],
    left_expression=statement_000011,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000014,
)

statement_000016 = IntegerExpressionParserInfo.Create(
    regions=[region_000023],
    value=1,
)

statement_000017 = BinaryExpressionParserInfo.Create(
    regions=[region_000024, region_000025],
    left_expression=statement_000015,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000016,
)

statement_000018 = IntegerExpressionParserInfo.Create(
    regions=[region_000026],
    value=2,
)

statement_000019 = BinaryExpressionParserInfo.Create(
    regions=[region_000027, region_000028],
    left_expression=statement_000017,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000018,
)

statement_000020 = UnaryExpressionParserInfo.Create(
    regions=[region_000029, region_000030],
    operator=UnaryExpressionParserInfoOperatorType.Negative,
    expression=statement_000019,
)

statement_000021 = IntegerExpressionParserInfo.Create(
    regions=[region_000031],
    value=0,
)

statement_000022 = TernaryExpressionParserInfo.Create(
    regions=[region_000032],
    condition_expression=statement_000010,
    true_expression=statement_000020,
    false_expression=statement_000021,
)

statement_000023 = ConstraintParameterParserInfo.Create(
    regions=[region_000033, region_000034],
    type=statement_000009,
    name="min_value!",
    default_value=statement_000022,
)

statement_000024 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000035, region_000035, None],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000025 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000036, region_000036],
    name="is_signed!",
)

statement_000026 = IntegerExpressionParserInfo.Create(
    regions=[region_000037],
    value=1,
)

statement_000027 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000038, region_000038],
    name="num_bytes!",
)

statement_000028 = IntegerExpressionParserInfo.Create(
    regions=[region_000039],
    value=8,
)

statement_000029 = BinaryExpressionParserInfo.Create(
    regions=[region_000040, region_000041],
    left_expression=statement_000027,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000028,
)

statement_000030 = IntegerExpressionParserInfo.Create(
    regions=[region_000042],
    value=1,
)

statement_000031 = BinaryExpressionParserInfo.Create(
    regions=[region_000043, region_000044],
    left_expression=statement_000029,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000030,
)

statement_000032 = BinaryExpressionParserInfo.Create(
    regions=[region_000045, region_000046],
    left_expression=statement_000026,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000031,
)

statement_000033 = IntegerExpressionParserInfo.Create(
    regions=[region_000047],
    value=2,
)

statement_000034 = BinaryExpressionParserInfo.Create(
    regions=[region_000048, region_000049],
    left_expression=statement_000032,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000033,
)

statement_000035 = IntegerExpressionParserInfo.Create(
    regions=[region_000050],
    value=1,
)

statement_000036 = BinaryExpressionParserInfo.Create(
    regions=[region_000051, region_000052],
    left_expression=statement_000034,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000035,
)

statement_000037 = IntegerExpressionParserInfo.Create(
    regions=[region_000053],
    value=1,
)

statement_000038 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000054, region_000054],
    name="num_bytes!",
)

statement_000039 = IntegerExpressionParserInfo.Create(
    regions=[region_000055],
    value=8,
)

statement_000040 = BinaryExpressionParserInfo.Create(
    regions=[region_000056, region_000057],
    left_expression=statement_000038,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000039,
)

statement_000041 = BinaryExpressionParserInfo.Create(
    regions=[region_000058, region_000059],
    left_expression=statement_000037,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000040,
)

statement_000042 = IntegerExpressionParserInfo.Create(
    regions=[region_000060],
    value=1,
)

statement_000043 = BinaryExpressionParserInfo.Create(
    regions=[region_000061, region_000062],
    left_expression=statement_000041,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000042,
)

statement_000044 = TernaryExpressionParserInfo.Create(
    regions=[region_000063],
    condition_expression=statement_000025,
    true_expression=statement_000036,
    false_expression=statement_000043,
)

statement_000045 = ConstraintParameterParserInfo.Create(
    regions=[region_000064, region_000065],
    type=statement_000024,
    name="max_value!",
    default_value=statement_000044,
)

statement_000046 = ConstraintParametersParserInfo.Create(
    regions=[region_000066, None, None, region_000067],
    positional=None,
    any=None,
    keyword=[statement_000008, statement_000023, statement_000045, ],
)

statement_000047 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000068, region_000068],
    name="min_value!",
)

statement_000047 = ConstraintArgumentParserInfo.Create(
    regions=[region_000068, None],
    expression=statement_000047,
    keyword=None,
)

statement_000048 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000069, region_000069],
    name="max_value!",
)

statement_000048 = ConstraintArgumentParserInfo.Create(
    regions=[region_000069, None],
    expression=statement_000048,
    keyword=None,
)

statement_000049 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000070, region_000070],
    arguments=[statement_000047, statement_000048, ],
)

statement_000050 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000071, region_000072, None],
    value=CustomType("MutableInt"),
    templates=None,
    constraints=statement_000049,
    mutability_modifier=None,
)

statement_000051 = ClassStatementDependencyParserInfo.Create(
    regions=[region_000073, region_000074],
    visibility=VisibilityModifier.public,
    type=statement_000050,
)

statement_000052 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000075, region_000075, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000053 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000076, region_000076],
    name="num_bytes!",
)

statement_000054 = IntegerExpressionParserInfo.Create(
    regions=[region_000077],
    value=1,
)

statement_000055 = BinaryExpressionParserInfo.Create(
    regions=[region_000078, region_000079],
    left_expression=statement_000053,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000054,
)

statement_000056 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000080, region_000080],
    name="num_bytes!",
)

statement_000057 = IntegerExpressionParserInfo.Create(
    regions=[region_000081],
    value=2,
)

statement_000058 = BinaryExpressionParserInfo.Create(
    regions=[region_000082, region_000083],
    left_expression=statement_000056,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000057,
)

statement_000059 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000084, region_000084],
    name="num_bytes!",
)

statement_000060 = IntegerExpressionParserInfo.Create(
    regions=[region_000085],
    value=4,
)

statement_000061 = BinaryExpressionParserInfo.Create(
    regions=[region_000086, region_000087],
    left_expression=statement_000059,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000060,
)

statement_000062 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000088, region_000088],
    name="num_bytes!",
)

statement_000063 = IntegerExpressionParserInfo.Create(
    regions=[region_000089],
    value=8,
)

statement_000064 = BinaryExpressionParserInfo.Create(
    regions=[region_000090, region_000091],
    left_expression=statement_000062,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000063,
)

statement_000065 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000092, region_000092],
    name="num_bytes!",
)

statement_000066 = IntegerExpressionParserInfo.Create(
    regions=[region_000093],
    value=16,
)

statement_000067 = BinaryExpressionParserInfo.Create(
    regions=[region_000094, region_000095],
    left_expression=statement_000065,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000066,
)

statement_000068 = BinaryExpressionParserInfo.Create(
    regions=[region_000096, region_000097],
    left_expression=statement_000064,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000067,
)

statement_000069 = BinaryExpressionParserInfo.Create(
    regions=[region_000098, region_000099],
    left_expression=statement_000061,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000068,
)

statement_000070 = BinaryExpressionParserInfo.Create(
    regions=[region_000100, region_000101],
    left_expression=statement_000058,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000069,
)

statement_000071 = BinaryExpressionParserInfo.Create(
    regions=[region_000102, region_000103],
    left_expression=statement_000055,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000070,
)

statement_000071 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000102, None],
    expression=statement_000071,
    keyword=None,
)

statement_000072 = FuncArgumentsParserInfo.Create(
    regions=[region_000104, region_000104],
    arguments=[statement_000071, ],
)

statement_000073 = CallExpressionParserInfo.Create(
    regions=[region_000105, region_000104],
    expression=statement_000052,
    arguments=statement_000072,
)

statement_000074 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000106],
    expression=statement_000073,
)

statement_000075 = SpecialMethodStatementParserInfo.Create(
    regions=[region_000107, region_000108, region_000109],
    parent_class_capabilities=StandardCapabilities,
    the_type=SpecialMethodType.CompileTimeEvalTemplates,
    statements=[statement_000074, ],
)

statement_000076 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000110, region_000110, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000077 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000111, region_000111],
    name="min_value!",
)

statement_000078 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000112, region_000112],
    name="is_signed!",
)

statement_000079 = IntegerExpressionParserInfo.Create(
    regions=[region_000113],
    value=1,
)

statement_000080 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000114, region_000114],
    name="num_bytes!",
)

statement_000081 = IntegerExpressionParserInfo.Create(
    regions=[region_000115],
    value=8,
)

statement_000082 = BinaryExpressionParserInfo.Create(
    regions=[region_000116, region_000117],
    left_expression=statement_000080,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000081,
)

statement_000083 = BinaryExpressionParserInfo.Create(
    regions=[region_000118, region_000119],
    left_expression=statement_000079,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000082,
)

statement_000084 = IntegerExpressionParserInfo.Create(
    regions=[region_000120],
    value=1,
)

statement_000085 = BinaryExpressionParserInfo.Create(
    regions=[region_000121, region_000122],
    left_expression=statement_000083,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000084,
)

statement_000086 = IntegerExpressionParserInfo.Create(
    regions=[region_000123],
    value=2,
)

statement_000087 = BinaryExpressionParserInfo.Create(
    regions=[region_000124, region_000125],
    left_expression=statement_000085,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000086,
)

statement_000088 = UnaryExpressionParserInfo.Create(
    regions=[region_000126, region_000127],
    operator=UnaryExpressionParserInfoOperatorType.Negative,
    expression=statement_000087,
)

statement_000089 = IntegerExpressionParserInfo.Create(
    regions=[region_000128],
    value=0,
)

statement_000090 = TernaryExpressionParserInfo.Create(
    regions=[region_000129],
    condition_expression=statement_000078,
    true_expression=statement_000088,
    false_expression=statement_000089,
)

statement_000091 = BinaryExpressionParserInfo.Create(
    regions=[region_000130, region_000131],
    left_expression=statement_000077,
    operator=BinaryExpressionOperatorType.GreaterEqual,
    right_expression=statement_000090,
)

statement_000091 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000130, None],
    expression=statement_000091,
    keyword=None,
)

statement_000092 = FuncArgumentsParserInfo.Create(
    regions=[region_000132, region_000132],
    arguments=[statement_000091, ],
)

statement_000093 = CallExpressionParserInfo.Create(
    regions=[region_000133, region_000132],
    expression=statement_000076,
    arguments=statement_000092,
)

statement_000094 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000134],
    expression=statement_000093,
)

statement_000095 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000135, region_000135, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000096 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000136, region_000136],
    name="is_signed!",
)

statement_000097 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000137, region_000137],
    name="max_value!",
)

statement_000098 = IntegerExpressionParserInfo.Create(
    regions=[region_000138],
    value=1,
)

statement_000099 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000139, region_000139],
    name="num_bytes!",
)

statement_000100 = IntegerExpressionParserInfo.Create(
    regions=[region_000140],
    value=8,
)

statement_000101 = BinaryExpressionParserInfo.Create(
    regions=[region_000141, region_000142],
    left_expression=statement_000099,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000100,
)

statement_000102 = IntegerExpressionParserInfo.Create(
    regions=[region_000143],
    value=1,
)

statement_000103 = BinaryExpressionParserInfo.Create(
    regions=[region_000144, region_000145],
    left_expression=statement_000101,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000102,
)

statement_000104 = BinaryExpressionParserInfo.Create(
    regions=[region_000146, region_000147],
    left_expression=statement_000098,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000103,
)

statement_000105 = IntegerExpressionParserInfo.Create(
    regions=[region_000148],
    value=2,
)

statement_000106 = BinaryExpressionParserInfo.Create(
    regions=[region_000149, region_000150],
    left_expression=statement_000104,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000105,
)

statement_000107 = IntegerExpressionParserInfo.Create(
    regions=[region_000151],
    value=1,
)

statement_000108 = BinaryExpressionParserInfo.Create(
    regions=[region_000152, region_000153],
    left_expression=statement_000106,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000107,
)

statement_000109 = BinaryExpressionParserInfo.Create(
    regions=[region_000154, region_000155],
    left_expression=statement_000097,
    operator=BinaryExpressionOperatorType.LessEqual,
    right_expression=statement_000108,
)

statement_000110 = IntegerExpressionParserInfo.Create(
    regions=[region_000156],
    value=1,
)

statement_000111 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000157, region_000157],
    name="num_bytes!",
)

statement_000112 = IntegerExpressionParserInfo.Create(
    regions=[region_000158],
    value=8,
)

statement_000113 = BinaryExpressionParserInfo.Create(
    regions=[region_000159, region_000160],
    left_expression=statement_000111,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000112,
)

statement_000114 = BinaryExpressionParserInfo.Create(
    regions=[region_000161, region_000162],
    left_expression=statement_000110,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000113,
)

statement_000115 = IntegerExpressionParserInfo.Create(
    regions=[region_000163],
    value=1,
)

statement_000116 = BinaryExpressionParserInfo.Create(
    regions=[region_000164, region_000165],
    left_expression=statement_000114,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000115,
)

statement_000117 = TernaryExpressionParserInfo.Create(
    regions=[region_000166],
    condition_expression=statement_000096,
    true_expression=statement_000109,
    false_expression=statement_000116,
)

statement_000117 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000166, None],
    expression=statement_000117,
    keyword=None,
)

statement_000118 = FuncArgumentsParserInfo.Create(
    regions=[region_000167, region_000167],
    arguments=[statement_000117, ],
)

statement_000119 = CallExpressionParserInfo.Create(
    regions=[region_000168, region_000167],
    expression=statement_000095,
    arguments=statement_000118,
)

statement_000120 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000169],
    expression=statement_000119,
)

statement_000121 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000170, region_000170, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000122 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000171, region_000171],
    name="max_value!",
)

statement_000123 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000172, region_000172],
    name="min_value!",
)

statement_000124 = BinaryExpressionParserInfo.Create(
    regions=[region_000173, region_000174],
    left_expression=statement_000122,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000123,
)

statement_000125 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000175, region_000175],
    name="is_signed!",
)

statement_000126 = IntegerExpressionParserInfo.Create(
    regions=[region_000176],
    value=1,
)

statement_000127 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000177, region_000177],
    name="num_bytes!",
)

statement_000128 = IntegerExpressionParserInfo.Create(
    regions=[region_000178],
    value=8,
)

statement_000129 = BinaryExpressionParserInfo.Create(
    regions=[region_000179, region_000180],
    left_expression=statement_000127,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000128,
)

statement_000130 = IntegerExpressionParserInfo.Create(
    regions=[region_000181],
    value=1,
)

statement_000131 = BinaryExpressionParserInfo.Create(
    regions=[region_000182, region_000183],
    left_expression=statement_000129,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000130,
)

statement_000132 = BinaryExpressionParserInfo.Create(
    regions=[region_000184, region_000185],
    left_expression=statement_000126,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000131,
)

statement_000133 = IntegerExpressionParserInfo.Create(
    regions=[region_000186],
    value=2,
)

statement_000134 = BinaryExpressionParserInfo.Create(
    regions=[region_000187, region_000188],
    left_expression=statement_000132,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000133,
)

statement_000135 = IntegerExpressionParserInfo.Create(
    regions=[region_000189],
    value=1,
)

statement_000136 = BinaryExpressionParserInfo.Create(
    regions=[region_000190, region_000191],
    left_expression=statement_000134,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000135,
)

statement_000137 = IntegerExpressionParserInfo.Create(
    regions=[region_000192],
    value=1,
)

statement_000138 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000193, region_000193],
    name="num_bytes!",
)

statement_000139 = IntegerExpressionParserInfo.Create(
    regions=[region_000194],
    value=8,
)

statement_000140 = BinaryExpressionParserInfo.Create(
    regions=[region_000195, region_000196],
    left_expression=statement_000138,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000139,
)

statement_000141 = BinaryExpressionParserInfo.Create(
    regions=[region_000197, region_000198],
    left_expression=statement_000137,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000140,
)

statement_000142 = IntegerExpressionParserInfo.Create(
    regions=[region_000199],
    value=1,
)

statement_000143 = BinaryExpressionParserInfo.Create(
    regions=[region_000200, region_000201],
    left_expression=statement_000141,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000142,
)

statement_000144 = TernaryExpressionParserInfo.Create(
    regions=[region_000202],
    condition_expression=statement_000125,
    true_expression=statement_000136,
    false_expression=statement_000143,
)

statement_000145 = BinaryExpressionParserInfo.Create(
    regions=[region_000203, region_000204],
    left_expression=statement_000124,
    operator=BinaryExpressionOperatorType.LessEqual,
    right_expression=statement_000144,
)

statement_000145 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000203, None],
    expression=statement_000145,
    keyword=None,
)

statement_000146 = FuncArgumentsParserInfo.Create(
    regions=[region_000205, region_000205],
    arguments=[statement_000145, ],
)

statement_000147 = CallExpressionParserInfo.Create(
    regions=[region_000206, region_000205],
    expression=statement_000121,
    arguments=statement_000146,
)

statement_000148 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000207],
    expression=statement_000147,
)

statement_000149 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000208, region_000208, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000150 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000209, region_000209],
    name="min_value!",
)

statement_000151 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000210, region_000210],
    name="max_value!",
)

statement_000152 = BinaryExpressionParserInfo.Create(
    regions=[region_000211, region_000212],
    left_expression=statement_000150,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000151,
)

statement_000153 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000213, region_000213],
    name="is_signed!",
)

statement_000154 = IntegerExpressionParserInfo.Create(
    regions=[region_000214],
    value=1,
)

statement_000155 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000215, region_000215],
    name="num_bytes!",
)

statement_000156 = IntegerExpressionParserInfo.Create(
    regions=[region_000216],
    value=8,
)

statement_000157 = BinaryExpressionParserInfo.Create(
    regions=[region_000217, region_000218],
    left_expression=statement_000155,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000156,
)

statement_000158 = BinaryExpressionParserInfo.Create(
    regions=[region_000219, region_000220],
    left_expression=statement_000154,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000157,
)

statement_000159 = IntegerExpressionParserInfo.Create(
    regions=[region_000221],
    value=1,
)

statement_000160 = BinaryExpressionParserInfo.Create(
    regions=[region_000222, region_000223],
    left_expression=statement_000158,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000159,
)

statement_000161 = IntegerExpressionParserInfo.Create(
    regions=[region_000224],
    value=2,
)

statement_000162 = BinaryExpressionParserInfo.Create(
    regions=[region_000225, region_000226],
    left_expression=statement_000160,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000161,
)

statement_000163 = UnaryExpressionParserInfo.Create(
    regions=[region_000227, region_000228],
    operator=UnaryExpressionParserInfoOperatorType.Negative,
    expression=statement_000162,
)

statement_000164 = IntegerExpressionParserInfo.Create(
    regions=[region_000229],
    value=0,
)

statement_000165 = TernaryExpressionParserInfo.Create(
    regions=[region_000230],
    condition_expression=statement_000153,
    true_expression=statement_000163,
    false_expression=statement_000164,
)

statement_000166 = BinaryExpressionParserInfo.Create(
    regions=[region_000231, region_000232],
    left_expression=statement_000152,
    operator=BinaryExpressionOperatorType.GreaterEqual,
    right_expression=statement_000165,
)

statement_000166 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000231, None],
    expression=statement_000166,
    keyword=None,
)

statement_000167 = FuncArgumentsParserInfo.Create(
    regions=[region_000233, region_000233],
    arguments=[statement_000166, ],
)

statement_000168 = CallExpressionParserInfo.Create(
    regions=[region_000234, region_000233],
    expression=statement_000149,
    arguments=statement_000167,
)

statement_000169 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000235],
    expression=statement_000168,
)

statement_000170 = SpecialMethodStatementParserInfo.Create(
    regions=[region_000236, region_000237, region_000238],
    parent_class_capabilities=StandardCapabilities,
    the_type=SpecialMethodType.CompileTimeEvalConstraints,
    statements=[statement_000094, statement_000120, statement_000148, statement_000169, ],
)

statement_000171 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000239, region_000240, region_000241],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000172 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000242, region_000242, None],
    name="ArchiveT",
    is_variadic=None,
    default_type=None,
)

statement_000173 = TemplateParametersParserInfo.Create(
    regions=[region_000243, None, region_000242, None],
    positional=None,
    any=[statement_000172, ],
    keyword=None,
)

statement_000174 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000244, region_000245, region_000246],
    value=CustomType("ArchiveT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000175 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000247, None, region_000248],  # type: ignore
    type=statement_000174,
    is_variadic=None,
    name="archive",
    default_value=None,
)

statement_000176 = FuncParametersParserInfo.Create(
    regions=[region_000249, None, region_000247, None],
    positional=None,
    any_args=[statement_000175, ],
    keyword=None,
)

statement_000177 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000250, region_000249, region_000251, None, region_000252, region_000253, None, None, None, region_000254, None, None, None, None, region_000255],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000176,
    visibility_param=VisibilityModifier.public,
    mutability_param=None,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000171,
    name=FuncDefinitionStatementParserInfoOperatorType.Deserialize,
    documentation=None,
    templates=statement_000173,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=True,
)

statement_000178 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000256, region_000256, None],
    name="ArchiveT",
    is_variadic=None,
    default_type=None,
)

statement_000179 = TemplateParametersParserInfo.Create(
    regions=[region_000257, None, region_000256, None],
    positional=None,
    any=[statement_000178, ],
    keyword=None,
)

statement_000180 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000258, region_000259, region_000260],
    value=CustomType("ArchiveT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000181 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000261, None, region_000262],  # type: ignore
    type=statement_000180,
    is_variadic=None,
    name="archive",
    default_value=None,
)

statement_000182 = FuncParametersParserInfo.Create(
    regions=[region_000263, None, region_000261, None],
    positional=None,
    any_args=[statement_000181, ],
    keyword=None,
)

statement_000183 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000264, region_000263, region_000265, region_000266, region_000267, region_000268, None, None, None, region_000269, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000182,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Serialize,
    documentation=None,
    templates=statement_000179,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000184 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000270, region_000270, None],
    name="ArchiveT",
    is_variadic=None,
    default_type=None,
)

statement_000185 = TemplateParametersParserInfo.Create(
    regions=[region_000271, None, region_000270, None],
    positional=None,
    any=[statement_000184, ],
    keyword=None,
)

statement_000186 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000272, region_000273, region_000274],
    value=CustomType("ArchiveT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000187 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000275, None, region_000276],  # type: ignore
    type=statement_000186,
    is_variadic=None,
    name="archive",
    default_value=None,
)

statement_000188 = FuncParametersParserInfo.Create(
    regions=[region_000277, None, region_000275, None],
    positional=None,
    any_args=[statement_000187, ],
    keyword=None,
)

statement_000189 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000278, region_000277, region_000279, region_000280, region_000281, region_000282, None, None, None, region_000283, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000188,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Serialize,
    documentation=None,
    templates=statement_000185,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000190 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000284, region_000284, None],
    name="VisitorT",
    is_variadic=None,
    default_type=None,
)

statement_000191 = TemplateParametersParserInfo.Create(
    regions=[region_000285, None, region_000284, None],
    positional=None,
    any=[statement_000190, ],
    keyword=None,
)

statement_000192 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000286, region_000287, region_000288],
    value=CustomType("VisitorT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000193 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000289, None, region_000290],  # type: ignore
    type=statement_000192,
    is_variadic=None,
    name="visitor",
    default_value=None,
)

statement_000194 = FuncParametersParserInfo.Create(
    regions=[region_000291, None, region_000289, None],
    positional=None,
    any_args=[statement_000193, ],
    keyword=None,
)

statement_000195 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000292, region_000291, region_000293, region_000294, region_000295, region_000296, None, None, None, region_000297, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000194,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Accept,
    documentation=None,
    templates=statement_000191,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000196 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000298, region_000298, None],
    name="VisitorT",
    is_variadic=None,
    default_type=None,
)

statement_000197 = TemplateParametersParserInfo.Create(
    regions=[region_000299, None, region_000298, None],
    positional=None,
    any=[statement_000196, ],
    keyword=None,
)

statement_000198 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000300, region_000301, region_000302],
    value=CustomType("VisitorT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000199 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000303, None, region_000304],  # type: ignore
    type=statement_000198,
    is_variadic=None,
    name="visitor",
    default_value=None,
)

statement_000200 = FuncParametersParserInfo.Create(
    regions=[region_000305, None, region_000303, None],
    positional=None,
    any_args=[statement_000199, ],
    keyword=None,
)

statement_000201 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000306, region_000305, region_000307, region_000308, region_000309, region_000310, None, None, None, region_000311, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000200,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.val,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Accept,
    documentation=None,
    templates=statement_000197,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000202 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000312, region_000313, region_000314],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000203 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000315, region_000320, region_000316, region_000317, region_000318, region_000319, None, None, None, region_000321, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000202,
    name=FuncDefinitionStatementParserInfoOperatorType.Clone,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000204 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000322, region_000323, region_000324],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000205 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000325, region_000330, region_000326, region_000327, region_000328, region_000329, None, None, None, region_000331, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000204,
    name=FuncDefinitionStatementParserInfoOperatorType.ToBool,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000206 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000332, region_000333, region_000334],
    value=StringType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000207 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000335, region_000340, region_000336, region_000337, region_000338, region_000339, None, None, None, region_000341, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000206,
    name=FuncDefinitionStatementParserInfoOperatorType.ToString,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000208 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000342, region_000343, region_000344],
    value=CustomType("CompareResult"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000209 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000345, region_000346, region_000347],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000210 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000348, None, region_000349],  # type: ignore
    type=statement_000209,
    is_variadic=None,
    name="this",
    default_value=None,
)

statement_000211 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000350, region_000351, region_000352],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000212 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000353, None, region_000354],  # type: ignore
    type=statement_000211,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000213 = FuncParametersParserInfo.Create(
    regions=[region_000355, None, region_000356, None],
    positional=None,
    any_args=[statement_000210, statement_000212, ],
    keyword=None,
)

statement_000214 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000357, region_000355, region_000358, None, region_000359, region_000360, None, None, None, region_000361, None, None, None, None, region_000362],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000213,
    visibility_param=VisibilityModifier.public,
    mutability_param=None,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000208,
    name=FuncDefinitionStatementParserInfoOperatorType.Compare,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=True,
)

statement_000215 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000363, region_000364, region_000365],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000216 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000366, region_000367, region_000368],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000217 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000369, None, region_000370],  # type: ignore
    type=statement_000216,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000218 = FuncParametersParserInfo.Create(
    regions=[region_000371, None, region_000369, None],
    positional=None,
    any_args=[statement_000217, ],
    keyword=None,
)

statement_000219 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000372, region_000371, region_000373, region_000374, region_000375, region_000376, None, None, None, region_000377, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000218,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000215,
    name=FuncDefinitionStatementParserInfoOperatorType.Equal,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000220 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000378, region_000379, region_000380],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000221 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000381, region_000382, region_000383],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000222 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000384, None, region_000385],  # type: ignore
    type=statement_000221,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000223 = FuncParametersParserInfo.Create(
    regions=[region_000386, None, region_000384, None],
    positional=None,
    any_args=[statement_000222, ],
    keyword=None,
)

statement_000224 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000387, region_000386, region_000388, region_000389, region_000390, region_000391, None, None, None, region_000392, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000223,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000220,
    name=FuncDefinitionStatementParserInfoOperatorType.NotEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000225 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000393, region_000394, region_000395],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000226 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000396, region_000397, region_000398],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000227 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000399, None, region_000400],  # type: ignore
    type=statement_000226,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000228 = FuncParametersParserInfo.Create(
    regions=[region_000401, None, region_000399, None],
    positional=None,
    any_args=[statement_000227, ],
    keyword=None,
)

statement_000229 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000402, region_000401, region_000403, region_000404, region_000405, region_000406, None, None, None, region_000407, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000228,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000225,
    name=FuncDefinitionStatementParserInfoOperatorType.Less,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000230 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000408, region_000409, region_000410],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000231 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000411, region_000412, region_000413],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000232 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000414, None, region_000415],  # type: ignore
    type=statement_000231,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000233 = FuncParametersParserInfo.Create(
    regions=[region_000416, None, region_000414, None],
    positional=None,
    any_args=[statement_000232, ],
    keyword=None,
)

statement_000234 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000417, region_000416, region_000418, region_000419, region_000420, region_000421, None, None, None, region_000422, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000233,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000230,
    name=FuncDefinitionStatementParserInfoOperatorType.LessEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000235 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000423, region_000424, region_000425],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000236 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000426, region_000427, region_000428],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000237 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000429, None, region_000430],  # type: ignore
    type=statement_000236,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000238 = FuncParametersParserInfo.Create(
    regions=[region_000431, None, region_000429, None],
    positional=None,
    any_args=[statement_000237, ],
    keyword=None,
)

statement_000239 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000432, region_000431, region_000433, region_000434, region_000435, region_000436, None, None, None, region_000437, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000238,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000235,
    name=FuncDefinitionStatementParserInfoOperatorType.Greater,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000240 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000438, region_000439, region_000440],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000241 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000441, region_000442, region_000443],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000242 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000444, None, region_000445],  # type: ignore
    type=statement_000241,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000243 = FuncParametersParserInfo.Create(
    regions=[region_000446, None, region_000444, None],
    positional=None,
    any_args=[statement_000242, ],
    keyword=None,
)

statement_000244 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000447, region_000446, region_000448, region_000449, region_000450, region_000451, None, None, None, region_000452, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000243,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000240,
    name=FuncDefinitionStatementParserInfoOperatorType.GreaterEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000245 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000453, region_000454, region_000455],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000246 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000456, region_000461, region_000457, region_000458, region_000459, region_000460, None, None, None, region_000462, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000245,
    name=FuncDefinitionStatementParserInfoOperatorType.Negative,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000247 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000463, region_000464, region_000465],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000248 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000466, region_000471, region_000467, region_000468, region_000469, region_000470, None, None, None, region_000472, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000247,
    name=FuncDefinitionStatementParserInfoOperatorType.Positive,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000249 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000473, region_000474, region_000475],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000250 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000476, region_000481, region_000477, region_000478, region_000479, region_000480, None, None, None, region_000482, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000249,
    name=FuncDefinitionStatementParserInfoOperatorType.BitFlip,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000251 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000483, region_000484, region_000485],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000252 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000486, region_000487, region_000488],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000253 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000489, None, region_000490],  # type: ignore
    type=statement_000252,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000254 = FuncParametersParserInfo.Create(
    regions=[region_000491, None, region_000489, None],
    positional=None,
    any_args=[statement_000253, ],
    keyword=None,
)

statement_000255 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000492, region_000491, region_000493, region_000494, region_000495, region_000496, None, None, None, region_000497, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000254,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000251,
    name=FuncDefinitionStatementParserInfoOperatorType.Divide,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000256 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000498, region_000499, region_000500],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000257 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000501, region_000502, region_000503],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000258 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000504, None, region_000505],  # type: ignore
    type=statement_000257,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000259 = FuncParametersParserInfo.Create(
    regions=[region_000506, None, region_000504, None],
    positional=None,
    any_args=[statement_000258, ],
    keyword=None,
)

statement_000260 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000507, region_000506, region_000508, region_000509, region_000510, region_000511, None, None, None, region_000512, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000259,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000256,
    name=FuncDefinitionStatementParserInfoOperatorType.DivideFloor,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000261 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000513, region_000514, region_000515],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000262 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000516, region_000517, region_000518],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000263 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000519, None, region_000520],  # type: ignore
    type=statement_000262,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000264 = FuncParametersParserInfo.Create(
    regions=[region_000521, None, region_000519, None],
    positional=None,
    any_args=[statement_000263, ],
    keyword=None,
)

statement_000265 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000522, region_000521, region_000523, region_000524, region_000525, region_000526, None, None, None, region_000527, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000264,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000261,
    name=FuncDefinitionStatementParserInfoOperatorType.Modulo,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000266 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000528, region_000529, region_000530],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000267 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000531, region_000532, region_000533],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000268 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000534, None, region_000535],  # type: ignore
    type=statement_000267,
    is_variadic=None,
    name="multiplier",
    default_value=None,
)

statement_000269 = FuncParametersParserInfo.Create(
    regions=[region_000536, None, region_000534, None],
    positional=None,
    any_args=[statement_000268, ],
    keyword=None,
)

statement_000270 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000537, region_000536, region_000538, region_000539, region_000540, region_000541, None, None, None, region_000542, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000269,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000266,
    name=FuncDefinitionStatementParserInfoOperatorType.Multiply,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000271 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000543, region_000544, region_000545],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000272 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000546, region_000547, region_000548],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000273 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000549, None, region_000550],  # type: ignore
    type=statement_000272,
    is_variadic=None,
    name="exponent",
    default_value=None,
)

statement_000274 = FuncParametersParserInfo.Create(
    regions=[region_000551, None, region_000549, None],
    positional=None,
    any_args=[statement_000273, ],
    keyword=None,
)

statement_000275 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000552, region_000551, region_000553, region_000554, region_000555, region_000556, None, None, None, region_000557, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000274,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000271,
    name=FuncDefinitionStatementParserInfoOperatorType.Power,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000276 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000558, region_000559, region_000560],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000277 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000561, region_000562, region_000563],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000278 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000564, None, region_000565],  # type: ignore
    type=statement_000277,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000279 = FuncParametersParserInfo.Create(
    regions=[region_000566, None, region_000564, None],
    positional=None,
    any_args=[statement_000278, ],
    keyword=None,
)

statement_000280 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000567, region_000566, region_000568, region_000569, region_000570, region_000571, None, None, None, region_000572, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000279,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000276,
    name=FuncDefinitionStatementParserInfoOperatorType.Add,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000281 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000573, region_000574, region_000575],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000282 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000576, region_000577, region_000578],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000283 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000579, None, region_000580],  # type: ignore
    type=statement_000282,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000284 = FuncParametersParserInfo.Create(
    regions=[region_000581, None, region_000579, None],
    positional=None,
    any_args=[statement_000283, ],
    keyword=None,
)

statement_000285 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000582, region_000581, region_000583, region_000584, region_000585, region_000586, None, None, None, region_000587, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000284,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000281,
    name=FuncDefinitionStatementParserInfoOperatorType.Subtract,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000286 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000588, region_000589, region_000590],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000287 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000591, region_000592, region_000593],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000288 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000594, None, region_000595],  # type: ignore
    type=statement_000287,
    is_variadic=None,
    name="places",
    default_value=None,
)

statement_000289 = FuncParametersParserInfo.Create(
    regions=[region_000596, None, region_000594, None],
    positional=None,
    any_args=[statement_000288, ],
    keyword=None,
)

statement_000290 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000597, region_000596, region_000598, region_000599, region_000600, region_000601, None, None, None, region_000602, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000289,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000286,
    name=FuncDefinitionStatementParserInfoOperatorType.BitShiftLeft,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000291 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000603, region_000604, region_000605],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000292 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000606, region_000607, region_000608],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000293 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000609, None, region_000610],  # type: ignore
    type=statement_000292,
    is_variadic=None,
    name="places",
    default_value=None,
)

statement_000294 = FuncParametersParserInfo.Create(
    regions=[region_000611, None, region_000609, None],
    positional=None,
    any_args=[statement_000293, ],
    keyword=None,
)

statement_000295 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000612, region_000611, region_000613, region_000614, region_000615, region_000616, None, None, None, region_000617, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000294,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000291,
    name=FuncDefinitionStatementParserInfoOperatorType.BitShiftRight,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000296 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000618, region_000619, region_000620],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000297 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000621, region_000622, region_000623],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000298 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000624, None, region_000625],  # type: ignore
    type=statement_000297,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000299 = FuncParametersParserInfo.Create(
    regions=[region_000626, None, region_000624, None],
    positional=None,
    any_args=[statement_000298, ],
    keyword=None,
)

statement_000300 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000627, region_000626, region_000628, region_000629, region_000630, region_000631, None, None, None, region_000632, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000299,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000296,
    name=FuncDefinitionStatementParserInfoOperatorType.BitAnd,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000301 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000633, region_000634, region_000635],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000302 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000636, region_000637, region_000638],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000303 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000639, None, region_000640],  # type: ignore
    type=statement_000302,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000304 = FuncParametersParserInfo.Create(
    regions=[region_000641, None, region_000639, None],
    positional=None,
    any_args=[statement_000303, ],
    keyword=None,
)

statement_000305 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000642, region_000641, region_000643, region_000644, region_000645, region_000646, None, None, None, region_000647, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000304,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000301,
    name=FuncDefinitionStatementParserInfoOperatorType.BitXor,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000306 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000648, region_000649, region_000650],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000307 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000651, region_000652, region_000653],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000308 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000654, None, region_000655],  # type: ignore
    type=statement_000307,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000309 = FuncParametersParserInfo.Create(
    regions=[region_000656, None, region_000654, None],
    positional=None,
    any_args=[statement_000308, ],
    keyword=None,
)

statement_000310 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000657, region_000656, region_000658, region_000659, region_000660, region_000661, None, None, None, region_000662, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000309,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000306,
    name=FuncDefinitionStatementParserInfoOperatorType.BitOr,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000311 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000663, region_000668, region_000664, region_000665, region_000666, region_000667, None, None, None, region_000669, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitFlipInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000312 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000670, region_000671, region_000672],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000313 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000673, None, region_000674],  # type: ignore
    type=statement_000312,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000314 = FuncParametersParserInfo.Create(
    regions=[region_000675, None, region_000673, None],
    positional=None,
    any_args=[statement_000313, ],
    keyword=None,
)

statement_000315 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000676, region_000675, region_000677, region_000678, region_000679, region_000680, None, None, None, region_000681, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000314,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.DivideFloorInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000316 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000682, region_000683, region_000684],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000317 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000685, None, region_000686],  # type: ignore
    type=statement_000316,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000318 = FuncParametersParserInfo.Create(
    regions=[region_000687, None, region_000685, None],
    positional=None,
    any_args=[statement_000317, ],
    keyword=None,
)

statement_000319 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000688, region_000687, region_000689, region_000690, region_000691, region_000692, None, None, None, region_000693, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000318,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.ModuloInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000320 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000694, region_000695, region_000696],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000321 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000697, None, region_000698],  # type: ignore
    type=statement_000320,
    is_variadic=None,
    name="multiplier",
    default_value=None,
)

statement_000322 = FuncParametersParserInfo.Create(
    regions=[region_000699, None, region_000697, None],
    positional=None,
    any_args=[statement_000321, ],
    keyword=None,
)

statement_000323 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000700, region_000699, region_000701, region_000702, region_000703, region_000704, None, None, None, region_000705, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000322,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.MultiplyInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000324 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000706, region_000707, region_000708],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000325 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000709, None, region_000710],  # type: ignore
    type=statement_000324,
    is_variadic=None,
    name="exponent",
    default_value=None,
)

statement_000326 = FuncParametersParserInfo.Create(
    regions=[region_000711, None, region_000709, None],
    positional=None,
    any_args=[statement_000325, ],
    keyword=None,
)

statement_000327 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000712, region_000711, region_000713, region_000714, region_000715, region_000716, None, None, None, region_000717, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000326,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.PowerInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000328 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000718, region_000719, region_000720],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000329 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000721, None, region_000722],  # type: ignore
    type=statement_000328,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000330 = FuncParametersParserInfo.Create(
    regions=[region_000723, None, region_000721, None],
    positional=None,
    any_args=[statement_000329, ],
    keyword=None,
)

statement_000331 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000724, region_000723, region_000725, region_000726, region_000727, region_000728, None, None, None, region_000729, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000330,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.AddInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000332 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000730, region_000731, region_000732],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000333 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000733, None, region_000734],  # type: ignore
    type=statement_000332,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000334 = FuncParametersParserInfo.Create(
    regions=[region_000735, None, region_000733, None],
    positional=None,
    any_args=[statement_000333, ],
    keyword=None,
)

statement_000335 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000736, region_000735, region_000737, region_000738, region_000739, region_000740, None, None, None, region_000741, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000334,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.SubtractInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000336 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000742, region_000743, region_000744],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000337 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000745, None, region_000746],  # type: ignore
    type=statement_000336,
    is_variadic=None,
    name="places",
    default_value=None,
)

statement_000338 = FuncParametersParserInfo.Create(
    regions=[region_000747, None, region_000745, None],
    positional=None,
    any_args=[statement_000337, ],
    keyword=None,
)

statement_000339 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000748, region_000747, region_000749, region_000750, region_000751, region_000752, None, None, None, region_000753, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000338,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitShiftLeftInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000340 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000754, region_000755, region_000756],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000341 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000757, None, region_000758],  # type: ignore
    type=statement_000340,
    is_variadic=None,
    name="places",
    default_value=None,
)

statement_000342 = FuncParametersParserInfo.Create(
    regions=[region_000759, None, region_000757, None],
    positional=None,
    any_args=[statement_000341, ],
    keyword=None,
)

statement_000343 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000760, region_000759, region_000761, region_000762, region_000763, region_000764, None, None, None, region_000765, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000342,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitShiftRightInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000344 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000766, region_000767, region_000768],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000345 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000769, None, region_000770],  # type: ignore
    type=statement_000344,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000346 = FuncParametersParserInfo.Create(
    regions=[region_000771, None, region_000769, None],
    positional=None,
    any_args=[statement_000345, ],
    keyword=None,
)

statement_000347 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000772, region_000771, region_000773, region_000774, region_000775, region_000776, None, None, None, region_000777, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000346,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitAndInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000348 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000778, region_000779, region_000780],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000349 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000781, None, region_000782],  # type: ignore
    type=statement_000348,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000350 = FuncParametersParserInfo.Create(
    regions=[region_000783, None, region_000781, None],
    positional=None,
    any_args=[statement_000349, ],
    keyword=None,
)

statement_000351 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000784, region_000783, region_000785, region_000786, region_000787, region_000788, None, None, None, region_000789, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000350,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitXorInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000352 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000790, region_000791, region_000792],
    value=CustomType("Integer"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000353 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000793, None, region_000794],  # type: ignore
    type=statement_000352,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000354 = FuncParametersParserInfo.Create(
    regions=[region_000795, None, region_000793, None],
    positional=None,
    any_args=[statement_000353, ],
    keyword=None,
)

statement_000355 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000796, region_000795, region_000797, region_000798, region_000799, region_000800, None, None, None, region_000801, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000354,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitOrInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000356 = ClassStatementParserInfo.Create(
    regions=[region_000802, region_000803, region_000804, region_000805, None, None, region_000073, None, region_000806, region_000802, None, None],
    class_capabilities=StandardCapabilities,
    visibility_param=VisibilityModifier.public,
    class_modifier_param=ClassModifier.mutable,
    name="FixedInt",
    documentation=None,
    templates=statement_000006,
    constraints=statement_000046,
    extends=None,
    implements=[statement_000051, ],
    uses=None,
    statements=[statement_000075, statement_000170, statement_000177, statement_000183, statement_000189, statement_000195, statement_000201, statement_000203, statement_000205, statement_000207, statement_000214, statement_000219, statement_000224, statement_000229, statement_000234, statement_000239, statement_000244, statement_000246, statement_000248, statement_000250, statement_000255, statement_000260, statement_000265, statement_000270, statement_000275, statement_000280, statement_000285, statement_000290, statement_000295, statement_000300, statement_000305, statement_000310, statement_000311, statement_000315, statement_000319, statement_000323, statement_000327, statement_000331, statement_000335, statement_000339, statement_000343, statement_000347, statement_000351, statement_000355, ],
    constructor_visibility_param=VisibilityModifier.public,
    is_abstract=None,
    is_final=None,
)

statement_000357 = IntegerExpressionParserInfo.Create(
    regions=[region_000807],
    value=1,
)

statement_000357 = ConstraintArgumentParserInfo.Create(
    regions=[region_000807, None],
    expression=statement_000357,
    keyword=None,
)

statement_000358 = BooleanExpressionParserInfo.Create(
    regions=[region_000808],
    value=True,
)

statement_000359 = ConstraintArgumentParserInfo.Create(
    regions=[region_000809, region_000810],
    expression=statement_000358,
    keyword="is_signed!",
)

statement_000360 = BooleanExpressionParserInfo.Create(
    regions=[region_000811],
    value=False,
)

statement_000361 = ConstraintArgumentParserInfo.Create(
    regions=[region_000812, region_000813],
    expression=statement_000360,
    keyword="is_checked!",
)

statement_000362 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000814, region_000814],
    arguments=[statement_000357, statement_000359, statement_000361, ],
)

statement_000363 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000815, region_000816, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000362,
    mutability_modifier=None,
)

statement_000364 = TypeAliasStatementParserInfo.Create(
    regions=[region_000817, region_000818, region_000819],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Int8",
    type=statement_000363,
)

statement_000365 = IntegerExpressionParserInfo.Create(
    regions=[region_000820],
    value=1,
)

statement_000365 = ConstraintArgumentParserInfo.Create(
    regions=[region_000820, None],
    expression=statement_000365,
    keyword=None,
)

statement_000366 = BooleanExpressionParserInfo.Create(
    regions=[region_000821],
    value=True,
)

statement_000367 = ConstraintArgumentParserInfo.Create(
    regions=[region_000822, region_000823],
    expression=statement_000366,
    keyword="is_signed!",
)

statement_000368 = BooleanExpressionParserInfo.Create(
    regions=[region_000824],
    value=True,
)

statement_000369 = ConstraintArgumentParserInfo.Create(
    regions=[region_000825, region_000826],
    expression=statement_000368,
    keyword="is_checked!",
)

statement_000370 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000827, region_000827],
    arguments=[statement_000365, statement_000367, statement_000369, ],
)

statement_000371 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000828, region_000829, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000370,
    mutability_modifier=None,
)

statement_000372 = TypeAliasStatementParserInfo.Create(
    regions=[region_000830, region_000831, region_000832],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedInt8",
    type=statement_000371,
)

statement_000373 = IntegerExpressionParserInfo.Create(
    regions=[region_000833],
    value=1,
)

statement_000373 = ConstraintArgumentParserInfo.Create(
    regions=[region_000833, None],
    expression=statement_000373,
    keyword=None,
)

statement_000374 = BooleanExpressionParserInfo.Create(
    regions=[region_000834],
    value=False,
)

statement_000375 = ConstraintArgumentParserInfo.Create(
    regions=[region_000835, region_000836],
    expression=statement_000374,
    keyword="is_signed!",
)

statement_000376 = BooleanExpressionParserInfo.Create(
    regions=[region_000837],
    value=False,
)

statement_000377 = ConstraintArgumentParserInfo.Create(
    regions=[region_000838, region_000839],
    expression=statement_000376,
    keyword="is_checked!",
)

statement_000378 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000840, region_000840],
    arguments=[statement_000373, statement_000375, statement_000377, ],
)

statement_000379 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000841, region_000842, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000378,
    mutability_modifier=None,
)

statement_000380 = TypeAliasStatementParserInfo.Create(
    regions=[region_000843, region_000844, region_000845],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="UInt8",
    type=statement_000379,
)

statement_000381 = IntegerExpressionParserInfo.Create(
    regions=[region_000846],
    value=1,
)

statement_000381 = ConstraintArgumentParserInfo.Create(
    regions=[region_000846, None],
    expression=statement_000381,
    keyword=None,
)

statement_000382 = BooleanExpressionParserInfo.Create(
    regions=[region_000847],
    value=False,
)

statement_000383 = ConstraintArgumentParserInfo.Create(
    regions=[region_000848, region_000849],
    expression=statement_000382,
    keyword="is_signed!",
)

statement_000384 = BooleanExpressionParserInfo.Create(
    regions=[region_000850],
    value=True,
)

statement_000385 = ConstraintArgumentParserInfo.Create(
    regions=[region_000851, region_000852],
    expression=statement_000384,
    keyword="is_checked!",
)

statement_000386 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000853, region_000853],
    arguments=[statement_000381, statement_000383, statement_000385, ],
)

statement_000387 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000854, region_000855, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000386,
    mutability_modifier=None,
)

statement_000388 = TypeAliasStatementParserInfo.Create(
    regions=[region_000856, region_000857, region_000858],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedUInt8",
    type=statement_000387,
)

statement_000389 = IntegerExpressionParserInfo.Create(
    regions=[region_000859],
    value=2,
)

statement_000389 = ConstraintArgumentParserInfo.Create(
    regions=[region_000859, None],
    expression=statement_000389,
    keyword=None,
)

statement_000390 = BooleanExpressionParserInfo.Create(
    regions=[region_000860],
    value=True,
)

statement_000391 = ConstraintArgumentParserInfo.Create(
    regions=[region_000861, region_000862],
    expression=statement_000390,
    keyword="is_signed!",
)

statement_000392 = BooleanExpressionParserInfo.Create(
    regions=[region_000863],
    value=False,
)

statement_000393 = ConstraintArgumentParserInfo.Create(
    regions=[region_000864, region_000865],
    expression=statement_000392,
    keyword="is_checked!",
)

statement_000394 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000866, region_000866],
    arguments=[statement_000389, statement_000391, statement_000393, ],
)

statement_000395 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000867, region_000868, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000394,
    mutability_modifier=None,
)

statement_000396 = TypeAliasStatementParserInfo.Create(
    regions=[region_000869, region_000870, region_000871],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Int16",
    type=statement_000395,
)

statement_000397 = IntegerExpressionParserInfo.Create(
    regions=[region_000872],
    value=2,
)

statement_000397 = ConstraintArgumentParserInfo.Create(
    regions=[region_000872, None],
    expression=statement_000397,
    keyword=None,
)

statement_000398 = BooleanExpressionParserInfo.Create(
    regions=[region_000873],
    value=True,
)

statement_000399 = ConstraintArgumentParserInfo.Create(
    regions=[region_000874, region_000875],
    expression=statement_000398,
    keyword="is_signed!",
)

statement_000400 = BooleanExpressionParserInfo.Create(
    regions=[region_000876],
    value=True,
)

statement_000401 = ConstraintArgumentParserInfo.Create(
    regions=[region_000877, region_000878],
    expression=statement_000400,
    keyword="is_checked!",
)

statement_000402 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000879, region_000879],
    arguments=[statement_000397, statement_000399, statement_000401, ],
)

statement_000403 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000880, region_000881, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000402,
    mutability_modifier=None,
)

statement_000404 = TypeAliasStatementParserInfo.Create(
    regions=[region_000882, region_000883, region_000884],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedInt16",
    type=statement_000403,
)

statement_000405 = IntegerExpressionParserInfo.Create(
    regions=[region_000885],
    value=2,
)

statement_000405 = ConstraintArgumentParserInfo.Create(
    regions=[region_000885, None],
    expression=statement_000405,
    keyword=None,
)

statement_000406 = BooleanExpressionParserInfo.Create(
    regions=[region_000886],
    value=False,
)

statement_000407 = ConstraintArgumentParserInfo.Create(
    regions=[region_000887, region_000888],
    expression=statement_000406,
    keyword="is_signed!",
)

statement_000408 = BooleanExpressionParserInfo.Create(
    regions=[region_000889],
    value=False,
)

statement_000409 = ConstraintArgumentParserInfo.Create(
    regions=[region_000890, region_000891],
    expression=statement_000408,
    keyword="is_checked!",
)

statement_000410 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000892, region_000892],
    arguments=[statement_000405, statement_000407, statement_000409, ],
)

statement_000411 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000893, region_000894, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000410,
    mutability_modifier=None,
)

statement_000412 = TypeAliasStatementParserInfo.Create(
    regions=[region_000895, region_000896, region_000897],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="UInt16",
    type=statement_000411,
)

statement_000413 = IntegerExpressionParserInfo.Create(
    regions=[region_000898],
    value=2,
)

statement_000413 = ConstraintArgumentParserInfo.Create(
    regions=[region_000898, None],
    expression=statement_000413,
    keyword=None,
)

statement_000414 = BooleanExpressionParserInfo.Create(
    regions=[region_000899],
    value=False,
)

statement_000415 = ConstraintArgumentParserInfo.Create(
    regions=[region_000900, region_000901],
    expression=statement_000414,
    keyword="is_signed!",
)

statement_000416 = BooleanExpressionParserInfo.Create(
    regions=[region_000902],
    value=True,
)

statement_000417 = ConstraintArgumentParserInfo.Create(
    regions=[region_000903, region_000904],
    expression=statement_000416,
    keyword="is_checked!",
)

statement_000418 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000905, region_000905],
    arguments=[statement_000413, statement_000415, statement_000417, ],
)

statement_000419 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000906, region_000907, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000418,
    mutability_modifier=None,
)

statement_000420 = TypeAliasStatementParserInfo.Create(
    regions=[region_000908, region_000909, region_000910],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedUInt16",
    type=statement_000419,
)

statement_000421 = IntegerExpressionParserInfo.Create(
    regions=[region_000911],
    value=4,
)

statement_000421 = ConstraintArgumentParserInfo.Create(
    regions=[region_000911, None],
    expression=statement_000421,
    keyword=None,
)

statement_000422 = BooleanExpressionParserInfo.Create(
    regions=[region_000912],
    value=True,
)

statement_000423 = ConstraintArgumentParserInfo.Create(
    regions=[region_000913, region_000914],
    expression=statement_000422,
    keyword="is_signed!",
)

statement_000424 = BooleanExpressionParserInfo.Create(
    regions=[region_000915],
    value=False,
)

statement_000425 = ConstraintArgumentParserInfo.Create(
    regions=[region_000916, region_000917],
    expression=statement_000424,
    keyword="is_checked!",
)

statement_000426 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000918, region_000918],
    arguments=[statement_000421, statement_000423, statement_000425, ],
)

statement_000427 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000919, region_000920, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000426,
    mutability_modifier=None,
)

statement_000428 = TypeAliasStatementParserInfo.Create(
    regions=[region_000921, region_000922, region_000923],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Int32",
    type=statement_000427,
)

statement_000429 = IntegerExpressionParserInfo.Create(
    regions=[region_000924],
    value=4,
)

statement_000429 = ConstraintArgumentParserInfo.Create(
    regions=[region_000924, None],
    expression=statement_000429,
    keyword=None,
)

statement_000430 = BooleanExpressionParserInfo.Create(
    regions=[region_000925],
    value=True,
)

statement_000431 = ConstraintArgumentParserInfo.Create(
    regions=[region_000926, region_000927],
    expression=statement_000430,
    keyword="is_signed!",
)

statement_000432 = BooleanExpressionParserInfo.Create(
    regions=[region_000928],
    value=True,
)

statement_000433 = ConstraintArgumentParserInfo.Create(
    regions=[region_000929, region_000930],
    expression=statement_000432,
    keyword="is_checked!",
)

statement_000434 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000931, region_000931],
    arguments=[statement_000429, statement_000431, statement_000433, ],
)

statement_000435 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000932, region_000933, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000434,
    mutability_modifier=None,
)

statement_000436 = TypeAliasStatementParserInfo.Create(
    regions=[region_000934, region_000935, region_000936],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedInt32",
    type=statement_000435,
)

statement_000437 = IntegerExpressionParserInfo.Create(
    regions=[region_000937],
    value=4,
)

statement_000437 = ConstraintArgumentParserInfo.Create(
    regions=[region_000937, None],
    expression=statement_000437,
    keyword=None,
)

statement_000438 = BooleanExpressionParserInfo.Create(
    regions=[region_000938],
    value=False,
)

statement_000439 = ConstraintArgumentParserInfo.Create(
    regions=[region_000939, region_000940],
    expression=statement_000438,
    keyword="is_signed!",
)

statement_000440 = BooleanExpressionParserInfo.Create(
    regions=[region_000941],
    value=False,
)

statement_000441 = ConstraintArgumentParserInfo.Create(
    regions=[region_000942, region_000943],
    expression=statement_000440,
    keyword="is_checked!",
)

statement_000442 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000944, region_000944],
    arguments=[statement_000437, statement_000439, statement_000441, ],
)

statement_000443 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000945, region_000946, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000442,
    mutability_modifier=None,
)

statement_000444 = TypeAliasStatementParserInfo.Create(
    regions=[region_000947, region_000948, region_000949],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="UInt32",
    type=statement_000443,
)

statement_000445 = IntegerExpressionParserInfo.Create(
    regions=[region_000950],
    value=4,
)

statement_000445 = ConstraintArgumentParserInfo.Create(
    regions=[region_000950, None],
    expression=statement_000445,
    keyword=None,
)

statement_000446 = BooleanExpressionParserInfo.Create(
    regions=[region_000951],
    value=False,
)

statement_000447 = ConstraintArgumentParserInfo.Create(
    regions=[region_000952, region_000953],
    expression=statement_000446,
    keyword="is_signed!",
)

statement_000448 = BooleanExpressionParserInfo.Create(
    regions=[region_000954],
    value=True,
)

statement_000449 = ConstraintArgumentParserInfo.Create(
    regions=[region_000955, region_000956],
    expression=statement_000448,
    keyword="is_checked!",
)

statement_000450 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000957, region_000957],
    arguments=[statement_000445, statement_000447, statement_000449, ],
)

statement_000451 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000958, region_000959, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000450,
    mutability_modifier=None,
)

statement_000452 = TypeAliasStatementParserInfo.Create(
    regions=[region_000960, region_000961, region_000962],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedUInt32",
    type=statement_000451,
)

statement_000453 = IntegerExpressionParserInfo.Create(
    regions=[region_000963],
    value=8,
)

statement_000453 = ConstraintArgumentParserInfo.Create(
    regions=[region_000963, None],
    expression=statement_000453,
    keyword=None,
)

statement_000454 = BooleanExpressionParserInfo.Create(
    regions=[region_000964],
    value=True,
)

statement_000455 = ConstraintArgumentParserInfo.Create(
    regions=[region_000965, region_000966],
    expression=statement_000454,
    keyword="is_signed!",
)

statement_000456 = BooleanExpressionParserInfo.Create(
    regions=[region_000967],
    value=False,
)

statement_000457 = ConstraintArgumentParserInfo.Create(
    regions=[region_000968, region_000969],
    expression=statement_000456,
    keyword="is_checked!",
)

statement_000458 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000970, region_000970],
    arguments=[statement_000453, statement_000455, statement_000457, ],
)

statement_000459 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000971, region_000972, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000458,
    mutability_modifier=None,
)

statement_000460 = TypeAliasStatementParserInfo.Create(
    regions=[region_000973, region_000974, region_000975],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Int64",
    type=statement_000459,
)

statement_000461 = IntegerExpressionParserInfo.Create(
    regions=[region_000976],
    value=8,
)

statement_000461 = ConstraintArgumentParserInfo.Create(
    regions=[region_000976, None],
    expression=statement_000461,
    keyword=None,
)

statement_000462 = BooleanExpressionParserInfo.Create(
    regions=[region_000977],
    value=True,
)

statement_000463 = ConstraintArgumentParserInfo.Create(
    regions=[region_000978, region_000979],
    expression=statement_000462,
    keyword="is_signed!",
)

statement_000464 = BooleanExpressionParserInfo.Create(
    regions=[region_000980],
    value=True,
)

statement_000465 = ConstraintArgumentParserInfo.Create(
    regions=[region_000981, region_000982],
    expression=statement_000464,
    keyword="is_checked!",
)

statement_000466 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000983, region_000983],
    arguments=[statement_000461, statement_000463, statement_000465, ],
)

statement_000467 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000984, region_000985, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000466,
    mutability_modifier=None,
)

statement_000468 = TypeAliasStatementParserInfo.Create(
    regions=[region_000986, region_000987, region_000988],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedInt64",
    type=statement_000467,
)

statement_000469 = IntegerExpressionParserInfo.Create(
    regions=[region_000989],
    value=8,
)

statement_000469 = ConstraintArgumentParserInfo.Create(
    regions=[region_000989, None],
    expression=statement_000469,
    keyword=None,
)

statement_000470 = BooleanExpressionParserInfo.Create(
    regions=[region_000990],
    value=False,
)

statement_000471 = ConstraintArgumentParserInfo.Create(
    regions=[region_000991, region_000992],
    expression=statement_000470,
    keyword="is_signed!",
)

statement_000472 = BooleanExpressionParserInfo.Create(
    regions=[region_000993],
    value=False,
)

statement_000473 = ConstraintArgumentParserInfo.Create(
    regions=[region_000994, region_000995],
    expression=statement_000472,
    keyword="is_checked!",
)

statement_000474 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000996, region_000996],
    arguments=[statement_000469, statement_000471, statement_000473, ],
)

statement_000475 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000997, region_000998, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000474,
    mutability_modifier=None,
)

statement_000476 = TypeAliasStatementParserInfo.Create(
    regions=[region_000999, region_001000, region_001001],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="UInt64",
    type=statement_000475,
)

statement_000477 = IntegerExpressionParserInfo.Create(
    regions=[region_001002],
    value=8,
)

statement_000477 = ConstraintArgumentParserInfo.Create(
    regions=[region_001002, None],
    expression=statement_000477,
    keyword=None,
)

statement_000478 = BooleanExpressionParserInfo.Create(
    regions=[region_001003],
    value=False,
)

statement_000479 = ConstraintArgumentParserInfo.Create(
    regions=[region_001004, region_001005],
    expression=statement_000478,
    keyword="is_signed!",
)

statement_000480 = BooleanExpressionParserInfo.Create(
    regions=[region_001006],
    value=True,
)

statement_000481 = ConstraintArgumentParserInfo.Create(
    regions=[region_001007, region_001008],
    expression=statement_000480,
    keyword="is_checked!",
)

statement_000482 = ConstraintArgumentsParserInfo.Create(
    regions=[region_001009, region_001009],
    arguments=[statement_000477, statement_000479, statement_000481, ],
)

statement_000483 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001010, region_001011, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000482,
    mutability_modifier=None,
)

statement_000484 = TypeAliasStatementParserInfo.Create(
    regions=[region_001012, region_001013, region_001014],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedUInt64",
    type=statement_000483,
)

statement_000485 = IntegerExpressionParserInfo.Create(
    regions=[region_001015],
    value=16,
)

statement_000485 = ConstraintArgumentParserInfo.Create(
    regions=[region_001015, None],
    expression=statement_000485,
    keyword=None,
)

statement_000486 = BooleanExpressionParserInfo.Create(
    regions=[region_001016],
    value=True,
)

statement_000487 = ConstraintArgumentParserInfo.Create(
    regions=[region_001017, region_001018],
    expression=statement_000486,
    keyword="is_signed!",
)

statement_000488 = BooleanExpressionParserInfo.Create(
    regions=[region_001019],
    value=False,
)

statement_000489 = ConstraintArgumentParserInfo.Create(
    regions=[region_001020, region_001021],
    expression=statement_000488,
    keyword="is_checked!",
)

statement_000490 = ConstraintArgumentsParserInfo.Create(
    regions=[region_001022, region_001022],
    arguments=[statement_000485, statement_000487, statement_000489, ],
)

statement_000491 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001023, region_001024, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000490,
    mutability_modifier=None,
)

statement_000492 = TypeAliasStatementParserInfo.Create(
    regions=[region_001025, region_001026, region_001027],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Int128",
    type=statement_000491,
)

statement_000493 = IntegerExpressionParserInfo.Create(
    regions=[region_001028],
    value=16,
)

statement_000493 = ConstraintArgumentParserInfo.Create(
    regions=[region_001028, None],
    expression=statement_000493,
    keyword=None,
)

statement_000494 = BooleanExpressionParserInfo.Create(
    regions=[region_001029],
    value=True,
)

statement_000495 = ConstraintArgumentParserInfo.Create(
    regions=[region_001030, region_001031],
    expression=statement_000494,
    keyword="is_signed!",
)

statement_000496 = BooleanExpressionParserInfo.Create(
    regions=[region_001032],
    value=True,
)

statement_000497 = ConstraintArgumentParserInfo.Create(
    regions=[region_001033, region_001034],
    expression=statement_000496,
    keyword="is_checked!",
)

statement_000498 = ConstraintArgumentsParserInfo.Create(
    regions=[region_001035, region_001035],
    arguments=[statement_000493, statement_000495, statement_000497, ],
)

statement_000499 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001036, region_001037, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000498,
    mutability_modifier=None,
)

statement_000500 = TypeAliasStatementParserInfo.Create(
    regions=[region_001038, region_001039, region_001040],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedInt128",
    type=statement_000499,
)

statement_000501 = IntegerExpressionParserInfo.Create(
    regions=[region_001041],
    value=16,
)

statement_000501 = ConstraintArgumentParserInfo.Create(
    regions=[region_001041, None],
    expression=statement_000501,
    keyword=None,
)

statement_000502 = BooleanExpressionParserInfo.Create(
    regions=[region_001042],
    value=False,
)

statement_000503 = ConstraintArgumentParserInfo.Create(
    regions=[region_001043, region_001044],
    expression=statement_000502,
    keyword="is_signed!",
)

statement_000504 = BooleanExpressionParserInfo.Create(
    regions=[region_001045],
    value=False,
)

statement_000505 = ConstraintArgumentParserInfo.Create(
    regions=[region_001046, region_001047],
    expression=statement_000504,
    keyword="is_checked!",
)

statement_000506 = ConstraintArgumentsParserInfo.Create(
    regions=[region_001048, region_001048],
    arguments=[statement_000501, statement_000503, statement_000505, ],
)

statement_000507 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001049, region_001050, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000506,
    mutability_modifier=None,
)

statement_000508 = TypeAliasStatementParserInfo.Create(
    regions=[region_001051, region_001052, region_001053],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="UInt128",
    type=statement_000507,
)

statement_000509 = IntegerExpressionParserInfo.Create(
    regions=[region_001054],
    value=16,
)

statement_000509 = ConstraintArgumentParserInfo.Create(
    regions=[region_001054, None],
    expression=statement_000509,
    keyword=None,
)

statement_000510 = BooleanExpressionParserInfo.Create(
    regions=[region_001055],
    value=False,
)

statement_000511 = ConstraintArgumentParserInfo.Create(
    regions=[region_001056, region_001057],
    expression=statement_000510,
    keyword="is_signed!",
)

statement_000512 = BooleanExpressionParserInfo.Create(
    regions=[region_001058],
    value=True,
)

statement_000513 = ConstraintArgumentParserInfo.Create(
    regions=[region_001059, region_001060],
    expression=statement_000512,
    keyword="is_checked!",
)

statement_000514 = ConstraintArgumentsParserInfo.Create(
    regions=[region_001061, region_001061],
    arguments=[statement_000509, statement_000511, statement_000513, ],
)

statement_000515 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001062, region_001063, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000514,
    mutability_modifier=None,
)

statement_000516 = TypeAliasStatementParserInfo.Create(
    regions=[region_001064, region_001065, region_001066],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedUInt128",
    type=statement_000515,
)

statement_000517 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_001067, region_001067],
    name="__architecture_bytes!",
)

statement_000518 = IntegerExpressionParserInfo.Create(
    regions=[region_001068],
    value=4,
)

statement_000519 = BinaryExpressionParserInfo.Create(
    regions=[region_001069, region_001070],
    left_expression=statement_000517,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000518,
)

statement_000520 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001071, region_001071, None],
    value=CustomType("UInt32"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000521 = TypeAliasStatementParserInfo.Create(
    regions=[region_001072, region_001073, region_001074],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="ArchInt",
    type=statement_000520,
)

statement_000522 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001075, region_001075, None],
    value=CustomType("CheckedUInt32"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000523 = TypeAliasStatementParserInfo.Create(
    regions=[region_001076, region_001077, region_001078],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedArchInt",
    type=statement_000522,
)

statement_000524 = IfStatementClauseParserInfo.Create(
    regions=[region_001079, region_001080, None],
    expression=statement_000519,
    statements=[statement_000521, statement_000523, ],
    documentation=None,
)

statement_000525 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_001081, region_001081],
    name="__architecture_bytes!",
)

statement_000526 = IntegerExpressionParserInfo.Create(
    regions=[region_001082],
    value=8,
)

statement_000527 = BinaryExpressionParserInfo.Create(
    regions=[region_001083, region_001084],
    left_expression=statement_000525,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000526,
)

statement_000528 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001085, region_001085, None],
    value=CustomType("UInt64"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000529 = TypeAliasStatementParserInfo.Create(
    regions=[region_001086, region_001087, region_001088],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="ArchInt",
    type=statement_000528,
)

statement_000530 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001089, region_001089, None],
    value=CustomType("CheckedUInt64"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000531 = TypeAliasStatementParserInfo.Create(
    regions=[region_001090, region_001091, region_001092],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedArchInt",
    type=statement_000530,
)

statement_000532 = IfStatementClauseParserInfo.Create(
    regions=[region_001093, region_001094, None],
    expression=statement_000527,
    statements=[statement_000529, statement_000531, ],
    documentation=None,
)

statement_000533 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_001095, region_001095, None],
    value=CustomType("Error!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000534 = StringExpressionParserInfo.Create(
    regions=[region_001096],
    value="Unsupported architecture",
)

statement_000534 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001096, None],
    expression=statement_000534,
    keyword=None,
)

statement_000535 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_001097, region_001097],
    name="__architecture_bytes!",
)

statement_000535 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_001097, None],
    expression=statement_000535,
    keyword=None,
)

statement_000536 = FuncArgumentsParserInfo.Create(
    regions=[region_001098, region_001098],
    arguments=[statement_000534, statement_000535, ],
)

statement_000537 = CallExpressionParserInfo.Create(
    regions=[region_001099, region_001098],
    expression=statement_000533,
    arguments=statement_000536,
)

statement_000538 = FuncInvocationStatementParserInfo.Create(
    regions=[region_001100],
    expression=statement_000537,
)

statement_000539 = IfStatementElseClauseParserInfo.Create(
    regions=[region_001101, region_001102, None],
    statements=[statement_000538, ],
    documentation=None,
)

statement_000524 = IfStatementParserInfo.Create(
    regions=[region_001079],
    clauses=[statement_000524, statement_000532, ],
    else_clause=statement_000539,
)

public_exports = [
    statement_000356,
    statement_000364,
    statement_000372,
    statement_000380,
    statement_000388,
    statement_000396,
    statement_000404,
    statement_000412,
    statement_000420,
    statement_000428,
    statement_000436,
    statement_000444,
    statement_000452,
    statement_000460,
    statement_000468,
    statement_000476,
    statement_000484,
    statement_000492,
    statement_000500,
    statement_000508,
    statement_000516,
    statement_000524,
]
