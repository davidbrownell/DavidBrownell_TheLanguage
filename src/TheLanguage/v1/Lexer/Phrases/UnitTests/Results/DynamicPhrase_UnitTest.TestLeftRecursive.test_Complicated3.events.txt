0) StartPhrase, "Dynamic Phrase"
1) StartPhrase, "All Phrases <Prefix>"
2) StartPhrase, "Lower"
3) EndPhrase, "Lower" [False]
4) StartPhrase, "Upper"
5) OnInternalPhrase, 0, 4
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 1] (0)"
        end: "[1, 5] (4)"
      token: "Upper"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(0, 4), match='TRUE'>"
    phrase: "Upper"
6) EndPhrase, "Upper" [True]
7) StartPhrase, "Neg"
8) StartPhrase, "'-'"
9) EndPhrase, "'-'" [False]
10) EndPhrase, "Neg" [False]
11) OnInternalPhrase, 0, 4
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 1] (0)"
          end: "[1, 5] (4)"
        token: "Upper"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(0, 4), match='TRUE'>"
      phrase: "Upper"
    phrase: "All Phrases <Prefix>"
12) EndPhrase, "All Phrases <Prefix>" [True]
13) StartPhrase, "All Phrases <Suffix>"
14) StartPhrase, "'+'"
15) EndPhrase, "'+'" [False]
16) StartPhrase, "'-'"
17) EndPhrase, "'-'" [False]
18) StartPhrase, "'*'"
19) EndPhrase, "'*'" [False]
20) StartPhrase, "'/'"
21) EndPhrase, "'/'" [False]
22) StartPhrase, "'if'"
23) OnInternalPhrase, 5, 7
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 6] (5)"
        end: "[1, 8] (7)"
      token: "'if'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
    phrase: "'if'"
24) EndPhrase, "'if'" [True]
25) StartPhrase, "DynamicPhrasesType.Statements"
26) StartPhrase, "All Phrases <Prefix>"
27) StartPhrase, "Lower"
28) OnInternalPhrase, 8, 11
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 9] (8)"
        end: "[1, 12] (11)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
    phrase: "Lower"
29) EndPhrase, "Lower" [True]
30) StartPhrase, "Upper"
31) EndPhrase, "Upper" [False]
32) StartPhrase, "Neg"
33) StartPhrase, "'-'"
34) EndPhrase, "'-'" [False]
35) EndPhrase, "Neg" [False]
36) OnInternalPhrase, 8, 11
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 9] (8)"
          end: "[1, 12] (11)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
37) EndPhrase, "All Phrases <Prefix>" [True]
38) StartPhrase, "All Phrases <Suffix>"
39) StartPhrase, "'+'"
40) EndPhrase, "'+'" [False]
41) StartPhrase, "'-'"
42) EndPhrase, "'-'" [False]
43) StartPhrase, "'*'"
44) EndPhrase, "'*'" [False]
45) StartPhrase, "'/'"
46) EndPhrase, "'/'" [False]
47) StartPhrase, "'if'"
48) EndPhrase, "'if'" [False]
49) StartPhrase, "'['"
50) OnInternalPhrase, 11, 12
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 12] (11)"
        end: "[1, 13] (12)"
      token: "'['"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
    phrase: "'['"
51) EndPhrase, "'['" [True]
52) StartPhrase, "DynamicPhrasesType.Statements"
53) StartPhrase, "All Phrases <Prefix>"
54) StartPhrase, "Lower"
55) OnInternalPhrase, 12, 13
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 13] (12)"
        end: "[1, 14] (13)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
    phrase: "Lower"
56) EndPhrase, "Lower" [True]
57) StartPhrase, "Upper"
58) EndPhrase, "Upper" [False]
59) StartPhrase, "Neg"
60) StartPhrase, "'-'"
61) EndPhrase, "'-'" [False]
62) EndPhrase, "Neg" [False]
63) OnInternalPhrase, 12, 13
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 13] (12)"
          end: "[1, 14] (13)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
64) EndPhrase, "All Phrases <Prefix>" [True]
65) StartPhrase, "All Phrases <Suffix>"
66) StartPhrase, "'+'"
67) EndPhrase, "'+'" [False]
68) StartPhrase, "'-'"
69) EndPhrase, "'-'" [False]
70) StartPhrase, "'*'"
71) EndPhrase, "'*'" [False]
72) StartPhrase, "'/'"
73) EndPhrase, "'/'" [False]
74) StartPhrase, "'if'"
75) EndPhrase, "'if'" [False]
76) StartPhrase, "'['"
77) EndPhrase, "'['" [False]
78) EndPhrase, "All Phrases <Suffix>" [False]
79) OnInternalPhrase, 12, 13
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 13] (12)"
            end: "[1, 14] (13)"
          token: "Lower"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
        phrase: "Lower"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
80) EndPhrase, "DynamicPhrasesType.Statements" [True]
81) StartPhrase, "']'"
82) OnInternalPhrase, 13, 14
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 14] (13)"
        end: "[1, 15] (14)"
      token: "']'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
    phrase: "']'"
83) EndPhrase, "']'" [True]
84) OnInternalPhrase, 11, 14
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 9] (8)"
                  end: "[1, 12] (11)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 12] (11)"
              end: "[1, 13] (12)"
            token: "'['"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
          phrase: "'['"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 13] (12)"
                  end: "[1, 14] (13)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 14] (13)"
              end: "[1, 15] (14)"
            token: "']'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
          phrase: "']'"
      phrase: "Index"
    phrase: "All Phrases <Suffix>"
85) EndPhrase, "All Phrases <Suffix>" [True]
86) StartPhrase, "All Phrases <Suffix>"
87) StartPhrase, "'+'"
88) EndPhrase, "'+'" [False]
89) StartPhrase, "'-'"
90) EndPhrase, "'-'" [False]
91) StartPhrase, "'*'"
92) EndPhrase, "'*'" [False]
93) StartPhrase, "'/'"
94) EndPhrase, "'/'" [False]
95) StartPhrase, "'if'"
96) EndPhrase, "'if'" [False]
97) StartPhrase, "'['"
98) OnInternalPhrase, 14, 15
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 15] (14)"
        end: "[1, 16] (15)"
      token: "'['"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
    phrase: "'['"
99) EndPhrase, "'['" [True]
100) StartPhrase, "DynamicPhrasesType.Statements"
101) StartPhrase, "All Phrases <Prefix>"
102) StartPhrase, "Lower"
103) OnInternalPhrase, 15, 18
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 16] (15)"
        end: "[1, 19] (18)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
    phrase: "Lower"
104) EndPhrase, "Lower" [True]
105) StartPhrase, "Upper"
106) EndPhrase, "Upper" [False]
107) StartPhrase, "Neg"
108) StartPhrase, "'-'"
109) EndPhrase, "'-'" [False]
110) EndPhrase, "Neg" [False]
111) OnInternalPhrase, 15, 18
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 16] (15)"
          end: "[1, 19] (18)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
112) EndPhrase, "All Phrases <Prefix>" [True]
113) StartPhrase, "All Phrases <Suffix>"
114) StartPhrase, "'+'"
115) EndPhrase, "'+'" [False]
116) StartPhrase, "'-'"
117) EndPhrase, "'-'" [False]
118) StartPhrase, "'*'"
119) EndPhrase, "'*'" [False]
120) StartPhrase, "'/'"
121) EndPhrase, "'/'" [False]
122) StartPhrase, "'if'"
123) OnInternalPhrase, 19, 21
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 20] (19)"
        end: "[1, 22] (21)"
      token: "'if'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
    phrase: "'if'"
124) EndPhrase, "'if'" [True]
125) StartPhrase, "DynamicPhrasesType.Statements"
126) StartPhrase, "All Phrases <Prefix>"
127) StartPhrase, "Lower"
128) EndPhrase, "Lower" [False]
129) StartPhrase, "Upper"
130) OnInternalPhrase, 22, 31
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 23] (22)"
        end: "[1, 32] (31)"
      token: "Upper"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
    phrase: "Upper"
131) EndPhrase, "Upper" [True]
132) StartPhrase, "Neg"
133) StartPhrase, "'-'"
134) EndPhrase, "'-'" [False]
135) EndPhrase, "Neg" [False]
136) OnInternalPhrase, 22, 31
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 23] (22)"
          end: "[1, 32] (31)"
        token: "Upper"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
      phrase: "Upper"
    phrase: "All Phrases <Prefix>"
137) EndPhrase, "All Phrases <Prefix>" [True]
138) StartPhrase, "All Phrases <Suffix>"
139) StartPhrase, "'+'"
140) EndPhrase, "'+'" [False]
141) StartPhrase, "'-'"
142) EndPhrase, "'-'" [False]
143) StartPhrase, "'*'"
144) EndPhrase, "'*'" [False]
145) StartPhrase, "'/'"
146) EndPhrase, "'/'" [False]
147) StartPhrase, "'if'"
148) EndPhrase, "'if'" [False]
149) StartPhrase, "'['"
150) EndPhrase, "'['" [False]
151) EndPhrase, "All Phrases <Suffix>" [False]
152) OnInternalPhrase, 22, 31
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 23] (22)"
            end: "[1, 32] (31)"
          token: "Upper"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
        phrase: "Upper"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
153) EndPhrase, "DynamicPhrasesType.Statements" [True]
154) StartPhrase, "'else'"
155) OnInternalPhrase, 32, 36
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 33] (32)"
        end: "[1, 37] (36)"
      token: "'else'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
    phrase: "'else'"
156) EndPhrase, "'else'" [True]
157) StartPhrase, "DynamicPhrasesType.Statements"
158) StartPhrase, "All Phrases <Prefix>"
159) StartPhrase, "Lower"
160) OnInternalPhrase, 37, 40
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 38] (37)"
        end: "[1, 41] (40)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
    phrase: "Lower"
161) EndPhrase, "Lower" [True]
162) StartPhrase, "Upper"
163) EndPhrase, "Upper" [False]
164) StartPhrase, "Neg"
165) StartPhrase, "'-'"
166) EndPhrase, "'-'" [False]
167) EndPhrase, "Neg" [False]
168) OnInternalPhrase, 37, 40
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 38] (37)"
          end: "[1, 41] (40)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
169) EndPhrase, "All Phrases <Prefix>" [True]
170) StartPhrase, "All Phrases <Suffix>"
171) StartPhrase, "'+'"
172) EndPhrase, "'+'" [False]
173) StartPhrase, "'-'"
174) EndPhrase, "'-'" [False]
175) StartPhrase, "'*'"
176) EndPhrase, "'*'" [False]
177) StartPhrase, "'/'"
178) EndPhrase, "'/'" [False]
179) StartPhrase, "'if'"
180) EndPhrase, "'if'" [False]
181) StartPhrase, "'['"
182) EndPhrase, "'['" [False]
183) EndPhrase, "All Phrases <Suffix>" [False]
184) OnInternalPhrase, 37, 40
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 38] (37)"
            end: "[1, 41] (40)"
          token: "Lower"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
        phrase: "Lower"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
185) EndPhrase, "DynamicPhrasesType.Statements" [True]
186) StartPhrase, "'['"
187) EndPhrase, "'['" [False]
188) OnInternalPhrase, 18, 40
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 16] (15)"
                  end: "[1, 19] (18)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: true
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 19] (18)"
            end: "[1, 20] (19)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 18
              end: 19
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 20] (19)"
              end: "[1, 22] (21)"
            token: "'if'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
          phrase: "'if'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: true
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 22] (21)"
            end: "[1, 23] (22)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 21
              end: 22
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 23] (22)"
                  end: "[1, 32] (31)"
                token: "Upper"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
              phrase: "Upper"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: true
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 32] (31)"
            end: "[1, 33] (32)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 31
              end: 32
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 33] (32)"
              end: "[1, 37] (36)"
            token: "'else'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
          phrase: "'else'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: true
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 37] (36)"
            end: "[1, 38] (37)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 36
              end: 37
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 38] (37)"
                  end: "[1, 41] (40)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Ter"
    phrase: "All Phrases <Suffix>"
189) EndPhrase, "All Phrases <Suffix>" [True]
190) StartPhrase, "All Phrases <Suffix>"
191) StartPhrase, "'+'"
192) EndPhrase, "'+'" [False]
193) StartPhrase, "'-'"
194) EndPhrase, "'-'" [False]
195) StartPhrase, "'*'"
196) EndPhrase, "'*'" [False]
197) StartPhrase, "'/'"
198) EndPhrase, "'/'" [False]
199) StartPhrase, "'if'"
200) EndPhrase, "'if'" [False]
201) StartPhrase, "'['"
202) EndPhrase, "'['" [False]
203) EndPhrase, "All Phrases <Suffix>" [False]
204) OnInternalPhrase, 15, 40
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 16] (15)"
                    end: "[1, 19] (18)"
                  token: "Lower"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                phrase: "Lower"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: true
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 19] (18)"
              end: "[1, 20] (19)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 18
                end: 19
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 20] (19)"
                end: "[1, 22] (21)"
              token: "'if'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            phrase: "'if'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: true
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 22] (21)"
              end: "[1, 23] (22)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 21
                end: 22
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 23] (22)"
                    end: "[1, 32] (31)"
                  token: "Upper"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                phrase: "Upper"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: true
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 32] (31)"
              end: "[1, 33] (32)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 31
                end: 32
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 33] (32)"
                end: "[1, 37] (36)"
              token: "'else'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
            phrase: "'else'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: true
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 37] (36)"
              end: "[1, 38] (37)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 36
                end: 37
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 38] (37)"
                    end: "[1, 41] (40)"
                  token: "Lower"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                phrase: "Lower"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
        phrase: "Ter"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
205) EndPhrase, "DynamicPhrasesType.Statements" [True]
206) StartPhrase, "']'"
207) OnInternalPhrase, 40, 41
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 41] (40)"
        end: "[1, 42] (41)"
      token: "']'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
    phrase: "']'"
208) EndPhrase, "']'" [True]
209) OnInternalPhrase, 14, 41
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: false
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 9] (8)"
                          end: "[1, 12] (11)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 12] (11)"
                      end: "[1, 13] (12)"
                    token: "'['"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                  phrase: "'['"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: false
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 13] (12)"
                          end: "[1, 14] (13)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 14] (13)"
                      end: "[1, 15] (14)"
                    token: "']'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                  phrase: "']'"
              phrase: "Index"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 15] (14)"
              end: "[1, 16] (15)"
            token: "'['"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
          phrase: "'['"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: false
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 16] (15)"
                          end: "[1, 19] (18)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: true
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 19] (18)"
                    end: "[1, 20] (19)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 18
                      end: 19
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 20] (19)"
                      end: "[1, 22] (21)"
                    token: "'if'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                  phrase: "'if'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: true
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 22] (21)"
                    end: "[1, 23] (22)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 21
                      end: 22
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: false
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 23] (22)"
                          end: "[1, 32] (31)"
                        token: "Upper"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                      phrase: "Upper"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: true
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 32] (31)"
                    end: "[1, 33] (32)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 31
                      end: 32
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 33] (32)"
                      end: "[1, 37] (36)"
                    token: "'else'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                  phrase: "'else'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: true
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 37] (36)"
                    end: "[1, 38] (37)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 36
                      end: 37
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: false
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 38] (37)"
                          end: "[1, 41] (40)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
              phrase: "Ter"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 41] (40)"
              end: "[1, 42] (41)"
            token: "']'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
          phrase: "']'"
      phrase: "Index"
    phrase: "All Phrases <Suffix>"
210) EndPhrase, "All Phrases <Suffix>" [True]
211) StartPhrase, "All Phrases <Suffix>"
212) StartPhrase, "'+'"
213) EndPhrase, "'+'" [False]
214) StartPhrase, "'-'"
215) EndPhrase, "'-'" [False]
216) StartPhrase, "'*'"
217) EndPhrase, "'*'" [False]
218) StartPhrase, "'/'"
219) EndPhrase, "'/'" [False]
220) StartPhrase, "'if'"
221) EndPhrase, "'if'" [False]
222) StartPhrase, "'['"
223) EndPhrase, "'['" [False]
224) EndPhrase, "All Phrases <Suffix>" [False]
225) OnInternalPhrase, 8, 41
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: false
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 9] (8)"
                            end: "[1, 12] (11)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: false
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 12] (11)"
                        end: "[1, 13] (12)"
                      token: "'['"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                    phrase: "'['"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: false
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 13] (12)"
                            end: "[1, 14] (13)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: false
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 14] (13)"
                        end: "[1, 15] (14)"
                      token: "']'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                    phrase: "']'"
                phrase: "Index"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 15] (14)"
                end: "[1, 16] (15)"
              token: "'['"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            phrase: "'['"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: false
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 16] (15)"
                            end: "[1, 19] (18)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: true
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 19] (18)"
                      end: "[1, 20] (19)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 18
                        end: 19
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: false
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 20] (19)"
                        end: "[1, 22] (21)"
                      token: "'if'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                    phrase: "'if'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: true
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 22] (21)"
                      end: "[1, 23] (22)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 21
                        end: 22
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: false
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 23] (22)"
                            end: "[1, 32] (31)"
                          token: "Upper"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                        phrase: "Upper"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: true
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 32] (31)"
                      end: "[1, 33] (32)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 31
                        end: 32
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: false
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 33] (32)"
                        end: "[1, 37] (36)"
                      token: "'else'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                    phrase: "'else'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: true
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 37] (36)"
                      end: "[1, 38] (37)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 36
                        end: 37
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: false
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 38] (37)"
                            end: "[1, 41] (40)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Ter"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 41] (40)"
                end: "[1, 42] (41)"
              token: "']'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
            phrase: "']'"
        phrase: "Index"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
226) EndPhrase, "DynamicPhrasesType.Statements" [True]
227) StartPhrase, "'else'"
228) OnInternalPhrase, 42, 46
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 43] (42)"
        end: "[1, 47] (46)"
      token: "'else'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(42, 46), match='else'>"
    phrase: "'else'"
229) EndPhrase, "'else'" [True]
230) StartPhrase, "DynamicPhrasesType.Statements"
231) StartPhrase, "All Phrases <Prefix>"
232) StartPhrase, "Lower"
233) EndPhrase, "Lower" [False]
234) StartPhrase, "Upper"
235) OnInternalPhrase, 47, 52
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 48] (47)"
        end: "[1, 53] (52)"
      token: "Upper"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
    phrase: "Upper"
236) EndPhrase, "Upper" [True]
237) StartPhrase, "Neg"
238) StartPhrase, "'-'"
239) EndPhrase, "'-'" [False]
240) EndPhrase, "Neg" [False]
241) OnInternalPhrase, 47, 52
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: false
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 48] (47)"
          end: "[1, 53] (52)"
        token: "Upper"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
      phrase: "Upper"
    phrase: "All Phrases <Prefix>"
242) EndPhrase, "All Phrases <Prefix>" [True]
243) StartPhrase, "All Phrases <Suffix>"
244) StartPhrase, "'+'"
245) EndPhrase, "'+'" [False]
246) StartPhrase, "'-'"
247) EndPhrase, "'-'" [False]
248) StartPhrase, "'*'"
249) EndPhrase, "'*'" [False]
250) StartPhrase, "'/'"
251) EndPhrase, "'/'" [False]
252) StartPhrase, "'if'"
253) EndPhrase, "'if'" [False]
254) StartPhrase, "'['"
255) EndPhrase, "'['" [False]
256) EndPhrase, "All Phrases <Suffix>" [False]
257) OnInternalPhrase, 47, 52
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 48] (47)"
            end: "[1, 53] (52)"
          token: "Upper"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
        phrase: "Upper"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
258) EndPhrase, "DynamicPhrasesType.Statements" [True]
259) StartPhrase, "'['"
260) EndPhrase, "'['" [False]
261) OnInternalPhrase, 4, 52
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 1] (0)"
                  end: "[1, 5] (4)"
                token: "Upper"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(0, 4), match='TRUE'>"
              phrase: "Upper"
            phrase: "All Phrases"
          phrase: "Dynamic Phrase"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: true
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 5] (4)"
            end: "[1, 6] (5)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 4
              end: 5
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 6] (5)"
              end: "[1, 8] (7)"
            token: "'if'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
          phrase: "'if'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: true
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 8] (7)"
            end: "[1, 9] (8)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 7
              end: 8
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: false
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 9] (8)"
                                  end: "[1, 12] (11)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: false
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 12] (11)"
                              end: "[1, 13] (12)"
                            token: "'['"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                          phrase: "'['"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: false
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 13] (12)"
                                  end: "[1, 14] (13)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: false
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 14] (13)"
                              end: "[1, 15] (14)"
                            token: "']'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                          phrase: "']'"
                      phrase: "Index"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 15] (14)"
                      end: "[1, 16] (15)"
                    token: "'['"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
                  phrase: "'['"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: false
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 16] (15)"
                                  end: "[1, 19] (18)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: true
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 19] (18)"
                            end: "[1, 20] (19)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 18
                              end: 19
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: false
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 20] (19)"
                              end: "[1, 22] (21)"
                            token: "'if'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                          phrase: "'if'"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: true
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 22] (21)"
                            end: "[1, 23] (22)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 21
                              end: 22
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: false
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 23] (22)"
                                  end: "[1, 32] (31)"
                                token: "Upper"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                              phrase: "Upper"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: true
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 32] (31)"
                            end: "[1, 33] (32)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 31
                              end: 32
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: false
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 33] (32)"
                              end: "[1, 37] (36)"
                            token: "'else'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                          phrase: "'else'"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: true
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 37] (36)"
                            end: "[1, 38] (37)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 36
                              end: 37
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: false
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 38] (37)"
                                  end: "[1, 41] (40)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                      phrase: "Ter"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 41] (40)"
                      end: "[1, 42] (41)"
                    token: "']'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
                  phrase: "']'"
              phrase: "Index"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: true
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 42] (41)"
            end: "[1, 43] (42)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 41
              end: 42
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 43] (42)"
              end: "[1, 47] (46)"
            token: "'else'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(42, 46), match='else'>"
          phrase: "'else'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: true
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 47] (46)"
            end: "[1, 48] (47)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 46
              end: 47
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 48] (47)"
                  end: "[1, 53] (52)"
                token: "Upper"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
              phrase: "Upper"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Ter"
    phrase: "All Phrases <Suffix>"
262) EndPhrase, "All Phrases <Suffix>" [True]
263) StartPhrase, "All Phrases <Suffix>"
264) StartPhrase, "'+'"
265) EndPhrase, "'+'" [False]
266) StartPhrase, "'-'"
267) EndPhrase, "'-'" [False]
268) StartPhrase, "'*'"
269) EndPhrase, "'*'" [False]
270) StartPhrase, "'/'"
271) EndPhrase, "'/'" [False]
272) StartPhrase, "'if'"
273) EndPhrase, "'if'" [False]
274) StartPhrase, "'['"
275) EndPhrase, "'['" [False]
276) EndPhrase, "All Phrases <Suffix>" [False]
277) OnInternalPhrase, 0, 52
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 1] (0)"
                    end: "[1, 5] (4)"
                  token: "Upper"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(0, 4), match='TRUE'>"
                phrase: "Upper"
              phrase: "All Phrases"
            phrase: "Dynamic Phrase"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: true
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 5] (4)"
              end: "[1, 6] (5)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 4
                end: 5
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 6] (5)"
                end: "[1, 8] (7)"
              token: "'if'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            phrase: "'if'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: true
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 8] (7)"
              end: "[1, 9] (8)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 7
                end: 8
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data:
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: false
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 9] (8)"
                                    end: "[1, 12] (11)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: false
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 12] (11)"
                                end: "[1, 13] (12)"
                              token: "'['"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                            phrase: "'['"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: false
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 13] (12)"
                                    end: "[1, 14] (13)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: false
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 14] (13)"
                                end: "[1, 15] (14)"
                              token: "']'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                            phrase: "']'"
                        phrase: "Index"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: false
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 15] (14)"
                        end: "[1, 16] (15)"
                      token: "'['"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
                    phrase: "'['"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data:
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: false
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 16] (15)"
                                    end: "[1, 19] (18)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: true
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 19] (18)"
                              end: "[1, 20] (19)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 18
                                end: 19
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: false
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 20] (19)"
                                end: "[1, 22] (21)"
                              token: "'if'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                            phrase: "'if'"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: true
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 22] (21)"
                              end: "[1, 23] (22)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 21
                                end: 22
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: false
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 23] (22)"
                                    end: "[1, 32] (31)"
                                  token: "Upper"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                                phrase: "Upper"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: true
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 32] (31)"
                              end: "[1, 33] (32)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 31
                                end: 32
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: false
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 33] (32)"
                                end: "[1, 37] (36)"
                              token: "'else'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                            phrase: "'else'"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: true
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 37] (36)"
                              end: "[1, 38] (37)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 36
                                end: 37
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: false
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 38] (37)"
                                    end: "[1, 41] (40)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                        phrase: "Ter"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: false
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 41] (40)"
                        end: "[1, 42] (41)"
                      token: "']'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
                    phrase: "']'"
                phrase: "Index"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: true
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 42] (41)"
              end: "[1, 43] (42)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 41
                end: 42
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 43] (42)"
                end: "[1, 47] (46)"
              token: "'else'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(42, 46), match='else'>"
            phrase: "'else'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: true
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 47] (46)"
              end: "[1, 48] (47)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 46
                end: 47
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 48] (47)"
                    end: "[1, 53] (52)"
                  token: "Upper"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
                phrase: "Upper"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
        phrase: "Ter"
      phrase: "All Phrases"
    phrase: "Dynamic Phrase"
278) EndPhrase, "Dynamic Phrase" [True]
