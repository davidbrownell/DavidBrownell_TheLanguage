# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "'try' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 3), match='try'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 4] (3)"
                IterEnd: "[1, 5] (4)"
                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(3, 4), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 5] (4)"
                IterEnd: "[2, 1] (5)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 5
                  Start: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 1] (5)"
                IterEnd: "[2, 5] (9)"
                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                  End: 9
                  Start: 5
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[2, 5] (9)"
                                IterEnd: "[2, 11] (15)"
                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(9, 15), match='Func1a'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 11] (15)"
                                    IterEnd: "[2, 12] (16)"
                                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(15, 16), match='('>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 12] (16)"
                                    IterEnd: "[2, 13] (17)"
                                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(16, 17), match=')'>"
                                    Whitespace: None
                                IterBegin: "[2, 11] (15)"
                                IterEnd: "[2, 13] (17)"
                                Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[2, 13] (17)"
                                IterEnd: "[3, 1] (18)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 18
                                  Start: 17
                                Whitespace: None
                            IterBegin: "[2, 5] (9)"
                            IterEnd: "[3, 1] (18)"
                            Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[2, 5] (9)"
                        IterEnd: "[3, 1] (18)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[2, 5] (9)"
                    IterEnd: "[3, 1] (18)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[2, 5] (9)"
                IterEnd: "[3, 1] (18)"
                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 1] (18)"
                IterEnd: "[3, 1] (18)"
                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[3, 1] (18)"
                        IterEnd: "[3, 7] (24)"
                        Type: "'except' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(18, 24), match='except'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[3, 8] (25)"
                                    IterEnd: "[3, 17] (34)"
                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(25, 34), match='Exception'>"
                                    Whitespace:
                                      - 24
                                      - 25
                                IterBegin: "[3, 8] (25)"
                                IterEnd: "[3, 17] (34)"
                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[3, 8] (25)"
                            IterEnd: "[3, 17] (34)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[3, 8] (25)"
                        IterEnd: "[3, 17] (34)"
                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[3, 18] (35)"
                                    IterEnd: "[3, 20] (37)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(35, 37), match='ex'>"
                                    Whitespace:
                                      - 34
                                      - 35
                                IterBegin: "[3, 18] (35)"
                                IterEnd: "[3, 20] (37)"
                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[3, 18] (35)"
                            IterEnd: "[3, 20] (37)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[3, 18] (35)"
                        IterEnd: "[3, 20] (37)"
                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[3, 20] (37)"
                        IterEnd: "[3, 21] (38)"
                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(37, 38), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[3, 21] (38)"
                        IterEnd: "[4, 1] (39)"
                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                          End: 39
                          Start: 38
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[4, 1] (39)"
                        IterEnd: "[4, 5] (43)"
                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                          End: 43
                          Start: 39
                          Value: 4
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[4, 5] (43)"
                                        IterEnd: "[4, 11] (49)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(43, 49), match='Func1b'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[4, 11] (49)"
                                            IterEnd: "[4, 12] (50)"
                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(49, 50), match='('>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[4, 12] (50)"
                                            IterEnd: "[4, 13] (51)"
                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(50, 51), match=')'>"
                                            Whitespace: None
                                        IterBegin: "[4, 11] (49)"
                                        IterEnd: "[4, 13] (51)"
                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[4, 13] (51)"
                                        IterEnd: "[6, 1] (53)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 53
                                          Start: 51
                                        Whitespace: None
                                    IterBegin: "[4, 5] (43)"
                                    IterEnd: "[6, 1] (53)"
                                    Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[4, 5] (43)"
                                IterEnd: "[6, 1] (53)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[4, 5] (43)"
                            IterEnd: "[6, 1] (53)"
                            Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        IterBegin: "[4, 5] (43)"
                        IterEnd: "[6, 1] (53)"
                        Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[6, 1] (53)"
                        IterEnd: "[6, 1] (53)"
                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                          {}
                        Whitespace: None
                    IterBegin: "[3, 1] (18)"
                    IterEnd: "[6, 1] (53)"
                    Type: "Except Var <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[3, 1] (18)"
                IterEnd: "[6, 1] (53)"
                Type: "Repeat: {Except Var, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[6, 1] (53)"
            Type: "Try Except Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[6, 1] (53)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[6, 1] (53)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[6, 1] (53)"
                IterEnd: "[6, 4] (56)"
                Type: "'try' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(53, 56), match='try'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[6, 4] (56)"
                IterEnd: "[6, 5] (57)"
                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(56, 57), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[6, 5] (57)"
                IterEnd: "[7, 1] (58)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 58
                  Start: 57
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 1] (58)"
                IterEnd: "[7, 5] (62)"
                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                  End: 62
                  Start: 58
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[7, 5] (62)"
                                IterEnd: "[7, 11] (68)"
                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(62, 68), match='Func2a'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[7, 11] (68)"
                                    IterEnd: "[7, 12] (69)"
                                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(68, 69), match='('>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[7, 12] (69)"
                                    IterEnd: "[7, 13] (70)"
                                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(69, 70), match=')'>"
                                    Whitespace: None
                                IterBegin: "[7, 11] (68)"
                                IterEnd: "[7, 13] (70)"
                                Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[7, 13] (70)"
                                IterEnd: "[8, 1] (71)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 71
                                  Start: 70
                                Whitespace: None
                            IterBegin: "[7, 5] (62)"
                            IterEnd: "[8, 1] (71)"
                            Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[7, 5] (62)"
                        IterEnd: "[8, 1] (71)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[7, 5] (62)"
                    IterEnd: "[8, 1] (71)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[7, 5] (62)"
                IterEnd: "[8, 1] (71)"
                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 1] (71)"
                IterEnd: "[8, 1] (71)"
                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[8, 1] (71)"
                        IterEnd: "[8, 7] (77)"
                        Type: "'except' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(71, 77), match='except'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[8, 8] (78)"
                                    IterEnd: "[8, 9] (79)"
                                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(78, 79), match='('>"
                                    Whitespace:
                                      - 77
                                      - 78
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[8, 9] (79)"
                                                IterEnd: "[8, 19] (89)"
                                                Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(79, 89), match='Exception1'>"
                                                Whitespace: None
                                            IterBegin: "[8, 9] (79)"
                                            IterEnd: "[8, 19] (89)"
                                            Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[8, 9] (79)"
                                        IterEnd: "[8, 19] (89)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[8, 9] (79)"
                                    IterEnd: "[8, 19] (89)"
                                    Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[8, 20] (90)"
                                    IterEnd: "[8, 21] (91)"
                                    Type: "'|' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(90, 91), match='|'>"
                                    Whitespace:
                                      - 89
                                      - 90
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[8, 22] (92)"
                                                IterEnd: "[8, 32] (102)"
                                                Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(92, 102), match='Exception2'>"
                                                Whitespace:
                                                  - 91
                                                  - 92
                                            IterBegin: "[8, 22] (92)"
                                            IterEnd: "[8, 32] (102)"
                                            Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[8, 22] (92)"
                                        IterEnd: "[8, 32] (102)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[8, 22] (92)"
                                    IterEnd: "[8, 32] (102)"
                                    Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[8, 32] (102)"
                                    IterEnd: "[8, 33] (103)"
                                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(102, 103), match=')'>"
                                    Whitespace: None
                                IterBegin: "[8, 8] (78)"
                                IterEnd: "[8, 33] (103)"
                                Type: "Variant Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[8, 8] (78)"
                            IterEnd: "[8, 33] (103)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[8, 8] (78)"
                        IterEnd: "[8, 33] (103)"
                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[8, 34] (104)"
                                    IterEnd: "[8, 36] (106)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(104, 106), match='ex'>"
                                    Whitespace:
                                      - 103
                                      - 104
                                IterBegin: "[8, 34] (104)"
                                IterEnd: "[8, 36] (106)"
                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[8, 34] (104)"
                            IterEnd: "[8, 36] (106)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[8, 34] (104)"
                        IterEnd: "[8, 36] (106)"
                        Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[8, 36] (106)"
                        IterEnd: "[8, 37] (107)"
                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(106, 107), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[8, 37] (107)"
                        IterEnd: "[9, 1] (108)"
                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                          End: 108
                          Start: 107
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[9, 1] (108)"
                        IterEnd: "[9, 5] (112)"
                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                          End: 112
                          Start: 108
                          Value: 4
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[9, 5] (112)"
                                        IterEnd: "[9, 11] (118)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(112, 118), match='Func2b'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[9, 11] (118)"
                                            IterEnd: "[9, 12] (119)"
                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(118, 119), match='('>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[9, 12] (119)"
                                            IterEnd: "[9, 13] (120)"
                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(119, 120), match=')'>"
                                            Whitespace: None
                                        IterBegin: "[9, 11] (118)"
                                        IterEnd: "[9, 13] (120)"
                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[9, 13] (120)"
                                        IterEnd: "[10, 1] (121)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 121
                                          Start: 120
                                        Whitespace: None
                                    IterBegin: "[9, 5] (112)"
                                    IterEnd: "[10, 1] (121)"
                                    Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[9, 5] (112)"
                                IterEnd: "[10, 1] (121)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[9, 5] (112)"
                            IterEnd: "[10, 1] (121)"
                            Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[10, 5] (125)"
                                        IterEnd: "[10, 11] (131)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(125, 131), match='Func2c'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[10, 11] (131)"
                                            IterEnd: "[10, 12] (132)"
                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(131, 132), match='('>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[10, 12] (132)"
                                            IterEnd: "[10, 13] (133)"
                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(132, 133), match=')'>"
                                            Whitespace: None
                                        IterBegin: "[10, 11] (131)"
                                        IterEnd: "[10, 13] (133)"
                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[10, 13] (133)"
                                        IterEnd: "[11, 1] (134)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 134
                                          Start: 133
                                        Whitespace: None
                                    IterBegin: "[10, 5] (125)"
                                    IterEnd: "[11, 1] (134)"
                                    Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[10, 5] (125)"
                                IterEnd: "[11, 1] (134)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[10, 5] (125)"
                            IterEnd: "[11, 1] (134)"
                            Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        IterBegin: "[9, 5] (112)"
                        IterEnd: "[11, 1] (134)"
                        Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[11, 1] (134)"
                        IterEnd: "[11, 1] (134)"
                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                          {}
                        Whitespace: None
                    IterBegin: "[8, 1] (71)"
                    IterEnd: "[11, 1] (134)"
                    Type: "Except Var <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[8, 1] (71)"
                IterEnd: "[11, 1] (134)"
                Type: "Repeat: {Except Var, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
            IterBegin: "[6, 1] (53)"
            IterEnd: "[11, 1] (134)"
            Type: "Try Except Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[6, 1] (53)"
        IterEnd: "[11, 1] (134)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[6, 1] (53)"
    IterEnd: "[11, 1] (134)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[11, 1] (134)"
Type: "<None>"
