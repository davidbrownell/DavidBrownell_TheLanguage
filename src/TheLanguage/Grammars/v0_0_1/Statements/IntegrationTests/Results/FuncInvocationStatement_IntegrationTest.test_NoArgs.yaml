# <class 'TheLanguage.Parser.RootParserInfo.RootParserInfo'>
Regions__: # <class 'types.RootParserInfoRegions'>
  Self__: "[Ln 1, Col 1] -> [Ln 5, Col 1]"
Statements:
  - # <class 'TheLanguage.Parser.Statements.FuncInvocationStatementParserInfo.FuncInvocationStatementParserInfo'>
    Expression: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
      Arguments: False
      Expression: # <class 'TheLanguage.Parser.Expressions.FuncNameExpressionParserInfo.FuncNameExpressionParserInfo'>
        Name: "Func1"
        Regions__: # <class 'types.FuncNameExpressionParserInfoRegions'>
          Name: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
          Self__: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
      Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
        Arguments: "[Ln 1, Col 6] -> [Ln 1, Col 8]"
        Expression: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
        Self__: "[Ln 1, Col 1] -> [Ln 1, Col 8]"
    Regions__: # <class 'types.FuncInvocationStatementParserInfoRegions'>
      Expression: "[Ln 1, Col 1] -> [Ln 1, Col 8]"
      Self__: "[Ln 1, Col 1] -> [Ln 2, Col 1]"
  - # <class 'TheLanguage.Parser.Statements.FuncInvocationStatementParserInfo.FuncInvocationStatementParserInfo'>
    Expression: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
      Left: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
          Name: "obj"
          Regions__: # <class 'types.VariableNameParserInfoRegions'>
            Name: "[Ln 2, Col 1] -> [Ln 2, Col 4]"
            Self__: "[Ln 2, Col 1] -> [Ln 2, Col 4]"
        Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
          Name: "[Ln 2, Col 1] -> [Ln 2, Col 4]"
          Self__: "[Ln 2, Col 1] -> [Ln 2, Col 4]"
      Operator: "OperatorType.ChainedFunc"
      Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
        Left: "[Ln 2, Col 1] -> [Ln 2, Col 4]"
        Operator: "[Ln 2, Col 4] -> [Ln 2, Col 5]"
        Right: "[Ln 2, Col 5] -> [Ln 2, Col 14]"
        Self__: "[Ln 2, Col 1] -> [Ln 2, Col 14]"
      Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
        Arguments: False
        Expression: # <class 'TheLanguage.Parser.Expressions.FuncNameExpressionParserInfo.FuncNameExpressionParserInfo'>
          Name: "Method2"
          Regions__: # <class 'types.FuncNameExpressionParserInfoRegions'>
            Name: "[Ln 2, Col 5] -> [Ln 2, Col 12]"
            Self__: "[Ln 2, Col 5] -> [Ln 2, Col 12]"
        Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
          Arguments: "[Ln 2, Col 12] -> [Ln 2, Col 14]"
          Expression: "[Ln 2, Col 5] -> [Ln 2, Col 12]"
          Self__: "[Ln 2, Col 5] -> [Ln 2, Col 14]"
    Regions__: # <class 'types.FuncInvocationStatementParserInfoRegions'>
      Expression: "[Ln 2, Col 1] -> [Ln 2, Col 14]"
      Self__: "[Ln 2, Col 1] -> [Ln 3, Col 1]"
  - # <class 'TheLanguage.Parser.Statements.FuncInvocationStatementParserInfo.FuncInvocationStatementParserInfo'>
    Expression: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
      Left: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
        Left: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
          Left: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
            Left: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "a"
                Regions__: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 3, Col 1] -> [Ln 3, Col 2]"
                  Self__: "[Ln 3, Col 1] -> [Ln 3, Col 2]"
              Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
                Name: "[Ln 3, Col 1] -> [Ln 3, Col 2]"
                Self__: "[Ln 3, Col 1] -> [Ln 3, Col 2]"
            Operator: "OperatorType.ChainedFunc"
            Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
              Left: "[Ln 3, Col 1] -> [Ln 3, Col 2]"
              Operator: "[Ln 3, Col 2] -> [Ln 3, Col 3]"
              Right: "[Ln 3, Col 3] -> [Ln 3, Col 4]"
              Self__: "[Ln 3, Col 1] -> [Ln 3, Col 4]"
            Right: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "b"
                Regions__: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 3, Col 3] -> [Ln 3, Col 4]"
                  Self__: "[Ln 3, Col 3] -> [Ln 3, Col 4]"
              Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
                Name: "[Ln 3, Col 3] -> [Ln 3, Col 4]"
                Self__: "[Ln 3, Col 3] -> [Ln 3, Col 4]"
          Operator: "OperatorType.ChainedFunc"
          Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
            Left: "[Ln 3, Col 1] -> [Ln 3, Col 4]"
            Operator: "[Ln 3, Col 4] -> [Ln 3, Col 5]"
            Right: "[Ln 3, Col 5] -> [Ln 3, Col 6]"
            Self__: "[Ln 3, Col 1] -> [Ln 3, Col 6]"
          Right: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
              Name: "c"
              Regions__: # <class 'types.VariableNameParserInfoRegions'>
                Name: "[Ln 3, Col 5] -> [Ln 3, Col 6]"
                Self__: "[Ln 3, Col 5] -> [Ln 3, Col 6]"
            Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
              Name: "[Ln 3, Col 5] -> [Ln 3, Col 6]"
              Self__: "[Ln 3, Col 5] -> [Ln 3, Col 6]"
        Operator: "OperatorType.ChainedFunc"
        Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
          Left: "[Ln 3, Col 1] -> [Ln 3, Col 6]"
          Operator: "[Ln 3, Col 6] -> [Ln 3, Col 7]"
          Right: "[Ln 3, Col 7] -> [Ln 3, Col 11]"
          Self__: "[Ln 3, Col 1] -> [Ln 3, Col 11]"
        Right: # <class 'TheLanguage.Parser.Expressions.IndexExpressionParserInfo.IndexExpressionParserInfo'>
          Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
              Name: "d"
              Regions__: # <class 'types.VariableNameParserInfoRegions'>
                Name: "[Ln 3, Col 7] -> [Ln 3, Col 8]"
                Self__: "[Ln 3, Col 7] -> [Ln 3, Col 8]"
            Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
              Name: "[Ln 3, Col 7] -> [Ln 3, Col 8]"
              Self__: "[Ln 3, Col 7] -> [Ln 3, Col 8]"
          Index: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
              Name: "e"
              Regions__: # <class 'types.VariableNameParserInfoRegions'>
                Name: "[Ln 3, Col 9] -> [Ln 3, Col 10]"
                Self__: "[Ln 3, Col 9] -> [Ln 3, Col 10]"
            Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
              Name: "[Ln 3, Col 9] -> [Ln 3, Col 10]"
              Self__: "[Ln 3, Col 9] -> [Ln 3, Col 10]"
          Regions__: # <class 'types.IndexExpressionParserInfoRegions'>
            Expression: "[Ln 3, Col 7] -> [Ln 3, Col 8]"
            Index: "[Ln 3, Col 9] -> [Ln 3, Col 10]"
            Self__: "[Ln 3, Col 7] -> [Ln 3, Col 11]"
      Operator: "OperatorType.ChainedFunc"
      Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
        Left: "[Ln 3, Col 1] -> [Ln 3, Col 11]"
        Operator: "[Ln 3, Col 11] -> [Ln 3, Col 12]"
        Right: "[Ln 3, Col 12] -> [Ln 3, Col 21]"
        Self__: "[Ln 3, Col 1] -> [Ln 3, Col 21]"
      Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
        Arguments: False
        Expression: # <class 'TheLanguage.Parser.Expressions.FuncNameExpressionParserInfo.FuncNameExpressionParserInfo'>
          Name: "Method3"
          Regions__: # <class 'types.FuncNameExpressionParserInfoRegions'>
            Name: "[Ln 3, Col 12] -> [Ln 3, Col 19]"
            Self__: "[Ln 3, Col 12] -> [Ln 3, Col 19]"
        Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
          Arguments: "[Ln 3, Col 19] -> [Ln 3, Col 21]"
          Expression: "[Ln 3, Col 12] -> [Ln 3, Col 19]"
          Self__: "[Ln 3, Col 12] -> [Ln 3, Col 21]"
    Regions__: # <class 'types.FuncInvocationStatementParserInfoRegions'>
      Expression: "[Ln 3, Col 1] -> [Ln 3, Col 21]"
      Self__: "[Ln 3, Col 1] -> [Ln 4, Col 1]"
  - # <class 'TheLanguage.Parser.Statements.FuncInvocationStatementParserInfo.FuncInvocationStatementParserInfo'>
    Expression: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
      Left: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
        Left: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
          Left: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
            Left: # <class 'TheLanguage.Parser.Expressions.BinaryExpressionParserInfo.BinaryExpressionParserInfo'>
              Left: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                  Name: "a"
                  Regions__: # <class 'types.VariableNameParserInfoRegions'>
                    Name: "[Ln 4, Col 1] -> [Ln 4, Col 2]"
                    Self__: "[Ln 4, Col 1] -> [Ln 4, Col 2]"
                Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
                  Name: "[Ln 4, Col 1] -> [Ln 4, Col 2]"
                  Self__: "[Ln 4, Col 1] -> [Ln 4, Col 2]"
              Operator: "OperatorType.ChainedFunc"
              Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
                Left: "[Ln 4, Col 1] -> [Ln 4, Col 2]"
                Operator: "[Ln 4, Col 2] -> [Ln 4, Col 3]"
                Right: "[Ln 4, Col 3] -> [Ln 4, Col 4]"
                Self__: "[Ln 4, Col 1] -> [Ln 4, Col 4]"
              Right: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                  Name: "b"
                  Regions__: # <class 'types.VariableNameParserInfoRegions'>
                    Name: "[Ln 4, Col 3] -> [Ln 4, Col 4]"
                    Self__: "[Ln 4, Col 3] -> [Ln 4, Col 4]"
                Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
                  Name: "[Ln 4, Col 3] -> [Ln 4, Col 4]"
                  Self__: "[Ln 4, Col 3] -> [Ln 4, Col 4]"
            Operator: "OperatorType.ChainedFunc"
            Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
              Left: "[Ln 4, Col 1] -> [Ln 4, Col 4]"
              Operator: "[Ln 4, Col 4] -> [Ln 4, Col 5]"
              Right: "[Ln 4, Col 5] -> [Ln 4, Col 6]"
              Self__: "[Ln 4, Col 1] -> [Ln 4, Col 6]"
            Right: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "c"
                Regions__: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 4, Col 5] -> [Ln 4, Col 6]"
                  Self__: "[Ln 4, Col 5] -> [Ln 4, Col 6]"
              Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
                Name: "[Ln 4, Col 5] -> [Ln 4, Col 6]"
                Self__: "[Ln 4, Col 5] -> [Ln 4, Col 6]"
          Operator: "OperatorType.ChainedFunc"
          Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
            Left: "[Ln 4, Col 1] -> [Ln 4, Col 6]"
            Operator: "[Ln 4, Col 6] -> [Ln 4, Col 7]"
            Right: "[Ln 4, Col 7] -> [Ln 4, Col 11]"
            Self__: "[Ln 4, Col 1] -> [Ln 4, Col 11]"
          Right: # <class 'TheLanguage.Parser.Expressions.IndexExpressionParserInfo.IndexExpressionParserInfo'>
            Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "d"
                Regions__: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 4, Col 7] -> [Ln 4, Col 8]"
                  Self__: "[Ln 4, Col 7] -> [Ln 4, Col 8]"
              Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
                Name: "[Ln 4, Col 7] -> [Ln 4, Col 8]"
                Self__: "[Ln 4, Col 7] -> [Ln 4, Col 8]"
            Index: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "e"
                Regions__: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 4, Col 9] -> [Ln 4, Col 10]"
                  Self__: "[Ln 4, Col 9] -> [Ln 4, Col 10]"
              Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
                Name: "[Ln 4, Col 9] -> [Ln 4, Col 10]"
                Self__: "[Ln 4, Col 9] -> [Ln 4, Col 10]"
            Regions__: # <class 'types.IndexExpressionParserInfoRegions'>
              Expression: "[Ln 4, Col 7] -> [Ln 4, Col 8]"
              Index: "[Ln 4, Col 9] -> [Ln 4, Col 10]"
              Self__: "[Ln 4, Col 7] -> [Ln 4, Col 11]"
        Operator: "OperatorType.ChainedFunc"
        Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
          Left: "[Ln 4, Col 1] -> [Ln 4, Col 11]"
          Operator: "[Ln 4, Col 11] -> [Ln 4, Col 12]"
          Right: "[Ln 4, Col 12] -> [Ln 4, Col 21]"
          Self__: "[Ln 4, Col 1] -> [Ln 4, Col 21]"
        Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
          Arguments: False
          Expression: # <class 'TheLanguage.Parser.Expressions.FuncNameExpressionParserInfo.FuncNameExpressionParserInfo'>
            Name: "Method4"
            Regions__: # <class 'types.FuncNameExpressionParserInfoRegions'>
              Name: "[Ln 4, Col 12] -> [Ln 4, Col 19]"
              Self__: "[Ln 4, Col 12] -> [Ln 4, Col 19]"
          Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
            Arguments: "[Ln 4, Col 19] -> [Ln 4, Col 21]"
            Expression: "[Ln 4, Col 12] -> [Ln 4, Col 19]"
            Self__: "[Ln 4, Col 12] -> [Ln 4, Col 21]"
      Operator: "OperatorType.ChainedFunc"
      Regions__: # <class 'types.BinaryExpressionParserInfoRegions'>
        Left: "[Ln 4, Col 1] -> [Ln 4, Col 21]"
        Operator: "[Ln 4, Col 21] -> [Ln 4, Col 22]"
        Right: "[Ln 4, Col 22] -> [Ln 4, Col 29]"
        Self__: "[Ln 4, Col 1] -> [Ln 4, Col 29]"
      Right: # <class 'TheLanguage.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
        Arguments: False
        Expression: # <class 'TheLanguage.Parser.Expressions.FuncNameExpressionParserInfo.FuncNameExpressionParserInfo'>
          Name: "Func5"
          Regions__: # <class 'types.FuncNameExpressionParserInfoRegions'>
            Name: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
            Self__: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
        Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
          Arguments: "[Ln 4, Col 27] -> [Ln 4, Col 29]"
          Expression: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
          Self__: "[Ln 4, Col 22] -> [Ln 4, Col 29]"
    Regions__: # <class 'types.FuncInvocationStatementParserInfoRegions'>
      Expression: "[Ln 4, Col 1] -> [Ln 4, Col 29]"
      Self__: "[Ln 4, Col 1] -> [Ln 5, Col 1]"
