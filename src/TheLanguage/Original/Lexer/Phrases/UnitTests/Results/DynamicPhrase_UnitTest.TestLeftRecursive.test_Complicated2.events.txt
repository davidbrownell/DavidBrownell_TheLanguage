0) StartPhrase, "Dynamic Phrase"
1) StartPhrase, "All Phrases <Prefix>"
2) StartPhrase, "Lower"
3) OnInternalPhraseAsync, 0, 3
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 1] (0)"
      IterEnd: "[1, 4] (3)"
      Token: "Lower"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
      Whitespace: None
    Phrase: "Lower"
4) EndPhrase, "Lower" [True]
5) StartPhrase, "Upper"
6) EndPhrase, "Upper" [False]
7) OnInternalPhraseAsync, 0, 3
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[1, 4] (3)"
        Token: "Lower"
        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
8) EndPhrase, "All Phrases <Prefix>" [True]
9) StartPhrase, "All Phrases <Suffix>"
10) StartPhrase, "'+'"
11) OnInternalPhraseAsync, 4, 5
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 5] (4)"
      IterEnd: "[1, 6] (5)"
      Token: "'+'"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
      Whitespace:
        - 3
        - 4
    Phrase: "'+'"
12) EndPhrase, "'+'" [True]
13) StartPhrase, "DynamicPhrasesType.Statements"
14) StartPhrase, "All Phrases <Prefix>"
15) StartPhrase, "Lower"
16) OnInternalPhraseAsync, 6, 9
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 7] (6)"
      IterEnd: "[1, 10] (9)"
      Token: "Lower"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
      Whitespace:
        - 5
        - 6
    Phrase: "Lower"
17) EndPhrase, "Lower" [True]
18) StartPhrase, "Upper"
19) EndPhrase, "Upper" [False]
20) OnInternalPhraseAsync, 5, 9
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 7] (6)"
        IterEnd: "[1, 10] (9)"
        Token: "Lower"
        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
        Whitespace:
          - 5
          - 6
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
21) EndPhrase, "All Phrases <Prefix>" [True]
22) StartPhrase, "All Phrases <Suffix>"
23) StartPhrase, "'+'"
24) EndPhrase, "'+'" [False]
25) StartPhrase, "'-'"
26) EndPhrase, "'-'" [False]
27) StartPhrase, "'*'"
28) EndPhrase, "'*'" [False]
29) StartPhrase, "'/'"
30) EndPhrase, "'/'" [False]
31) StartPhrase, "'if'"
32) EndPhrase, "'if'" [False]
33) StartPhrase, "'['"
34) OnInternalPhraseAsync, 9, 10
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 10] (9)"
      IterEnd: "[1, 11] (10)"
      Token: "'['"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
      Whitespace: None
    Phrase: "'['"
35) EndPhrase, "'['" [True]
36) StartPhrase, "DynamicPhrasesType.Statements"
37) StartPhrase, "All Phrases <Prefix>"
38) StartPhrase, "Lower"
39) OnInternalPhraseAsync, 10, 11
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 11] (10)"
      IterEnd: "[1, 12] (11)"
      Token: "Lower"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
      Whitespace: None
    Phrase: "Lower"
40) EndPhrase, "Lower" [True]
41) StartPhrase, "Upper"
42) EndPhrase, "Upper" [False]
43) OnInternalPhraseAsync, 10, 11
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 11] (10)"
        IterEnd: "[1, 12] (11)"
        Token: "Lower"
        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
44) EndPhrase, "All Phrases <Prefix>" [True]
45) StartPhrase, "All Phrases <Suffix>"
46) StartPhrase, "'+'"
47) EndPhrase, "'+'" [False]
48) StartPhrase, "'-'"
49) EndPhrase, "'-'" [False]
50) StartPhrase, "'*'"
51) EndPhrase, "'*'" [False]
52) StartPhrase, "'/'"
53) EndPhrase, "'/'" [False]
54) StartPhrase, "'if'"
55) EndPhrase, "'if'" [False]
56) StartPhrase, "'['"
57) EndPhrase, "'['" [False]
58) EndPhrase, "All Phrases <Suffix>" [False]
59) OnInternalPhraseAsync, 10, 11
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 11] (10)"
          IterEnd: "[1, 12] (11)"
          Token: "Lower"
          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
60) EndPhrase, "DynamicPhrasesType.Statements" [True]
61) StartPhrase, "']'"
62) OnInternalPhraseAsync, 11, 12
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 12] (11)"
      IterEnd: "[1, 13] (12)"
      Token: "']'"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
      Whitespace: None
    Phrase: "']'"
63) EndPhrase, "']'" [True]
64) OnInternalPhraseAsync, 9, 12
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 7] (6)"
                  IterEnd: "[1, 10] (9)"
                  Token: "Lower"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                  Whitespace:
                    - 5
                    - 6
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 10] (9)"
              IterEnd: "[1, 11] (10)"
              Token: "'['"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 11] (10)"
                  IterEnd: "[1, 12] (11)"
                  Token: "Lower"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 12] (11)"
              IterEnd: "[1, 13] (12)"
              Token: "']'"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "All Phrases <Suffix>"
65) EndPhrase, "All Phrases <Suffix>" [True]
66) StartPhrase, "All Phrases <Suffix>"
67) StartPhrase, "'+'"
68) EndPhrase, "'+'" [False]
69) StartPhrase, "'-'"
70) EndPhrase, "'-'" [False]
71) StartPhrase, "'*'"
72) EndPhrase, "'*'" [False]
73) StartPhrase, "'/'"
74) EndPhrase, "'/'" [False]
75) StartPhrase, "'if'"
76) EndPhrase, "'if'" [False]
77) StartPhrase, "'['"
78) OnInternalPhraseAsync, 12, 13
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 13] (12)"
      IterEnd: "[1, 14] (13)"
      Token: "'['"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
      Whitespace: None
    Phrase: "'['"
79) EndPhrase, "'['" [True]
80) StartPhrase, "DynamicPhrasesType.Statements"
81) StartPhrase, "All Phrases <Prefix>"
82) StartPhrase, "Lower"
83) OnInternalPhraseAsync, 13, 14
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 14] (13)"
      IterEnd: "[1, 15] (14)"
      Token: "Lower"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
      Whitespace: None
    Phrase: "Lower"
84) EndPhrase, "Lower" [True]
85) StartPhrase, "Upper"
86) EndPhrase, "Upper" [False]
87) OnInternalPhraseAsync, 13, 14
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 14] (13)"
        IterEnd: "[1, 15] (14)"
        Token: "Lower"
        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
88) EndPhrase, "All Phrases <Prefix>" [True]
89) StartPhrase, "All Phrases <Suffix>"
90) StartPhrase, "'+'"
91) EndPhrase, "'+'" [False]
92) StartPhrase, "'-'"
93) EndPhrase, "'-'" [False]
94) StartPhrase, "'*'"
95) EndPhrase, "'*'" [False]
96) StartPhrase, "'/'"
97) EndPhrase, "'/'" [False]
98) StartPhrase, "'if'"
99) EndPhrase, "'if'" [False]
100) StartPhrase, "'['"
101) EndPhrase, "'['" [False]
102) EndPhrase, "All Phrases <Suffix>" [False]
103) OnInternalPhraseAsync, 13, 14
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 14] (13)"
          IterEnd: "[1, 15] (14)"
          Token: "Lower"
          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
104) EndPhrase, "DynamicPhrasesType.Statements" [True]
105) StartPhrase, "']'"
106) OnInternalPhraseAsync, 14, 15
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 15] (14)"
      IterEnd: "[1, 16] (15)"
      Token: "']'"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
      Whitespace: None
    Phrase: "']'"
107) EndPhrase, "']'" [True]
108) OnInternalPhraseAsync, 12, 15
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 7] (6)"
                            IterEnd: "[1, 10] (9)"
                            Token: "Lower"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                            Whitespace:
                              - 5
                              - 6
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 10] (9)"
                        IterEnd: "[1, 11] (10)"
                        Token: "'['"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                        Whitespace: None
                      Phrase: "'['"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 11] (10)"
                            IterEnd: "[1, 12] (11)"
                            Token: "Lower"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                            Whitespace: None
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 12] (11)"
                        IterEnd: "[1, 13] (12)"
                        Token: "']'"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                        Whitespace: None
                      Phrase: "']'"
                  IsComplete: True
                Phrase: "Index"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 13] (12)"
              IterEnd: "[1, 14] (13)"
              Token: "'['"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 14] (13)"
                  IterEnd: "[1, 15] (14)"
                  Token: "Lower"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 15] (14)"
              IterEnd: "[1, 16] (15)"
              Token: "']'"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "All Phrases <Suffix>"
109) EndPhrase, "All Phrases <Suffix>" [True]
110) StartPhrase, "All Phrases <Suffix>"
111) StartPhrase, "'+'"
112) EndPhrase, "'+'" [False]
113) StartPhrase, "'-'"
114) EndPhrase, "'-'" [False]
115) StartPhrase, "'*'"
116) EndPhrase, "'*'" [False]
117) StartPhrase, "'/'"
118) EndPhrase, "'/'" [False]
119) StartPhrase, "'if'"
120) EndPhrase, "'if'" [False]
121) StartPhrase, "'['"
122) OnInternalPhraseAsync, 15, 16
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 16] (15)"
      IterEnd: "[1, 17] (16)"
      Token: "'['"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
      Whitespace: None
    Phrase: "'['"
123) EndPhrase, "'['" [True]
124) StartPhrase, "DynamicPhrasesType.Statements"
125) StartPhrase, "All Phrases <Prefix>"
126) StartPhrase, "Lower"
127) OnInternalPhraseAsync, 16, 17
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 17] (16)"
      IterEnd: "[1, 18] (17)"
      Token: "Lower"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
      Whitespace: None
    Phrase: "Lower"
128) EndPhrase, "Lower" [True]
129) StartPhrase, "Upper"
130) EndPhrase, "Upper" [False]
131) OnInternalPhraseAsync, 16, 17
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 17] (16)"
        IterEnd: "[1, 18] (17)"
        Token: "Lower"
        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
132) EndPhrase, "All Phrases <Prefix>" [True]
133) StartPhrase, "All Phrases <Suffix>"
134) StartPhrase, "'+'"
135) EndPhrase, "'+'" [False]
136) StartPhrase, "'-'"
137) EndPhrase, "'-'" [False]
138) StartPhrase, "'*'"
139) EndPhrase, "'*'" [False]
140) StartPhrase, "'/'"
141) EndPhrase, "'/'" [False]
142) StartPhrase, "'if'"
143) EndPhrase, "'if'" [False]
144) StartPhrase, "'['"
145) EndPhrase, "'['" [False]
146) EndPhrase, "All Phrases <Suffix>" [False]
147) OnInternalPhraseAsync, 16, 17
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 17] (16)"
          IterEnd: "[1, 18] (17)"
          Token: "Lower"
          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
148) EndPhrase, "DynamicPhrasesType.Statements" [True]
149) StartPhrase, "']'"
150) OnInternalPhraseAsync, 17, 18
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 18] (17)"
      IterEnd: "[1, 19] (18)"
      Token: "']'"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
      Whitespace: None
    Phrase: "']'"
151) EndPhrase, "']'" [True]
152) OnInternalPhraseAsync, 15, 18
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                            DataItems:
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 7] (6)"
                                      IterEnd: "[1, 10] (9)"
                                      Token: "Lower"
                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                      Whitespace:
                                        - 5
                                        - 6
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 10] (9)"
                                  IterEnd: "[1, 11] (10)"
                                  Token: "'['"
                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                  Whitespace: None
                                Phrase: "'['"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 11] (10)"
                                      IterEnd: "[1, 12] (11)"
                                      Token: "Lower"
                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 12] (11)"
                                  IterEnd: "[1, 13] (12)"
                                  Token: "']'"
                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                  Whitespace: None
                                Phrase: "']'"
                            IsComplete: True
                          Phrase: "Index"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 13] (12)"
                        IterEnd: "[1, 14] (13)"
                        Token: "'['"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                        Whitespace: None
                      Phrase: "'['"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 14] (13)"
                            IterEnd: "[1, 15] (14)"
                            Token: "Lower"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                            Whitespace: None
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 15] (14)"
                        IterEnd: "[1, 16] (15)"
                        Token: "']'"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                        Whitespace: None
                      Phrase: "']'"
                  IsComplete: True
                Phrase: "Index"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 16] (15)"
              IterEnd: "[1, 17] (16)"
              Token: "'['"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 17] (16)"
                  IterEnd: "[1, 18] (17)"
                  Token: "Lower"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 18] (17)"
              IterEnd: "[1, 19] (18)"
              Token: "']'"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "All Phrases <Suffix>"
153) EndPhrase, "All Phrases <Suffix>" [True]
154) StartPhrase, "All Phrases <Suffix>"
155) StartPhrase, "'+'"
156) OnInternalPhraseAsync, 19, 20
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 20] (19)"
      IterEnd: "[1, 21] (20)"
      Token: "'+'"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
      Whitespace:
        - 18
        - 19
    Phrase: "'+'"
157) EndPhrase, "'+'" [True]
158) StartPhrase, "DynamicPhrasesType.Statements"
159) StartPhrase, "All Phrases <Prefix>"
160) StartPhrase, "Lower"
161) OnInternalPhraseAsync, 21, 26
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 22] (21)"
      IterEnd: "[1, 27] (26)"
      Token: "Lower"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
      Whitespace:
        - 20
        - 21
    Phrase: "Lower"
162) EndPhrase, "Lower" [True]
163) StartPhrase, "Upper"
164) EndPhrase, "Upper" [False]
165) OnInternalPhraseAsync, 20, 26
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 22] (21)"
        IterEnd: "[1, 27] (26)"
        Token: "Lower"
        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
        Whitespace:
          - 20
          - 21
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
166) EndPhrase, "All Phrases <Prefix>" [True]
167) StartPhrase, "All Phrases <Suffix>"
168) StartPhrase, "'+'"
169) OnInternalPhraseAsync, 27, 28
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 28] (27)"
      IterEnd: "[1, 29] (28)"
      Token: "'+'"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
      Whitespace:
        - 26
        - 27
    Phrase: "'+'"
170) EndPhrase, "'+'" [True]
171) StartPhrase, "DynamicPhrasesType.Statements"
172) StartPhrase, "All Phrases <Prefix>"
173) StartPhrase, "Lower"
174) OnInternalPhraseAsync, 29, 33
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 30] (29)"
      IterEnd: "[1, 34] (33)"
      Token: "Lower"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
      Whitespace:
        - 28
        - 29
    Phrase: "Lower"
175) EndPhrase, "Lower" [True]
176) StartPhrase, "Upper"
177) EndPhrase, "Upper" [False]
178) OnInternalPhraseAsync, 28, 33
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 30] (29)"
        IterEnd: "[1, 34] (33)"
        Token: "Lower"
        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
        Whitespace:
          - 28
          - 29
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
179) EndPhrase, "All Phrases <Prefix>" [True]
180) StartPhrase, "All Phrases <Suffix>"
181) StartPhrase, "'+'"
182) EndPhrase, "'+'" [False]
183) StartPhrase, "'-'"
184) EndPhrase, "'-'" [False]
185) StartPhrase, "'*'"
186) EndPhrase, "'*'" [False]
187) StartPhrase, "'/'"
188) EndPhrase, "'/'" [False]
189) StartPhrase, "'if'"
190) OnInternalPhraseAsync, 34, 36
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 35] (34)"
      IterEnd: "[1, 37] (36)"
      Token: "'if'"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
      Whitespace:
        - 33
        - 34
    Phrase: "'if'"
191) EndPhrase, "'if'" [True]
192) StartPhrase, "DynamicPhrasesType.Statements"
193) StartPhrase, "All Phrases <Prefix>"
194) StartPhrase, "Lower"
195) EndPhrase, "Lower" [False]
196) StartPhrase, "Upper"
197) OnInternalPhraseAsync, 37, 46
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 38] (37)"
      IterEnd: "[1, 47] (46)"
      Token: "Upper"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
      Whitespace:
        - 36
        - 37
    Phrase: "Upper"
198) EndPhrase, "Upper" [True]
199) OnInternalPhraseAsync, 36, 46
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 38] (37)"
        IterEnd: "[1, 47] (46)"
        Token: "Upper"
        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
        Whitespace:
          - 36
          - 37
      Phrase: "Upper"
    Phrase: "All Phrases <Prefix>"
200) EndPhrase, "All Phrases <Prefix>" [True]
201) StartPhrase, "All Phrases <Suffix>"
202) StartPhrase, "'+'"
203) EndPhrase, "'+'" [False]
204) StartPhrase, "'-'"
205) EndPhrase, "'-'" [False]
206) StartPhrase, "'*'"
207) EndPhrase, "'*'" [False]
208) StartPhrase, "'/'"
209) EndPhrase, "'/'" [False]
210) StartPhrase, "'if'"
211) EndPhrase, "'if'" [False]
212) StartPhrase, "'['"
213) EndPhrase, "'['" [False]
214) EndPhrase, "All Phrases <Suffix>" [False]
215) OnInternalPhraseAsync, 36, 46
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 38] (37)"
          IterEnd: "[1, 47] (46)"
          Token: "Upper"
          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
          Whitespace:
            - 36
            - 37
        Phrase: "Upper"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
216) EndPhrase, "DynamicPhrasesType.Statements" [True]
217) StartPhrase, "'else'"
218) OnInternalPhraseAsync, 47, 51
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 48] (47)"
      IterEnd: "[1, 52] (51)"
      Token: "'else'"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
      Whitespace:
        - 46
        - 47
    Phrase: "'else'"
219) EndPhrase, "'else'" [True]
220) StartPhrase, "DynamicPhrasesType.Statements"
221) StartPhrase, "All Phrases <Prefix>"
222) StartPhrase, "Lower"
223) OnInternalPhraseAsync, 52, 56
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 53] (52)"
      IterEnd: "[1, 57] (56)"
      Token: "Lower"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
      Whitespace:
        - 51
        - 52
    Phrase: "Lower"
224) EndPhrase, "Lower" [True]
225) StartPhrase, "Upper"
226) EndPhrase, "Upper" [False]
227) OnInternalPhraseAsync, 51, 56
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 53] (52)"
        IterEnd: "[1, 57] (56)"
        Token: "Lower"
        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
        Whitespace:
          - 51
          - 52
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
228) EndPhrase, "All Phrases <Prefix>" [True]
229) StartPhrase, "All Phrases <Suffix>"
230) StartPhrase, "'+'"
231) EndPhrase, "'+'" [False]
232) StartPhrase, "'-'"
233) EndPhrase, "'-'" [False]
234) StartPhrase, "'*'"
235) EndPhrase, "'*'" [False]
236) StartPhrase, "'/'"
237) EndPhrase, "'/'" [False]
238) StartPhrase, "'if'"
239) EndPhrase, "'if'" [False]
240) StartPhrase, "'['"
241) EndPhrase, "'['" [False]
242) EndPhrase, "All Phrases <Suffix>" [False]
243) OnInternalPhraseAsync, 51, 56
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 53] (52)"
          IterEnd: "[1, 57] (56)"
          Token: "Lower"
          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
          Whitespace:
            - 51
            - 52
        Phrase: "Lower"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
244) EndPhrase, "DynamicPhrasesType.Statements" [True]
245) StartPhrase, "'['"
246) EndPhrase, "'['" [False]
247) OnInternalPhraseAsync, 33, 56
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                            DataItems:
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                      DataItems:
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 1] (0)"
                                                IterEnd: "[1, 4] (3)"
                                                Token: "Lower"
                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                                Whitespace: None
                                              Phrase: "Lower"
                                            Phrase: "All Phrases"
                                          Phrase: "Dynamic Phrase"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 5] (4)"
                                            IterEnd: "[1, 6] (5)"
                                            Token: "'+'"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                            Whitespace:
                                              - 3
                                              - 4
                                          Phrase: "'+'"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                DataItems:
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                          DataItems:
                                                            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                                    DataItems:
                                                                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                              IsIgnored: False
                                                                              IterBegin: "[1, 7] (6)"
                                                                              IterEnd: "[1, 10] (9)"
                                                                              Token: "Lower"
                                                                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                                              Whitespace:
                                                                                - 5
                                                                                - 6
                                                                            Phrase: "Lower"
                                                                          Phrase: "All Phrases"
                                                                        Phrase: "DynamicPhrasesType.Statements"
                                                                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                          IsIgnored: False
                                                                          IterBegin: "[1, 10] (9)"
                                                                          IterEnd: "[1, 11] (10)"
                                                                          Token: "'['"
                                                                          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                            Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                                                          Whitespace: None
                                                                        Phrase: "'['"
                                                                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                              IsIgnored: False
                                                                              IterBegin: "[1, 11] (10)"
                                                                              IterEnd: "[1, 12] (11)"
                                                                              Token: "Lower"
                                                                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                                              Whitespace: None
                                                                            Phrase: "Lower"
                                                                          Phrase: "All Phrases"
                                                                        Phrase: "DynamicPhrasesType.Statements"
                                                                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                          IsIgnored: False
                                                                          IterBegin: "[1, 12] (11)"
                                                                          IterEnd: "[1, 13] (12)"
                                                                          Token: "']'"
                                                                          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                            Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                                                          Whitespace: None
                                                                        Phrase: "']'"
                                                                    IsComplete: True
                                                                  Phrase: "Index"
                                                                Phrase: "All Phrases"
                                                              Phrase: "DynamicPhrasesType.Statements"
                                                            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                IsIgnored: False
                                                                IterBegin: "[1, 13] (12)"
                                                                IterEnd: "[1, 14] (13)"
                                                                Token: "'['"
                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                                                Whitespace: None
                                                              Phrase: "'['"
                                                            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[1, 14] (13)"
                                                                    IterEnd: "[1, 15] (14)"
                                                                    Token: "Lower"
                                                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                                                    Whitespace: None
                                                                  Phrase: "Lower"
                                                                Phrase: "All Phrases"
                                                              Phrase: "DynamicPhrasesType.Statements"
                                                            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                IsIgnored: False
                                                                IterBegin: "[1, 15] (14)"
                                                                IterEnd: "[1, 16] (15)"
                                                                Token: "']'"
                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                                                Whitespace: None
                                                              Phrase: "']'"
                                                          IsComplete: True
                                                        Phrase: "Index"
                                                      Phrase: "All Phrases"
                                                    Phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 16] (15)"
                                                      IterEnd: "[1, 17] (16)"
                                                      Token: "'['"
                                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                                                      Whitespace: None
                                                    Phrase: "'['"
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 17] (16)"
                                                          IterEnd: "[1, 18] (17)"
                                                          Token: "Lower"
                                                          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                                          Whitespace: None
                                                        Phrase: "Lower"
                                                      Phrase: "All Phrases"
                                                    Phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 18] (17)"
                                                      IterEnd: "[1, 19] (18)"
                                                      Token: "']'"
                                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                                                      Whitespace: None
                                                    Phrase: "']'"
                                                IsComplete: True
                                              Phrase: "Index"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                      IsComplete: True
                                    Phrase: "Add"
                                  Phrase: "All Phrases"
                                Phrase: "Dynamic Phrase"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 20] (19)"
                                  IterEnd: "[1, 21] (20)"
                                  Token: "'+'"
                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                                  Whitespace:
                                    - 18
                                    - 19
                                Phrase: "'+'"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 22] (21)"
                                      IterEnd: "[1, 27] (26)"
                                      Token: "Lower"
                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                                      Whitespace:
                                        - 20
                                        - 21
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                            IsComplete: True
                          Phrase: "Add"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 28] (27)"
                        IterEnd: "[1, 29] (28)"
                        Token: "'+'"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
                        Whitespace:
                          - 26
                          - 27
                      Phrase: "'+'"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 30] (29)"
                            IterEnd: "[1, 34] (33)"
                            Token: "Lower"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                            Whitespace:
                              - 28
                              - 29
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Add"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 35] (34)"
              IterEnd: "[1, 37] (36)"
              Token: "'if'"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
              Whitespace:
                - 33
                - 34
            Phrase: "'if'"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 38] (37)"
                  IterEnd: "[1, 47] (46)"
                  Token: "Upper"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                  Whitespace:
                    - 36
                    - 37
                Phrase: "Upper"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 48] (47)"
              IterEnd: "[1, 52] (51)"
              Token: "'else'"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
              Whitespace:
                - 46
                - 47
            Phrase: "'else'"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 53] (52)"
                  IterEnd: "[1, 57] (56)"
                  Token: "Lower"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                  Whitespace:
                    - 51
                    - 52
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Ter"
    Phrase: "All Phrases <Suffix>"
248) EndPhrase, "All Phrases <Suffix>" [True]
249) StartPhrase, "All Phrases <Suffix>"
250) StartPhrase, "'+'"
251) EndPhrase, "'+'" [False]
252) StartPhrase, "'-'"
253) EndPhrase, "'-'" [False]
254) StartPhrase, "'*'"
255) EndPhrase, "'*'" [False]
256) StartPhrase, "'/'"
257) EndPhrase, "'/'" [False]
258) StartPhrase, "'if'"
259) EndPhrase, "'if'" [False]
260) StartPhrase, "'['"
261) EndPhrase, "'['" [False]
262) EndPhrase, "All Phrases <Suffix>" [False]
263) OnInternalPhraseAsync, 28, 56
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                    DataItems:
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 1] (0)"
                                                  IterEnd: "[1, 4] (3)"
                                                  Token: "Lower"
                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "Dynamic Phrase"
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 5] (4)"
                                              IterEnd: "[1, 6] (5)"
                                              Token: "'+'"
                                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                              Whitespace:
                                                - 3
                                                - 4
                                            Phrase: "'+'"
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                  DataItems:
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                            DataItems:
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                                      DataItems:
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[1, 7] (6)"
                                                                                IterEnd: "[1, 10] (9)"
                                                                                Token: "Lower"
                                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                                                Whitespace:
                                                                                  - 5
                                                                                  - 6
                                                                              Phrase: "Lower"
                                                                            Phrase: "All Phrases"
                                                                          Phrase: "DynamicPhrasesType.Statements"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[1, 10] (9)"
                                                                            IterEnd: "[1, 11] (10)"
                                                                            Token: "'['"
                                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                                                            Whitespace: None
                                                                          Phrase: "'['"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[1, 11] (10)"
                                                                                IterEnd: "[1, 12] (11)"
                                                                                Token: "Lower"
                                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                                                Whitespace: None
                                                                              Phrase: "Lower"
                                                                            Phrase: "All Phrases"
                                                                          Phrase: "DynamicPhrasesType.Statements"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[1, 12] (11)"
                                                                            IterEnd: "[1, 13] (12)"
                                                                            Token: "']'"
                                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                                                            Whitespace: None
                                                                          Phrase: "']'"
                                                                      IsComplete: True
                                                                    Phrase: "Index"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 13] (12)"
                                                                  IterEnd: "[1, 14] (13)"
                                                                  Token: "'['"
                                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                                                  Whitespace: None
                                                                Phrase: "'['"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 14] (13)"
                                                                      IterEnd: "[1, 15] (14)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                                                      Whitespace: None
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 15] (14)"
                                                                  IterEnd: "[1, 16] (15)"
                                                                  Token: "']'"
                                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                                                  Whitespace: None
                                                                Phrase: "']'"
                                                            IsComplete: True
                                                          Phrase: "Index"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 16] (15)"
                                                        IterEnd: "[1, 17] (16)"
                                                        Token: "'['"
                                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                                                        Whitespace: None
                                                      Phrase: "'['"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 17] (16)"
                                                            IterEnd: "[1, 18] (17)"
                                                            Token: "Lower"
                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                                            Whitespace: None
                                                          Phrase: "Lower"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 18] (17)"
                                                        IterEnd: "[1, 19] (18)"
                                                        Token: "']'"
                                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                                                        Whitespace: None
                                                      Phrase: "']'"
                                                  IsComplete: True
                                                Phrase: "Index"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                        IsComplete: True
                                      Phrase: "Add"
                                    Phrase: "All Phrases"
                                  Phrase: "Dynamic Phrase"
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 20] (19)"
                                    IterEnd: "[1, 21] (20)"
                                    Token: "'+'"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                                    Whitespace:
                                      - 18
                                      - 19
                                  Phrase: "'+'"
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 22] (21)"
                                        IterEnd: "[1, 27] (26)"
                                        Token: "Lower"
                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                                        Whitespace:
                                          - 20
                                          - 21
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                              IsComplete: True
                            Phrase: "Add"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 28] (27)"
                          IterEnd: "[1, 29] (28)"
                          Token: "'+'"
                          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
                          Whitespace:
                            - 26
                            - 27
                        Phrase: "'+'"
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 30] (29)"
                              IterEnd: "[1, 34] (33)"
                              Token: "Lower"
                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                              Whitespace:
                                - 28
                                - 29
                            Phrase: "Lower"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Add"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 35] (34)"
                IterEnd: "[1, 37] (36)"
                Token: "'if'"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                Whitespace:
                  - 33
                  - 34
              Phrase: "'if'"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 38] (37)"
                    IterEnd: "[1, 47] (46)"
                    Token: "Upper"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                    Whitespace:
                      - 36
                      - 37
                  Phrase: "Upper"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 48] (47)"
                IterEnd: "[1, 52] (51)"
                Token: "'else'"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                Whitespace:
                  - 46
                  - 47
              Phrase: "'else'"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 53] (52)"
                    IterEnd: "[1, 57] (56)"
                    Token: "Lower"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                    Whitespace:
                      - 51
                      - 52
                  Phrase: "Lower"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Ter"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
264) EndPhrase, "DynamicPhrasesType.Statements" [True]
265) StartPhrase, "'-'"
266) EndPhrase, "'-'" [False]
267) StartPhrase, "'*'"
268) EndPhrase, "'*'" [False]
269) StartPhrase, "'/'"
270) EndPhrase, "'/'" [False]
271) StartPhrase, "'if'"
272) EndPhrase, "'if'" [False]
273) StartPhrase, "'['"
274) EndPhrase, "'['" [False]
275) OnInternalPhraseAsync, 26, 56
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                            DataItems:
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 1] (0)"
                                      IterEnd: "[1, 4] (3)"
                                      Token: "Lower"
                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "Dynamic Phrase"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 5] (4)"
                                  IterEnd: "[1, 6] (5)"
                                  Token: "'+'"
                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                  Whitespace:
                                    - 3
                                    - 4
                                Phrase: "'+'"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                      DataItems:
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                DataItems:
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                          DataItems:
                                                            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[1, 7] (6)"
                                                                    IterEnd: "[1, 10] (9)"
                                                                    Token: "Lower"
                                                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                                    Whitespace:
                                                                      - 5
                                                                      - 6
                                                                  Phrase: "Lower"
                                                                Phrase: "All Phrases"
                                                              Phrase: "DynamicPhrasesType.Statements"
                                                            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                IsIgnored: False
                                                                IterBegin: "[1, 10] (9)"
                                                                IterEnd: "[1, 11] (10)"
                                                                Token: "'['"
                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                                                Whitespace: None
                                                              Phrase: "'['"
                                                            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[1, 11] (10)"
                                                                    IterEnd: "[1, 12] (11)"
                                                                    Token: "Lower"
                                                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                                    Whitespace: None
                                                                  Phrase: "Lower"
                                                                Phrase: "All Phrases"
                                                              Phrase: "DynamicPhrasesType.Statements"
                                                            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                IsIgnored: False
                                                                IterBegin: "[1, 12] (11)"
                                                                IterEnd: "[1, 13] (12)"
                                                                Token: "']'"
                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                                                Whitespace: None
                                                              Phrase: "']'"
                                                          IsComplete: True
                                                        Phrase: "Index"
                                                      Phrase: "All Phrases"
                                                    Phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 13] (12)"
                                                      IterEnd: "[1, 14] (13)"
                                                      Token: "'['"
                                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                                      Whitespace: None
                                                    Phrase: "'['"
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 14] (13)"
                                                          IterEnd: "[1, 15] (14)"
                                                          Token: "Lower"
                                                          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                                          Whitespace: None
                                                        Phrase: "Lower"
                                                      Phrase: "All Phrases"
                                                    Phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 15] (14)"
                                                      IterEnd: "[1, 16] (15)"
                                                      Token: "']'"
                                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                                      Whitespace: None
                                                    Phrase: "']'"
                                                IsComplete: True
                                              Phrase: "Index"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 16] (15)"
                                            IterEnd: "[1, 17] (16)"
                                            Token: "'['"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                                            Whitespace: None
                                          Phrase: "'['"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 17] (16)"
                                                IterEnd: "[1, 18] (17)"
                                                Token: "Lower"
                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                                Whitespace: None
                                              Phrase: "Lower"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 18] (17)"
                                            IterEnd: "[1, 19] (18)"
                                            Token: "']'"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                                            Whitespace: None
                                          Phrase: "']'"
                                      IsComplete: True
                                    Phrase: "Index"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                            IsComplete: True
                          Phrase: "Add"
                        Phrase: "All Phrases"
                      Phrase: "Dynamic Phrase"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 20] (19)"
                        IterEnd: "[1, 21] (20)"
                        Token: "'+'"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                        Whitespace:
                          - 18
                          - 19
                      Phrase: "'+'"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 22] (21)"
                            IterEnd: "[1, 27] (26)"
                            Token: "Lower"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                            Whitespace:
                              - 20
                              - 21
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Add"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 28] (27)"
              IterEnd: "[1, 29] (28)"
              Token: "'+'"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
              Whitespace:
                - 26
                - 27
            Phrase: "'+'"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 30] (29)"
                  IterEnd: "[1, 34] (33)"
                  Token: "Lower"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                  Whitespace:
                    - 28
                    - 29
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Add"
    Phrase: "All Phrases <Suffix>"
276) EndPhrase, "All Phrases <Suffix>" [True]
277) StartPhrase, "All Phrases <Suffix>"
278) StartPhrase, "'+'"
279) EndPhrase, "'+'" [False]
280) StartPhrase, "'-'"
281) EndPhrase, "'-'" [False]
282) StartPhrase, "'*'"
283) EndPhrase, "'*'" [False]
284) StartPhrase, "'/'"
285) EndPhrase, "'/'" [False]
286) StartPhrase, "'if'"
287) EndPhrase, "'if'" [False]
288) StartPhrase, "'['"
289) EndPhrase, "'['" [False]
290) EndPhrase, "All Phrases <Suffix>" [False]
291) OnInternalPhraseAsync, 20, 56
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                    DataItems:
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 1] (0)"
                                                  IterEnd: "[1, 4] (3)"
                                                  Token: "Lower"
                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "Dynamic Phrase"
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 5] (4)"
                                              IterEnd: "[1, 6] (5)"
                                              Token: "'+'"
                                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                              Whitespace:
                                                - 3
                                                - 4
                                            Phrase: "'+'"
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                  DataItems:
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                            DataItems:
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                                      DataItems:
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[1, 7] (6)"
                                                                                IterEnd: "[1, 10] (9)"
                                                                                Token: "Lower"
                                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                                                Whitespace:
                                                                                  - 5
                                                                                  - 6
                                                                              Phrase: "Lower"
                                                                            Phrase: "All Phrases"
                                                                          Phrase: "DynamicPhrasesType.Statements"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[1, 10] (9)"
                                                                            IterEnd: "[1, 11] (10)"
                                                                            Token: "'['"
                                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                                                            Whitespace: None
                                                                          Phrase: "'['"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[1, 11] (10)"
                                                                                IterEnd: "[1, 12] (11)"
                                                                                Token: "Lower"
                                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                                                Whitespace: None
                                                                              Phrase: "Lower"
                                                                            Phrase: "All Phrases"
                                                                          Phrase: "DynamicPhrasesType.Statements"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[1, 12] (11)"
                                                                            IterEnd: "[1, 13] (12)"
                                                                            Token: "']'"
                                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                                                            Whitespace: None
                                                                          Phrase: "']'"
                                                                      IsComplete: True
                                                                    Phrase: "Index"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 13] (12)"
                                                                  IterEnd: "[1, 14] (13)"
                                                                  Token: "'['"
                                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                                                  Whitespace: None
                                                                Phrase: "'['"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 14] (13)"
                                                                      IterEnd: "[1, 15] (14)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                                                      Whitespace: None
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 15] (14)"
                                                                  IterEnd: "[1, 16] (15)"
                                                                  Token: "']'"
                                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                                                  Whitespace: None
                                                                Phrase: "']'"
                                                            IsComplete: True
                                                          Phrase: "Index"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 16] (15)"
                                                        IterEnd: "[1, 17] (16)"
                                                        Token: "'['"
                                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                                                        Whitespace: None
                                                      Phrase: "'['"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 17] (16)"
                                                            IterEnd: "[1, 18] (17)"
                                                            Token: "Lower"
                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                                            Whitespace: None
                                                          Phrase: "Lower"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 18] (17)"
                                                        IterEnd: "[1, 19] (18)"
                                                        Token: "']'"
                                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                                                        Whitespace: None
                                                      Phrase: "']'"
                                                  IsComplete: True
                                                Phrase: "Index"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                        IsComplete: True
                                      Phrase: "Add"
                                    Phrase: "All Phrases"
                                  Phrase: "Dynamic Phrase"
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 20] (19)"
                                    IterEnd: "[1, 21] (20)"
                                    Token: "'+'"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                                    Whitespace:
                                      - 18
                                      - 19
                                  Phrase: "'+'"
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 22] (21)"
                                        IterEnd: "[1, 27] (26)"
                                        Token: "Lower"
                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                                        Whitespace:
                                          - 20
                                          - 21
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                              IsComplete: True
                            Phrase: "Add"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 28] (27)"
                          IterEnd: "[1, 29] (28)"
                          Token: "'+'"
                          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
                          Whitespace:
                            - 26
                            - 27
                        Phrase: "'+'"
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 30] (29)"
                              IterEnd: "[1, 34] (33)"
                              Token: "Lower"
                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                              Whitespace:
                                - 28
                                - 29
                            Phrase: "Lower"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Add"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 35] (34)"
                IterEnd: "[1, 37] (36)"
                Token: "'if'"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                Whitespace:
                  - 33
                  - 34
              Phrase: "'if'"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 38] (37)"
                    IterEnd: "[1, 47] (46)"
                    Token: "Upper"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                    Whitespace:
                      - 36
                      - 37
                  Phrase: "Upper"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 48] (47)"
                IterEnd: "[1, 52] (51)"
                Token: "'else'"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                Whitespace:
                  - 46
                  - 47
              Phrase: "'else'"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 53] (52)"
                    IterEnd: "[1, 57] (56)"
                    Token: "Lower"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                    Whitespace:
                      - 51
                      - 52
                  Phrase: "Lower"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Ter"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
292) EndPhrase, "DynamicPhrasesType.Statements" [True]
293) StartPhrase, "'-'"
294) EndPhrase, "'-'" [False]
295) StartPhrase, "'*'"
296) EndPhrase, "'*'" [False]
297) StartPhrase, "'/'"
298) EndPhrase, "'/'" [False]
299) StartPhrase, "'if'"
300) EndPhrase, "'if'" [False]
301) StartPhrase, "'['"
302) EndPhrase, "'['" [False]
303) OnInternalPhraseAsync, 18, 56
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 4] (3)"
                            Token: "Lower"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                            Whitespace: None
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "Dynamic Phrase"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 5] (4)"
                        IterEnd: "[1, 6] (5)"
                        Token: "'+'"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                        Whitespace:
                          - 3
                          - 4
                      Phrase: "'+'"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                            DataItems:
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                      DataItems:
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                DataItems:
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 7] (6)"
                                                          IterEnd: "[1, 10] (9)"
                                                          Token: "Lower"
                                                          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                          Whitespace:
                                                            - 5
                                                            - 6
                                                        Phrase: "Lower"
                                                      Phrase: "All Phrases"
                                                    Phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 10] (9)"
                                                      IterEnd: "[1, 11] (10)"
                                                      Token: "'['"
                                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                                      Whitespace: None
                                                    Phrase: "'['"
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 11] (10)"
                                                          IterEnd: "[1, 12] (11)"
                                                          Token: "Lower"
                                                          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                          Whitespace: None
                                                        Phrase: "Lower"
                                                      Phrase: "All Phrases"
                                                    Phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 12] (11)"
                                                      IterEnd: "[1, 13] (12)"
                                                      Token: "']'"
                                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                                      Whitespace: None
                                                    Phrase: "']'"
                                                IsComplete: True
                                              Phrase: "Index"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 13] (12)"
                                            IterEnd: "[1, 14] (13)"
                                            Token: "'['"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                            Whitespace: None
                                          Phrase: "'['"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 14] (13)"
                                                IterEnd: "[1, 15] (14)"
                                                Token: "Lower"
                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                                Whitespace: None
                                              Phrase: "Lower"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 15] (14)"
                                            IterEnd: "[1, 16] (15)"
                                            Token: "']'"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                            Whitespace: None
                                          Phrase: "']'"
                                      IsComplete: True
                                    Phrase: "Index"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 16] (15)"
                                  IterEnd: "[1, 17] (16)"
                                  Token: "'['"
                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                                  Whitespace: None
                                Phrase: "'['"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 17] (16)"
                                      IterEnd: "[1, 18] (17)"
                                      Token: "Lower"
                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 18] (17)"
                                  IterEnd: "[1, 19] (18)"
                                  Token: "']'"
                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                                  Whitespace: None
                                Phrase: "']'"
                            IsComplete: True
                          Phrase: "Index"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Add"
              Phrase: "All Phrases"
            Phrase: "Dynamic Phrase"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 20] (19)"
              IterEnd: "[1, 21] (20)"
              Token: "'+'"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
              Whitespace:
                - 18
                - 19
            Phrase: "'+'"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 22] (21)"
                  IterEnd: "[1, 27] (26)"
                  Token: "Lower"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                  Whitespace:
                    - 20
                    - 21
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Add"
    Phrase: "All Phrases <Suffix>"
304) EndPhrase, "All Phrases <Suffix>" [True]
305) StartPhrase, "All Phrases <Suffix>"
306) StartPhrase, "'+'"
307) EndPhrase, "'+'" [False]
308) StartPhrase, "'-'"
309) EndPhrase, "'-'" [False]
310) StartPhrase, "'*'"
311) EndPhrase, "'*'" [False]
312) StartPhrase, "'/'"
313) EndPhrase, "'/'" [False]
314) StartPhrase, "'if'"
315) EndPhrase, "'if'" [False]
316) StartPhrase, "'['"
317) EndPhrase, "'['" [False]
318) EndPhrase, "All Phrases <Suffix>" [False]
319) OnInternalPhraseAsync, 5, 56
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                    DataItems:
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 1] (0)"
                                                  IterEnd: "[1, 4] (3)"
                                                  Token: "Lower"
                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "Dynamic Phrase"
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 5] (4)"
                                              IterEnd: "[1, 6] (5)"
                                              Token: "'+'"
                                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                              Whitespace:
                                                - 3
                                                - 4
                                            Phrase: "'+'"
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                  DataItems:
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                            DataItems:
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                                      DataItems:
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[1, 7] (6)"
                                                                                IterEnd: "[1, 10] (9)"
                                                                                Token: "Lower"
                                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                                                Whitespace:
                                                                                  - 5
                                                                                  - 6
                                                                              Phrase: "Lower"
                                                                            Phrase: "All Phrases"
                                                                          Phrase: "DynamicPhrasesType.Statements"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[1, 10] (9)"
                                                                            IterEnd: "[1, 11] (10)"
                                                                            Token: "'['"
                                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                                                            Whitespace: None
                                                                          Phrase: "'['"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[1, 11] (10)"
                                                                                IterEnd: "[1, 12] (11)"
                                                                                Token: "Lower"
                                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                                                Whitespace: None
                                                                              Phrase: "Lower"
                                                                            Phrase: "All Phrases"
                                                                          Phrase: "DynamicPhrasesType.Statements"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[1, 12] (11)"
                                                                            IterEnd: "[1, 13] (12)"
                                                                            Token: "']'"
                                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                                                            Whitespace: None
                                                                          Phrase: "']'"
                                                                      IsComplete: True
                                                                    Phrase: "Index"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 13] (12)"
                                                                  IterEnd: "[1, 14] (13)"
                                                                  Token: "'['"
                                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                                                  Whitespace: None
                                                                Phrase: "'['"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 14] (13)"
                                                                      IterEnd: "[1, 15] (14)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                                                      Whitespace: None
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 15] (14)"
                                                                  IterEnd: "[1, 16] (15)"
                                                                  Token: "']'"
                                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                                                  Whitespace: None
                                                                Phrase: "']'"
                                                            IsComplete: True
                                                          Phrase: "Index"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 16] (15)"
                                                        IterEnd: "[1, 17] (16)"
                                                        Token: "'['"
                                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                                                        Whitespace: None
                                                      Phrase: "'['"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 17] (16)"
                                                            IterEnd: "[1, 18] (17)"
                                                            Token: "Lower"
                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                                            Whitespace: None
                                                          Phrase: "Lower"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 18] (17)"
                                                        IterEnd: "[1, 19] (18)"
                                                        Token: "']'"
                                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                                                        Whitespace: None
                                                      Phrase: "']'"
                                                  IsComplete: True
                                                Phrase: "Index"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                        IsComplete: True
                                      Phrase: "Add"
                                    Phrase: "All Phrases"
                                  Phrase: "Dynamic Phrase"
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 20] (19)"
                                    IterEnd: "[1, 21] (20)"
                                    Token: "'+'"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                                    Whitespace:
                                      - 18
                                      - 19
                                  Phrase: "'+'"
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 22] (21)"
                                        IterEnd: "[1, 27] (26)"
                                        Token: "Lower"
                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                                        Whitespace:
                                          - 20
                                          - 21
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                              IsComplete: True
                            Phrase: "Add"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 28] (27)"
                          IterEnd: "[1, 29] (28)"
                          Token: "'+'"
                          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
                          Whitespace:
                            - 26
                            - 27
                        Phrase: "'+'"
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 30] (29)"
                              IterEnd: "[1, 34] (33)"
                              Token: "Lower"
                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                              Whitespace:
                                - 28
                                - 29
                            Phrase: "Lower"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Add"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 35] (34)"
                IterEnd: "[1, 37] (36)"
                Token: "'if'"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                Whitespace:
                  - 33
                  - 34
              Phrase: "'if'"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 38] (37)"
                    IterEnd: "[1, 47] (46)"
                    Token: "Upper"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                    Whitespace:
                      - 36
                      - 37
                  Phrase: "Upper"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 48] (47)"
                IterEnd: "[1, 52] (51)"
                Token: "'else'"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                Whitespace:
                  - 46
                  - 47
              Phrase: "'else'"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 53] (52)"
                    IterEnd: "[1, 57] (56)"
                    Token: "Lower"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                    Whitespace:
                      - 51
                      - 52
                  Phrase: "Lower"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Ter"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
320) EndPhrase, "DynamicPhrasesType.Statements" [True]
321) StartPhrase, "'-'"
322) EndPhrase, "'-'" [False]
323) StartPhrase, "'*'"
324) EndPhrase, "'*'" [False]
325) StartPhrase, "'/'"
326) EndPhrase, "'/'" [False]
327) StartPhrase, "'if'"
328) EndPhrase, "'if'" [False]
329) StartPhrase, "'['"
330) EndPhrase, "'['" [False]
331) OnInternalPhraseAsync, 3, 56
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 1] (0)"
                  IterEnd: "[1, 4] (3)"
                  Token: "Lower"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "Dynamic Phrase"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 5] (4)"
              IterEnd: "[1, 6] (5)"
              Token: "'+'"
              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
              Whitespace:
                - 3
                - 4
            Phrase: "'+'"
          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                            DataItems:
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                      DataItems:
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 7] (6)"
                                                IterEnd: "[1, 10] (9)"
                                                Token: "Lower"
                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                Whitespace:
                                                  - 5
                                                  - 6
                                              Phrase: "Lower"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 10] (9)"
                                            IterEnd: "[1, 11] (10)"
                                            Token: "'['"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                            Whitespace: None
                                          Phrase: "'['"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 11] (10)"
                                                IterEnd: "[1, 12] (11)"
                                                Token: "Lower"
                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                Whitespace: None
                                              Phrase: "Lower"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 12] (11)"
                                            IterEnd: "[1, 13] (12)"
                                            Token: "']'"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                            Whitespace: None
                                          Phrase: "']'"
                                      IsComplete: True
                                    Phrase: "Index"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 13] (12)"
                                  IterEnd: "[1, 14] (13)"
                                  Token: "'['"
                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                  Whitespace: None
                                Phrase: "'['"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 14] (13)"
                                      IterEnd: "[1, 15] (14)"
                                      Token: "Lower"
                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 15] (14)"
                                  IterEnd: "[1, 16] (15)"
                                  Token: "']'"
                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                  Whitespace: None
                                Phrase: "']'"
                            IsComplete: True
                          Phrase: "Index"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 16] (15)"
                        IterEnd: "[1, 17] (16)"
                        Token: "'['"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                        Whitespace: None
                      Phrase: "'['"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 17] (16)"
                            IterEnd: "[1, 18] (17)"
                            Token: "Lower"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                            Whitespace: None
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 18] (17)"
                        IterEnd: "[1, 19] (18)"
                        Token: "']'"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                        Whitespace: None
                      Phrase: "']'"
                  IsComplete: True
                Phrase: "Index"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Add"
    Phrase: "All Phrases <Suffix>"
332) EndPhrase, "All Phrases <Suffix>" [True]
333) StartPhrase, "All Phrases <Suffix>"
334) StartPhrase, "'+'"
335) EndPhrase, "'+'" [False]
336) StartPhrase, "'-'"
337) EndPhrase, "'-'" [False]
338) StartPhrase, "'*'"
339) EndPhrase, "'*'" [False]
340) StartPhrase, "'/'"
341) EndPhrase, "'/'" [False]
342) StartPhrase, "'if'"
343) EndPhrase, "'if'" [False]
344) StartPhrase, "'['"
345) EndPhrase, "'['" [False]
346) EndPhrase, "All Phrases <Suffix>" [False]
347) OnInternalPhraseAsync, 0, 56
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                    DataItems:
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 1] (0)"
                                                  IterEnd: "[1, 4] (3)"
                                                  Token: "Lower"
                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "Dynamic Phrase"
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 5] (4)"
                                              IterEnd: "[1, 6] (5)"
                                              Token: "'+'"
                                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                              Whitespace:
                                                - 3
                                                - 4
                                            Phrase: "'+'"
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                  DataItems:
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                            DataItems:
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                                      DataItems:
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[1, 7] (6)"
                                                                                IterEnd: "[1, 10] (9)"
                                                                                Token: "Lower"
                                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                                                Whitespace:
                                                                                  - 5
                                                                                  - 6
                                                                              Phrase: "Lower"
                                                                            Phrase: "All Phrases"
                                                                          Phrase: "DynamicPhrasesType.Statements"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[1, 10] (9)"
                                                                            IterEnd: "[1, 11] (10)"
                                                                            Token: "'['"
                                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                                                            Whitespace: None
                                                                          Phrase: "'['"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[1, 11] (10)"
                                                                                IterEnd: "[1, 12] (11)"
                                                                                Token: "Lower"
                                                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                                                Whitespace: None
                                                                              Phrase: "Lower"
                                                                            Phrase: "All Phrases"
                                                                          Phrase: "DynamicPhrasesType.Statements"
                                                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[1, 12] (11)"
                                                                            IterEnd: "[1, 13] (12)"
                                                                            Token: "']'"
                                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                                                            Whitespace: None
                                                                          Phrase: "']'"
                                                                      IsComplete: True
                                                                    Phrase: "Index"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 13] (12)"
                                                                  IterEnd: "[1, 14] (13)"
                                                                  Token: "'['"
                                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                                                  Whitespace: None
                                                                Phrase: "'['"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 14] (13)"
                                                                      IterEnd: "[1, 15] (14)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                                                      Whitespace: None
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 15] (14)"
                                                                  IterEnd: "[1, 16] (15)"
                                                                  Token: "']'"
                                                                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                                                  Whitespace: None
                                                                Phrase: "']'"
                                                            IsComplete: True
                                                          Phrase: "Index"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 16] (15)"
                                                        IterEnd: "[1, 17] (16)"
                                                        Token: "'['"
                                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                                                        Whitespace: None
                                                      Phrase: "'['"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 17] (16)"
                                                            IterEnd: "[1, 18] (17)"
                                                            Token: "Lower"
                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                                            Whitespace: None
                                                          Phrase: "Lower"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 18] (17)"
                                                        IterEnd: "[1, 19] (18)"
                                                        Token: "']'"
                                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                                                        Whitespace: None
                                                      Phrase: "']'"
                                                  IsComplete: True
                                                Phrase: "Index"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                        IsComplete: True
                                      Phrase: "Add"
                                    Phrase: "All Phrases"
                                  Phrase: "Dynamic Phrase"
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 20] (19)"
                                    IterEnd: "[1, 21] (20)"
                                    Token: "'+'"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                                    Whitespace:
                                      - 18
                                      - 19
                                  Phrase: "'+'"
                                - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 22] (21)"
                                        IterEnd: "[1, 27] (26)"
                                        Token: "Lower"
                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                                        Whitespace:
                                          - 20
                                          - 21
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                              IsComplete: True
                            Phrase: "Add"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 28] (27)"
                          IterEnd: "[1, 29] (28)"
                          Token: "'+'"
                          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
                          Whitespace:
                            - 26
                            - 27
                        Phrase: "'+'"
                      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 30] (29)"
                              IterEnd: "[1, 34] (33)"
                              Token: "Lower"
                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                              Whitespace:
                                - 28
                                - 29
                            Phrase: "Lower"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Add"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 35] (34)"
                IterEnd: "[1, 37] (36)"
                Token: "'if'"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                Whitespace:
                  - 33
                  - 34
              Phrase: "'if'"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 38] (37)"
                    IterEnd: "[1, 47] (46)"
                    Token: "Upper"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                    Whitespace:
                      - 36
                      - 37
                  Phrase: "Upper"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 48] (47)"
                IterEnd: "[1, 52] (51)"
                Token: "'else'"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                Whitespace:
                  - 46
                  - 47
              Phrase: "'else'"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 53] (52)"
                    IterEnd: "[1, 57] (56)"
                    Token: "Lower"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                    Whitespace:
                      - 51
                      - 52
                  Phrase: "Lower"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Ter"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
348) EndPhrase, "Dynamic Phrase" [True]
