0) StartPhrase, "Dynamic Phrase"
1) StartPhrase, "All Phrases <Prefix>"
2) StartPhrase, "Lower"
3) OnInternalPhrase, 0, 3
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 1] (0)"
        end: "[1, 4] (3)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
    phrase: "Lower"
4) EndPhrase, "Lower" [True]
5) StartPhrase, "Upper"
6) EndPhrase, "Upper" [False]
7) StartPhrase, "Neg"
8) StartPhrase, "'-'"
9) EndPhrase, "'-'" [False]
10) EndPhrase, "Neg" [False]
11) OnInternalPhrase, 0, 3
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 1] (0)"
          end: "[1, 4] (3)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
12) EndPhrase, "All Phrases <Prefix>" [True]
13) StartPhrase, "All Phrases <Suffix>"
14) StartPhrase, "'+'"
15) OnInternalPhrase, 4, 5
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 5] (4)"
        end: "[1, 6] (5)"
      token: "'+'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
    phrase: "'+'"
16) EndPhrase, "'+'" [True]
17) StartPhrase, "DynamicPhrasesType.Statements"
18) StartPhrase, "All Phrases <Prefix>"
19) StartPhrase, "Lower"
20) OnInternalPhrase, 6, 9
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 7] (6)"
        end: "[1, 10] (9)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
    phrase: "Lower"
21) EndPhrase, "Lower" [True]
22) StartPhrase, "Upper"
23) EndPhrase, "Upper" [False]
24) StartPhrase, "Neg"
25) StartPhrase, "'-'"
26) EndPhrase, "'-'" [False]
27) EndPhrase, "Neg" [False]
28) OnInternalPhrase, 6, 9
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 7] (6)"
          end: "[1, 10] (9)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
29) EndPhrase, "All Phrases <Prefix>" [True]
30) StartPhrase, "All Phrases <Suffix>"
31) StartPhrase, "'+'"
32) EndPhrase, "'+'" [False]
33) StartPhrase, "'-'"
34) EndPhrase, "'-'" [False]
35) StartPhrase, "'*'"
36) EndPhrase, "'*'" [False]
37) StartPhrase, "'/'"
38) EndPhrase, "'/'" [False]
39) StartPhrase, "'if'"
40) EndPhrase, "'if'" [False]
41) StartPhrase, "'['"
42) OnInternalPhrase, 9, 10
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 10] (9)"
        end: "[1, 11] (10)"
      token: "'['"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
    phrase: "'['"
43) EndPhrase, "'['" [True]
44) StartPhrase, "DynamicPhrasesType.Statements"
45) StartPhrase, "All Phrases <Prefix>"
46) StartPhrase, "Lower"
47) OnInternalPhrase, 10, 11
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 11] (10)"
        end: "[1, 12] (11)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
    phrase: "Lower"
48) EndPhrase, "Lower" [True]
49) StartPhrase, "Upper"
50) EndPhrase, "Upper" [False]
51) StartPhrase, "Neg"
52) StartPhrase, "'-'"
53) EndPhrase, "'-'" [False]
54) EndPhrase, "Neg" [False]
55) OnInternalPhrase, 10, 11
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 11] (10)"
          end: "[1, 12] (11)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
56) EndPhrase, "All Phrases <Prefix>" [True]
57) StartPhrase, "All Phrases <Suffix>"
58) StartPhrase, "'+'"
59) EndPhrase, "'+'" [False]
60) StartPhrase, "'-'"
61) EndPhrase, "'-'" [False]
62) StartPhrase, "'*'"
63) EndPhrase, "'*'" [False]
64) StartPhrase, "'/'"
65) EndPhrase, "'/'" [False]
66) StartPhrase, "'if'"
67) EndPhrase, "'if'" [False]
68) StartPhrase, "'['"
69) EndPhrase, "'['" [False]
70) EndPhrase, "All Phrases <Suffix>" [False]
71) OnInternalPhrase, 10, 11
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: False
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 11] (10)"
            end: "[1, 12] (11)"
          token: "Lower"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
        phrase: "Lower"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
72) EndPhrase, "DynamicPhrasesType.Statements" [True]
73) StartPhrase, "']'"
74) OnInternalPhrase, 11, 12
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 12] (11)"
        end: "[1, 13] (12)"
      token: "']'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
    phrase: "']'"
75) EndPhrase, "']'" [True]
76) OnInternalPhrase, 9, 12
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 7] (6)"
                  end: "[1, 10] (9)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 10] (9)"
              end: "[1, 11] (10)"
            token: "'['"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
          phrase: "'['"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 11] (10)"
                  end: "[1, 12] (11)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 12] (11)"
              end: "[1, 13] (12)"
            token: "']'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
          phrase: "']'"
      phrase: "Index"
    phrase: "All Phrases <Suffix>"
77) EndPhrase, "All Phrases <Suffix>" [True]
78) StartPhrase, "All Phrases <Suffix>"
79) StartPhrase, "'+'"
80) EndPhrase, "'+'" [False]
81) StartPhrase, "'-'"
82) EndPhrase, "'-'" [False]
83) StartPhrase, "'*'"
84) EndPhrase, "'*'" [False]
85) StartPhrase, "'/'"
86) EndPhrase, "'/'" [False]
87) StartPhrase, "'if'"
88) EndPhrase, "'if'" [False]
89) StartPhrase, "'['"
90) OnInternalPhrase, 12, 13
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 13] (12)"
        end: "[1, 14] (13)"
      token: "'['"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
    phrase: "'['"
91) EndPhrase, "'['" [True]
92) StartPhrase, "DynamicPhrasesType.Statements"
93) StartPhrase, "All Phrases <Prefix>"
94) StartPhrase, "Lower"
95) OnInternalPhrase, 13, 14
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 14] (13)"
        end: "[1, 15] (14)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
    phrase: "Lower"
96) EndPhrase, "Lower" [True]
97) StartPhrase, "Upper"
98) EndPhrase, "Upper" [False]
99) StartPhrase, "Neg"
100) StartPhrase, "'-'"
101) EndPhrase, "'-'" [False]
102) EndPhrase, "Neg" [False]
103) OnInternalPhrase, 13, 14
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 14] (13)"
          end: "[1, 15] (14)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
104) EndPhrase, "All Phrases <Prefix>" [True]
105) StartPhrase, "All Phrases <Suffix>"
106) StartPhrase, "'+'"
107) EndPhrase, "'+'" [False]
108) StartPhrase, "'-'"
109) EndPhrase, "'-'" [False]
110) StartPhrase, "'*'"
111) EndPhrase, "'*'" [False]
112) StartPhrase, "'/'"
113) EndPhrase, "'/'" [False]
114) StartPhrase, "'if'"
115) EndPhrase, "'if'" [False]
116) StartPhrase, "'['"
117) EndPhrase, "'['" [False]
118) EndPhrase, "All Phrases <Suffix>" [False]
119) OnInternalPhrase, 13, 14
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: False
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 14] (13)"
            end: "[1, 15] (14)"
          token: "Lower"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
        phrase: "Lower"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
120) EndPhrase, "DynamicPhrasesType.Statements" [True]
121) StartPhrase, "']'"
122) OnInternalPhrase, 14, 15
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 15] (14)"
        end: "[1, 16] (15)"
      token: "']'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
    phrase: "']'"
123) EndPhrase, "']'" [True]
124) OnInternalPhrase, 12, 15
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 7] (6)"
                          end: "[1, 10] (9)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 10] (9)"
                      end: "[1, 11] (10)"
                    token: "'['"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                  phrase: "'['"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 11] (10)"
                          end: "[1, 12] (11)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 12] (11)"
                      end: "[1, 13] (12)"
                    token: "']'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                  phrase: "']'"
              phrase: "Index"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 13] (12)"
              end: "[1, 14] (13)"
            token: "'['"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
          phrase: "'['"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 14] (13)"
                  end: "[1, 15] (14)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 15] (14)"
              end: "[1, 16] (15)"
            token: "']'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
          phrase: "']'"
      phrase: "Index"
    phrase: "All Phrases <Suffix>"
125) EndPhrase, "All Phrases <Suffix>" [True]
126) StartPhrase, "All Phrases <Suffix>"
127) StartPhrase, "'+'"
128) EndPhrase, "'+'" [False]
129) StartPhrase, "'-'"
130) EndPhrase, "'-'" [False]
131) StartPhrase, "'*'"
132) EndPhrase, "'*'" [False]
133) StartPhrase, "'/'"
134) EndPhrase, "'/'" [False]
135) StartPhrase, "'if'"
136) EndPhrase, "'if'" [False]
137) StartPhrase, "'['"
138) OnInternalPhrase, 15, 16
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 16] (15)"
        end: "[1, 17] (16)"
      token: "'['"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
    phrase: "'['"
139) EndPhrase, "'['" [True]
140) StartPhrase, "DynamicPhrasesType.Statements"
141) StartPhrase, "All Phrases <Prefix>"
142) StartPhrase, "Lower"
143) OnInternalPhrase, 16, 17
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 17] (16)"
        end: "[1, 18] (17)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
    phrase: "Lower"
144) EndPhrase, "Lower" [True]
145) StartPhrase, "Upper"
146) EndPhrase, "Upper" [False]
147) StartPhrase, "Neg"
148) StartPhrase, "'-'"
149) EndPhrase, "'-'" [False]
150) EndPhrase, "Neg" [False]
151) OnInternalPhrase, 16, 17
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 17] (16)"
          end: "[1, 18] (17)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
152) EndPhrase, "All Phrases <Prefix>" [True]
153) StartPhrase, "All Phrases <Suffix>"
154) StartPhrase, "'+'"
155) EndPhrase, "'+'" [False]
156) StartPhrase, "'-'"
157) EndPhrase, "'-'" [False]
158) StartPhrase, "'*'"
159) EndPhrase, "'*'" [False]
160) StartPhrase, "'/'"
161) EndPhrase, "'/'" [False]
162) StartPhrase, "'if'"
163) EndPhrase, "'if'" [False]
164) StartPhrase, "'['"
165) EndPhrase, "'['" [False]
166) EndPhrase, "All Phrases <Suffix>" [False]
167) OnInternalPhrase, 16, 17
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: False
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 17] (16)"
            end: "[1, 18] (17)"
          token: "Lower"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
        phrase: "Lower"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
168) EndPhrase, "DynamicPhrasesType.Statements" [True]
169) StartPhrase, "']'"
170) OnInternalPhrase, 17, 18
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 18] (17)"
        end: "[1, 19] (18)"
      token: "']'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
    phrase: "']'"
171) EndPhrase, "']'" [True]
172) OnInternalPhrase, 15, 18
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 7] (6)"
                                  end: "[1, 10] (9)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 10] (9)"
                              end: "[1, 11] (10)"
                            token: "'['"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                          phrase: "'['"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 11] (10)"
                                  end: "[1, 12] (11)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 12] (11)"
                              end: "[1, 13] (12)"
                            token: "']'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                          phrase: "']'"
                      phrase: "Index"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 13] (12)"
                      end: "[1, 14] (13)"
                    token: "'['"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                  phrase: "'['"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 14] (13)"
                          end: "[1, 15] (14)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 15] (14)"
                      end: "[1, 16] (15)"
                    token: "']'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                  phrase: "']'"
              phrase: "Index"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 16] (15)"
              end: "[1, 17] (16)"
            token: "'['"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
          phrase: "'['"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 17] (16)"
                  end: "[1, 18] (17)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 18] (17)"
              end: "[1, 19] (18)"
            token: "']'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
          phrase: "']'"
      phrase: "Index"
    phrase: "All Phrases <Suffix>"
173) EndPhrase, "All Phrases <Suffix>" [True]
174) StartPhrase, "All Phrases <Suffix>"
175) StartPhrase, "'+'"
176) OnInternalPhrase, 19, 20
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 20] (19)"
        end: "[1, 21] (20)"
      token: "'+'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
    phrase: "'+'"
177) EndPhrase, "'+'" [True]
178) StartPhrase, "DynamicPhrasesType.Statements"
179) StartPhrase, "All Phrases <Prefix>"
180) StartPhrase, "Lower"
181) OnInternalPhrase, 21, 26
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 22] (21)"
        end: "[1, 27] (26)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
    phrase: "Lower"
182) EndPhrase, "Lower" [True]
183) StartPhrase, "Upper"
184) EndPhrase, "Upper" [False]
185) StartPhrase, "Neg"
186) StartPhrase, "'-'"
187) EndPhrase, "'-'" [False]
188) EndPhrase, "Neg" [False]
189) OnInternalPhrase, 21, 26
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 22] (21)"
          end: "[1, 27] (26)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
190) EndPhrase, "All Phrases <Prefix>" [True]
191) StartPhrase, "All Phrases <Suffix>"
192) StartPhrase, "'+'"
193) OnInternalPhrase, 27, 28
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 28] (27)"
        end: "[1, 29] (28)"
      token: "'+'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
    phrase: "'+'"
194) EndPhrase, "'+'" [True]
195) StartPhrase, "DynamicPhrasesType.Statements"
196) StartPhrase, "All Phrases <Prefix>"
197) StartPhrase, "Lower"
198) OnInternalPhrase, 29, 33
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 30] (29)"
        end: "[1, 34] (33)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
    phrase: "Lower"
199) EndPhrase, "Lower" [True]
200) StartPhrase, "Upper"
201) EndPhrase, "Upper" [False]
202) StartPhrase, "Neg"
203) StartPhrase, "'-'"
204) EndPhrase, "'-'" [False]
205) EndPhrase, "Neg" [False]
206) OnInternalPhrase, 29, 33
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 30] (29)"
          end: "[1, 34] (33)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
207) EndPhrase, "All Phrases <Prefix>" [True]
208) StartPhrase, "All Phrases <Suffix>"
209) StartPhrase, "'+'"
210) EndPhrase, "'+'" [False]
211) StartPhrase, "'-'"
212) EndPhrase, "'-'" [False]
213) StartPhrase, "'*'"
214) EndPhrase, "'*'" [False]
215) StartPhrase, "'/'"
216) EndPhrase, "'/'" [False]
217) StartPhrase, "'if'"
218) OnInternalPhrase, 34, 36
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 35] (34)"
        end: "[1, 37] (36)"
      token: "'if'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
    phrase: "'if'"
219) EndPhrase, "'if'" [True]
220) StartPhrase, "DynamicPhrasesType.Statements"
221) StartPhrase, "All Phrases <Prefix>"
222) StartPhrase, "Lower"
223) EndPhrase, "Lower" [False]
224) StartPhrase, "Upper"
225) OnInternalPhrase, 37, 46
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 38] (37)"
        end: "[1, 47] (46)"
      token: "Upper"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
    phrase: "Upper"
226) EndPhrase, "Upper" [True]
227) StartPhrase, "Neg"
228) StartPhrase, "'-'"
229) EndPhrase, "'-'" [False]
230) EndPhrase, "Neg" [False]
231) OnInternalPhrase, 37, 46
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 38] (37)"
          end: "[1, 47] (46)"
        token: "Upper"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
      phrase: "Upper"
    phrase: "All Phrases <Prefix>"
232) EndPhrase, "All Phrases <Prefix>" [True]
233) StartPhrase, "All Phrases <Suffix>"
234) StartPhrase, "'+'"
235) EndPhrase, "'+'" [False]
236) StartPhrase, "'-'"
237) EndPhrase, "'-'" [False]
238) StartPhrase, "'*'"
239) EndPhrase, "'*'" [False]
240) StartPhrase, "'/'"
241) EndPhrase, "'/'" [False]
242) StartPhrase, "'if'"
243) EndPhrase, "'if'" [False]
244) StartPhrase, "'['"
245) EndPhrase, "'['" [False]
246) EndPhrase, "All Phrases <Suffix>" [False]
247) OnInternalPhrase, 37, 46
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: False
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 38] (37)"
            end: "[1, 47] (46)"
          token: "Upper"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
        phrase: "Upper"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
248) EndPhrase, "DynamicPhrasesType.Statements" [True]
249) StartPhrase, "'else'"
250) OnInternalPhrase, 47, 51
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 48] (47)"
        end: "[1, 52] (51)"
      token: "'else'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
    phrase: "'else'"
251) EndPhrase, "'else'" [True]
252) StartPhrase, "DynamicPhrasesType.Statements"
253) StartPhrase, "All Phrases <Prefix>"
254) StartPhrase, "Lower"
255) OnInternalPhrase, 52, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 53] (52)"
        end: "[1, 57] (56)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
    phrase: "Lower"
256) EndPhrase, "Lower" [True]
257) StartPhrase, "Upper"
258) EndPhrase, "Upper" [False]
259) StartPhrase, "Neg"
260) StartPhrase, "'-'"
261) EndPhrase, "'-'" [False]
262) EndPhrase, "Neg" [False]
263) OnInternalPhrase, 52, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 53] (52)"
          end: "[1, 57] (56)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
264) EndPhrase, "All Phrases <Prefix>" [True]
265) StartPhrase, "All Phrases <Suffix>"
266) StartPhrase, "'+'"
267) EndPhrase, "'+'" [False]
268) StartPhrase, "'-'"
269) EndPhrase, "'-'" [False]
270) StartPhrase, "'*'"
271) EndPhrase, "'*'" [False]
272) StartPhrase, "'/'"
273) EndPhrase, "'/'" [False]
274) StartPhrase, "'if'"
275) EndPhrase, "'if'" [False]
276) StartPhrase, "'['"
277) EndPhrase, "'['" [False]
278) EndPhrase, "All Phrases <Suffix>" [False]
279) OnInternalPhrase, 52, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: False
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 53] (52)"
            end: "[1, 57] (56)"
          token: "Lower"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
        phrase: "Lower"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
280) EndPhrase, "DynamicPhrasesType.Statements" [True]
281) StartPhrase, "'['"
282) EndPhrase, "'['" [False]
283) OnInternalPhrase, 33, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 30] (29)"
                  end: "[1, 34] (33)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 34] (33)"
            end: "[1, 35] (34)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 33
              end: 34
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 35] (34)"
              end: "[1, 37] (36)"
            token: "'if'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
          phrase: "'if'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 37] (36)"
            end: "[1, 38] (37)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 36
              end: 37
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 38] (37)"
                  end: "[1, 47] (46)"
                token: "Upper"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
              phrase: "Upper"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 47] (46)"
            end: "[1, 48] (47)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 46
              end: 47
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 48] (47)"
              end: "[1, 52] (51)"
            token: "'else'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
          phrase: "'else'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 52] (51)"
            end: "[1, 53] (52)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 51
              end: 52
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 53] (52)"
                  end: "[1, 57] (56)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Ter"
    phrase: "All Phrases <Suffix>"
284) EndPhrase, "All Phrases <Suffix>" [True]
285) StartPhrase, "All Phrases <Suffix>"
286) StartPhrase, "'+'"
287) EndPhrase, "'+'" [False]
288) StartPhrase, "'-'"
289) EndPhrase, "'-'" [False]
290) StartPhrase, "'*'"
291) EndPhrase, "'*'" [False]
292) StartPhrase, "'/'"
293) EndPhrase, "'/'" [False]
294) StartPhrase, "'if'"
295) EndPhrase, "'if'" [False]
296) StartPhrase, "'['"
297) EndPhrase, "'['" [False]
298) EndPhrase, "All Phrases <Suffix>" [False]
299) OnInternalPhrase, 29, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: False
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 30] (29)"
                    end: "[1, 34] (33)"
                  token: "Lower"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                phrase: "Lower"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 34] (33)"
              end: "[1, 35] (34)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 33
                end: 34
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: False
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 35] (34)"
                end: "[1, 37] (36)"
              token: "'if'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
            phrase: "'if'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 37] (36)"
              end: "[1, 38] (37)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 36
                end: 37
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: False
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 38] (37)"
                    end: "[1, 47] (46)"
                  token: "Upper"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                phrase: "Upper"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 47] (46)"
              end: "[1, 48] (47)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 46
                end: 47
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: False
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 48] (47)"
                end: "[1, 52] (51)"
              token: "'else'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
            phrase: "'else'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 52] (51)"
              end: "[1, 53] (52)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 51
                end: 52
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: False
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 53] (52)"
                    end: "[1, 57] (56)"
                  token: "Lower"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                phrase: "Lower"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
        phrase: "Ter"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
300) EndPhrase, "DynamicPhrasesType.Statements" [True]
301) StartPhrase, "'-'"
302) EndPhrase, "'-'" [False]
303) StartPhrase, "'*'"
304) EndPhrase, "'*'" [False]
305) StartPhrase, "'/'"
306) EndPhrase, "'/'" [False]
307) StartPhrase, "'if'"
308) EndPhrase, "'if'" [False]
309) StartPhrase, "'['"
310) EndPhrase, "'['" [False]
311) OnInternalPhrase, 26, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 1] (0)"
                                  end: "[1, 4] (3)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "Dynamic Phrase"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: True
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 4] (3)"
                            end: "[1, 5] (4)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 3
                              end: 4
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 5] (4)"
                              end: "[1, 6] (5)"
                            token: "'+'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                          phrase: "'+'"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: True
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 6] (5)"
                            end: "[1, 7] (6)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 5
                              end: 6
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data:
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data:
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data:
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        is_ignored: False
                                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                          begin: "[1, 7] (6)"
                                                          end: "[1, 10] (9)"
                                                        token: "Lower"
                                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                          match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                      phrase: "Lower"
                                                    phrase: "All Phrases"
                                                  phrase: "DynamicPhrasesType.Statements"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    is_ignored: False
                                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                      begin: "[1, 10] (9)"
                                                      end: "[1, 11] (10)"
                                                    token: "'['"
                                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                      match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                                  phrase: "'['"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        is_ignored: False
                                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                          begin: "[1, 11] (10)"
                                                          end: "[1, 12] (11)"
                                                        token: "Lower"
                                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                          match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                      phrase: "Lower"
                                                    phrase: "All Phrases"
                                                  phrase: "DynamicPhrasesType.Statements"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    is_ignored: False
                                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                      begin: "[1, 12] (11)"
                                                      end: "[1, 13] (12)"
                                                    token: "']'"
                                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                      match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                                  phrase: "']'"
                                              phrase: "Index"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                              begin: "[1, 13] (12)"
                                              end: "[1, 14] (13)"
                                            token: "'['"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                          phrase: "'['"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                is_ignored: False
                                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                  begin: "[1, 14] (13)"
                                                  end: "[1, 15] (14)"
                                                token: "Lower"
                                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                  match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                              phrase: "Lower"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                              begin: "[1, 15] (14)"
                                              end: "[1, 16] (15)"
                                            token: "']'"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                          phrase: "']'"
                                      phrase: "Index"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 16] (15)"
                                      end: "[1, 17] (16)"
                                    token: "'['"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                                  phrase: "'['"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                          begin: "[1, 17] (16)"
                                          end: "[1, 18] (17)"
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 18] (17)"
                                      end: "[1, 19] (18)"
                                    token: "']'"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                                  phrase: "']'"
                              phrase: "Index"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                      phrase: "Add"
                    phrase: "All Phrases"
                  phrase: "Dynamic Phrase"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 19] (18)"
                    end: "[1, 20] (19)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 18
                      end: 19
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 20] (19)"
                      end: "[1, 21] (20)"
                    token: "'+'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                  phrase: "'+'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 21] (20)"
                    end: "[1, 22] (21)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 20
                      end: 21
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 22] (21)"
                          end: "[1, 27] (26)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
              phrase: "Add"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 27] (26)"
            end: "[1, 28] (27)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 26
              end: 27
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 28] (27)"
              end: "[1, 29] (28)"
            token: "'+'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
          phrase: "'+'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 29] (28)"
            end: "[1, 30] (29)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 28
              end: 29
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 30] (29)"
                          end: "[1, 34] (33)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 34] (33)"
                    end: "[1, 35] (34)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 33
                      end: 34
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 35] (34)"
                      end: "[1, 37] (36)"
                    token: "'if'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                  phrase: "'if'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 37] (36)"
                    end: "[1, 38] (37)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 36
                      end: 37
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 38] (37)"
                          end: "[1, 47] (46)"
                        token: "Upper"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                      phrase: "Upper"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 47] (46)"
                    end: "[1, 48] (47)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 46
                      end: 47
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 48] (47)"
                      end: "[1, 52] (51)"
                    token: "'else'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                  phrase: "'else'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 52] (51)"
                    end: "[1, 53] (52)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 51
                      end: 52
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 53] (52)"
                          end: "[1, 57] (56)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
              phrase: "Ter"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Add"
    phrase: "All Phrases <Suffix>"
312) EndPhrase, "All Phrases <Suffix>" [True]
313) StartPhrase, "All Phrases <Suffix>"
314) StartPhrase, "'+'"
315) EndPhrase, "'+'" [False]
316) StartPhrase, "'-'"
317) EndPhrase, "'-'" [False]
318) StartPhrase, "'*'"
319) EndPhrase, "'*'" [False]
320) StartPhrase, "'/'"
321) EndPhrase, "'/'" [False]
322) StartPhrase, "'if'"
323) EndPhrase, "'if'" [False]
324) StartPhrase, "'['"
325) EndPhrase, "'['" [False]
326) EndPhrase, "All Phrases <Suffix>" [False]
327) OnInternalPhrase, 21, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data:
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: False
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 1] (0)"
                                    end: "[1, 4] (3)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "Dynamic Phrase"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 4] (3)"
                              end: "[1, 5] (4)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 3
                                end: 4
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 5] (4)"
                                end: "[1, 6] (5)"
                              token: "'+'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                            phrase: "'+'"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 6] (5)"
                              end: "[1, 7] (6)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 5
                                end: 6
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data:
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data:
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data:
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          is_ignored: False
                                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                            begin: "[1, 7] (6)"
                                                            end: "[1, 10] (9)"
                                                          token: "Lower"
                                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                            match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                        phrase: "Lower"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 10] (9)"
                                                        end: "[1, 11] (10)"
                                                      token: "'['"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                                    phrase: "'['"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          is_ignored: False
                                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                            begin: "[1, 11] (10)"
                                                            end: "[1, 12] (11)"
                                                          token: "Lower"
                                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                            match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                        phrase: "Lower"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 12] (11)"
                                                        end: "[1, 13] (12)"
                                                      token: "']'"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                                    phrase: "']'"
                                                phrase: "Index"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 13] (12)"
                                                end: "[1, 14] (13)"
                                              token: "'['"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                            phrase: "'['"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  is_ignored: False
                                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                    begin: "[1, 14] (13)"
                                                    end: "[1, 15] (14)"
                                                  token: "Lower"
                                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                    match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                                phrase: "Lower"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 15] (14)"
                                                end: "[1, 16] (15)"
                                              token: "']'"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                            phrase: "']'"
                                        phrase: "Index"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 16] (15)"
                                        end: "[1, 17] (16)"
                                      token: "'['"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                                    phrase: "'['"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          is_ignored: False
                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                            begin: "[1, 17] (16)"
                                            end: "[1, 18] (17)"
                                          token: "Lower"
                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                            match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                        phrase: "Lower"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 18] (17)"
                                        end: "[1, 19] (18)"
                                      token: "']'"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                                    phrase: "']'"
                                phrase: "Index"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                        phrase: "Add"
                      phrase: "All Phrases"
                    phrase: "Dynamic Phrase"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 19] (18)"
                      end: "[1, 20] (19)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 18
                        end: 19
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 20] (19)"
                        end: "[1, 21] (20)"
                      token: "'+'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                    phrase: "'+'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 21] (20)"
                      end: "[1, 22] (21)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 20
                        end: 21
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 22] (21)"
                            end: "[1, 27] (26)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Add"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 27] (26)"
              end: "[1, 28] (27)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 26
                end: 27
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: False
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 28] (27)"
                end: "[1, 29] (28)"
              token: "'+'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            phrase: "'+'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 29] (28)"
              end: "[1, 30] (29)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 28
                end: 29
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 30] (29)"
                            end: "[1, 34] (33)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 34] (33)"
                      end: "[1, 35] (34)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 33
                        end: 34
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 35] (34)"
                        end: "[1, 37] (36)"
                      token: "'if'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                    phrase: "'if'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 37] (36)"
                      end: "[1, 38] (37)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 36
                        end: 37
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 38] (37)"
                            end: "[1, 47] (46)"
                          token: "Upper"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                        phrase: "Upper"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 47] (46)"
                      end: "[1, 48] (47)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 46
                        end: 47
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 48] (47)"
                        end: "[1, 52] (51)"
                      token: "'else'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                    phrase: "'else'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 52] (51)"
                      end: "[1, 53] (52)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 51
                        end: 52
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 53] (52)"
                            end: "[1, 57] (56)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Ter"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
        phrase: "Add"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
328) EndPhrase, "DynamicPhrasesType.Statements" [True]
329) StartPhrase, "'-'"
330) EndPhrase, "'-'" [False]
331) StartPhrase, "'*'"
332) EndPhrase, "'*'" [False]
333) StartPhrase, "'/'"
334) EndPhrase, "'/'" [False]
335) StartPhrase, "'if'"
336) EndPhrase, "'if'" [False]
337) StartPhrase, "'['"
338) EndPhrase, "'['" [False]
339) OnInternalPhrase, 18, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 1] (0)"
                          end: "[1, 4] (3)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "Dynamic Phrase"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 4] (3)"
                    end: "[1, 5] (4)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 3
                      end: 4
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 5] (4)"
                      end: "[1, 6] (5)"
                    token: "'+'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                  phrase: "'+'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 6] (5)"
                    end: "[1, 7] (6)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 5
                      end: 6
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data:
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data:
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                is_ignored: False
                                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                  begin: "[1, 7] (6)"
                                                  end: "[1, 10] (9)"
                                                token: "Lower"
                                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                  match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                              phrase: "Lower"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                              begin: "[1, 10] (9)"
                                              end: "[1, 11] (10)"
                                            token: "'['"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                          phrase: "'['"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                is_ignored: False
                                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                  begin: "[1, 11] (10)"
                                                  end: "[1, 12] (11)"
                                                token: "Lower"
                                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                  match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                              phrase: "Lower"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                              begin: "[1, 12] (11)"
                                              end: "[1, 13] (12)"
                                            token: "']'"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                          phrase: "']'"
                                      phrase: "Index"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 13] (12)"
                                      end: "[1, 14] (13)"
                                    token: "'['"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                  phrase: "'['"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                          begin: "[1, 14] (13)"
                                          end: "[1, 15] (14)"
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 15] (14)"
                                      end: "[1, 16] (15)"
                                    token: "']'"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                  phrase: "']'"
                              phrase: "Index"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 16] (15)"
                              end: "[1, 17] (16)"
                            token: "'['"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                          phrase: "'['"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 17] (16)"
                                  end: "[1, 18] (17)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 18] (17)"
                              end: "[1, 19] (18)"
                            token: "']'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                          phrase: "']'"
                      phrase: "Index"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
              phrase: "Add"
            phrase: "All Phrases"
          phrase: "Dynamic Phrase"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 19] (18)"
            end: "[1, 20] (19)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 18
              end: 19
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 20] (19)"
              end: "[1, 21] (20)"
            token: "'+'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
          phrase: "'+'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 21] (20)"
            end: "[1, 22] (21)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 20
              end: 21
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 22] (21)"
                  end: "[1, 27] (26)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Add"
    phrase: "All Phrases <Suffix>"
340) EndPhrase, "All Phrases <Suffix>" [True]
341) StartPhrase, "All Phrases <Suffix>"
342) StartPhrase, "'+'"
343) EndPhrase, "'+'" [False]
344) StartPhrase, "'-'"
345) EndPhrase, "'-'" [False]
346) StartPhrase, "'*'"
347) EndPhrase, "'*'" [False]
348) StartPhrase, "'/'"
349) EndPhrase, "'/'" [False]
350) StartPhrase, "'if'"
351) EndPhrase, "'if'" [False]
352) StartPhrase, "'['"
353) EndPhrase, "'['" [False]
354) EndPhrase, "All Phrases <Suffix>" [False]
355) OnInternalPhrase, 6, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data:
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: False
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 1] (0)"
                                    end: "[1, 4] (3)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "Dynamic Phrase"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 4] (3)"
                              end: "[1, 5] (4)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 3
                                end: 4
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 5] (4)"
                                end: "[1, 6] (5)"
                              token: "'+'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                            phrase: "'+'"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 6] (5)"
                              end: "[1, 7] (6)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 5
                                end: 6
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data:
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data:
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data:
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          is_ignored: False
                                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                            begin: "[1, 7] (6)"
                                                            end: "[1, 10] (9)"
                                                          token: "Lower"
                                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                            match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                        phrase: "Lower"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 10] (9)"
                                                        end: "[1, 11] (10)"
                                                      token: "'['"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                                    phrase: "'['"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          is_ignored: False
                                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                            begin: "[1, 11] (10)"
                                                            end: "[1, 12] (11)"
                                                          token: "Lower"
                                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                            match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                        phrase: "Lower"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 12] (11)"
                                                        end: "[1, 13] (12)"
                                                      token: "']'"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                                    phrase: "']'"
                                                phrase: "Index"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 13] (12)"
                                                end: "[1, 14] (13)"
                                              token: "'['"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                            phrase: "'['"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  is_ignored: False
                                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                    begin: "[1, 14] (13)"
                                                    end: "[1, 15] (14)"
                                                  token: "Lower"
                                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                    match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                                phrase: "Lower"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 15] (14)"
                                                end: "[1, 16] (15)"
                                              token: "']'"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                            phrase: "']'"
                                        phrase: "Index"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 16] (15)"
                                        end: "[1, 17] (16)"
                                      token: "'['"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                                    phrase: "'['"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          is_ignored: False
                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                            begin: "[1, 17] (16)"
                                            end: "[1, 18] (17)"
                                          token: "Lower"
                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                            match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                        phrase: "Lower"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 18] (17)"
                                        end: "[1, 19] (18)"
                                      token: "']'"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                                    phrase: "']'"
                                phrase: "Index"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                        phrase: "Add"
                      phrase: "All Phrases"
                    phrase: "Dynamic Phrase"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 19] (18)"
                      end: "[1, 20] (19)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 18
                        end: 19
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 20] (19)"
                        end: "[1, 21] (20)"
                      token: "'+'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                    phrase: "'+'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 21] (20)"
                      end: "[1, 22] (21)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 20
                        end: 21
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 22] (21)"
                            end: "[1, 27] (26)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Add"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 27] (26)"
              end: "[1, 28] (27)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 26
                end: 27
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: False
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 28] (27)"
                end: "[1, 29] (28)"
              token: "'+'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            phrase: "'+'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 29] (28)"
              end: "[1, 30] (29)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 28
                end: 29
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 30] (29)"
                            end: "[1, 34] (33)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 34] (33)"
                      end: "[1, 35] (34)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 33
                        end: 34
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 35] (34)"
                        end: "[1, 37] (36)"
                      token: "'if'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                    phrase: "'if'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 37] (36)"
                      end: "[1, 38] (37)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 36
                        end: 37
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 38] (37)"
                            end: "[1, 47] (46)"
                          token: "Upper"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                        phrase: "Upper"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 47] (46)"
                      end: "[1, 48] (47)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 46
                        end: 47
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 48] (47)"
                        end: "[1, 52] (51)"
                      token: "'else'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                    phrase: "'else'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 52] (51)"
                      end: "[1, 53] (52)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 51
                        end: 52
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 53] (52)"
                            end: "[1, 57] (56)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Ter"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
        phrase: "Add"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
356) EndPhrase, "DynamicPhrasesType.Statements" [True]
357) StartPhrase, "'-'"
358) EndPhrase, "'-'" [False]
359) StartPhrase, "'*'"
360) EndPhrase, "'*'" [False]
361) StartPhrase, "'/'"
362) EndPhrase, "'/'" [False]
363) StartPhrase, "'if'"
364) EndPhrase, "'if'" [False]
365) StartPhrase, "'['"
366) EndPhrase, "'['" [False]
367) OnInternalPhrase, 3, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 1] (0)"
                  end: "[1, 4] (3)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "Dynamic Phrase"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 4] (3)"
            end: "[1, 5] (4)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 3
              end: 4
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 5] (4)"
              end: "[1, 6] (5)"
            token: "'+'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
          phrase: "'+'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 6] (5)"
            end: "[1, 7] (6)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 5
              end: 6
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data:
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                          begin: "[1, 7] (6)"
                                          end: "[1, 10] (9)"
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 10] (9)"
                                      end: "[1, 11] (10)"
                                    token: "'['"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                  phrase: "'['"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                          begin: "[1, 11] (10)"
                                          end: "[1, 12] (11)"
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 12] (11)"
                                      end: "[1, 13] (12)"
                                    token: "']'"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                  phrase: "']'"
                              phrase: "Index"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 13] (12)"
                              end: "[1, 14] (13)"
                            token: "'['"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                          phrase: "'['"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 14] (13)"
                                  end: "[1, 15] (14)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 15] (14)"
                              end: "[1, 16] (15)"
                            token: "']'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                          phrase: "']'"
                      phrase: "Index"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 16] (15)"
                      end: "[1, 17] (16)"
                    token: "'['"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                  phrase: "'['"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 17] (16)"
                          end: "[1, 18] (17)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 18] (17)"
                      end: "[1, 19] (18)"
                    token: "']'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                  phrase: "']'"
              phrase: "Index"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Add"
    phrase: "All Phrases <Suffix>"
368) EndPhrase, "All Phrases <Suffix>" [True]
369) StartPhrase, "All Phrases <Suffix>"
370) StartPhrase, "'+'"
371) EndPhrase, "'+'" [False]
372) StartPhrase, "'-'"
373) EndPhrase, "'-'" [False]
374) StartPhrase, "'*'"
375) EndPhrase, "'*'" [False]
376) StartPhrase, "'/'"
377) EndPhrase, "'/'" [False]
378) StartPhrase, "'if'"
379) EndPhrase, "'if'" [False]
380) StartPhrase, "'['"
381) EndPhrase, "'['" [False]
382) EndPhrase, "All Phrases <Suffix>" [False]
383) OnInternalPhrase, 0, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data:
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: False
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 1] (0)"
                                    end: "[1, 4] (3)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "Dynamic Phrase"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 4] (3)"
                              end: "[1, 5] (4)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 3
                                end: 4
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 5] (4)"
                                end: "[1, 6] (5)"
                              token: "'+'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                            phrase: "'+'"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 6] (5)"
                              end: "[1, 7] (6)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 5
                                end: 6
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data:
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data:
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data:
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          is_ignored: False
                                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                            begin: "[1, 7] (6)"
                                                            end: "[1, 10] (9)"
                                                          token: "Lower"
                                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                            match: "<_sre.SRE_Match object; span=(6, 9), match='var'>"
                                                        phrase: "Lower"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 10] (9)"
                                                        end: "[1, 11] (10)"
                                                      token: "'['"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(9, 10), match='['>"
                                                    phrase: "'['"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          is_ignored: False
                                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                            begin: "[1, 11] (10)"
                                                            end: "[1, 12] (11)"
                                                          token: "Lower"
                                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                            match: "<_sre.SRE_Match object; span=(10, 11), match='a'>"
                                                        phrase: "Lower"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 12] (11)"
                                                        end: "[1, 13] (12)"
                                                      token: "']'"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(11, 12), match=']'>"
                                                    phrase: "']'"
                                                phrase: "Index"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 13] (12)"
                                                end: "[1, 14] (13)"
                                              token: "'['"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(12, 13), match='['>"
                                            phrase: "'['"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  is_ignored: False
                                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                    begin: "[1, 14] (13)"
                                                    end: "[1, 15] (14)"
                                                  token: "Lower"
                                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                    match: "<_sre.SRE_Match object; span=(13, 14), match='b'>"
                                                phrase: "Lower"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 15] (14)"
                                                end: "[1, 16] (15)"
                                              token: "']'"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(14, 15), match=']'>"
                                            phrase: "']'"
                                        phrase: "Index"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 16] (15)"
                                        end: "[1, 17] (16)"
                                      token: "'['"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(15, 16), match='['>"
                                    phrase: "'['"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          is_ignored: False
                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                            begin: "[1, 17] (16)"
                                            end: "[1, 18] (17)"
                                          token: "Lower"
                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                            match: "<_sre.SRE_Match object; span=(16, 17), match='c'>"
                                        phrase: "Lower"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 18] (17)"
                                        end: "[1, 19] (18)"
                                      token: "']'"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(17, 18), match=']'>"
                                    phrase: "']'"
                                phrase: "Index"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                        phrase: "Add"
                      phrase: "All Phrases"
                    phrase: "Dynamic Phrase"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 19] (18)"
                      end: "[1, 20] (19)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 18
                        end: 19
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 20] (19)"
                        end: "[1, 21] (20)"
                      token: "'+'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(19, 20), match='+'>"
                    phrase: "'+'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 21] (20)"
                      end: "[1, 22] (21)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 20
                        end: 21
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 22] (21)"
                            end: "[1, 27] (26)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(21, 26), match='three'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Add"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 27] (26)"
              end: "[1, 28] (27)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 26
                end: 27
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: False
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 28] (27)"
                end: "[1, 29] (28)"
              token: "'+'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(27, 28), match='+'>"
            phrase: "'+'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 29] (28)"
              end: "[1, 30] (29)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 28
                end: 29
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 30] (29)"
                            end: "[1, 34] (33)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(29, 33), match='four'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 34] (33)"
                      end: "[1, 35] (34)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 33
                        end: 34
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 35] (34)"
                        end: "[1, 37] (36)"
                      token: "'if'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(34, 36), match='if'>"
                    phrase: "'if'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 37] (36)"
                      end: "[1, 38] (37)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 36
                        end: 37
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 38] (37)"
                            end: "[1, 47] (46)"
                          token: "Upper"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(37, 46), match='CONDITION'>"
                        phrase: "Upper"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 47] (46)"
                      end: "[1, 48] (47)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 46
                        end: 47
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 48] (47)"
                        end: "[1, 52] (51)"
                      token: "'else'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(47, 51), match='else'>"
                    phrase: "'else'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 52] (51)"
                      end: "[1, 53] (52)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 51
                        end: 52
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 53] (52)"
                            end: "[1, 57] (56)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(52, 56), match='five'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Ter"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
        phrase: "Add"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
384) EndPhrase, "Dynamic Phrase" [True]
