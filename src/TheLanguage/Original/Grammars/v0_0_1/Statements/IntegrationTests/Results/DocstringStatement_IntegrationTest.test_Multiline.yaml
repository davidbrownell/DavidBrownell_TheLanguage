# <class 'TheLanguage.Lexer.Components.AST.Node'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[5, 4] (20)"
                Type: "Multi-line Content <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 20), match='<<<\\nMulti\\nline\\n1\\n>>>'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 4] (20)"
                IterEnd: "[7, 1] (22)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 22
                  Start: 20
                Whitespace: None
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[7, 1] (22)"
            Type: "Docstring Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[7, 1] (22)"
        Type: "0.0.1 Grammar Statements <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[7, 1] (22)"
    Type: "Dynamic Phrase <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[7, 1] (22)"
                    IterEnd: "[7, 6] (27)"
                    Type: "'class' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(22, 27), match='class'>"
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[7, 1] (22)"
                IterEnd: "[7, 6] (27)"
                Type: "Class Type <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 7] (28)"
                IterEnd: "[7, 10] (31)"
                Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(28, 31), match='Foo'>"
                Whitespace:
                  - 27
                  - 28
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 10] (31)"
                IterEnd: "[7, 11] (32)"
                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(31, 32), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 11] (32)"
                IterEnd: "[7, 12] (33)"
                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(32, 33), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[7, 12] (33)"
                    IterEnd: "[7, 13] (34)"
                    Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(33, 34), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[7, 13] (34)"
                            IterEnd: "[8, 1] (35)"
                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                              End: 35
                              Start: 34
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[8, 1] (35)"
                            IterEnd: "[8, 5] (39)"
                            Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                              End: 39
                              Start: 35
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[8, 5] (39)"
                                            IterEnd: "[13, 8] (95)"
                                            Type: "Multi-line Content <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(39, 95), match='<<<\\n    Multi\\n    line\\n        **1**\\n      **>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[13, 8] (95)"
                                            IterEnd: "[14, 1] (96)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 96
                                              Start: 95
                                            Whitespace: None
                                        IsIgnored: False
                                        IterBegin: "[8, 5] (39)"
                                        IterEnd: "[14, 1] (96)"
                                        Type: "Docstring Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IsIgnored: False
                                    IterBegin: "[8, 5] (39)"
                                    IterEnd: "[14, 1] (96)"
                                    Type: "0.0.1 Grammar Statements <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IsIgnored: False
                                IterBegin: "[8, 5] (39)"
                                IterEnd: "[14, 1] (96)"
                                Type: "DynamicPhrasesType.Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[14, 5] (100)"
                                            IterEnd: "[14, 9] (104)"
                                            Type: "'pass' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(100, 104), match='pass'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[14, 9] (104)"
                                            IterEnd: "[16, 1] (106)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 106
                                              Start: 104
                                            Whitespace: None
                                        IsIgnored: False
                                        IterBegin: "[14, 5] (100)"
                                        IterEnd: "[16, 1] (106)"
                                        Type: "Pass Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IsIgnored: False
                                    IterBegin: "[14, 5] (100)"
                                    IterEnd: "[16, 1] (106)"
                                    Type: "0.0.1 Grammar Statements <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IsIgnored: False
                                IterBegin: "[14, 5] (100)"
                                IterEnd: "[16, 1] (106)"
                                Type: "DynamicPhrasesType.Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IsIgnored: False
                            IterBegin: "[8, 5] (39)"
                            IterEnd: "[16, 1] (106)"
                            Type: "Statements <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[16, 1] (106)"
                            IterEnd: "[16, 1] (106)"
                            Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IsIgnored: False
                        IterBegin: "[7, 13] (34)"
                        IterEnd: "[16, 1] (106)"
                        Type: "Multi-line <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IsIgnored: False
                    IterBegin: "[7, 13] (34)"
                    IterEnd: "[16, 1] (106)"
                    Type: "(Multi-line | DynamicPhrasesType.Statements) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IsIgnored: False
                IterBegin: "[7, 12] (33)"
                IterEnd: "[16, 1] (106)"
                Type: "Statements <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            IsIgnored: False
            IterBegin: "[7, 1] (22)"
            IterEnd: "[16, 1] (106)"
            Type: "Class Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[7, 1] (22)"
        IterEnd: "[16, 1] (106)"
        Type: "0.0.1 Grammar Statements <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[7, 1] (22)"
    IterEnd: "[16, 1] (106)"
    Type: "Dynamic Phrase <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[16, 1] (106)"
                    IterEnd: "[16, 6] (111)"
                    Type: "'class' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(106, 111), match='class'>"
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[16, 1] (106)"
                IterEnd: "[16, 6] (111)"
                Type: "Class Type <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[16, 7] (112)"
                IterEnd: "[16, 10] (115)"
                Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(112, 115), match='Bar'>"
                Whitespace:
                  - 111
                  - 112
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[16, 10] (115)"
                IterEnd: "[16, 11] (116)"
                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(115, 116), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[16, 11] (116)"
                IterEnd: "[16, 12] (117)"
                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(116, 117), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[16, 12] (117)"
                    IterEnd: "[16, 13] (118)"
                    Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(117, 118), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[16, 13] (118)"
                            IterEnd: "[17, 1] (119)"
                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                              End: 119
                              Start: 118
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[17, 1] (119)"
                            IterEnd: "[17, 5] (123)"
                            Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                              End: 123
                              Start: 119
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[17, 5] (123)"
                                            IterEnd: "[22, 8] (173)"
                                            Type: "Multi-line Content <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(123, 173), match='<<<\\n    With\\n    escape\\n    \\\\>>>\\n    more.\\n>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[22, 8] (173)"
                                            IterEnd: "[23, 1] (174)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 174
                                              Start: 173
                                            Whitespace: None
                                        IsIgnored: False
                                        IterBegin: "[17, 5] (123)"
                                        IterEnd: "[23, 1] (174)"
                                        Type: "Docstring Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IsIgnored: False
                                    IterBegin: "[17, 5] (123)"
                                    IterEnd: "[23, 1] (174)"
                                    Type: "0.0.1 Grammar Statements <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IsIgnored: False
                                IterBegin: "[17, 5] (123)"
                                IterEnd: "[23, 1] (174)"
                                Type: "DynamicPhrasesType.Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[23, 5] (178)"
                                            IterEnd: "[23, 9] (182)"
                                            Type: "'pass' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(178, 182), match='pass'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[23, 9] (182)"
                                            IterEnd: "[24, 1] (183)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 183
                                              Start: 182
                                            Whitespace: None
                                        IsIgnored: False
                                        IterBegin: "[23, 5] (178)"
                                        IterEnd: "[24, 1] (183)"
                                        Type: "Pass Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IsIgnored: False
                                    IterBegin: "[23, 5] (178)"
                                    IterEnd: "[24, 1] (183)"
                                    Type: "0.0.1 Grammar Statements <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IsIgnored: False
                                IterBegin: "[23, 5] (178)"
                                IterEnd: "[24, 1] (183)"
                                Type: "DynamicPhrasesType.Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IsIgnored: False
                            IterBegin: "[17, 5] (123)"
                            IterEnd: "[24, 1] (183)"
                            Type: "Statements <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[24, 1] (183)"
                            IterEnd: "[24, 1] (183)"
                            Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IsIgnored: False
                        IterBegin: "[16, 13] (118)"
                        IterEnd: "[24, 1] (183)"
                        Type: "Multi-line <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IsIgnored: False
                    IterBegin: "[16, 13] (118)"
                    IterEnd: "[24, 1] (183)"
                    Type: "(Multi-line | DynamicPhrasesType.Statements) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IsIgnored: False
                IterBegin: "[16, 12] (117)"
                IterEnd: "[24, 1] (183)"
                Type: "Statements <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            IsIgnored: False
            IterBegin: "[16, 1] (106)"
            IterEnd: "[24, 1] (183)"
            Type: "Class Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[16, 1] (106)"
        IterEnd: "[24, 1] (183)"
        Type: "0.0.1 Grammar Statements <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[16, 1] (106)"
    IterEnd: "[24, 1] (183)"
    Type: "Dynamic Phrase <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[24, 1] (183)"
Type: "<None>"
