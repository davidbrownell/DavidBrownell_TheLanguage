# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 3] (2)"
                Type: "'if' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 2), match='if'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 5] (4)"
                                    IterEnd: "[1, 10] (9)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(4, 9), match='cond1'>"
                                    Whitespace:
                                      - 2
                                      - 4
                                Info: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                  Name: "cond1"
                                IterBegin: "[1, 5] (4)"
                                IterEnd: "[1, 10] (9)"
                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 5] (4)"
                            IterEnd: "[1, 10] (9)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[1, 5] (4)"
                        IterEnd: "[1, 10] (9)"
                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[1, 5] (4)"
                    IterEnd: "[1, 10] (9)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 5] (4)"
                IterEnd: "[1, 10] (9)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 10] (9)"
                    IterEnd: "[1, 11] (10)"
                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(9, 10), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 11] (10)"
                            IterEnd: "[2, 1] (11)"
                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                              End: 11
                              Start: 10
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 1] (11)"
                            IterEnd: "[2, 5] (15)"
                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                              End: 15
                              Start: 11
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 5] (15)"
                                            IterEnd: "[2, 11] (21)"
                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(15, 21), match='Func1a'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 11] (21)"
                                                IterEnd: "[2, 12] (22)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(21, 22), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 12] (22)"
                                                IterEnd: "[2, 13] (23)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(22, 23), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[2, 11] (21)"
                                            IterEnd: "[2, 13] (23)"
                                            Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 13] (23)"
                                            IterEnd: "[4, 1] (25)"
                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                              End: 25
                                              Start: 23
                                            Whitespace: None
                                        IterBegin: "[2, 5] (15)"
                                        IterEnd: "[4, 1] (25)"
                                        Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[2, 5] (15)"
                                    IterEnd: "[4, 1] (25)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 5] (15)"
                                IterEnd: "[4, 1] (25)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[2, 5] (15)"
                            IterEnd: "[4, 1] (25)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 1] (25)"
                            IterEnd: "[4, 1] (25)"
                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[1, 11] (10)"
                        IterEnd: "[4, 1] (25)"
                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 11] (10)"
                    IterEnd: "[4, 1] (25)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 10] (9)"
                IterEnd: "[4, 1] (25)"
                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[4, 1] (25)"
            Type: "If Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[4, 1] (25)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[4, 1] (25)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 1] (25)"
                IterEnd: "[4, 3] (27)"
                Type: "'if' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(25, 27), match='if'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 4] (28)"
                                    IterEnd: "[4, 9] (33)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(28, 33), match='cond2'>"
                                    Whitespace:
                                      - 27
                                      - 28
                                Info: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                  Name: "cond2"
                                IterBegin: "[4, 4] (28)"
                                IterEnd: "[4, 9] (33)"
                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[4, 4] (28)"
                            IterEnd: "[4, 9] (33)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[4, 4] (28)"
                        IterEnd: "[4, 9] (33)"
                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[4, 4] (28)"
                    IterEnd: "[4, 9] (33)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[4, 4] (28)"
                IterEnd: "[4, 9] (33)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[4, 9] (33)"
                    IterEnd: "[4, 10] (34)"
                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(33, 34), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[4, 10] (34)"
                            IterEnd: "[5, 1] (35)"
                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                              End: 35
                              Start: 34
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[5, 1] (35)"
                            IterEnd: "[5, 5] (39)"
                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                              End: 39
                              Start: 35
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[5, 5] (39)"
                                            IterEnd: "[5, 11] (45)"
                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(39, 45), match='Func2a'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[5, 11] (45)"
                                                IterEnd: "[5, 12] (46)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(45, 46), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[5, 12] (46)"
                                                IterEnd: "[5, 13] (47)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(46, 47), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[5, 11] (45)"
                                            IterEnd: "[5, 13] (47)"
                                            Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[5, 13] (47)"
                                            IterEnd: "[6, 1] (48)"
                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                              End: 48
                                              Start: 47
                                            Whitespace: None
                                        IterBegin: "[5, 5] (39)"
                                        IterEnd: "[6, 1] (48)"
                                        Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[5, 5] (39)"
                                    IterEnd: "[6, 1] (48)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[5, 5] (39)"
                                IterEnd: "[6, 1] (48)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[6, 5] (52)"
                                            IterEnd: "[6, 11] (58)"
                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(52, 58), match='Func2b'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[6, 11] (58)"
                                                IterEnd: "[6, 12] (59)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(58, 59), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[6, 12] (59)"
                                                IterEnd: "[6, 13] (60)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(59, 60), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[6, 11] (58)"
                                            IterEnd: "[6, 13] (60)"
                                            Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[6, 13] (60)"
                                            IterEnd: "[8, 1] (62)"
                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                              End: 62
                                              Start: 60
                                            Whitespace: None
                                        IterBegin: "[6, 5] (52)"
                                        IterEnd: "[8, 1] (62)"
                                        Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[6, 5] (52)"
                                    IterEnd: "[8, 1] (62)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[6, 5] (52)"
                                IterEnd: "[8, 1] (62)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[8, 5] (66)"
                                            IterEnd: "[8, 11] (72)"
                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(66, 72), match='Func2c'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[8, 11] (72)"
                                                IterEnd: "[8, 12] (73)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(72, 73), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[8, 12] (73)"
                                                IterEnd: "[8, 13] (74)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(73, 74), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[8, 11] (72)"
                                            IterEnd: "[8, 13] (74)"
                                            Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[8, 13] (74)"
                                            IterEnd: "[9, 1] (75)"
                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                              End: 75
                                              Start: 74
                                            Whitespace: None
                                        IterBegin: "[8, 5] (66)"
                                        IterEnd: "[9, 1] (75)"
                                        Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[8, 5] (66)"
                                    IterEnd: "[9, 1] (75)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[8, 5] (66)"
                                IterEnd: "[9, 1] (75)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[5, 5] (39)"
                            IterEnd: "[9, 1] (75)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[9, 1] (75)"
                            IterEnd: "[9, 1] (75)"
                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[4, 10] (34)"
                        IterEnd: "[9, 1] (75)"
                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[4, 10] (34)"
                    IterEnd: "[9, 1] (75)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[4, 9] (33)"
                IterEnd: "[9, 1] (75)"
                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
            IterBegin: "[4, 1] (25)"
            IterEnd: "[9, 1] (75)"
            Type: "If Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[4, 1] (25)"
        IterEnd: "[9, 1] (75)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[4, 1] (25)"
    IterEnd: "[9, 1] (75)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[9, 1] (75)"
Type: "<None>"
