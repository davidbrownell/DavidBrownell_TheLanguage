0) StartPhrase, "Phrases"
1) StartPhrase, "Lower", "Phrases"
2) EndPhrase, "Lower" [False], "Phrases" [None]
3) StartPhrase, "Upper", "Phrases"
4) OnInternalPhraseAsync, 0, 4
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 1] (0)"
      IterEnd: "[1, 5] (4)"
      Token: "Upper"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(0, 4), match='TRUE'>"
      Whitespace: None
    Phrase: "Upper"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
      IsComplete: False
    Phrase: "Phrases"
5) EndPhrase, "Upper" [True], "Phrases" [None]
6) OnInternalPhraseAsync, 0, 4
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[1, 5] (4)"
        Token: "Upper"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(0, 4), match='TRUE'>"
        Whitespace: None
      Phrase: "Upper"
    Phrase: "Phrases"
7) EndPhrase, "Phrases" [True]
8) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>"
9) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
10) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
11) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>"
12) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
13) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>"
14) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
15) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>"
16) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
17) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
18) OnInternalPhraseAsync, 5, 7
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 6] (5)"
      IterEnd: "[1, 8] (7)"
      Token: "'if'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
      Whitespace:
        - 4
        - 5
    Phrase: "'if'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
19) EndPhrase, "'if'" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
20) StartPhrase, "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
21) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
22) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
23) OnInternalPhraseAsync, 8, 11
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 9] (8)"
      IterEnd: "[1, 12] (11)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
      Whitespace:
        - 7
        - 8
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
24) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
25) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
26) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
27) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
28) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
29) OnInternalPhraseAsync, 8, 11
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 9] (8)"
      IterEnd: "[1, 12] (11)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
      Whitespace:
        - 7
        - 8
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
30) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
31) OnInternalPhraseAsync, 7, 11
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 9] (8)"
        IterEnd: "[1, 12] (11)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
        Whitespace:
          - 7
          - 8
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
32) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
33) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
34) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
35) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
36) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
37) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
38) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
39) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
40) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
41) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
42) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
43) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
44) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
45) OnInternalPhraseAsync, 11, 12
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 12] (11)"
      IterEnd: "[1, 13] (12)"
      Token: "'['"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
      Whitespace: None
    Phrase: "'['"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
46) EndPhrase, "'['" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
47) StartPhrase, "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
48) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
49) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
50) OnInternalPhraseAsync, 12, 13
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 13] (12)"
      IterEnd: "[1, 14] (13)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 13] (12)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
51) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
52) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
53) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
54) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
55) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
56) OnInternalPhraseAsync, 12, 13
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 13] (12)"
      IterEnd: "[1, 14] (13)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 13] (12)"
            IterEnd: "[1, 14] (13)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 13] (12)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
57) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
58) OnInternalPhraseAsync, 12, 13
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 13] (12)"
        IterEnd: "[1, 14] (13)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 13] (12)"
            IterEnd: "[1, 14] (13)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 13] (12)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
59) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
60) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
61) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
62) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
63) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
64) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
65) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
66) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
67) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
68) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
69) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
70) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
71) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
72) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
73) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
74) OnInternalPhraseAsync, 12, 13
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 13] (12)"
        IterEnd: "[1, 14] (13)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 13] (12)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
75) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
76) OnInternalPhraseAsync, 12, 13
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
          IsIgnored: False
          IterBegin: "[1, 13] (12)"
          IterEnd: "[1, 14] (13)"
          Token: "Lower"
          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 13] (12)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
77) EndPhrase, "DynamicPhrasesType.Statements" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
78) StartPhrase, "']'", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
79) OnInternalPhraseAsync, 13, 14
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 14] (13)"
      IterEnd: "[1, 15] (14)"
      Token: "']'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
      Whitespace: None
    Phrase: "']'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 13] (12)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
            Whitespace: None
          Phrase: "'['"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 13] (12)"
                IterEnd: "[1, 14] (13)"
                Token: "Lower"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                Whitespace: None
              Phrase: "Lower"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
80) EndPhrase, "']'" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
81) OnInternalPhraseAsync, 11, 14
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 9] (8)"
                  IterEnd: "[1, 12] (11)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                  Whitespace:
                    - 7
                    - 8
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 12] (11)"
              IterEnd: "[1, 13] (12)"
              Token: "'['"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 13] (12)"
                  IterEnd: "[1, 14] (13)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 14] (13)"
              IterEnd: "[1, 15] (14)"
              Token: "']'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
82) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
83) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
84) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
85) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
86) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
87) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
88) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
89) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
90) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
91) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
92) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
93) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
94) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
95) OnInternalPhraseAsync, 14, 15
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 15] (14)"
      IterEnd: "[1, 16] (15)"
      Token: "'['"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
      Whitespace: None
    Phrase: "'['"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
96) EndPhrase, "'['" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
97) StartPhrase, "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
98) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
99) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
100) OnInternalPhraseAsync, 15, 18
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 16] (15)"
      IterEnd: "[1, 19] (18)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
101) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
102) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
103) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
104) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
105) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
106) OnInternalPhraseAsync, 15, 18
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 16] (15)"
      IterEnd: "[1, 19] (18)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
107) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
108) OnInternalPhraseAsync, 15, 18
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 16] (15)"
        IterEnd: "[1, 19] (18)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
109) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
110) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
111) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
112) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
113) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
114) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
115) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
116) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
117) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
118) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
119) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
120) OnInternalPhraseAsync, 19, 21
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 20] (19)"
      IterEnd: "[1, 22] (21)"
      Token: "'if'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
      Whitespace:
        - 18
        - 19
    Phrase: "'if'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
121) EndPhrase, "'if'" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
122) StartPhrase, "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
123) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
124) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
125) EndPhrase, "Lower" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
126) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
127) OnInternalPhraseAsync, 22, 31
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 23] (22)"
      IterEnd: "[1, 32] (31)"
      Token: "Upper"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
      Whitespace:
        - 21
        - 22
    Phrase: "Upper"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 22] (21)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
128) EndPhrase, "Upper" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
129) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
130) StartPhrase, "Upper", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
131) OnInternalPhraseAsync, 22, 31
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 23] (22)"
      IterEnd: "[1, 32] (31)"
      Token: "Upper"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
      Whitespace:
        - 21
        - 22
    Phrase: "Upper"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 23] (22)"
            IterEnd: "[1, 32] (31)"
            Token: "Upper"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
            Whitespace:
              - 21
              - 22
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 22] (21)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
132) EndPhrase, "Upper" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
133) OnInternalPhraseAsync, 21, 31
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 23] (22)"
        IterEnd: "[1, 32] (31)"
        Token: "Upper"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
        Whitespace:
          - 21
          - 22
      Phrase: "Upper"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 23] (22)"
            IterEnd: "[1, 32] (31)"
            Token: "Upper"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
            Whitespace:
              - 21
              - 22
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 22] (21)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
134) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
135) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
136) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
137) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
138) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
139) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
140) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
141) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
142) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
143) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
144) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
145) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
146) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
147) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
148) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
149) OnInternalPhraseAsync, 21, 31
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 23] (22)"
        IterEnd: "[1, 32] (31)"
        Token: "Upper"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
        Whitespace:
          - 21
          - 22
      Phrase: "Upper"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 22] (21)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
150) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
151) OnInternalPhraseAsync, 21, 31
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
          IsIgnored: False
          IterBegin: "[1, 23] (22)"
          IterEnd: "[1, 32] (31)"
          Token: "Upper"
          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
          Whitespace:
            - 21
            - 22
        Phrase: "Upper"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 22] (21)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
152) EndPhrase, "DynamicPhrasesType.Statements" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
153) StartPhrase, "'else'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
154) OnInternalPhraseAsync, 32, 36
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 33] (32)"
      IterEnd: "[1, 37] (36)"
      Token: "'else'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
      Whitespace:
        - 31
        - 32
    Phrase: "'else'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 22] (21)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 23] (22)"
                IterEnd: "[1, 32] (31)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                Whitespace:
                  - 21
                  - 22
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
155) EndPhrase, "'else'" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
156) StartPhrase, "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
157) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
158) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
159) OnInternalPhraseAsync, 37, 40
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 38] (37)"
      IterEnd: "[1, 41] (40)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
      Whitespace:
        - 36
        - 37
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 22] (21)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 23] (22)"
                IterEnd: "[1, 32] (31)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                Whitespace:
                  - 21
                  - 22
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 33] (32)"
            IterEnd: "[1, 37] (36)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
            Whitespace:
              - 31
              - 32
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
160) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
161) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
162) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
163) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
164) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
165) OnInternalPhraseAsync, 37, 40
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 38] (37)"
      IterEnd: "[1, 41] (40)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
      Whitespace:
        - 36
        - 37
    Phrase: "Lower"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 41] (40)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 22] (21)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 23] (22)"
                IterEnd: "[1, 32] (31)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                Whitespace:
                  - 21
                  - 22
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 33] (32)"
            IterEnd: "[1, 37] (36)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
            Whitespace:
              - 31
              - 32
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
166) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
167) OnInternalPhraseAsync, 36, 40
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 38] (37)"
        IterEnd: "[1, 41] (40)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
        Whitespace:
          - 36
          - 37
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 41] (40)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 22] (21)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 23] (22)"
                IterEnd: "[1, 32] (31)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                Whitespace:
                  - 21
                  - 22
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 33] (32)"
            IterEnd: "[1, 37] (36)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
            Whitespace:
              - 31
              - 32
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
168) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
169) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
170) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
171) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
172) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
173) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
174) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
175) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
176) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
177) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
178) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
179) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
180) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
181) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
182) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
183) OnInternalPhraseAsync, 36, 40
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 38] (37)"
        IterEnd: "[1, 41] (40)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
        Whitespace:
          - 36
          - 37
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 22] (21)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 23] (22)"
                IterEnd: "[1, 32] (31)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                Whitespace:
                  - 21
                  - 22
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 33] (32)"
            IterEnd: "[1, 37] (36)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
            Whitespace:
              - 31
              - 32
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
184) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
185) OnInternalPhraseAsync, 36, 40
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
          IsIgnored: False
          IterBegin: "[1, 38] (37)"
          IterEnd: "[1, 41] (40)"
          Token: "Lower"
          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
          Whitespace:
            - 36
            - 37
        Phrase: "Lower"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 20] (19)"
            IterEnd: "[1, 22] (21)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
            Whitespace:
              - 18
              - 19
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 23] (22)"
                IterEnd: "[1, 32] (31)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                Whitespace:
                  - 21
                  - 22
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 33] (32)"
            IterEnd: "[1, 37] (36)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
            Whitespace:
              - 31
              - 32
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
186) EndPhrase, "DynamicPhrasesType.Statements" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
187) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
188) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
189) OnInternalPhraseAsync, 18, 40
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 16] (15)"
                  IterEnd: "[1, 19] (18)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 20] (19)"
              IterEnd: "[1, 22] (21)"
              Token: "'if'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
              Whitespace:
                - 18
                - 19
            Phrase: "'if'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 23] (22)"
                  IterEnd: "[1, 32] (31)"
                  Token: "Upper"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                  Whitespace:
                    - 21
                    - 22
                Phrase: "Upper"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 33] (32)"
              IterEnd: "[1, 37] (36)"
              Token: "'else'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
              Whitespace:
                - 31
                - 32
            Phrase: "'else'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 38] (37)"
                  IterEnd: "[1, 41] (40)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                  Whitespace:
                    - 36
                    - 37
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Ter"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 16] (15)"
            IterEnd: "[1, 19] (18)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
190) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
191) OnInternalPhraseAsync, 15, 40
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 16] (15)"
                  IterEnd: "[1, 19] (18)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 20] (19)"
              IterEnd: "[1, 22] (21)"
              Token: "'if'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
              Whitespace:
                - 18
                - 19
            Phrase: "'if'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 23] (22)"
                  IterEnd: "[1, 32] (31)"
                  Token: "Upper"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                  Whitespace:
                    - 21
                    - 22
                Phrase: "Upper"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 33] (32)"
              IterEnd: "[1, 37] (36)"
              Token: "'else'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
              Whitespace:
                - 31
                - 32
            Phrase: "'else'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 38] (37)"
                  IterEnd: "[1, 41] (40)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                  Whitespace:
                    - 36
                    - 37
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Ter"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
192) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
193) OnInternalPhraseAsync, 15, 40
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
          DataItems:
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 16] (15)"
                    IterEnd: "[1, 19] (18)"
                    Token: "Lower"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                    Whitespace: None
                  Phrase: "Lower"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 20] (19)"
                IterEnd: "[1, 22] (21)"
                Token: "'if'"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                Whitespace:
                  - 18
                  - 19
              Phrase: "'if'"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 23] (22)"
                    IterEnd: "[1, 32] (31)"
                    Token: "Upper"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                    Whitespace:
                      - 21
                      - 22
                  Phrase: "Upper"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 33] (32)"
                IterEnd: "[1, 37] (36)"
                Token: "'else'"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                Whitespace:
                  - 31
                  - 32
              Phrase: "'else'"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 38] (37)"
                    IterEnd: "[1, 41] (40)"
                    Token: "Lower"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                    Whitespace:
                      - 36
                      - 37
                  Phrase: "Lower"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Ter"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
194) EndPhrase, "DynamicPhrasesType.Statements" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
195) StartPhrase, "']'", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
196) OnInternalPhraseAsync, 40, 41
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 41] (40)"
      IterEnd: "[1, 42] (41)"
      Token: "']'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
      Whitespace: None
    Phrase: "']'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 16] (15)"
            Token: "'['"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
            Whitespace: None
          Phrase: "'['"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 16] (15)"
                          IterEnd: "[1, 19] (18)"
                          Token: "Lower"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                          Whitespace: None
                        Phrase: "Lower"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 20] (19)"
                      IterEnd: "[1, 22] (21)"
                      Token: "'if'"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                      Whitespace:
                        - 18
                        - 19
                    Phrase: "'if'"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 23] (22)"
                          IterEnd: "[1, 32] (31)"
                          Token: "Upper"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                          Whitespace:
                            - 21
                            - 22
                        Phrase: "Upper"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 33] (32)"
                      IterEnd: "[1, 37] (36)"
                      Token: "'else'"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                      Whitespace:
                        - 31
                        - 32
                    Phrase: "'else'"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 38] (37)"
                          IterEnd: "[1, 41] (40)"
                          Token: "Lower"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                          Whitespace:
                            - 36
                            - 37
                        Phrase: "Lower"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                IsComplete: True
              Phrase: "Ter"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
197) EndPhrase, "']'" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
198) OnInternalPhraseAsync, 14, 41
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
              DataItems:
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 9] (8)"
                        IterEnd: "[1, 12] (11)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                        Whitespace:
                          - 7
                          - 8
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 12] (11)"
                    IterEnd: "[1, 13] (12)"
                    Token: "'['"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                    Whitespace: None
                  Phrase: "'['"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 13] (12)"
                        IterEnd: "[1, 14] (13)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                        Whitespace: None
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 14] (13)"
                    IterEnd: "[1, 15] (14)"
                    Token: "']'"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                    Whitespace: None
                  Phrase: "']'"
              IsComplete: True
            Phrase: "Index"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 15] (14)"
              IterEnd: "[1, 16] (15)"
              Token: "'['"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 16] (15)"
                            IterEnd: "[1, 19] (18)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                            Whitespace: None
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 20] (19)"
                        IterEnd: "[1, 22] (21)"
                        Token: "'if'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                        Whitespace:
                          - 18
                          - 19
                      Phrase: "'if'"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 23] (22)"
                            IterEnd: "[1, 32] (31)"
                            Token: "Upper"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                            Whitespace:
                              - 21
                              - 22
                          Phrase: "Upper"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 33] (32)"
                        IterEnd: "[1, 37] (36)"
                        Token: "'else'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                        Whitespace:
                          - 31
                          - 32
                      Phrase: "'else'"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 38] (37)"
                            IterEnd: "[1, 41] (40)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                            Whitespace:
                              - 36
                              - 37
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Ter"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 41] (40)"
              IterEnd: "[1, 42] (41)"
              Token: "']'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 9] (8)"
            IterEnd: "[1, 12] (11)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
            Whitespace:
              - 7
              - 8
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
199) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
200) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
201) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
202) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
203) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
204) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
205) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
206) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
207) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
208) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
209) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
210) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
211) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
212) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
213) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
214) OnInternalPhraseAsync, 7, 41
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
              DataItems:
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 9] (8)"
                        IterEnd: "[1, 12] (11)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                        Whitespace:
                          - 7
                          - 8
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 12] (11)"
                    IterEnd: "[1, 13] (12)"
                    Token: "'['"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                    Whitespace: None
                  Phrase: "'['"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 13] (12)"
                        IterEnd: "[1, 14] (13)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                        Whitespace: None
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 14] (13)"
                    IterEnd: "[1, 15] (14)"
                    Token: "']'"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                    Whitespace: None
                  Phrase: "']'"
              IsComplete: True
            Phrase: "Index"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 15] (14)"
              IterEnd: "[1, 16] (15)"
              Token: "'['"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 16] (15)"
                            IterEnd: "[1, 19] (18)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                            Whitespace: None
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 20] (19)"
                        IterEnd: "[1, 22] (21)"
                        Token: "'if'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                        Whitespace:
                          - 18
                          - 19
                      Phrase: "'if'"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 23] (22)"
                            IterEnd: "[1, 32] (31)"
                            Token: "Upper"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                            Whitespace:
                              - 21
                              - 22
                          Phrase: "Upper"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 33] (32)"
                        IterEnd: "[1, 37] (36)"
                        Token: "'else'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                        Whitespace:
                          - 31
                          - 32
                      Phrase: "'else'"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 38] (37)"
                            IterEnd: "[1, 41] (40)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                            Whitespace:
                              - 36
                              - 37
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Ter"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 41] (40)"
              IterEnd: "[1, 42] (41)"
              Token: "']'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
215) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
216) OnInternalPhraseAsync, 7, 41
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
          DataItems:
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 9] (8)"
                          IterEnd: "[1, 12] (11)"
                          Token: "Lower"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                          Whitespace:
                            - 7
                            - 8
                        Phrase: "Lower"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 12] (11)"
                      IterEnd: "[1, 13] (12)"
                      Token: "'['"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                      Whitespace: None
                    Phrase: "'['"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 13] (12)"
                          IterEnd: "[1, 14] (13)"
                          Token: "Lower"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                          Whitespace: None
                        Phrase: "Lower"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 14] (13)"
                      IterEnd: "[1, 15] (14)"
                      Token: "']'"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                      Whitespace: None
                    Phrase: "']'"
                IsComplete: True
              Phrase: "Index"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 16] (15)"
                Token: "'['"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
                Whitespace: None
              Phrase: "'['"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 16] (15)"
                              IterEnd: "[1, 19] (18)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                              Whitespace: None
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 20] (19)"
                          IterEnd: "[1, 22] (21)"
                          Token: "'if'"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                          Whitespace:
                            - 18
                            - 19
                        Phrase: "'if'"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 23] (22)"
                              IterEnd: "[1, 32] (31)"
                              Token: "Upper"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                              Whitespace:
                                - 21
                                - 22
                            Phrase: "Upper"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 33] (32)"
                          IterEnd: "[1, 37] (36)"
                          Token: "'else'"
                          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                          Whitespace:
                            - 31
                            - 32
                        Phrase: "'else'"
                      - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 38] (37)"
                              IterEnd: "[1, 41] (40)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                              Whitespace:
                                - 36
                                - 37
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Ter"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                IsIgnored: False
                IterBegin: "[1, 41] (40)"
                IterEnd: "[1, 42] (41)"
                Token: "']'"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
                Whitespace: None
              Phrase: "']'"
          IsComplete: True
        Phrase: "Index"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
217) EndPhrase, "DynamicPhrasesType.Statements" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
218) StartPhrase, "'else'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
219) OnInternalPhraseAsync, 42, 46
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 43] (42)"
      IterEnd: "[1, 47] (46)"
      Token: "'else'"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(42, 46), match='else'>"
      Whitespace:
        - 41
        - 42
    Phrase: "'else'"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                      DataItems:
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 9] (8)"
                                IterEnd: "[1, 12] (11)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                                Whitespace:
                                  - 7
                                  - 8
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 12] (11)"
                            IterEnd: "[1, 13] (12)"
                            Token: "'['"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                            Whitespace: None
                          Phrase: "'['"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 13] (12)"
                                IterEnd: "[1, 14] (13)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                                Whitespace: None
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 14] (13)"
                            IterEnd: "[1, 15] (14)"
                            Token: "']'"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                            Whitespace: None
                          Phrase: "']'"
                      IsComplete: True
                    Phrase: "Index"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 15] (14)"
                      IterEnd: "[1, 16] (15)"
                      Token: "'['"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
                      Whitespace: None
                    Phrase: "'['"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 16] (15)"
                                    IterEnd: "[1, 19] (18)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 20] (19)"
                                IterEnd: "[1, 22] (21)"
                                Token: "'if'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                                Whitespace:
                                  - 18
                                  - 19
                              Phrase: "'if'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 23] (22)"
                                    IterEnd: "[1, 32] (31)"
                                    Token: "Upper"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                                    Whitespace:
                                      - 21
                                      - 22
                                  Phrase: "Upper"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 33] (32)"
                                IterEnd: "[1, 37] (36)"
                                Token: "'else'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                                Whitespace:
                                  - 31
                                  - 32
                              Phrase: "'else'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 38] (37)"
                                    IterEnd: "[1, 41] (40)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                                    Whitespace:
                                      - 36
                                      - 37
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                          IsComplete: True
                        Phrase: "Ter"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 41] (40)"
                      IterEnd: "[1, 42] (41)"
                      Token: "']'"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
                      Whitespace: None
                    Phrase: "']'"
                IsComplete: True
              Phrase: "Index"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
220) EndPhrase, "'else'" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
221) StartPhrase, "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
222) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
223) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
224) EndPhrase, "Lower" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
225) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
226) OnInternalPhraseAsync, 47, 52
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 48] (47)"
      IterEnd: "[1, 53] (52)"
      Token: "Upper"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
      Whitespace:
        - 46
        - 47
    Phrase: "Upper"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                      DataItems:
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 9] (8)"
                                IterEnd: "[1, 12] (11)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                                Whitespace:
                                  - 7
                                  - 8
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 12] (11)"
                            IterEnd: "[1, 13] (12)"
                            Token: "'['"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                            Whitespace: None
                          Phrase: "'['"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 13] (12)"
                                IterEnd: "[1, 14] (13)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                                Whitespace: None
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 14] (13)"
                            IterEnd: "[1, 15] (14)"
                            Token: "']'"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                            Whitespace: None
                          Phrase: "']'"
                      IsComplete: True
                    Phrase: "Index"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 15] (14)"
                      IterEnd: "[1, 16] (15)"
                      Token: "'['"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
                      Whitespace: None
                    Phrase: "'['"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 16] (15)"
                                    IterEnd: "[1, 19] (18)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 20] (19)"
                                IterEnd: "[1, 22] (21)"
                                Token: "'if'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                                Whitespace:
                                  - 18
                                  - 19
                              Phrase: "'if'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 23] (22)"
                                    IterEnd: "[1, 32] (31)"
                                    Token: "Upper"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                                    Whitespace:
                                      - 21
                                      - 22
                                  Phrase: "Upper"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 33] (32)"
                                IterEnd: "[1, 37] (36)"
                                Token: "'else'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                                Whitespace:
                                  - 31
                                  - 32
                              Phrase: "'else'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 38] (37)"
                                    IterEnd: "[1, 41] (40)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                                    Whitespace:
                                      - 36
                                      - 37
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                          IsComplete: True
                        Phrase: "Ter"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 41] (40)"
                      IterEnd: "[1, 42] (41)"
                      Token: "']'"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
                      Whitespace: None
                    Phrase: "']'"
                IsComplete: True
              Phrase: "Index"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 43] (42)"
            IterEnd: "[1, 47] (46)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(42, 46), match='else'>"
            Whitespace:
              - 41
              - 42
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
227) EndPhrase, "Upper" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
228) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
229) StartPhrase, "Upper", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
230) OnInternalPhraseAsync, 47, 52
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
      IsIgnored: False
      IterBegin: "[1, 48] (47)"
      IterEnd: "[1, 53] (52)"
      Token: "Upper"
      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
      Whitespace:
        - 46
        - 47
    Phrase: "Upper"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 48] (47)"
            IterEnd: "[1, 53] (52)"
            Token: "Upper"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
            Whitespace:
              - 46
              - 47
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                      DataItems:
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 9] (8)"
                                IterEnd: "[1, 12] (11)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                                Whitespace:
                                  - 7
                                  - 8
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 12] (11)"
                            IterEnd: "[1, 13] (12)"
                            Token: "'['"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                            Whitespace: None
                          Phrase: "'['"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 13] (12)"
                                IterEnd: "[1, 14] (13)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                                Whitespace: None
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 14] (13)"
                            IterEnd: "[1, 15] (14)"
                            Token: "']'"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                            Whitespace: None
                          Phrase: "']'"
                      IsComplete: True
                    Phrase: "Index"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 15] (14)"
                      IterEnd: "[1, 16] (15)"
                      Token: "'['"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
                      Whitespace: None
                    Phrase: "'['"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 16] (15)"
                                    IterEnd: "[1, 19] (18)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 20] (19)"
                                IterEnd: "[1, 22] (21)"
                                Token: "'if'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                                Whitespace:
                                  - 18
                                  - 19
                              Phrase: "'if'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 23] (22)"
                                    IterEnd: "[1, 32] (31)"
                                    Token: "Upper"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                                    Whitespace:
                                      - 21
                                      - 22
                                  Phrase: "Upper"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 33] (32)"
                                IterEnd: "[1, 37] (36)"
                                Token: "'else'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                                Whitespace:
                                  - 31
                                  - 32
                              Phrase: "'else'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 38] (37)"
                                    IterEnd: "[1, 41] (40)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                                    Whitespace:
                                      - 36
                                      - 37
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                          IsComplete: True
                        Phrase: "Ter"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 41] (40)"
                      IterEnd: "[1, 42] (41)"
                      Token: "']'"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
                      Whitespace: None
                    Phrase: "']'"
                IsComplete: True
              Phrase: "Index"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 43] (42)"
            IterEnd: "[1, 47] (46)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(42, 46), match='else'>"
            Whitespace:
              - 41
              - 42
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
231) EndPhrase, "Upper" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
232) OnInternalPhraseAsync, 46, 52
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 48] (47)"
        IterEnd: "[1, 53] (52)"
        Token: "Upper"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
        Whitespace:
          - 46
          - 47
      Phrase: "Upper"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 48] (47)"
            IterEnd: "[1, 53] (52)"
            Token: "Upper"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
            Whitespace:
              - 46
              - 47
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                      DataItems:
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 9] (8)"
                                IterEnd: "[1, 12] (11)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                                Whitespace:
                                  - 7
                                  - 8
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 12] (11)"
                            IterEnd: "[1, 13] (12)"
                            Token: "'['"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                            Whitespace: None
                          Phrase: "'['"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 13] (12)"
                                IterEnd: "[1, 14] (13)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                                Whitespace: None
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 14] (13)"
                            IterEnd: "[1, 15] (14)"
                            Token: "']'"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                            Whitespace: None
                          Phrase: "']'"
                      IsComplete: True
                    Phrase: "Index"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 15] (14)"
                      IterEnd: "[1, 16] (15)"
                      Token: "'['"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
                      Whitespace: None
                    Phrase: "'['"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 16] (15)"
                                    IterEnd: "[1, 19] (18)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 20] (19)"
                                IterEnd: "[1, 22] (21)"
                                Token: "'if'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                                Whitespace:
                                  - 18
                                  - 19
                              Phrase: "'if'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 23] (22)"
                                    IterEnd: "[1, 32] (31)"
                                    Token: "Upper"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                                    Whitespace:
                                      - 21
                                      - 22
                                  Phrase: "Upper"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 33] (32)"
                                IterEnd: "[1, 37] (36)"
                                Token: "'else'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                                Whitespace:
                                  - 31
                                  - 32
                              Phrase: "'else'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 38] (37)"
                                    IterEnd: "[1, 41] (40)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                                    Whitespace:
                                      - 36
                                      - 37
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                          IsComplete: True
                        Phrase: "Ter"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 41] (40)"
                      IterEnd: "[1, 42] (41)"
                      Token: "']'"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
                      Whitespace: None
                    Phrase: "']'"
                IsComplete: True
              Phrase: "Index"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 43] (42)"
            IterEnd: "[1, 47] (46)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(42, 46), match='else'>"
            Whitespace:
              - 41
              - 42
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
233) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
234) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
235) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
236) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
237) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
238) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
239) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
240) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
241) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
242) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
243) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
244) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
245) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
246) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
247) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
248) OnInternalPhraseAsync, 46, 52
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
        IsIgnored: False
        IterBegin: "[1, 48] (47)"
        IterEnd: "[1, 53] (52)"
        Token: "Upper"
        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
        Whitespace:
          - 46
          - 47
      Phrase: "Upper"
    Phrase: "Phrases"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                      DataItems:
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 9] (8)"
                                IterEnd: "[1, 12] (11)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                                Whitespace:
                                  - 7
                                  - 8
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 12] (11)"
                            IterEnd: "[1, 13] (12)"
                            Token: "'['"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                            Whitespace: None
                          Phrase: "'['"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 13] (12)"
                                IterEnd: "[1, 14] (13)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                                Whitespace: None
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 14] (13)"
                            IterEnd: "[1, 15] (14)"
                            Token: "']'"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                            Whitespace: None
                          Phrase: "']'"
                      IsComplete: True
                    Phrase: "Index"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 15] (14)"
                      IterEnd: "[1, 16] (15)"
                      Token: "'['"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
                      Whitespace: None
                    Phrase: "'['"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 16] (15)"
                                    IterEnd: "[1, 19] (18)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 20] (19)"
                                IterEnd: "[1, 22] (21)"
                                Token: "'if'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                                Whitespace:
                                  - 18
                                  - 19
                              Phrase: "'if'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 23] (22)"
                                    IterEnd: "[1, 32] (31)"
                                    Token: "Upper"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                                    Whitespace:
                                      - 21
                                      - 22
                                  Phrase: "Upper"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 33] (32)"
                                IterEnd: "[1, 37] (36)"
                                Token: "'else'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                                Whitespace:
                                  - 31
                                  - 32
                              Phrase: "'else'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 38] (37)"
                                    IterEnd: "[1, 41] (40)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                                    Whitespace:
                                      - 36
                                      - 37
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                          IsComplete: True
                        Phrase: "Ter"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 41] (40)"
                      IterEnd: "[1, 42] (41)"
                      Token: "']'"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
                      Whitespace: None
                    Phrase: "']'"
                IsComplete: True
              Phrase: "Index"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 43] (42)"
            IterEnd: "[1, 47] (46)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(42, 46), match='else'>"
            Whitespace:
              - 41
              - 42
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
249) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
250) OnInternalPhraseAsync, 46, 52
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
          IsIgnored: False
          IterBegin: "[1, 48] (47)"
          IterEnd: "[1, 53] (52)"
          Token: "Upper"
          Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
          Whitespace:
            - 46
            - 47
        Phrase: "Upper"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 6] (5)"
            IterEnd: "[1, 8] (7)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
            Whitespace:
              - 4
              - 5
          Phrase: "'if'"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                DataItems:
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                      DataItems:
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 9] (8)"
                                IterEnd: "[1, 12] (11)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                                Whitespace:
                                  - 7
                                  - 8
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 12] (11)"
                            IterEnd: "[1, 13] (12)"
                            Token: "'['"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                            Whitespace: None
                          Phrase: "'['"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 13] (12)"
                                IterEnd: "[1, 14] (13)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                                Whitespace: None
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 14] (13)"
                            IterEnd: "[1, 15] (14)"
                            Token: "']'"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                            Whitespace: None
                          Phrase: "']'"
                      IsComplete: True
                    Phrase: "Index"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 15] (14)"
                      IterEnd: "[1, 16] (15)"
                      Token: "'['"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
                      Whitespace: None
                    Phrase: "'['"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 16] (15)"
                                    IterEnd: "[1, 19] (18)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 20] (19)"
                                IterEnd: "[1, 22] (21)"
                                Token: "'if'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                                Whitespace:
                                  - 18
                                  - 19
                              Phrase: "'if'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 23] (22)"
                                    IterEnd: "[1, 32] (31)"
                                    Token: "Upper"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                                    Whitespace:
                                      - 21
                                      - 22
                                  Phrase: "Upper"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 33] (32)"
                                IterEnd: "[1, 37] (36)"
                                Token: "'else'"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                                Whitespace:
                                  - 31
                                  - 32
                              Phrase: "'else'"
                            - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 38] (37)"
                                    IterEnd: "[1, 41] (40)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                                    Whitespace:
                                      - 36
                                      - 37
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                          IsComplete: True
                        Phrase: "Ter"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 41] (40)"
                      IterEnd: "[1, 42] (41)"
                      Token: "']'"
                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
                      Whitespace: None
                    Phrase: "']'"
                IsComplete: True
              Phrase: "Index"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
            IsIgnored: False
            IterBegin: "[1, 43] (42)"
            IterEnd: "[1, 47] (46)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(42, 46), match='else'>"
            Whitespace:
              - 41
              - 42
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
      DataItems:
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
            DataItems:
              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
251) EndPhrase, "DynamicPhrasesType.Statements" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
252) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>"
253) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
254) OnInternalPhraseAsync, 4, 52
    # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
        DataItems:
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 1] (0)"
                  IterEnd: "[1, 5] (4)"
                  Token: "Upper"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(0, 4), match='TRUE'>"
                  Whitespace: None
                Phrase: "Upper"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 6] (5)"
              IterEnd: "[1, 8] (7)"
              Token: "'if'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(5, 7), match='if'>"
              Whitespace:
                - 4
                - 5
            Phrase: "'if'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                        DataItems:
                          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 9] (8)"
                                  IterEnd: "[1, 12] (11)"
                                  Token: "Lower"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(8, 11), match='var'>"
                                  Whitespace:
                                    - 7
                                    - 8
                                Phrase: "Lower"
                              Phrase: "Phrases"
                            Phrase: "DynamicPhrasesType.Statements"
                          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 12] (11)"
                              IterEnd: "[1, 13] (12)"
                              Token: "'['"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(11, 12), match='['>"
                              Whitespace: None
                            Phrase: "'['"
                          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 13] (12)"
                                  IterEnd: "[1, 14] (13)"
                                  Token: "Lower"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(12, 13), match='a'>"
                                  Whitespace: None
                                Phrase: "Lower"
                              Phrase: "Phrases"
                            Phrase: "DynamicPhrasesType.Statements"
                          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 14] (13)"
                              IterEnd: "[1, 15] (14)"
                              Token: "']'"
                              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(13, 14), match=']'>"
                              Whitespace: None
                            Phrase: "']'"
                        IsComplete: True
                      Phrase: "Index"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 15] (14)"
                        IterEnd: "[1, 16] (15)"
                        Token: "'['"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(14, 15), match='['>"
                        Whitespace: None
                      Phrase: "'['"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                        Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                          Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.MultipleStandardParseResultData'>
                            DataItems:
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 16] (15)"
                                      IterEnd: "[1, 19] (18)"
                                      Token: "Lower"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(15, 18), match='one'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 20] (19)"
                                  IterEnd: "[1, 22] (21)"
                                  Token: "'if'"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(19, 21), match='if'>"
                                  Whitespace:
                                    - 18
                                    - 19
                                Phrase: "'if'"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 23] (22)"
                                      IterEnd: "[1, 32] (31)"
                                      Token: "Upper"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(22, 31), match='CONDITION'>"
                                      Whitespace:
                                        - 21
                                        - 22
                                    Phrase: "Upper"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 33] (32)"
                                  IterEnd: "[1, 37] (36)"
                                  Token: "'else'"
                                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(32, 36), match='else'>"
                                  Whitespace:
                                    - 31
                                    - 32
                                Phrase: "'else'"
                              - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                  Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                                    Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 38] (37)"
                                      IterEnd: "[1, 41] (40)"
                                      Token: "Lower"
                                      Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(37, 40), match='two'>"
                                      Whitespace:
                                        - 36
                                        - 37
                                    Phrase: "Lower"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                            IsComplete: True
                          Phrase: "Ter"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                      Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 41] (40)"
                        IterEnd: "[1, 42] (41)"
                        Token: "']'"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(40, 41), match=']'>"
                        Whitespace: None
                      Phrase: "']'"
                  IsComplete: True
                Phrase: "Index"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
              IsIgnored: False
              IterBegin: "[1, 43] (42)"
              IterEnd: "[1, 47] (46)"
              Token: "'else'"
              Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(42, 46), match='else'>"
              Whitespace:
                - 41
                - 42
            Phrase: "'else'"
          - # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
            Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
              Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.StandardParseResultData'>
                Data: # <class 'TheLanguage.Parser.Components.Phrase.Phrase.TokenParseResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 48] (47)"
                  IterEnd: "[1, 53] (52)"
                  Token: "Upper"
                  Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(47, 52), match='FALSE'>"
                  Whitespace:
                    - 46
                    - 47
                Phrase: "Upper"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Ter"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
255) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True]
