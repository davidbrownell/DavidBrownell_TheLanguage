# <class 'Bootstrap.Lexer.Components.AST.Node'>
Children:
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "Lower Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                Whitespace: None
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 4] (3)"
                IterEnd: "[2, 1] (4)"
                Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 4
                  Start: 3
                Whitespace: None
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (4)"
            Type: "Lower <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (4)"
        Type: "(Include | Upper | Lower | Number | New Scope) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (4)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 1] (4)"
                IterEnd: "[2, 4] (7)"
                Type: "Upper Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(4, 7), match='TWO'>"
                Whitespace: None
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 4] (7)"
                IterEnd: "[3, 1] (8)"
                Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 8
                  Start: 7
                Whitespace: None
            IsIgnored: False
            IterBegin: "[2, 1] (4)"
            IterEnd: "[3, 1] (8)"
            Type: "Upper <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[2, 1] (4)"
        IterEnd: "[3, 1] (8)"
        Type: "(Include | Upper | Lower | Number | New Scope) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[2, 1] (4)"
    IterEnd: "[3, 1] (8)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 1] (8)"
                IterEnd: "[3, 8] (15)"
                Type: "Include Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(8, 15), match='include'>"
                Whitespace: None
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 9] (16)"
                IterEnd: "[3, 15] (22)"
                Type: "Lower Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(16, 22), match='number'>"
                Whitespace:
                  - 15
                  - 16
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 15] (22)"
                IterEnd: "[4, 1] (23)"
                Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 23
                  Start: 22
                Whitespace: None
            IsIgnored: False
            IterBegin: "[3, 1] (8)"
            IterEnd: "[4, 1] (23)"
            Type: "Include <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[3, 1] (8)"
        IterEnd: "[4, 1] (23)"
        Type: "(Include | Upper | Lower | Number | New Scope) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[3, 1] (8)"
    IterEnd: "[4, 1] (23)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 1] (23)"
                IterEnd: "[4, 2] (24)"
                Type: "Number Token <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(23, 24), match='3'>"
                Whitespace: None
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 2] (24)"
                IterEnd: "[5, 1] (25)"
                Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 25
                  Start: 24
                Whitespace: None
            IsIgnored: False
            IterBegin: "[4, 1] (23)"
            IterEnd: "[5, 1] (25)"
            Type: "Number <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[4, 1] (23)"
        IterEnd: "[5, 1] (25)"
        Type: "(Include | Upper | Lower | Number | New Scope) Statements / (Dynamic Number) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[4, 1] (23)"
    IterEnd: "[5, 1] (25)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[5, 1] (25)"
Type: "<None>"
