0) StartPhrase, "Phrase"
1) StartPhrase, "DynamicPhrasesType.Statements"
2) GetDynamicPhrases, e
3) StartPhrase, "(Word Phrase | Number Phrase)"
4) StartPhrase, "Word Phrase"
5) StartPhrase, "Word Token"
6) OnInternalPhraseAsync, 0, 5
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 1] (0)"
      IterEnd: "[1, 6] (5)"
      Token: "Word Token"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(0, 5), match='worda'>"
      Whitespace: None
    Phrase: "Word Token"
7) EndPhrase, "Word Token" [True]
8) StartPhrase, "Word Token"
9) OnInternalPhraseAsync, 6, 11
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 7] (6)"
      IterEnd: "[1, 12] (11)"
      Token: "Word Token"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(6, 11), match='wordb'>"
      Whitespace:
        - 5
        - 6
    Phrase: "Word Token"
10) EndPhrase, "Word Token" [True]
11) StartPhrase, "Newline+"
12) OnInternalPhraseAsync, 11, 12
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 12] (11)"
      IterEnd: "[2, 1] (12)"
      Token: "Newline+"
      Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
        End: 12
        Start: 11
      Whitespace: None
    Phrase: "Newline+"
13) EndPhrase, "Newline+" [True]
14) OnInternalPhraseAsync, 0, 12
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 6] (5)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 5), match='worda'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 12] (11)"
            Token: "Word Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 11), match='wordb'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Word Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[2, 1] (12)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 12
              Start: 11
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "Word Phrase"
15) EndPhrase, "Word Phrase" [True]
16) StartPhrase, "Number Phrase"
17) StartPhrase, "Number Token"
18) EndPhrase, "Number Token" [False]
19) EndPhrase, "Number Phrase" [False]
20) OnInternalPhraseAsync, 0, 12
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 1] (0)"
              IterEnd: "[1, 6] (5)"
              Token: "Word Token"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(0, 5), match='worda'>"
              Whitespace: None
            Phrase: "Word Token"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 7] (6)"
              IterEnd: "[1, 12] (11)"
              Token: "Word Token"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(6, 11), match='wordb'>"
              Whitespace:
                - 5
                - 6
            Phrase: "Word Token"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 12] (11)"
              IterEnd: "[2, 1] (12)"
              Token: "Newline+"
              Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                End: 12
                Start: 11
              Whitespace: None
            Phrase: "Newline+"
        IsComplete: True
      Phrase: "Word Phrase"
    Phrase: "(Word Phrase | Number Phrase)"
21) EndPhrase, "(Word Phrase | Number Phrase)" [True]
22) OnInternalPhraseAsync, 0, 12
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Token: "Word Token"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 5), match='worda'>"
                Whitespace: None
              Phrase: "Word Token"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 7] (6)"
                IterEnd: "[1, 12] (11)"
                Token: "Word Token"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(6, 11), match='wordb'>"
                Whitespace:
                  - 5
                  - 6
              Phrase: "Word Token"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 12] (11)"
                IterEnd: "[2, 1] (12)"
                Token: "Newline+"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 12
                  Start: 11
                Whitespace: None
              Phrase: "Newline+"
          IsComplete: True
        Phrase: "Word Phrase"
      Phrase: "(Word Phrase | Number Phrase)"
    Phrase: "DynamicPhrasesType.Statements"
23) EndPhrase, "DynamicPhrasesType.Statements" [True]
24) StartPhrase, "DynamicPhrasesType.Statements"
25) GetDynamicPhrases, e
26) StartPhrase, "(Word Phrase | Number Phrase)"
27) StartPhrase, "Word Phrase"
28) StartPhrase, "Word Token"
29) EndPhrase, "Word Token" [False]
30) EndPhrase, "Word Phrase" [False]
31) StartPhrase, "Number Phrase"
32) StartPhrase, "Number Token"
33) OnInternalPhraseAsync, 12, 15
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[2, 1] (12)"
      IterEnd: "[2, 4] (15)"
      Token: "Number Token"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(12, 15), match='123'>"
      Whitespace: None
    Phrase: "Number Token"
34) EndPhrase, "Number Token" [True]
35) StartPhrase, "Newline+"
36) OnInternalPhraseAsync, 15, 16
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[2, 4] (15)"
      IterEnd: "[3, 1] (16)"
      Token: "Newline+"
      Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
        End: 16
        Start: 15
      Whitespace: None
    Phrase: "Newline+"
37) EndPhrase, "Newline+" [True]
38) OnInternalPhraseAsync, 12, 16
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 1] (12)"
            IterEnd: "[2, 4] (15)"
            Token: "Number Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(12, 15), match='123'>"
            Whitespace: None
          Phrase: "Number Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 4] (15)"
            IterEnd: "[3, 1] (16)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 16
              Start: 15
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "Number Phrase"
39) EndPhrase, "Number Phrase" [True]
40) OnInternalPhraseAsync, 12, 16
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[2, 1] (12)"
              IterEnd: "[2, 4] (15)"
              Token: "Number Token"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(12, 15), match='123'>"
              Whitespace: None
            Phrase: "Number Token"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[2, 4] (15)"
              IterEnd: "[3, 1] (16)"
              Token: "Newline+"
              Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                End: 16
                Start: 15
              Whitespace: None
            Phrase: "Newline+"
        IsComplete: True
      Phrase: "Number Phrase"
    Phrase: "(Word Phrase | Number Phrase)"
41) EndPhrase, "(Word Phrase | Number Phrase)" [True]
42) OnInternalPhraseAsync, 12, 16
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[2, 1] (12)"
                IterEnd: "[2, 4] (15)"
                Token: "Number Token"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(12, 15), match='123'>"
                Whitespace: None
              Phrase: "Number Token"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[2, 4] (15)"
                IterEnd: "[3, 1] (16)"
                Token: "Newline+"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 16
                  Start: 15
                Whitespace: None
              Phrase: "Newline+"
          IsComplete: True
        Phrase: "Number Phrase"
      Phrase: "(Word Phrase | Number Phrase)"
    Phrase: "DynamicPhrasesType.Statements"
43) EndPhrase, "DynamicPhrasesType.Statements" [True]
44) StartPhrase, "DynamicPhrasesType.Expressions"
45) GetDynamicPhrases, e
46) StartPhrase, "(Number Phrase)"
47) StartPhrase, "Number Phrase"
48) StartPhrase, "Number Token"
49) OnInternalPhraseAsync, 16, 19
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[3, 1] (16)"
      IterEnd: "[3, 4] (19)"
      Token: "Number Token"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(16, 19), match='456'>"
      Whitespace: None
    Phrase: "Number Token"
50) EndPhrase, "Number Token" [True]
51) StartPhrase, "Newline+"
52) OnInternalPhraseAsync, 19, 20
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[3, 4] (19)"
      IterEnd: "[4, 1] (20)"
      Token: "Newline+"
      Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
        End: 20
        Start: 19
      Whitespace: None
    Phrase: "Newline+"
53) EndPhrase, "Newline+" [True]
54) OnInternalPhraseAsync, 16, 20
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 1] (16)"
            IterEnd: "[3, 4] (19)"
            Token: "Number Token"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(16, 19), match='456'>"
            Whitespace: None
          Phrase: "Number Token"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 4] (19)"
            IterEnd: "[4, 1] (20)"
            Token: "Newline+"
            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 20
              Start: 19
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "Number Phrase"
55) EndPhrase, "Number Phrase" [True]
56) OnInternalPhraseAsync, 16, 20
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[3, 1] (16)"
              IterEnd: "[3, 4] (19)"
              Token: "Number Token"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(16, 19), match='456'>"
              Whitespace: None
            Phrase: "Number Token"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[3, 4] (19)"
              IterEnd: "[4, 1] (20)"
              Token: "Newline+"
              Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                End: 20
                Start: 19
              Whitespace: None
            Phrase: "Newline+"
        IsComplete: True
      Phrase: "Number Phrase"
    Phrase: "(Number Phrase)"
57) EndPhrase, "(Number Phrase)" [True]
58) OnInternalPhraseAsync, 16, 20
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[3, 1] (16)"
                IterEnd: "[3, 4] (19)"
                Token: "Number Token"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(16, 19), match='456'>"
                Whitespace: None
              Phrase: "Number Token"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[3, 4] (19)"
                IterEnd: "[4, 1] (20)"
                Token: "Newline+"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 20
                  Start: 19
                Whitespace: None
              Phrase: "Newline+"
          IsComplete: True
        Phrase: "Number Phrase"
      Phrase: "(Number Phrase)"
    Phrase: "DynamicPhrasesType.Expressions"
59) EndPhrase, "DynamicPhrasesType.Expressions" [True]
60) OnInternalPhraseAsync, 0, 20
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                DataItems:
                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 1] (0)"
                      IterEnd: "[1, 6] (5)"
                      Token: "Word Token"
                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(0, 5), match='worda'>"
                      Whitespace: None
                    Phrase: "Word Token"
                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 7] (6)"
                      IterEnd: "[1, 12] (11)"
                      Token: "Word Token"
                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(6, 11), match='wordb'>"
                      Whitespace:
                        - 5
                        - 6
                    Phrase: "Word Token"
                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 12] (11)"
                      IterEnd: "[2, 1] (12)"
                      Token: "Newline+"
                      Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                        End: 12
                        Start: 11
                      Whitespace: None
                    Phrase: "Newline+"
                IsComplete: True
              Phrase: "Word Phrase"
            Phrase: "(Word Phrase | Number Phrase)"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                DataItems:
                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      IsIgnored: False
                      IterBegin: "[2, 1] (12)"
                      IterEnd: "[2, 4] (15)"
                      Token: "Number Token"
                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(12, 15), match='123'>"
                      Whitespace: None
                    Phrase: "Number Token"
                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      IsIgnored: False
                      IterBegin: "[2, 4] (15)"
                      IterEnd: "[3, 1] (16)"
                      Token: "Newline+"
                      Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                        End: 16
                        Start: 15
                      Whitespace: None
                    Phrase: "Newline+"
                IsComplete: True
              Phrase: "Number Phrase"
            Phrase: "(Word Phrase | Number Phrase)"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                DataItems:
                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      IsIgnored: False
                      IterBegin: "[3, 1] (16)"
                      IterEnd: "[3, 4] (19)"
                      Token: "Number Token"
                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(16, 19), match='456'>"
                      Whitespace: None
                    Phrase: "Number Token"
                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      IsIgnored: False
                      IterBegin: "[3, 4] (19)"
                      IterEnd: "[4, 1] (20)"
                      Token: "Newline+"
                      Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                        End: 20
                        Start: 19
                      Whitespace: None
                    Phrase: "Newline+"
                IsComplete: True
              Phrase: "Number Phrase"
            Phrase: "(Number Phrase)"
          Phrase: "DynamicPhrasesType.Expressions"
      IsComplete: True
    Phrase: "Phrase"
61) EndPhrase, "Phrase" [True]
