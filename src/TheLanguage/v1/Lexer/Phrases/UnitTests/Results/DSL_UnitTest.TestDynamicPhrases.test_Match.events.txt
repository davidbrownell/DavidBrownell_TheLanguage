0) StartPhrase, "Phrase"
1) StartPhrase, "DynamicPhrasesType.Statements"
2) GetDynamicPhrases, e
3) StartPhrase, "(Word Phrase | Number Phrase)"
4) StartPhrase, "Word Phrase"
5) StartPhrase, "Word Token"
6) OnInternalPhrase, 0, 5
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 1] (0)"
        end: "[1, 6] (5)"
      token: "Word Token"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(0, 5), match='worda'>"
    phrase: "Word Token"
7) EndPhrase, "Word Token" [True]
8) StartPhrase, "Word Token"
9) OnInternalPhrase, 6, 11
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 7] (6)"
        end: "[1, 12] (11)"
      token: "Word Token"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(6, 11), match='wordb'>"
    phrase: "Word Token"
10) EndPhrase, "Word Token" [True]
11) StartPhrase, "Newline+"
12) OnInternalPhrase, 11, 12
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 12] (11)"
        end: "[2, 1] (12)"
      token: "Newline+"
      value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
        range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
          begin: 11
          end: 12
    phrase: "Newline+"
13) EndPhrase, "Newline+" [True]
14) OnInternalPhrase, 0, 12
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data:
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 1] (0)"
            end: "[1, 6] (5)"
          token: "Word Token"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(0, 5), match='worda'>"
        phrase: "Word Token"
      - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: true
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 6] (5)"
          end: "[1, 7] (6)"
        token: "HorizontalWhitespace"
        value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
          range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
            begin: 5
            end: 6
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 7] (6)"
            end: "[1, 12] (11)"
          token: "Word Token"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(6, 11), match='wordb'>"
        phrase: "Word Token"
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 12] (11)"
            end: "[2, 1] (12)"
          token: "Newline+"
          value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 11
              end: 12
        phrase: "Newline+"
    phrase: "Word Phrase"
15) EndPhrase, "Word Phrase" [True]
16) StartPhrase, "Number Phrase"
17) StartPhrase, "Number Token"
18) EndPhrase, "Number Token" [False]
19) EndPhrase, "Number Phrase" [False]
20) OnInternalPhrase, 0, 12
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 1] (0)"
              end: "[1, 6] (5)"
            token: "Word Token"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(0, 5), match='worda'>"
          phrase: "Word Token"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: true
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 6] (5)"
            end: "[1, 7] (6)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 5
              end: 6
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 7] (6)"
              end: "[1, 12] (11)"
            token: "Word Token"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(6, 11), match='wordb'>"
          phrase: "Word Token"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 12] (11)"
              end: "[2, 1] (12)"
            token: "Newline+"
            value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 11
                end: 12
          phrase: "Newline+"
      phrase: "Word Phrase"
    phrase: "(Word Phrase | Number Phrase)"
21) EndPhrase, "(Word Phrase | Number Phrase)" [True]
22) OnInternalPhrase, 0, 12
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 1] (0)"
                end: "[1, 6] (5)"
              token: "Word Token"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(0, 5), match='worda'>"
            phrase: "Word Token"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: true
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 6] (5)"
              end: "[1, 7] (6)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 5
                end: 6
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 7] (6)"
                end: "[1, 12] (11)"
              token: "Word Token"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(6, 11), match='wordb'>"
            phrase: "Word Token"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 12] (11)"
                end: "[2, 1] (12)"
              token: "Newline+"
              value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                  begin: 11
                  end: 12
            phrase: "Newline+"
        phrase: "Word Phrase"
      phrase: "(Word Phrase | Number Phrase)"
    phrase: "DynamicPhrasesType.Statements"
23) EndPhrase, "DynamicPhrasesType.Statements" [True]
24) StartPhrase, "DynamicPhrasesType.Statements"
25) GetDynamicPhrases, e
26) StartPhrase, "(Word Phrase | Number Phrase)"
27) StartPhrase, "Word Phrase"
28) StartPhrase, "Word Token"
29) EndPhrase, "Word Token" [False]
30) EndPhrase, "Word Phrase" [False]
31) StartPhrase, "Number Phrase"
32) StartPhrase, "Number Token"
33) OnInternalPhrase, 12, 15
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[2, 1] (12)"
        end: "[2, 4] (15)"
      token: "Number Token"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(12, 15), match='123'>"
    phrase: "Number Token"
34) EndPhrase, "Number Token" [True]
35) StartPhrase, "Newline+"
36) OnInternalPhrase, 15, 16
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[2, 4] (15)"
        end: "[3, 1] (16)"
      token: "Newline+"
      value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
        range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
          begin: 15
          end: 16
    phrase: "Newline+"
37) EndPhrase, "Newline+" [True]
38) OnInternalPhrase, 12, 16
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data:
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[2, 1] (12)"
            end: "[2, 4] (15)"
          token: "Number Token"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(12, 15), match='123'>"
        phrase: "Number Token"
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[2, 4] (15)"
            end: "[3, 1] (16)"
          token: "Newline+"
          value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 15
              end: 16
        phrase: "Newline+"
    phrase: "Number Phrase"
39) EndPhrase, "Number Phrase" [True]
40) OnInternalPhrase, 12, 16
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[2, 1] (12)"
              end: "[2, 4] (15)"
            token: "Number Token"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(12, 15), match='123'>"
          phrase: "Number Token"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[2, 4] (15)"
              end: "[3, 1] (16)"
            token: "Newline+"
            value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 15
                end: 16
          phrase: "Newline+"
      phrase: "Number Phrase"
    phrase: "(Word Phrase | Number Phrase)"
41) EndPhrase, "(Word Phrase | Number Phrase)" [True]
42) OnInternalPhrase, 12, 16
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[2, 1] (12)"
                end: "[2, 4] (15)"
              token: "Number Token"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(12, 15), match='123'>"
            phrase: "Number Token"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[2, 4] (15)"
                end: "[3, 1] (16)"
              token: "Newline+"
              value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                  begin: 15
                  end: 16
            phrase: "Newline+"
        phrase: "Number Phrase"
      phrase: "(Word Phrase | Number Phrase)"
    phrase: "DynamicPhrasesType.Statements"
43) EndPhrase, "DynamicPhrasesType.Statements" [True]
44) StartPhrase, "DynamicPhrasesType.Expressions"
45) GetDynamicPhrases, e
46) StartPhrase, "(Number Phrase)"
47) StartPhrase, "Number Phrase"
48) StartPhrase, "Number Token"
49) OnInternalPhrase, 16, 19
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[3, 1] (16)"
        end: "[3, 4] (19)"
      token: "Number Token"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(16, 19), match='456'>"
    phrase: "Number Token"
50) EndPhrase, "Number Token" [True]
51) StartPhrase, "Newline+"
52) OnInternalPhrase, 19, 20
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[3, 4] (19)"
        end: "[4, 1] (20)"
      token: "Newline+"
      value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
        range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
          begin: 19
          end: 20
    phrase: "Newline+"
53) EndPhrase, "Newline+" [True]
54) OnInternalPhrase, 16, 20
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data:
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[3, 1] (16)"
            end: "[3, 4] (19)"
          token: "Number Token"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(16, 19), match='456'>"
        phrase: "Number Token"
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[3, 4] (19)"
            end: "[4, 1] (20)"
          token: "Newline+"
          value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 19
              end: 20
        phrase: "Newline+"
    phrase: "Number Phrase"
55) EndPhrase, "Number Phrase" [True]
56) OnInternalPhrase, 16, 20
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[3, 1] (16)"
              end: "[3, 4] (19)"
            token: "Number Token"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(16, 19), match='456'>"
          phrase: "Number Token"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[3, 4] (19)"
              end: "[4, 1] (20)"
            token: "Newline+"
            value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 19
                end: 20
          phrase: "Newline+"
      phrase: "Number Phrase"
    phrase: "(Number Phrase)"
57) EndPhrase, "(Number Phrase)" [True]
58) OnInternalPhrase, 16, 20
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[3, 1] (16)"
                end: "[3, 4] (19)"
              token: "Number Token"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(16, 19), match='456'>"
            phrase: "Number Token"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[3, 4] (19)"
                end: "[4, 1] (20)"
              token: "Newline+"
              value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                  begin: 19
                  end: 20
            phrase: "Newline+"
        phrase: "Number Phrase"
      phrase: "(Number Phrase)"
    phrase: "DynamicPhrasesType.Expressions"
59) EndPhrase, "DynamicPhrasesType.Expressions" [True]
60) OnInternalPhrase, 0, 20
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data:
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data:
              - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 1] (0)"
                    end: "[1, 6] (5)"
                  token: "Word Token"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(0, 5), match='worda'>"
                phrase: "Word Token"
              - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: true
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 6] (5)"
                  end: "[1, 7] (6)"
                token: "HorizontalWhitespace"
                value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                    begin: 5
                    end: 6
              - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 7] (6)"
                    end: "[1, 12] (11)"
                  token: "Word Token"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(6, 11), match='wordb'>"
                phrase: "Word Token"
              - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 12] (11)"
                    end: "[2, 1] (12)"
                  token: "Newline+"
                  value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 11
                      end: 12
                phrase: "Newline+"
            phrase: "Word Phrase"
          phrase: "(Word Phrase | Number Phrase)"
        phrase: "DynamicPhrasesType.Statements"
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data:
              - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[2, 1] (12)"
                    end: "[2, 4] (15)"
                  token: "Number Token"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(12, 15), match='123'>"
                phrase: "Number Token"
              - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[2, 4] (15)"
                    end: "[3, 1] (16)"
                  token: "Newline+"
                  value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 15
                      end: 16
                phrase: "Newline+"
            phrase: "Number Phrase"
          phrase: "(Word Phrase | Number Phrase)"
        phrase: "DynamicPhrasesType.Statements"
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data:
              - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[3, 1] (16)"
                    end: "[3, 4] (19)"
                  token: "Number Token"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(16, 19), match='456'>"
                phrase: "Number Token"
              - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: false
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[3, 4] (19)"
                    end: "[4, 1] (20)"
                  token: "Newline+"
                  value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 19
                      end: 20
                phrase: "Newline+"
            phrase: "Number Phrase"
          phrase: "(Number Phrase)"
        phrase: "DynamicPhrasesType.Expressions"
    phrase: "Phrase"
61) EndPhrase, "Phrase" [True]
