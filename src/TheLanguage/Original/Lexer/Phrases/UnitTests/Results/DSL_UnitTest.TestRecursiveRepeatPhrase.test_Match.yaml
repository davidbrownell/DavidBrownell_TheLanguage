# <class 'Original.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
    DataItems:
      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Token: "Number Token"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 3), match='123'>"
                Whitespace: None
              Phrase: "Number Token"
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 4] (3)"
                IterEnd: "[2, 1] (4)"
                Token: "Newline+"
                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 4
                  Start: 3
                Whitespace: None
              Phrase: "Newline+"
          IsComplete: True
        Phrase: "[Number Token, Newline+]"
      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
            DataItems:
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                        DataItems:
                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[2, 1] (4)"
                              IterEnd: "[2, 4] (7)"
                              Token: "Number Token"
                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(4, 7), match='456'>"
                              Whitespace: None
                            Phrase: "Number Token"
                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[2, 4] (7)"
                              IterEnd: "[3, 1] (8)"
                              Token: "Newline+"
                              Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                End: 8
                                Start: 7
                              Whitespace: None
                            Phrase: "Newline+"
                        IsComplete: True
                      Phrase: "[Number Token, Newline+]"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                          DataItems:
                            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                DataItems:
                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                      DataItems:
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[3, 1] (8)"
                                            IterEnd: "[3, 4] (11)"
                                            Token: "Number Token"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(8, 11), match='789'>"
                                            Whitespace: None
                                          Phrase: "Number Token"
                                        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[3, 4] (11)"
                                            IterEnd: "[4, 1] (12)"
                                            Token: "Newline+"
                                            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 12
                                              Start: 11
                                            Whitespace: None
                                          Phrase: "Newline+"
                                      IsComplete: True
                                    Phrase: "[Number Token, Newline+]"
                                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[4, 1] (12)"
                                              IterEnd: "[4, 7] (18)"
                                              Token: "Word Token"
                                              Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(12, 18), match='helloa'>"
                                              Whitespace: None
                                            Phrase: "Word Token"
                                          - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[4, 7] (18)"
                                              IterEnd: "[5, 1] (19)"
                                              Token: "Newline+"
                                              Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                End: 19
                                                Start: 18
                                              Whitespace: None
                                            Phrase: "Newline+"
                                        IsComplete: True
                                      Phrase: "[Word Token, Newline+]"
                                    Phrase: "({Recursive Phrase, 1, 2} | [Word Token, Newline+])"
                                IsComplete: True
                              Phrase: "Recursive Phrase"
                          IsComplete: True
                        Phrase: "{Recursive Phrase, 1, 2}"
                      Phrase: "({Recursive Phrase, 1, 2} | [Word Token, Newline+])"
                  IsComplete: True
                Phrase: "Recursive Phrase"
            IsComplete: True
          Phrase: "{Recursive Phrase, 1, 2}"
        Phrase: "({Recursive Phrase, 1, 2} | [Word Token, Newline+])"
    IsComplete: True
  Phrase: "Recursive Phrase"
IterBegin: "[1, 1] (0)"
IterEnd: "[5, 1] (19)"
Success: True
