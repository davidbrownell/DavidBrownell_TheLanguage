# <class 'Original.Lexer.Components.AST.Node'>
Children:
  - # <class 'Original.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Original.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Original.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 6] (5)"
                    Type: "Lower <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(0, 5), match='lower'>"
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 6] (5)"
                    IterEnd: "[1, 7] (6)"
                    Type: "':' <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(5, 6), match=':'>"
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 7] (6)"
                    IterEnd: "[2, 1] (7)"
                    Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                      End: 7
                      Start: 6
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: True
                    IterBegin: "[2, 1] (7)"
                    IterEnd: "[2, 11] (17)"
                    Type: "<comment> <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(7, 17), match='# Comment1'>"
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: True
                    IterBegin: "[2, 11] (17)"
                    IterEnd: "[3, 1] (18)"
                    Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                      End: 18
                      Start: 17
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[3, 1] (18)"
                    IterEnd: "[3, 5] (22)"
                    Type: "Indent <class 'Original.Lexer.Components.Token.IndentToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.IndentToken.MatchResult'>
                      End: 22
                      Start: 18
                      Value: 4
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 5] (22)"
                            IterEnd: "[3, 11] (28)"
                            Type: "Upper <class 'Original.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(22, 28), match='UPPER1'>"
                            Whitespace: None
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 11] (28)"
                            IterEnd: "[4, 1] (29)"
                            Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                              End: 29
                              Start: 28
                            Whitespace: None
                        IsIgnored: False
                        IterBegin: "[3, 5] (22)"
                        IterEnd: "[4, 1] (29)"
                        Type: "[Upper, Newline+] <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IsIgnored: False
                    IterBegin: "[3, 5] (22)"
                    IterEnd: "[4, 1] (29)"
                    Type: "{[Upper, Newline+], 1, None} <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[4, 1] (29)"
                    IterEnd: "[4, 1] (29)"
                    Type: "Dedent <class 'Original.Lexer.Components.Token.DedentToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.DedentToken.MatchResult'>
                      {}
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[4, 1] (29)"
                Type: "[Lower, ':', Newline+, Indent, {[Upper, Newline+], 1, None}, Dedent] <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[4, 1] (29)"
            Type: "Phrase <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[4, 1] (29)"
        Type: "(Phrase) Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[4, 1] (29)"
    Type: "Dynamic Phrase <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[4, 1] (29)"
Type: "<None>"
