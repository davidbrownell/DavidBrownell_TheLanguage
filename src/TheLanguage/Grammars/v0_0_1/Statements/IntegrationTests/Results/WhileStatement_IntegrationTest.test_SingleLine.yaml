# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Type: "'while' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 5), match='while'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 7] (6)"
                                    IterEnd: "[1, 12] (11)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(6, 11), match='value'>"
                                    Whitespace:
                                      - 5
                                      - 6
                                Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                                  Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                    Name: "value"
                                  Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                    Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                        Column: 7
                                        Line: 1
                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                        Column: 12
                                        Line: 1
                                    Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                      Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                        Column: 7
                                        Line: 1
                                      End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                        Column: 12
                                        Line: 1
                                IterBegin: "[1, 7] (6)"
                                IterEnd: "[1, 12] (11)"
                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 7] (6)"
                            IterEnd: "[1, 12] (11)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.LexerInfo'>
                              Data: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                Name: "value"
                              Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                    Column: 7
                                    Line: 1
                                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                    Column: 12
                                    Line: 1
                                Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                    Column: 7
                                    Line: 1
                                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                    Column: 12
                                    Line: 1
                          Regions: # <class 'TheLanguage.Lexer.ParserInterfaces.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                            Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 7
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 12
                                Line: 1
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 7
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 12
                                Line: 1
                        IterBegin: "[1, 7] (6)"
                        IterEnd: "[1, 12] (11)"
                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[1, 7] (6)"
                    IterEnd: "[1, 12] (11)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 7] (6)"
                IterEnd: "[1, 12] (11)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 12] (11)"
                    IterEnd: "[1, 13] (12)"
                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 12), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 14] (13)"
                                    IterEnd: "[1, 19] (18)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(13, 18), match='Func1'>"
                                    Whitespace:
                                      - 12
                                      - 13
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 19] (18)"
                                        IterEnd: "[1, 20] (19)"
                                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(18, 19), match='('>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 20] (19)"
                                        IterEnd: "[1, 21] (20)"
                                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(19, 20), match=')'>"
                                        Whitespace: None
                                    IterBegin: "[1, 19] (18)"
                                    IterEnd: "[1, 21] (20)"
                                    Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 21] (20)"
                                    IterEnd: "[2, 1] (21)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 21
                                      Start: 20
                                    Whitespace: None
                                IterBegin: "[1, 14] (13)"
                                IterEnd: "[2, 1] (21)"
                                Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 14] (13)"
                            IterEnd: "[2, 1] (21)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[1, 14] (13)"
                        IterEnd: "[2, 1] (21)"
                        Type: "DynamicPhrasesType.Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[1, 14] (13)"
                    IterEnd: "[2, 1] (21)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 12] (11)"
                IterEnd: "[2, 1] (21)"
                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (21)"
            Type: "While Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (21)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (21)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[2, 1] (21)"
Type: "<None>"
