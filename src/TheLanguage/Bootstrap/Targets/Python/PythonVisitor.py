import os
import textwrap

from contextlib import contextmanager
from typing import Any, Callable, List, Optional, TextIO, Tuple, Union

import CommonEnvironment
from CommonEnvironment.CallOnExit import CallOnExit
from CommonEnvironment import Interface
from CommonEnvironment.StreamDecorator import StreamDecorator

from CommonEnvironmentEx.Package import InitRelativeImports

# ----------------------------------------------------------------------
_script_fullpath                            = CommonEnvironment.ThisFullpath()
_script_dir, _script_name                   = os.path.split(_script_fullpath)
# ----------------------------------------------------------------------

with InitRelativeImports():
    from ...Parser.Visitor import *


# ----------------------------------------------------------------------
class PythonVisitor(Visitor):
    # ----------------------------------------------------------------------
    def __init__(
        self,
        output_stream: TextIO,
        indent_level: Optional[int]=None,
    ):
        self._stream_stack: List[TextIO]    = [output_stream]
        self._indentation                   = " " * (indent_level or 2)

    # ----------------------------------------------------------------------
    @Interface.override
    def OnRoot(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: RootParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        self._stream.write(
            textwrap.dedent(
                """\
                # ----------------------------------------------------------------------
                # |
                # |  This file has been automatically generated by {name}.
                # |
                # ----------------------------------------------------------------------
                {documentation}
                <<<<imports placeholder>>>

                """,
            ).format(
                name=_script_name,
                documentation="" if parser_info.Documentation is None else textwrap.dedent(
                    '''\
                    """\\
                    {}
                    """
                    '''.format(parser_info.Documentation.replace('"""', '\\"\\"\\"')),
                ),
            ),
        )

    # ----------------------------------------------------------------------
    @Interface.override
    def OnConstraintArgument(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: ConstraintArgumentParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnConstraintParameter(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: ConstraintParameterParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnConstraintParameters(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: ConstraintParametersParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnFunctionArgument(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: FunctionArgumentParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnFunctionParameterType(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: FunctionParameterTypeParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnFunctionParameter(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: FunctionParameterParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnFunctionParameters(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: FunctionParametersParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnTemplateArgument(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: TemplateArgumentParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnTemplateTypeParameter(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: TemplateTypeParameterParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnTemplateDecoratorParameter(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: TemplateDecoratorParameterParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnTemplateParameters(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: TemplateParametersParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnBinaryExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: BinaryExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnCastExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: CastExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnFuncInvocationExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: FuncInvocationExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnGeneratorExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: GeneratorExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnGenericNameExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: GenericNameExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnGroupExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: GroupExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnIndexExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: IndexExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnLambdaExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: LambdaExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnMatchTypeExpressionClause(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: MatchTypeExpressionClauseParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnMatchTypeExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: MatchTypeExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnMatchValueExpressionClause(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: MatchValueExpressionClauseParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnMatchValueExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: MatchValueExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnTernaryExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: TernaryExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnTupleExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: TupleExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnUnaryExpression(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: UnaryExpressionParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnBoolLiteral(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: BoolLiteralParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnCharacterLiteral(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: CharacterLiteralParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnIntLiteral(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: IntLiteralParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnNoneLiteral(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: NoneLiteralParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnNumberLiteral(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: NumberLiteralParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnStringLiteral(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: StringLiteralParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnTupleName(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: TupleNameParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnVariableName(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: VariableNameParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnAssertStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: AssertStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnBinaryStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: BinaryStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnBreakStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: BreakStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnClassMemberStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: ClassMemberStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnClassStatementDependency(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: ClassStatementDependencyParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnClassStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: ClassStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnContinueStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: ContinueStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnDeleteStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: DeleteStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnFuncDefinitionStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: FuncDefinitionStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnFuncInvocationStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: FuncInvocationStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnIfStatementClause(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: IfStatementClauseParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnIfStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: IfStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnImportStatementItem(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: ImportStatementItemParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnImportStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: ImportStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnIterateStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: IterateStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnNoopStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: NoopStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnRaiseStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: RaiseStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnReturnStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: ReturnStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnScopedRefStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: ScopedRefStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnTryStatementClause(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: TryStatementClauseParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnTryStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: TryStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnTypeAliasStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: TypeAliasStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnVariableDeclarationStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: VariableDeclarationStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnWhileStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: WhileStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnYieldStatement(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: YieldStatementParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnFuncType(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: FuncTypeParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnNoneType(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: NoneTypeParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnStandardType(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: StandardTypeParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnTupleType(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: TupleTypeParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    @Interface.override
    def OnVariantType(
        self,
        stack: List[Union[str, ParserInfo, Tuple[ParserInfo, str]]],
        parser_info: VariantTypeParserInfo,
    ) -> Union[None, bool, Callable[[], Any]]:
        pass # TODO

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @property
    def _stream(self):
        return self._stream_stack[-1]

    # ----------------------------------------------------------------------
    @contextmanager
    def _Indent(self):
        self._stream_stack.append(
            StreamDecorator(
                self._stream,
                line_prefix=self._indentation,
                skip_first_line_prefix=False,
            ),  # type: ignore
        )

        with CallOnExit(self._stream_stack.pop):
            yield
