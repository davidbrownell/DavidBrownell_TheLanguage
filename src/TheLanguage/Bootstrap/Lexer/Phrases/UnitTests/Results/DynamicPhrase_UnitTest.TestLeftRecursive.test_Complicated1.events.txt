0) StartPhrase, "Dynamic Phrase"
1) StartPhrase, "All Phrases <Prefix>"
2) StartPhrase, "Lower"
3) OnInternalPhraseAsync, 0, 3
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 1] (0)"
      IterEnd: "[1, 4] (3)"
      Token: "Lower"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
      Whitespace: None
    Phrase: "Lower"
4) EndPhrase, "Lower" [True]
5) StartPhrase, "Upper"
6) EndPhrase, "Upper" [False]
7) OnInternalPhraseAsync, 0, 3
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[1, 4] (3)"
        Token: "Lower"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
8) EndPhrase, "All Phrases <Prefix>" [True]
9) StartPhrase, "All Phrases <Suffix>"
10) StartPhrase, "'+'"
11) OnInternalPhraseAsync, 4, 5
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 5] (4)"
      IterEnd: "[1, 6] (5)"
      Token: "'+'"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
      Whitespace:
        - 3
        - 4
    Phrase: "'+'"
12) EndPhrase, "'+'" [True]
13) StartPhrase, "DynamicPhrasesType.Statements"
14) StartPhrase, "All Phrases <Prefix>"
15) StartPhrase, "Lower"
16) OnInternalPhraseAsync, 6, 10
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 7] (6)"
      IterEnd: "[1, 11] (10)"
      Token: "Lower"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
      Whitespace:
        - 5
        - 6
    Phrase: "Lower"
17) EndPhrase, "Lower" [True]
18) StartPhrase, "Upper"
19) EndPhrase, "Upper" [False]
20) OnInternalPhraseAsync, 5, 10
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 7] (6)"
        IterEnd: "[1, 11] (10)"
        Token: "Lower"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
        Whitespace:
          - 5
          - 6
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
21) EndPhrase, "All Phrases <Prefix>" [True]
22) StartPhrase, "All Phrases <Suffix>"
23) StartPhrase, "'+'"
24) EndPhrase, "'+'" [False]
25) StartPhrase, "'-'"
26) EndPhrase, "'-'" [False]
27) StartPhrase, "'*'"
28) EndPhrase, "'*'" [False]
29) StartPhrase, "'/'"
30) EndPhrase, "'/'" [False]
31) StartPhrase, "'if'"
32) OnInternalPhraseAsync, 11, 13
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 12] (11)"
      IterEnd: "[1, 14] (13)"
      Token: "'if'"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
      Whitespace:
        - 10
        - 11
    Phrase: "'if'"
33) EndPhrase, "'if'" [True]
34) StartPhrase, "DynamicPhrasesType.Statements"
35) StartPhrase, "All Phrases <Prefix>"
36) StartPhrase, "Lower"
37) EndPhrase, "Lower" [False]
38) StartPhrase, "Upper"
39) OnInternalPhraseAsync, 14, 23
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 15] (14)"
      IterEnd: "[1, 24] (23)"
      Token: "Upper"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
      Whitespace:
        - 13
        - 14
    Phrase: "Upper"
40) EndPhrase, "Upper" [True]
41) OnInternalPhraseAsync, 13, 23
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 15] (14)"
        IterEnd: "[1, 24] (23)"
        Token: "Upper"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
        Whitespace:
          - 13
          - 14
      Phrase: "Upper"
    Phrase: "All Phrases <Prefix>"
42) EndPhrase, "All Phrases <Prefix>" [True]
43) StartPhrase, "All Phrases <Suffix>"
44) StartPhrase, "'+'"
45) EndPhrase, "'+'" [False]
46) StartPhrase, "'-'"
47) EndPhrase, "'-'" [False]
48) StartPhrase, "'*'"
49) EndPhrase, "'*'" [False]
50) StartPhrase, "'/'"
51) EndPhrase, "'/'" [False]
52) StartPhrase, "'if'"
53) EndPhrase, "'if'" [False]
54) StartPhrase, "'['"
55) EndPhrase, "'['" [False]
56) EndPhrase, "All Phrases <Suffix>" [False]
57) OnInternalPhraseAsync, 13, 23
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 15] (14)"
          IterEnd: "[1, 24] (23)"
          Token: "Upper"
          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
          Whitespace:
            - 13
            - 14
        Phrase: "Upper"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
58) EndPhrase, "DynamicPhrasesType.Statements" [True]
59) StartPhrase, "'else'"
60) OnInternalPhraseAsync, 24, 28
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 25] (24)"
      IterEnd: "[1, 29] (28)"
      Token: "'else'"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
      Whitespace:
        - 23
        - 24
    Phrase: "'else'"
61) EndPhrase, "'else'" [True]
62) StartPhrase, "DynamicPhrasesType.Statements"
63) StartPhrase, "All Phrases <Prefix>"
64) StartPhrase, "Lower"
65) OnInternalPhraseAsync, 29, 34
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 30] (29)"
      IterEnd: "[1, 35] (34)"
      Token: "Lower"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
      Whitespace:
        - 28
        - 29
    Phrase: "Lower"
66) EndPhrase, "Lower" [True]
67) StartPhrase, "Upper"
68) EndPhrase, "Upper" [False]
69) OnInternalPhraseAsync, 28, 34
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 30] (29)"
        IterEnd: "[1, 35] (34)"
        Token: "Lower"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
        Whitespace:
          - 28
          - 29
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
70) EndPhrase, "All Phrases <Prefix>" [True]
71) StartPhrase, "All Phrases <Suffix>"
72) StartPhrase, "'+'"
73) EndPhrase, "'+'" [False]
74) StartPhrase, "'-'"
75) OnInternalPhraseAsync, 35, 36
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 36] (35)"
      IterEnd: "[1, 37] (36)"
      Token: "'-'"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
      Whitespace:
        - 34
        - 35
    Phrase: "'-'"
76) EndPhrase, "'-'" [True]
77) StartPhrase, "DynamicPhrasesType.Statements"
78) StartPhrase, "All Phrases <Prefix>"
79) StartPhrase, "Lower"
80) OnInternalPhraseAsync, 37, 42
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 38] (37)"
      IterEnd: "[1, 43] (42)"
      Token: "Lower"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
      Whitespace:
        - 36
        - 37
    Phrase: "Lower"
81) EndPhrase, "Lower" [True]
82) StartPhrase, "Upper"
83) EndPhrase, "Upper" [False]
84) OnInternalPhraseAsync, 36, 42
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 38] (37)"
        IterEnd: "[1, 43] (42)"
        Token: "Lower"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
        Whitespace:
          - 36
          - 37
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
85) EndPhrase, "All Phrases <Prefix>" [True]
86) StartPhrase, "All Phrases <Suffix>"
87) StartPhrase, "'+'"
88) EndPhrase, "'+'" [False]
89) StartPhrase, "'-'"
90) EndPhrase, "'-'" [False]
91) StartPhrase, "'*'"
92) EndPhrase, "'*'" [False]
93) StartPhrase, "'/'"
94) EndPhrase, "'/'" [False]
95) StartPhrase, "'if'"
96) EndPhrase, "'if'" [False]
97) StartPhrase, "'['"
98) OnInternalPhraseAsync, 42, 43
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 43] (42)"
      IterEnd: "[1, 44] (43)"
      Token: "'['"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
      Whitespace: None
    Phrase: "'['"
99) EndPhrase, "'['" [True]
100) StartPhrase, "DynamicPhrasesType.Statements"
101) StartPhrase, "All Phrases <Prefix>"
102) StartPhrase, "Lower"
103) OnInternalPhraseAsync, 43, 44
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 44] (43)"
      IterEnd: "[1, 45] (44)"
      Token: "Lower"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
      Whitespace: None
    Phrase: "Lower"
104) EndPhrase, "Lower" [True]
105) StartPhrase, "Upper"
106) EndPhrase, "Upper" [False]
107) OnInternalPhraseAsync, 43, 44
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 44] (43)"
        IterEnd: "[1, 45] (44)"
        Token: "Lower"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
108) EndPhrase, "All Phrases <Prefix>" [True]
109) StartPhrase, "All Phrases <Suffix>"
110) StartPhrase, "'+'"
111) EndPhrase, "'+'" [False]
112) StartPhrase, "'-'"
113) EndPhrase, "'-'" [False]
114) StartPhrase, "'*'"
115) EndPhrase, "'*'" [False]
116) StartPhrase, "'/'"
117) EndPhrase, "'/'" [False]
118) StartPhrase, "'if'"
119) EndPhrase, "'if'" [False]
120) StartPhrase, "'['"
121) EndPhrase, "'['" [False]
122) EndPhrase, "All Phrases <Suffix>" [False]
123) OnInternalPhraseAsync, 43, 44
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 44] (43)"
          IterEnd: "[1, 45] (44)"
          Token: "Lower"
          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
124) EndPhrase, "DynamicPhrasesType.Statements" [True]
125) StartPhrase, "']'"
126) OnInternalPhraseAsync, 44, 45
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 45] (44)"
      IterEnd: "[1, 46] (45)"
      Token: "']'"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
      Whitespace: None
    Phrase: "']'"
127) EndPhrase, "']'" [True]
128) OnInternalPhraseAsync, 42, 45
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 38] (37)"
                  IterEnd: "[1, 43] (42)"
                  Token: "Lower"
                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                  Whitespace:
                    - 36
                    - 37
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 43] (42)"
              IterEnd: "[1, 44] (43)"
              Token: "'['"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 44] (43)"
                  IterEnd: "[1, 45] (44)"
                  Token: "Lower"
                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 45] (44)"
              IterEnd: "[1, 46] (45)"
              Token: "']'"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "All Phrases <Suffix>"
129) EndPhrase, "All Phrases <Suffix>" [True]
130) StartPhrase, "All Phrases <Suffix>"
131) StartPhrase, "'+'"
132) EndPhrase, "'+'" [False]
133) StartPhrase, "'-'"
134) EndPhrase, "'-'" [False]
135) StartPhrase, "'*'"
136) EndPhrase, "'*'" [False]
137) StartPhrase, "'/'"
138) EndPhrase, "'/'" [False]
139) StartPhrase, "'if'"
140) EndPhrase, "'if'" [False]
141) StartPhrase, "'['"
142) OnInternalPhraseAsync, 45, 46
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 46] (45)"
      IterEnd: "[1, 47] (46)"
      Token: "'['"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
      Whitespace: None
    Phrase: "'['"
143) EndPhrase, "'['" [True]
144) StartPhrase, "DynamicPhrasesType.Statements"
145) StartPhrase, "All Phrases <Prefix>"
146) StartPhrase, "Lower"
147) OnInternalPhraseAsync, 46, 47
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 47] (46)"
      IterEnd: "[1, 48] (47)"
      Token: "Lower"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
      Whitespace: None
    Phrase: "Lower"
148) EndPhrase, "Lower" [True]
149) StartPhrase, "Upper"
150) EndPhrase, "Upper" [False]
151) OnInternalPhraseAsync, 46, 47
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 47] (46)"
        IterEnd: "[1, 48] (47)"
        Token: "Lower"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
152) EndPhrase, "All Phrases <Prefix>" [True]
153) StartPhrase, "All Phrases <Suffix>"
154) StartPhrase, "'+'"
155) EndPhrase, "'+'" [False]
156) StartPhrase, "'-'"
157) EndPhrase, "'-'" [False]
158) StartPhrase, "'*'"
159) EndPhrase, "'*'" [False]
160) StartPhrase, "'/'"
161) EndPhrase, "'/'" [False]
162) StartPhrase, "'if'"
163) EndPhrase, "'if'" [False]
164) StartPhrase, "'['"
165) EndPhrase, "'['" [False]
166) EndPhrase, "All Phrases <Suffix>" [False]
167) OnInternalPhraseAsync, 46, 47
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 47] (46)"
          IterEnd: "[1, 48] (47)"
          Token: "Lower"
          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
168) EndPhrase, "DynamicPhrasesType.Statements" [True]
169) StartPhrase, "']'"
170) OnInternalPhraseAsync, 47, 48
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 48] (47)"
      IterEnd: "[1, 49] (48)"
      Token: "']'"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
      Whitespace: None
    Phrase: "']'"
171) EndPhrase, "']'" [True]
172) OnInternalPhraseAsync, 45, 48
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 38] (37)"
                            IterEnd: "[1, 43] (42)"
                            Token: "Lower"
                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                            Whitespace:
                              - 36
                              - 37
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 43] (42)"
                        IterEnd: "[1, 44] (43)"
                        Token: "'['"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                        Whitespace: None
                      Phrase: "'['"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 44] (43)"
                            IterEnd: "[1, 45] (44)"
                            Token: "Lower"
                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                            Whitespace: None
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 45] (44)"
                        IterEnd: "[1, 46] (45)"
                        Token: "']'"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                        Whitespace: None
                      Phrase: "']'"
                  IsComplete: True
                Phrase: "Index"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 46] (45)"
              IterEnd: "[1, 47] (46)"
              Token: "'['"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 47] (46)"
                  IterEnd: "[1, 48] (47)"
                  Token: "Lower"
                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 48] (47)"
              IterEnd: "[1, 49] (48)"
              Token: "']'"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "All Phrases <Suffix>"
173) EndPhrase, "All Phrases <Suffix>" [True]
174) StartPhrase, "All Phrases <Suffix>"
175) StartPhrase, "'+'"
176) EndPhrase, "'+'" [False]
177) StartPhrase, "'-'"
178) EndPhrase, "'-'" [False]
179) StartPhrase, "'*'"
180) EndPhrase, "'*'" [False]
181) StartPhrase, "'/'"
182) EndPhrase, "'/'" [False]
183) StartPhrase, "'if'"
184) EndPhrase, "'if'" [False]
185) StartPhrase, "'['"
186) OnInternalPhraseAsync, 48, 49
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 49] (48)"
      IterEnd: "[1, 50] (49)"
      Token: "'['"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
      Whitespace: None
    Phrase: "'['"
187) EndPhrase, "'['" [True]
188) StartPhrase, "DynamicPhrasesType.Statements"
189) StartPhrase, "All Phrases <Prefix>"
190) StartPhrase, "Lower"
191) OnInternalPhraseAsync, 49, 50
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 50] (49)"
      IterEnd: "[1, 51] (50)"
      Token: "Lower"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
      Whitespace: None
    Phrase: "Lower"
192) EndPhrase, "Lower" [True]
193) StartPhrase, "Upper"
194) EndPhrase, "Upper" [False]
195) OnInternalPhraseAsync, 49, 50
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 50] (49)"
        IterEnd: "[1, 51] (50)"
        Token: "Lower"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
196) EndPhrase, "All Phrases <Prefix>" [True]
197) StartPhrase, "All Phrases <Suffix>"
198) StartPhrase, "'+'"
199) EndPhrase, "'+'" [False]
200) StartPhrase, "'-'"
201) EndPhrase, "'-'" [False]
202) StartPhrase, "'*'"
203) EndPhrase, "'*'" [False]
204) StartPhrase, "'/'"
205) EndPhrase, "'/'" [False]
206) StartPhrase, "'if'"
207) EndPhrase, "'if'" [False]
208) StartPhrase, "'['"
209) EndPhrase, "'['" [False]
210) EndPhrase, "All Phrases <Suffix>" [False]
211) OnInternalPhraseAsync, 49, 50
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 50] (49)"
          IterEnd: "[1, 51] (50)"
          Token: "Lower"
          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
212) EndPhrase, "DynamicPhrasesType.Statements" [True]
213) StartPhrase, "']'"
214) OnInternalPhraseAsync, 50, 51
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 51] (50)"
      IterEnd: "[1, 52] (51)"
      Token: "']'"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
      Whitespace: None
    Phrase: "']'"
215) EndPhrase, "']'" [True]
216) OnInternalPhraseAsync, 48, 51
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                            DataItems:
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 38] (37)"
                                      IterEnd: "[1, 43] (42)"
                                      Token: "Lower"
                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                      Whitespace:
                                        - 36
                                        - 37
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 43] (42)"
                                  IterEnd: "[1, 44] (43)"
                                  Token: "'['"
                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                  Whitespace: None
                                Phrase: "'['"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 44] (43)"
                                      IterEnd: "[1, 45] (44)"
                                      Token: "Lower"
                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 45] (44)"
                                  IterEnd: "[1, 46] (45)"
                                  Token: "']'"
                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                  Whitespace: None
                                Phrase: "']'"
                            IsComplete: True
                          Phrase: "Index"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 46] (45)"
                        IterEnd: "[1, 47] (46)"
                        Token: "'['"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                        Whitespace: None
                      Phrase: "'['"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 47] (46)"
                            IterEnd: "[1, 48] (47)"
                            Token: "Lower"
                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                            Whitespace: None
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 48] (47)"
                        IterEnd: "[1, 49] (48)"
                        Token: "']'"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                        Whitespace: None
                      Phrase: "']'"
                  IsComplete: True
                Phrase: "Index"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 49] (48)"
              IterEnd: "[1, 50] (49)"
              Token: "'['"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 50] (49)"
                  IterEnd: "[1, 51] (50)"
                  Token: "Lower"
                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 51] (50)"
              IterEnd: "[1, 52] (51)"
              Token: "']'"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "All Phrases <Suffix>"
217) EndPhrase, "All Phrases <Suffix>" [True]
218) StartPhrase, "All Phrases <Suffix>"
219) StartPhrase, "'+'"
220) EndPhrase, "'+'" [False]
221) StartPhrase, "'-'"
222) EndPhrase, "'-'" [False]
223) StartPhrase, "'*'"
224) EndPhrase, "'*'" [False]
225) StartPhrase, "'/'"
226) EndPhrase, "'/'" [False]
227) StartPhrase, "'if'"
228) EndPhrase, "'if'" [False]
229) StartPhrase, "'['"
230) OnInternalPhraseAsync, 51, 52
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 52] (51)"
      IterEnd: "[1, 53] (52)"
      Token: "'['"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
      Whitespace: None
    Phrase: "'['"
231) EndPhrase, "'['" [True]
232) StartPhrase, "DynamicPhrasesType.Statements"
233) StartPhrase, "All Phrases <Prefix>"
234) StartPhrase, "Lower"
235) OnInternalPhraseAsync, 52, 53
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 53] (52)"
      IterEnd: "[1, 54] (53)"
      Token: "Lower"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
      Whitespace: None
    Phrase: "Lower"
236) EndPhrase, "Lower" [True]
237) StartPhrase, "Upper"
238) EndPhrase, "Upper" [False]
239) OnInternalPhraseAsync, 52, 53
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 53] (52)"
        IterEnd: "[1, 54] (53)"
        Token: "Lower"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "All Phrases <Prefix>"
240) EndPhrase, "All Phrases <Prefix>" [True]
241) StartPhrase, "All Phrases <Suffix>"
242) StartPhrase, "'+'"
243) EndPhrase, "'+'" [False]
244) StartPhrase, "'-'"
245) EndPhrase, "'-'" [False]
246) StartPhrase, "'*'"
247) EndPhrase, "'*'" [False]
248) StartPhrase, "'/'"
249) EndPhrase, "'/'" [False]
250) StartPhrase, "'if'"
251) EndPhrase, "'if'" [False]
252) StartPhrase, "'['"
253) EndPhrase, "'['" [False]
254) EndPhrase, "All Phrases <Suffix>" [False]
255) OnInternalPhraseAsync, 52, 53
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 53] (52)"
          IterEnd: "[1, 54] (53)"
          Token: "Lower"
          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
256) EndPhrase, "DynamicPhrasesType.Statements" [True]
257) StartPhrase, "']'"
258) OnInternalPhraseAsync, 53, 54
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 54] (53)"
      IterEnd: "[1, 55] (54)"
      Token: "']'"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
      Whitespace: None
    Phrase: "']'"
259) EndPhrase, "']'" [True]
260) OnInternalPhraseAsync, 51, 54
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                            DataItems:
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                      DataItems:
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 38] (37)"
                                                IterEnd: "[1, 43] (42)"
                                                Token: "Lower"
                                                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                Whitespace:
                                                  - 36
                                                  - 37
                                              Phrase: "Lower"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 43] (42)"
                                            IterEnd: "[1, 44] (43)"
                                            Token: "'['"
                                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                            Whitespace: None
                                          Phrase: "'['"
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 44] (43)"
                                                IterEnd: "[1, 45] (44)"
                                                Token: "Lower"
                                                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                Whitespace: None
                                              Phrase: "Lower"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 45] (44)"
                                            IterEnd: "[1, 46] (45)"
                                            Token: "']'"
                                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                            Whitespace: None
                                          Phrase: "']'"
                                      IsComplete: True
                                    Phrase: "Index"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 46] (45)"
                                  IterEnd: "[1, 47] (46)"
                                  Token: "'['"
                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                  Whitespace: None
                                Phrase: "'['"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 47] (46)"
                                      IterEnd: "[1, 48] (47)"
                                      Token: "Lower"
                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 48] (47)"
                                  IterEnd: "[1, 49] (48)"
                                  Token: "']'"
                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                  Whitespace: None
                                Phrase: "']'"
                            IsComplete: True
                          Phrase: "Index"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 49] (48)"
                        IterEnd: "[1, 50] (49)"
                        Token: "'['"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                        Whitespace: None
                      Phrase: "'['"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 50] (49)"
                            IterEnd: "[1, 51] (50)"
                            Token: "Lower"
                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                            Whitespace: None
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 51] (50)"
                        IterEnd: "[1, 52] (51)"
                        Token: "']'"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                        Whitespace: None
                      Phrase: "']'"
                  IsComplete: True
                Phrase: "Index"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 52] (51)"
              IterEnd: "[1, 53] (52)"
              Token: "'['"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 53] (52)"
                  IterEnd: "[1, 54] (53)"
                  Token: "Lower"
                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 54] (53)"
              IterEnd: "[1, 55] (54)"
              Token: "']'"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "All Phrases <Suffix>"
261) EndPhrase, "All Phrases <Suffix>" [True]
262) StartPhrase, "All Phrases <Suffix>"
263) StartPhrase, "'+'"
264) EndPhrase, "'+'" [False]
265) StartPhrase, "'-'"
266) EndPhrase, "'-'" [False]
267) StartPhrase, "'*'"
268) OnInternalPhraseAsync, 55, 56
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 56] (55)"
      IterEnd: "[1, 57] (56)"
      Token: "'*'"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
      Whitespace:
        - 54
        - 55
    Phrase: "'*'"
269) EndPhrase, "'*'" [True]
270) StartPhrase, "DynamicPhrasesType.Statements"
271) StartPhrase, "All Phrases <Prefix>"
272) StartPhrase, "Lower"
273) EndPhrase, "Lower" [False]
274) StartPhrase, "Upper"
275) OnInternalPhraseAsync, 57, 61
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 58] (57)"
      IterEnd: "[1, 62] (61)"
      Token: "Upper"
      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
      Whitespace:
        - 56
        - 57
    Phrase: "Upper"
276) EndPhrase, "Upper" [True]
277) OnInternalPhraseAsync, 56, 61
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 58] (57)"
        IterEnd: "[1, 62] (61)"
        Token: "Upper"
        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
        Whitespace:
          - 56
          - 57
      Phrase: "Upper"
    Phrase: "All Phrases <Prefix>"
278) EndPhrase, "All Phrases <Prefix>" [True]
279) StartPhrase, "All Phrases <Suffix>"
280) StartPhrase, "'+'"
281) EndPhrase, "'+'" [False]
282) StartPhrase, "'-'"
283) EndPhrase, "'-'" [False]
284) StartPhrase, "'*'"
285) EndPhrase, "'*'" [False]
286) StartPhrase, "'/'"
287) EndPhrase, "'/'" [False]
288) StartPhrase, "'if'"
289) EndPhrase, "'if'" [False]
290) StartPhrase, "'['"
291) EndPhrase, "'['" [False]
292) EndPhrase, "All Phrases <Suffix>" [False]
293) OnInternalPhraseAsync, 56, 61
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 58] (57)"
          IterEnd: "[1, 62] (61)"
          Token: "Upper"
          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
          Whitespace:
            - 56
            - 57
        Phrase: "Upper"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
294) EndPhrase, "DynamicPhrasesType.Statements" [True]
295) StartPhrase, "'/'"
296) EndPhrase, "'/'" [False]
297) StartPhrase, "'if'"
298) EndPhrase, "'if'" [False]
299) StartPhrase, "'['"
300) EndPhrase, "'['" [False]
301) OnInternalPhraseAsync, 54, 61
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                            DataItems:
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                      DataItems:
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 1] (0)"
                                                IterEnd: "[1, 4] (3)"
                                                Token: "Lower"
                                                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                                Whitespace: None
                                              Phrase: "Lower"
                                            Phrase: "All Phrases"
                                          Phrase: "Dynamic Phrase"
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 5] (4)"
                                            IterEnd: "[1, 6] (5)"
                                            Token: "'+'"
                                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                            Whitespace:
                                              - 3
                                              - 4
                                          Phrase: "'+'"
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 7] (6)"
                                                IterEnd: "[1, 11] (10)"
                                                Token: "Lower"
                                                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                                                Whitespace:
                                                  - 5
                                                  - 6
                                              Phrase: "Lower"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                      IsComplete: True
                                    Phrase: "Add"
                                  Phrase: "All Phrases"
                                Phrase: "Dynamic Phrase"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 12] (11)"
                                  IterEnd: "[1, 14] (13)"
                                  Token: "'if'"
                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                                  Whitespace:
                                    - 10
                                    - 11
                                Phrase: "'if'"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 15] (14)"
                                      IterEnd: "[1, 24] (23)"
                                      Token: "Upper"
                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                                      Whitespace:
                                        - 13
                                        - 14
                                    Phrase: "Upper"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 25] (24)"
                                  IterEnd: "[1, 29] (28)"
                                  Token: "'else'"
                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                                  Whitespace:
                                    - 23
                                    - 24
                                Phrase: "'else'"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 30] (29)"
                                      IterEnd: "[1, 35] (34)"
                                      Token: "Lower"
                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                                      Whitespace:
                                        - 28
                                        - 29
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                            IsComplete: True
                          Phrase: "Ter"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 36] (35)"
                        IterEnd: "[1, 37] (36)"
                        Token: "'-'"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                        Whitespace:
                          - 34
                          - 35
                      Phrase: "'-'"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                            DataItems:
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                      DataItems:
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                DataItems:
                                                  - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                          DataItems:
                                                            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[1, 38] (37)"
                                                                    IterEnd: "[1, 43] (42)"
                                                                    Token: "Lower"
                                                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                                    Whitespace:
                                                                      - 36
                                                                      - 37
                                                                  Phrase: "Lower"
                                                                Phrase: "All Phrases"
                                                              Phrase: "DynamicPhrasesType.Statements"
                                                            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                IsIgnored: False
                                                                IterBegin: "[1, 43] (42)"
                                                                IterEnd: "[1, 44] (43)"
                                                                Token: "'['"
                                                                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                                Whitespace: None
                                                              Phrase: "'['"
                                                            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[1, 44] (43)"
                                                                    IterEnd: "[1, 45] (44)"
                                                                    Token: "Lower"
                                                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                                    Whitespace: None
                                                                  Phrase: "Lower"
                                                                Phrase: "All Phrases"
                                                              Phrase: "DynamicPhrasesType.Statements"
                                                            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                IsIgnored: False
                                                                IterBegin: "[1, 45] (44)"
                                                                IterEnd: "[1, 46] (45)"
                                                                Token: "']'"
                                                                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                                Whitespace: None
                                                              Phrase: "']'"
                                                          IsComplete: True
                                                        Phrase: "Index"
                                                      Phrase: "All Phrases"
                                                    Phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 46] (45)"
                                                      IterEnd: "[1, 47] (46)"
                                                      Token: "'['"
                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                                      Whitespace: None
                                                    Phrase: "'['"
                                                  - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 47] (46)"
                                                          IterEnd: "[1, 48] (47)"
                                                          Token: "Lower"
                                                          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                          Whitespace: None
                                                        Phrase: "Lower"
                                                      Phrase: "All Phrases"
                                                    Phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 48] (47)"
                                                      IterEnd: "[1, 49] (48)"
                                                      Token: "']'"
                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                                      Whitespace: None
                                                    Phrase: "']'"
                                                IsComplete: True
                                              Phrase: "Index"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 49] (48)"
                                            IterEnd: "[1, 50] (49)"
                                            Token: "'['"
                                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                            Whitespace: None
                                          Phrase: "'['"
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 50] (49)"
                                                IterEnd: "[1, 51] (50)"
                                                Token: "Lower"
                                                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                                Whitespace: None
                                              Phrase: "Lower"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 51] (50)"
                                            IterEnd: "[1, 52] (51)"
                                            Token: "']'"
                                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                            Whitespace: None
                                          Phrase: "']'"
                                      IsComplete: True
                                    Phrase: "Index"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 52] (51)"
                                  IterEnd: "[1, 53] (52)"
                                  Token: "'['"
                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                  Whitespace: None
                                Phrase: "'['"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 53] (52)"
                                      IterEnd: "[1, 54] (53)"
                                      Token: "Lower"
                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 54] (53)"
                                  IterEnd: "[1, 55] (54)"
                                  Token: "']'"
                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                  Whitespace: None
                                Phrase: "']'"
                            IsComplete: True
                          Phrase: "Index"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Sub"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 56] (55)"
              IterEnd: "[1, 57] (56)"
              Token: "'*'"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
              Whitespace:
                - 54
                - 55
            Phrase: "'*'"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 58] (57)"
                  IterEnd: "[1, 62] (61)"
                  Token: "Upper"
                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                  Whitespace:
                    - 56
                    - 57
                Phrase: "Upper"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Mul"
    Phrase: "All Phrases <Suffix>"
302) EndPhrase, "All Phrases <Suffix>" [True]
303) StartPhrase, "All Phrases <Suffix>"
304) StartPhrase, "'+'"
305) EndPhrase, "'+'" [False]
306) StartPhrase, "'-'"
307) EndPhrase, "'-'" [False]
308) StartPhrase, "'*'"
309) EndPhrase, "'*'" [False]
310) StartPhrase, "'/'"
311) EndPhrase, "'/'" [False]
312) StartPhrase, "'if'"
313) EndPhrase, "'if'" [False]
314) StartPhrase, "'['"
315) EndPhrase, "'['" [False]
316) EndPhrase, "All Phrases <Suffix>" [False]
317) OnInternalPhraseAsync, 36, 61
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                    DataItems:
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 1] (0)"
                                                  IterEnd: "[1, 4] (3)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "Dynamic Phrase"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 5] (4)"
                                              IterEnd: "[1, 6] (5)"
                                              Token: "'+'"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                              Whitespace:
                                                - 3
                                                - 4
                                            Phrase: "'+'"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 7] (6)"
                                                  IterEnd: "[1, 11] (10)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                                                  Whitespace:
                                                    - 5
                                                    - 6
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                        IsComplete: True
                                      Phrase: "Add"
                                    Phrase: "All Phrases"
                                  Phrase: "Dynamic Phrase"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 12] (11)"
                                    IterEnd: "[1, 14] (13)"
                                    Token: "'if'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                                    Whitespace:
                                      - 10
                                      - 11
                                  Phrase: "'if'"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 15] (14)"
                                        IterEnd: "[1, 24] (23)"
                                        Token: "Upper"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                                        Whitespace:
                                          - 13
                                          - 14
                                      Phrase: "Upper"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 25] (24)"
                                    IterEnd: "[1, 29] (28)"
                                    Token: "'else'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                                    Whitespace:
                                      - 23
                                      - 24
                                  Phrase: "'else'"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 30] (29)"
                                        IterEnd: "[1, 35] (34)"
                                        Token: "Lower"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                                        Whitespace:
                                          - 28
                                          - 29
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                              IsComplete: True
                            Phrase: "Ter"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 36] (35)"
                          IterEnd: "[1, 37] (36)"
                          Token: "'-'"
                          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                          Whitespace:
                            - 34
                            - 35
                        Phrase: "'-'"
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                  DataItems:
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                            DataItems:
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 38] (37)"
                                                                      IterEnd: "[1, 43] (42)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                                      Whitespace:
                                                                        - 36
                                                                        - 37
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 43] (42)"
                                                                  IterEnd: "[1, 44] (43)"
                                                                  Token: "'['"
                                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                                  Whitespace: None
                                                                Phrase: "'['"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 44] (43)"
                                                                      IterEnd: "[1, 45] (44)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                                      Whitespace: None
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 45] (44)"
                                                                  IterEnd: "[1, 46] (45)"
                                                                  Token: "']'"
                                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                                  Whitespace: None
                                                                Phrase: "']'"
                                                            IsComplete: True
                                                          Phrase: "Index"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 46] (45)"
                                                        IterEnd: "[1, 47] (46)"
                                                        Token: "'['"
                                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                                        Whitespace: None
                                                      Phrase: "'['"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 47] (46)"
                                                            IterEnd: "[1, 48] (47)"
                                                            Token: "Lower"
                                                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                            Whitespace: None
                                                          Phrase: "Lower"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 48] (47)"
                                                        IterEnd: "[1, 49] (48)"
                                                        Token: "']'"
                                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                                        Whitespace: None
                                                      Phrase: "']'"
                                                  IsComplete: True
                                                Phrase: "Index"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 49] (48)"
                                              IterEnd: "[1, 50] (49)"
                                              Token: "'['"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                              Whitespace: None
                                            Phrase: "'['"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 50] (49)"
                                                  IterEnd: "[1, 51] (50)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 51] (50)"
                                              IterEnd: "[1, 52] (51)"
                                              Token: "']'"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                              Whitespace: None
                                            Phrase: "']'"
                                        IsComplete: True
                                      Phrase: "Index"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 52] (51)"
                                    IterEnd: "[1, 53] (52)"
                                    Token: "'['"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                    Whitespace: None
                                  Phrase: "'['"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 53] (52)"
                                        IterEnd: "[1, 54] (53)"
                                        Token: "Lower"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                        Whitespace: None
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 54] (53)"
                                    IterEnd: "[1, 55] (54)"
                                    Token: "']'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                    Whitespace: None
                                  Phrase: "']'"
                              IsComplete: True
                            Phrase: "Index"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Sub"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 56] (55)"
                IterEnd: "[1, 57] (56)"
                Token: "'*'"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                Whitespace:
                  - 54
                  - 55
              Phrase: "'*'"
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 58] (57)"
                    IterEnd: "[1, 62] (61)"
                    Token: "Upper"
                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                    Whitespace:
                      - 56
                      - 57
                  Phrase: "Upper"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Mul"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
318) EndPhrase, "DynamicPhrasesType.Statements" [True]
319) StartPhrase, "'*'"
320) EndPhrase, "'*'" [False]
321) StartPhrase, "'/'"
322) EndPhrase, "'/'" [False]
323) StartPhrase, "'if'"
324) EndPhrase, "'if'" [False]
325) StartPhrase, "'['"
326) EndPhrase, "'['" [False]
327) OnInternalPhraseAsync, 34, 61
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                            DataItems:
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 1] (0)"
                                      IterEnd: "[1, 4] (3)"
                                      Token: "Lower"
                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "Dynamic Phrase"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 5] (4)"
                                  IterEnd: "[1, 6] (5)"
                                  Token: "'+'"
                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                  Whitespace:
                                    - 3
                                    - 4
                                Phrase: "'+'"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 7] (6)"
                                      IterEnd: "[1, 11] (10)"
                                      Token: "Lower"
                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                                      Whitespace:
                                        - 5
                                        - 6
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                            IsComplete: True
                          Phrase: "Add"
                        Phrase: "All Phrases"
                      Phrase: "Dynamic Phrase"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 12] (11)"
                        IterEnd: "[1, 14] (13)"
                        Token: "'if'"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                        Whitespace:
                          - 10
                          - 11
                      Phrase: "'if'"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 15] (14)"
                            IterEnd: "[1, 24] (23)"
                            Token: "Upper"
                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                            Whitespace:
                              - 13
                              - 14
                          Phrase: "Upper"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 25] (24)"
                        IterEnd: "[1, 29] (28)"
                        Token: "'else'"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                        Whitespace:
                          - 23
                          - 24
                      Phrase: "'else'"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 30] (29)"
                            IterEnd: "[1, 35] (34)"
                            Token: "Lower"
                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                            Whitespace:
                              - 28
                              - 29
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Ter"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 36] (35)"
              IterEnd: "[1, 37] (36)"
              Token: "'-'"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
              Whitespace:
                - 34
                - 35
            Phrase: "'-'"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                            DataItems:
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                      DataItems:
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                DataItems:
                                                  - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 38] (37)"
                                                          IterEnd: "[1, 43] (42)"
                                                          Token: "Lower"
                                                          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                          Whitespace:
                                                            - 36
                                                            - 37
                                                        Phrase: "Lower"
                                                      Phrase: "All Phrases"
                                                    Phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 43] (42)"
                                                      IterEnd: "[1, 44] (43)"
                                                      Token: "'['"
                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                      Whitespace: None
                                                    Phrase: "'['"
                                                  - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 44] (43)"
                                                          IterEnd: "[1, 45] (44)"
                                                          Token: "Lower"
                                                          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                          Whitespace: None
                                                        Phrase: "Lower"
                                                      Phrase: "All Phrases"
                                                    Phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 45] (44)"
                                                      IterEnd: "[1, 46] (45)"
                                                      Token: "']'"
                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                      Whitespace: None
                                                    Phrase: "']'"
                                                IsComplete: True
                                              Phrase: "Index"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 46] (45)"
                                            IterEnd: "[1, 47] (46)"
                                            Token: "'['"
                                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                            Whitespace: None
                                          Phrase: "'['"
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 47] (46)"
                                                IterEnd: "[1, 48] (47)"
                                                Token: "Lower"
                                                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                Whitespace: None
                                              Phrase: "Lower"
                                            Phrase: "All Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 48] (47)"
                                            IterEnd: "[1, 49] (48)"
                                            Token: "']'"
                                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                            Whitespace: None
                                          Phrase: "']'"
                                      IsComplete: True
                                    Phrase: "Index"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 49] (48)"
                                  IterEnd: "[1, 50] (49)"
                                  Token: "'['"
                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                  Whitespace: None
                                Phrase: "'['"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 50] (49)"
                                      IterEnd: "[1, 51] (50)"
                                      Token: "Lower"
                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "All Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 51] (50)"
                                  IterEnd: "[1, 52] (51)"
                                  Token: "']'"
                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                  Whitespace: None
                                Phrase: "']'"
                            IsComplete: True
                          Phrase: "Index"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 52] (51)"
                        IterEnd: "[1, 53] (52)"
                        Token: "'['"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                        Whitespace: None
                      Phrase: "'['"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 53] (52)"
                            IterEnd: "[1, 54] (53)"
                            Token: "Lower"
                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                            Whitespace: None
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 54] (53)"
                        IterEnd: "[1, 55] (54)"
                        Token: "']'"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                        Whitespace: None
                      Phrase: "']'"
                  IsComplete: True
                Phrase: "Index"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Sub"
    Phrase: "All Phrases <Suffix>"
328) EndPhrase, "All Phrases <Suffix>" [True]
329) StartPhrase, "All Phrases <Suffix>"
330) StartPhrase, "'+'"
331) EndPhrase, "'+'" [False]
332) StartPhrase, "'-'"
333) EndPhrase, "'-'" [False]
334) StartPhrase, "'*'"
335) EndPhrase, "'*'" [False]
336) StartPhrase, "'/'"
337) EndPhrase, "'/'" [False]
338) StartPhrase, "'if'"
339) EndPhrase, "'if'" [False]
340) StartPhrase, "'['"
341) EndPhrase, "'['" [False]
342) EndPhrase, "All Phrases <Suffix>" [False]
343) OnInternalPhraseAsync, 28, 61
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                    DataItems:
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 1] (0)"
                                                  IterEnd: "[1, 4] (3)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "Dynamic Phrase"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 5] (4)"
                                              IterEnd: "[1, 6] (5)"
                                              Token: "'+'"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                              Whitespace:
                                                - 3
                                                - 4
                                            Phrase: "'+'"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 7] (6)"
                                                  IterEnd: "[1, 11] (10)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                                                  Whitespace:
                                                    - 5
                                                    - 6
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                        IsComplete: True
                                      Phrase: "Add"
                                    Phrase: "All Phrases"
                                  Phrase: "Dynamic Phrase"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 12] (11)"
                                    IterEnd: "[1, 14] (13)"
                                    Token: "'if'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                                    Whitespace:
                                      - 10
                                      - 11
                                  Phrase: "'if'"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 15] (14)"
                                        IterEnd: "[1, 24] (23)"
                                        Token: "Upper"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                                        Whitespace:
                                          - 13
                                          - 14
                                      Phrase: "Upper"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 25] (24)"
                                    IterEnd: "[1, 29] (28)"
                                    Token: "'else'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                                    Whitespace:
                                      - 23
                                      - 24
                                  Phrase: "'else'"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 30] (29)"
                                        IterEnd: "[1, 35] (34)"
                                        Token: "Lower"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                                        Whitespace:
                                          - 28
                                          - 29
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                              IsComplete: True
                            Phrase: "Ter"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 36] (35)"
                          IterEnd: "[1, 37] (36)"
                          Token: "'-'"
                          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                          Whitespace:
                            - 34
                            - 35
                        Phrase: "'-'"
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                  DataItems:
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                            DataItems:
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 38] (37)"
                                                                      IterEnd: "[1, 43] (42)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                                      Whitespace:
                                                                        - 36
                                                                        - 37
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 43] (42)"
                                                                  IterEnd: "[1, 44] (43)"
                                                                  Token: "'['"
                                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                                  Whitespace: None
                                                                Phrase: "'['"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 44] (43)"
                                                                      IterEnd: "[1, 45] (44)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                                      Whitespace: None
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 45] (44)"
                                                                  IterEnd: "[1, 46] (45)"
                                                                  Token: "']'"
                                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                                  Whitespace: None
                                                                Phrase: "']'"
                                                            IsComplete: True
                                                          Phrase: "Index"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 46] (45)"
                                                        IterEnd: "[1, 47] (46)"
                                                        Token: "'['"
                                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                                        Whitespace: None
                                                      Phrase: "'['"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 47] (46)"
                                                            IterEnd: "[1, 48] (47)"
                                                            Token: "Lower"
                                                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                            Whitespace: None
                                                          Phrase: "Lower"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 48] (47)"
                                                        IterEnd: "[1, 49] (48)"
                                                        Token: "']'"
                                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                                        Whitespace: None
                                                      Phrase: "']'"
                                                  IsComplete: True
                                                Phrase: "Index"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 49] (48)"
                                              IterEnd: "[1, 50] (49)"
                                              Token: "'['"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                              Whitespace: None
                                            Phrase: "'['"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 50] (49)"
                                                  IterEnd: "[1, 51] (50)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 51] (50)"
                                              IterEnd: "[1, 52] (51)"
                                              Token: "']'"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                              Whitespace: None
                                            Phrase: "']'"
                                        IsComplete: True
                                      Phrase: "Index"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 52] (51)"
                                    IterEnd: "[1, 53] (52)"
                                    Token: "'['"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                    Whitespace: None
                                  Phrase: "'['"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 53] (52)"
                                        IterEnd: "[1, 54] (53)"
                                        Token: "Lower"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                        Whitespace: None
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 54] (53)"
                                    IterEnd: "[1, 55] (54)"
                                    Token: "']'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                    Whitespace: None
                                  Phrase: "']'"
                              IsComplete: True
                            Phrase: "Index"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Sub"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 56] (55)"
                IterEnd: "[1, 57] (56)"
                Token: "'*'"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                Whitespace:
                  - 54
                  - 55
              Phrase: "'*'"
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 58] (57)"
                    IterEnd: "[1, 62] (61)"
                    Token: "Upper"
                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                    Whitespace:
                      - 56
                      - 57
                  Phrase: "Upper"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Mul"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
344) EndPhrase, "DynamicPhrasesType.Statements" [True]
345) StartPhrase, "'['"
346) EndPhrase, "'['" [False]
347) OnInternalPhraseAsync, 10, 61
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 4] (3)"
                            Token: "Lower"
                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                            Whitespace: None
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "Dynamic Phrase"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 5] (4)"
                        IterEnd: "[1, 6] (5)"
                        Token: "'+'"
                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                        Whitespace:
                          - 3
                          - 4
                      Phrase: "'+'"
                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 7] (6)"
                            IterEnd: "[1, 11] (10)"
                            Token: "Lower"
                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                            Whitespace:
                              - 5
                              - 6
                          Phrase: "Lower"
                        Phrase: "All Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Add"
              Phrase: "All Phrases"
            Phrase: "Dynamic Phrase"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 12] (11)"
              IterEnd: "[1, 14] (13)"
              Token: "'if'"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
              Whitespace:
                - 10
                - 11
            Phrase: "'if'"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 15] (14)"
                  IterEnd: "[1, 24] (23)"
                  Token: "Upper"
                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                  Whitespace:
                    - 13
                    - 14
                Phrase: "Upper"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 25] (24)"
              IterEnd: "[1, 29] (28)"
              Token: "'else'"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
              Whitespace:
                - 23
                - 24
            Phrase: "'else'"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 30] (29)"
                  IterEnd: "[1, 35] (34)"
                  Token: "Lower"
                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                  Whitespace:
                    - 28
                    - 29
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Ter"
    Phrase: "All Phrases <Suffix>"
348) EndPhrase, "All Phrases <Suffix>" [True]
349) StartPhrase, "All Phrases <Suffix>"
350) StartPhrase, "'+'"
351) EndPhrase, "'+'" [False]
352) StartPhrase, "'-'"
353) EndPhrase, "'-'" [False]
354) StartPhrase, "'*'"
355) EndPhrase, "'*'" [False]
356) StartPhrase, "'/'"
357) EndPhrase, "'/'" [False]
358) StartPhrase, "'if'"
359) EndPhrase, "'if'" [False]
360) StartPhrase, "'['"
361) EndPhrase, "'['" [False]
362) EndPhrase, "All Phrases <Suffix>" [False]
363) OnInternalPhraseAsync, 5, 61
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                    DataItems:
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 1] (0)"
                                                  IterEnd: "[1, 4] (3)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "Dynamic Phrase"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 5] (4)"
                                              IterEnd: "[1, 6] (5)"
                                              Token: "'+'"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                              Whitespace:
                                                - 3
                                                - 4
                                            Phrase: "'+'"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 7] (6)"
                                                  IterEnd: "[1, 11] (10)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                                                  Whitespace:
                                                    - 5
                                                    - 6
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                        IsComplete: True
                                      Phrase: "Add"
                                    Phrase: "All Phrases"
                                  Phrase: "Dynamic Phrase"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 12] (11)"
                                    IterEnd: "[1, 14] (13)"
                                    Token: "'if'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                                    Whitespace:
                                      - 10
                                      - 11
                                  Phrase: "'if'"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 15] (14)"
                                        IterEnd: "[1, 24] (23)"
                                        Token: "Upper"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                                        Whitespace:
                                          - 13
                                          - 14
                                      Phrase: "Upper"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 25] (24)"
                                    IterEnd: "[1, 29] (28)"
                                    Token: "'else'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                                    Whitespace:
                                      - 23
                                      - 24
                                  Phrase: "'else'"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 30] (29)"
                                        IterEnd: "[1, 35] (34)"
                                        Token: "Lower"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                                        Whitespace:
                                          - 28
                                          - 29
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                              IsComplete: True
                            Phrase: "Ter"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 36] (35)"
                          IterEnd: "[1, 37] (36)"
                          Token: "'-'"
                          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                          Whitespace:
                            - 34
                            - 35
                        Phrase: "'-'"
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                  DataItems:
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                            DataItems:
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 38] (37)"
                                                                      IterEnd: "[1, 43] (42)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                                      Whitespace:
                                                                        - 36
                                                                        - 37
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 43] (42)"
                                                                  IterEnd: "[1, 44] (43)"
                                                                  Token: "'['"
                                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                                  Whitespace: None
                                                                Phrase: "'['"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 44] (43)"
                                                                      IterEnd: "[1, 45] (44)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                                      Whitespace: None
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 45] (44)"
                                                                  IterEnd: "[1, 46] (45)"
                                                                  Token: "']'"
                                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                                  Whitespace: None
                                                                Phrase: "']'"
                                                            IsComplete: True
                                                          Phrase: "Index"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 46] (45)"
                                                        IterEnd: "[1, 47] (46)"
                                                        Token: "'['"
                                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                                        Whitespace: None
                                                      Phrase: "'['"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 47] (46)"
                                                            IterEnd: "[1, 48] (47)"
                                                            Token: "Lower"
                                                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                            Whitespace: None
                                                          Phrase: "Lower"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 48] (47)"
                                                        IterEnd: "[1, 49] (48)"
                                                        Token: "']'"
                                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                                        Whitespace: None
                                                      Phrase: "']'"
                                                  IsComplete: True
                                                Phrase: "Index"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 49] (48)"
                                              IterEnd: "[1, 50] (49)"
                                              Token: "'['"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                              Whitespace: None
                                            Phrase: "'['"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 50] (49)"
                                                  IterEnd: "[1, 51] (50)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 51] (50)"
                                              IterEnd: "[1, 52] (51)"
                                              Token: "']'"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                              Whitespace: None
                                            Phrase: "']'"
                                        IsComplete: True
                                      Phrase: "Index"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 52] (51)"
                                    IterEnd: "[1, 53] (52)"
                                    Token: "'['"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                    Whitespace: None
                                  Phrase: "'['"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 53] (52)"
                                        IterEnd: "[1, 54] (53)"
                                        Token: "Lower"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                        Whitespace: None
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 54] (53)"
                                    IterEnd: "[1, 55] (54)"
                                    Token: "']'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                    Whitespace: None
                                  Phrase: "']'"
                              IsComplete: True
                            Phrase: "Index"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Sub"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 56] (55)"
                IterEnd: "[1, 57] (56)"
                Token: "'*'"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                Whitespace:
                  - 54
                  - 55
              Phrase: "'*'"
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 58] (57)"
                    IterEnd: "[1, 62] (61)"
                    Token: "Upper"
                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                    Whitespace:
                      - 56
                      - 57
                  Phrase: "Upper"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Mul"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
364) EndPhrase, "DynamicPhrasesType.Statements" [True]
365) StartPhrase, "'-'"
366) EndPhrase, "'-'" [False]
367) StartPhrase, "'*'"
368) EndPhrase, "'*'" [False]
369) StartPhrase, "'/'"
370) EndPhrase, "'/'" [False]
371) StartPhrase, "'if'"
372) EndPhrase, "'if'" [False]
373) StartPhrase, "'['"
374) EndPhrase, "'['" [False]
375) OnInternalPhraseAsync, 3, 61
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
        DataItems:
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 1] (0)"
                  IterEnd: "[1, 4] (3)"
                  Token: "Lower"
                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "Dynamic Phrase"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 5] (4)"
              IterEnd: "[1, 6] (5)"
              Token: "'+'"
              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
              Whitespace:
                - 3
                - 4
            Phrase: "'+'"
          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 7] (6)"
                  IterEnd: "[1, 11] (10)"
                  Token: "Lower"
                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                  Whitespace:
                    - 5
                    - 6
                Phrase: "Lower"
              Phrase: "All Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Add"
    Phrase: "All Phrases <Suffix>"
376) EndPhrase, "All Phrases <Suffix>" [True]
377) StartPhrase, "All Phrases <Suffix>"
378) StartPhrase, "'+'"
379) EndPhrase, "'+'" [False]
380) StartPhrase, "'-'"
381) EndPhrase, "'-'" [False]
382) StartPhrase, "'*'"
383) EndPhrase, "'*'" [False]
384) StartPhrase, "'/'"
385) EndPhrase, "'/'" [False]
386) StartPhrase, "'if'"
387) EndPhrase, "'if'" [False]
388) StartPhrase, "'['"
389) EndPhrase, "'['" [False]
390) EndPhrase, "All Phrases <Suffix>" [False]
391) OnInternalPhraseAsync, 0, 61
    # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                    DataItems:
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 1] (0)"
                                                  IterEnd: "[1, 4] (3)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "Dynamic Phrase"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 5] (4)"
                                              IterEnd: "[1, 6] (5)"
                                              Token: "'+'"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
                                              Whitespace:
                                                - 3
                                                - 4
                                            Phrase: "'+'"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 7] (6)"
                                                  IterEnd: "[1, 11] (10)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                                                  Whitespace:
                                                    - 5
                                                    - 6
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                        IsComplete: True
                                      Phrase: "Add"
                                    Phrase: "All Phrases"
                                  Phrase: "Dynamic Phrase"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 12] (11)"
                                    IterEnd: "[1, 14] (13)"
                                    Token: "'if'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                                    Whitespace:
                                      - 10
                                      - 11
                                  Phrase: "'if'"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 15] (14)"
                                        IterEnd: "[1, 24] (23)"
                                        Token: "Upper"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                                        Whitespace:
                                          - 13
                                          - 14
                                      Phrase: "Upper"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 25] (24)"
                                    IterEnd: "[1, 29] (28)"
                                    Token: "'else'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                                    Whitespace:
                                      - 23
                                      - 24
                                  Phrase: "'else'"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 30] (29)"
                                        IterEnd: "[1, 35] (34)"
                                        Token: "Lower"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                                        Whitespace:
                                          - 28
                                          - 29
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                              IsComplete: True
                            Phrase: "Ter"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 36] (35)"
                          IterEnd: "[1, 37] (36)"
                          Token: "'-'"
                          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                          Whitespace:
                            - 34
                            - 35
                        Phrase: "'-'"
                      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                              DataItems:
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                        DataItems:
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                  DataItems:
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                                                            DataItems:
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 38] (37)"
                                                                      IterEnd: "[1, 43] (42)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                                      Whitespace:
                                                                        - 36
                                                                        - 37
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 43] (42)"
                                                                  IterEnd: "[1, 44] (43)"
                                                                  Token: "'['"
                                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                                  Whitespace: None
                                                                Phrase: "'['"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                      IsIgnored: False
                                                                      IterBegin: "[1, 44] (43)"
                                                                      IterEnd: "[1, 45] (44)"
                                                                      Token: "Lower"
                                                                      Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                        Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                                      Whitespace: None
                                                                    Phrase: "Lower"
                                                                  Phrase: "All Phrases"
                                                                Phrase: "DynamicPhrasesType.Statements"
                                                              - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 45] (44)"
                                                                  IterEnd: "[1, 46] (45)"
                                                                  Token: "']'"
                                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                                  Whitespace: None
                                                                Phrase: "']'"
                                                            IsComplete: True
                                                          Phrase: "Index"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 46] (45)"
                                                        IterEnd: "[1, 47] (46)"
                                                        Token: "'['"
                                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                                        Whitespace: None
                                                      Phrase: "'['"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 47] (46)"
                                                            IterEnd: "[1, 48] (47)"
                                                            Token: "Lower"
                                                            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                            Whitespace: None
                                                          Phrase: "Lower"
                                                        Phrase: "All Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 48] (47)"
                                                        IterEnd: "[1, 49] (48)"
                                                        Token: "']'"
                                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                                        Whitespace: None
                                                      Phrase: "']'"
                                                  IsComplete: True
                                                Phrase: "Index"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 49] (48)"
                                              IterEnd: "[1, 50] (49)"
                                              Token: "'['"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                              Whitespace: None
                                            Phrase: "'['"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 50] (49)"
                                                  IterEnd: "[1, 51] (50)"
                                                  Token: "Lower"
                                                  Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "All Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 51] (50)"
                                              IterEnd: "[1, 52] (51)"
                                              Token: "']'"
                                              Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                              Whitespace: None
                                            Phrase: "']'"
                                        IsComplete: True
                                      Phrase: "Index"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 52] (51)"
                                    IterEnd: "[1, 53] (52)"
                                    Token: "'['"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                    Whitespace: None
                                  Phrase: "'['"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 53] (52)"
                                        IterEnd: "[1, 54] (53)"
                                        Token: "Lower"
                                        Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                        Whitespace: None
                                      Phrase: "Lower"
                                    Phrase: "All Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 54] (53)"
                                    IterEnd: "[1, 55] (54)"
                                    Token: "']'"
                                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                    Whitespace: None
                                  Phrase: "']'"
                              IsComplete: True
                            Phrase: "Index"
                          Phrase: "All Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Sub"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 56] (55)"
                IterEnd: "[1, 57] (56)"
                Token: "'*'"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                Whitespace:
                  - 54
                  - 55
              Phrase: "'*'"
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 58] (57)"
                    IterEnd: "[1, 62] (61)"
                    Token: "Upper"
                    Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                    Whitespace:
                      - 56
                      - 57
                  Phrase: "Upper"
                Phrase: "All Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Mul"
      Phrase: "All Phrases"
    Phrase: "DynamicPhrasesType.Statements"
392) EndPhrase, "Dynamic Phrase" [True]
