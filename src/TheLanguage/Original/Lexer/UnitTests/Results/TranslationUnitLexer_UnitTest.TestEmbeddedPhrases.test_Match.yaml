# <class 'Original.Lexer.Components.AST.Node'>
Children:
  - # <class 'Original.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Original.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Original.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "Upper <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 3), match='ONE'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 5] (4)"
                    IterEnd: "[1, 8] (7)"
                    Type: "Upper <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(4, 7), match='TWO'>"
                    Whitespace:
                      - 3
                      - 4
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 10] (9)"
                    IterEnd: "[1, 15] (14)"
                    Type: "Lower <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(9, 14), match='three'>"
                    Whitespace:
                      - 7
                      - 9
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 15] (14)"
                    IterEnd: "[2, 1] (15)"
                    Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                      End: 15
                      Start: 14
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[1, 5] (4)"
                IterEnd: "[2, 1] (15)"
                Type: "Upper Lower Phrase <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (15)"
            Type: "uul <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (15)"
        Type: "(uul | lul) Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (15)"
    Type: "Dynamic Phrase <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Original.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Original.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Original.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 1] (15)"
                IterEnd: "[2, 5] (19)"
                Type: "Lower <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(15, 19), match='four'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[2, 9] (23)"
                    IterEnd: "[2, 13] (27)"
                    Type: "Upper <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(23, 27), match='FIVE'>"
                    Whitespace:
                      - 19
                      - 23
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[2, 14] (28)"
                    IterEnd: "[2, 17] (31)"
                    Type: "Lower <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(28, 31), match='six'>"
                    Whitespace:
                      - 27
                      - 28
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[2, 17] (31)"
                    IterEnd: "[3, 1] (32)"
                    Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                      End: 32
                      Start: 31
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[2, 9] (23)"
                IterEnd: "[3, 1] (32)"
                Type: "Upper Lower Phrase <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            IsIgnored: False
            IterBegin: "[2, 1] (15)"
            IterEnd: "[3, 1] (32)"
            Type: "lul <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[2, 1] (15)"
        IterEnd: "[3, 1] (32)"
        Type: "(uul | lul) Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[2, 1] (15)"
    IterEnd: "[3, 1] (32)"
    Type: "Dynamic Phrase <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[3, 1] (32)"
Type: "<None>"
