# ----------------------------------------------------------------------
# This code was automatically generated by the PythonTarget. Any changes made to this
# file will be overwritten during the next generation!
# ----------------------------------------------------------------------

from v1.Lexer.Location import Location
from v1.Parser.MiniLanguage.Types.BooleanType import BooleanType
from v1.Parser.MiniLanguage.Types.CustomType import CustomType
from v1.Parser.MiniLanguage.Types.IntegerType import IntegerType
from v1.Parser.MiniLanguage.Types.NumberType import NumberType
from v1.Parser.MiniLanguage.Types.StringType import StringType
from v1.Parser.ParserInfos.Common.ClassModifier import ClassModifier
from v1.Parser.ParserInfos.Common.ConstraintArgumentsParserInfo import ConstraintArgumentParserInfo
from v1.Parser.ParserInfos.Common.ConstraintArgumentsParserInfo import ConstraintArgumentsParserInfo
from v1.Parser.ParserInfos.Common.ConstraintParametersParserInfo import ConstraintParameterParserInfo
from v1.Parser.ParserInfos.Common.ConstraintParametersParserInfo import ConstraintParametersParserInfo
from v1.Parser.ParserInfos.Common.FuncArgumentsParserInfo import FuncArgumentParserInfo
from v1.Parser.ParserInfos.Common.FuncArgumentsParserInfo import FuncArgumentsParserInfo
from v1.Parser.ParserInfos.Common.FuncParametersParserInfo import FuncParameterParserInfo
from v1.Parser.ParserInfos.Common.FuncParametersParserInfo import FuncParametersParserInfo
from v1.Parser.ParserInfos.Common.MethodModifier import MethodModifier
from v1.Parser.ParserInfos.Common.MutabilityModifier import MutabilityModifier
from v1.Parser.ParserInfos.Common.TemplateParametersParserInfo import TemplateDecoratorParameterParserInfo
from v1.Parser.ParserInfos.Common.TemplateParametersParserInfo import TemplateParametersParserInfo
from v1.Parser.ParserInfos.Common.TemplateParametersParserInfo import TemplateTypeParameterParserInfo
from v1.Parser.ParserInfos.Common.VisibilityModifier import VisibilityModifier
from v1.Parser.ParserInfos.Expressions.BinaryExpressionParserInfo import BinaryExpressionParserInfo, OperatorType as BinaryExpressionOperatorType
from v1.Parser.ParserInfos.Expressions.BooleanExpressionParserInfo import BooleanExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.CallExpressionParserInfo import CallExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.FuncOrTypeExpressionParserInfo import FuncOrTypeExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.IntegerExpressionParserInfo import IntegerExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.StringExpressionParserInfo import StringExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.TernaryExpressionParserInfo import TernaryExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.UnaryExpressionParserInfo import UnaryExpressionParserInfo, OperatorType as UnaryExpressionParserInfoOperatorType
from v1.Parser.ParserInfos.Expressions.VariableExpressionParserInfo import VariableExpressionParserInfo
from v1.Parser.ParserInfos.ParserInfo import ParserInfoType
from v1.Parser.ParserInfos.Statements.ClassCapabilities.StandardCapabilities import StandardCapabilities
from v1.Parser.ParserInfos.Statements.ClassStatementParserInfo import ClassStatementDependencyParserInfo
from v1.Parser.ParserInfos.Statements.ClassStatementParserInfo import ClassStatementParserInfo
from v1.Parser.ParserInfos.Statements.FuncDefinitionStatementParserInfo import FuncDefinitionStatementParserInfo, OperatorType as FuncDefinitionStatementParserInfoOperatorType
from v1.Parser.ParserInfos.Statements.FuncInvocationStatementParserInfo import FuncInvocationStatementParserInfo
from v1.Parser.ParserInfos.Statements.IfStatementParserInfo import IfStatementClauseParserInfo
from v1.Parser.ParserInfos.Statements.IfStatementParserInfo import IfStatementElseClauseParserInfo
from v1.Parser.ParserInfos.Statements.IfStatementParserInfo import IfStatementParserInfo
from v1.Parser.ParserInfos.Statements.SpecialMethodStatementParserInfo import SpecialMethodStatementParserInfo, SpecialMethodType
from v1.Parser.ParserInfos.Statements.TypeAliasStatementParserInfo import TypeAliasStatementParserInfo
from v1.Parser.Region import Region


# ----------------------------------------------------------------------
region_000000 = Region(begin=Location(line=21, column=5), end=Location(line=21, column=8))
region_000001 = Region(begin=Location(line=21, column=5), end=Location(line=21, column=19))
region_000002 = Region(begin=Location(line=21, column=9), end=Location(line=21, column=19))
region_000003 = Region(begin=Location(line=22, column=5), end=Location(line=22, column=9))
region_000004 = Region(begin=Location(line=22, column=5), end=Location(line=22, column=21))
region_000005 = Region(begin=Location(line=22, column=10), end=Location(line=22, column=21))
region_000006 = Region(begin=Location(line=20, column=31), end=Location(line=23, column=2))
region_000007 = Region(begin=Location(line=21, column=5), end=Location(line=22, column=22))
region_000008 = Region(begin=Location(line=25, column=9), end=Location(line=25, column=13))
region_000009 = Region(begin=Location(line=25, column=9), end=Location(line=25, column=24))
region_000010 = Region(begin=Location(line=25, column=14), end=Location(line=25, column=24))
region_000011 = Region(begin=Location(line=26, column=9), end=Location(line=26, column=12))
region_000012 = Region(begin=Location(line=26, column=67), end=Location(line=26, column=77))
region_000013 = Region(begin=Location(line=26, column=30), end=Location(line=26, column=31))
region_000014 = Region(begin=Location(line=26, column=36), end=Location(line=26, column=46))
region_000015 = Region(begin=Location(line=26, column=49), end=Location(line=26, column=50))
region_000016 = Region(begin=Location(line=26, column=36), end=Location(line=26, column=50))
region_000017 = Region(begin=Location(line=26, column=47), end=Location(line=26, column=48))
region_000018 = Region(begin=Location(line=26, column=30), end=Location(line=26, column=51))
region_000019 = Region(begin=Location(line=26, column=32), end=Location(line=26, column=34))
region_000020 = Region(begin=Location(line=26, column=55), end=Location(line=26, column=56))
region_000021 = Region(begin=Location(line=26, column=29), end=Location(line=26, column=56))
region_000022 = Region(begin=Location(line=26, column=53), end=Location(line=26, column=54))
region_000023 = Region(begin=Location(line=26, column=61), end=Location(line=26, column=62))
region_000024 = Region(begin=Location(line=26, column=28), end=Location(line=26, column=62))
region_000025 = Region(begin=Location(line=26, column=58), end=Location(line=26, column=60))
region_000026 = Region(begin=Location(line=26, column=26), end=Location(line=26, column=63))
region_000027 = Region(begin=Location(line=26, column=26), end=Location(line=26, column=27))
region_000028 = Region(begin=Location(line=26, column=83), end=Location(line=26, column=84))
region_000029 = Region(begin=Location(line=26, column=26), end=Location(line=26, column=84))
region_000030 = Region(begin=Location(line=26, column=9), end=Location(line=26, column=84))
region_000031 = Region(begin=Location(line=26, column=13), end=Location(line=26, column=23))
region_000032 = Region(begin=Location(line=27, column=9), end=Location(line=27, column=12))
region_000033 = Region(begin=Location(line=27, column=70), end=Location(line=27, column=80))
region_000034 = Region(begin=Location(line=27, column=29), end=Location(line=27, column=30))
region_000035 = Region(begin=Location(line=27, column=35), end=Location(line=27, column=45))
region_000036 = Region(begin=Location(line=27, column=48), end=Location(line=27, column=49))
region_000037 = Region(begin=Location(line=27, column=35), end=Location(line=27, column=49))
region_000038 = Region(begin=Location(line=27, column=46), end=Location(line=27, column=47))
region_000039 = Region(begin=Location(line=27, column=53), end=Location(line=27, column=54))
region_000040 = Region(begin=Location(line=27, column=34), end=Location(line=27, column=54))
region_000041 = Region(begin=Location(line=27, column=51), end=Location(line=27, column=52))
region_000042 = Region(begin=Location(line=27, column=29), end=Location(line=27, column=54))
region_000043 = Region(begin=Location(line=27, column=31), end=Location(line=27, column=33))
region_000044 = Region(begin=Location(line=27, column=59), end=Location(line=27, column=60))
region_000045 = Region(begin=Location(line=27, column=28), end=Location(line=27, column=60))
region_000046 = Region(begin=Location(line=27, column=56), end=Location(line=27, column=58))
region_000047 = Region(begin=Location(line=27, column=64), end=Location(line=27, column=65))
region_000048 = Region(begin=Location(line=27, column=27), end=Location(line=27, column=65))
region_000049 = Region(begin=Location(line=27, column=62), end=Location(line=27, column=63))
region_000050 = Region(begin=Location(line=27, column=88), end=Location(line=27, column=89))
region_000051 = Region(begin=Location(line=27, column=94), end=Location(line=27, column=104))
region_000052 = Region(begin=Location(line=27, column=107), end=Location(line=27, column=108))
region_000053 = Region(begin=Location(line=27, column=94), end=Location(line=27, column=108))
region_000054 = Region(begin=Location(line=27, column=105), end=Location(line=27, column=106))
region_000055 = Region(begin=Location(line=27, column=88), end=Location(line=27, column=109))
region_000056 = Region(begin=Location(line=27, column=90), end=Location(line=27, column=92))
region_000057 = Region(begin=Location(line=27, column=113), end=Location(line=27, column=114))
region_000058 = Region(begin=Location(line=27, column=87), end=Location(line=27, column=114))
region_000059 = Region(begin=Location(line=27, column=111), end=Location(line=27, column=112))
region_000060 = Region(begin=Location(line=27, column=26), end=Location(line=27, column=115))
region_000061 = Region(begin=Location(line=27, column=9), end=Location(line=27, column=115))
region_000062 = Region(begin=Location(line=27, column=13), end=Location(line=27, column=23))
region_000063 = Region(begin=Location(line=23, column=3), end=Location(line=28, column=2))
region_000064 = Region(begin=Location(line=24, column=5), end=Location(line=27, column=116))
region_000065 = Region(begin=Location(line=29, column=36), end=Location(line=29, column=46))
region_000066 = Region(begin=Location(line=29, column=48), end=Location(line=29, column=58))
region_000067 = Region(begin=Location(line=29, column=34), end=Location(line=29, column=60))
region_000068 = Region(begin=Location(line=29, column=23), end=Location(line=29, column=60))
region_000069 = Region(begin=Location(line=29, column=23), end=Location(line=29, column=33))
region_000070 = Region(begin=Location(line=29, column=16), end=Location(line=29, column=60))
region_000071 = Region(begin=Location(line=29, column=16), end=Location(line=29, column=22))
region_000072 = Region(begin=Location(line=32, column=9), end=Location(line=32, column=17))
region_000073 = Region(begin=Location(line=33, column=13), end=Location(line=33, column=23))
region_000074 = Region(begin=Location(line=33, column=27), end=Location(line=33, column=28))
region_000075 = Region(begin=Location(line=33, column=13), end=Location(line=33, column=28))
region_000076 = Region(begin=Location(line=33, column=24), end=Location(line=33, column=26))
region_000077 = Region(begin=Location(line=34, column=16), end=Location(line=34, column=26))
region_000078 = Region(begin=Location(line=34, column=30), end=Location(line=34, column=31))
region_000079 = Region(begin=Location(line=34, column=16), end=Location(line=34, column=31))
region_000080 = Region(begin=Location(line=34, column=27), end=Location(line=34, column=29))
region_000081 = Region(begin=Location(line=35, column=16), end=Location(line=35, column=26))
region_000082 = Region(begin=Location(line=35, column=30), end=Location(line=35, column=31))
region_000083 = Region(begin=Location(line=35, column=16), end=Location(line=35, column=31))
region_000084 = Region(begin=Location(line=35, column=27), end=Location(line=35, column=29))
region_000085 = Region(begin=Location(line=36, column=16), end=Location(line=36, column=26))
region_000086 = Region(begin=Location(line=36, column=30), end=Location(line=36, column=31))
region_000087 = Region(begin=Location(line=36, column=16), end=Location(line=36, column=31))
region_000088 = Region(begin=Location(line=36, column=27), end=Location(line=36, column=29))
region_000089 = Region(begin=Location(line=37, column=16), end=Location(line=37, column=26))
region_000090 = Region(begin=Location(line=37, column=30), end=Location(line=37, column=32))
region_000091 = Region(begin=Location(line=37, column=16), end=Location(line=37, column=32))
region_000092 = Region(begin=Location(line=37, column=27), end=Location(line=37, column=29))
region_000093 = Region(begin=Location(line=36, column=16), end=Location(line=37, column=32))
region_000094 = Region(begin=Location(line=37, column=13), end=Location(line=37, column=15))
region_000095 = Region(begin=Location(line=35, column=16), end=Location(line=37, column=32))
region_000096 = Region(begin=Location(line=36, column=13), end=Location(line=36, column=15))
region_000097 = Region(begin=Location(line=34, column=16), end=Location(line=37, column=32))
region_000098 = Region(begin=Location(line=35, column=13), end=Location(line=35, column=15))
region_000099 = Region(begin=Location(line=33, column=13), end=Location(line=37, column=32))
region_000100 = Region(begin=Location(line=34, column=13), end=Location(line=34, column=15))
region_000101 = Region(begin=Location(line=32, column=17), end=Location(line=38, column=10))
region_000102 = Region(begin=Location(line=32, column=9), end=Location(line=38, column=10))
region_000103 = Region(begin=Location(line=32, column=9), end=Location(line=40, column=1))
region_000104 = Region(begin=Location(line=31, column=5), end=Location(line=40, column=5))
region_000105 = Region(begin=Location(line=31, column=5), end=Location(line=31, column=23))
region_000106 = Region(begin=Location(line=31, column=25), end=Location(line=40, column=5))
region_000107 = Region(begin=Location(line=42, column=9), end=Location(line=42, column=17))
region_000108 = Region(begin=Location(line=42, column=18), end=Location(line=42, column=28))
region_000109 = Region(begin=Location(line=42, column=73), end=Location(line=42, column=83))
region_000110 = Region(begin=Location(line=42, column=36), end=Location(line=42, column=37))
region_000111 = Region(begin=Location(line=42, column=42), end=Location(line=42, column=52))
region_000112 = Region(begin=Location(line=42, column=55), end=Location(line=42, column=56))
region_000113 = Region(begin=Location(line=42, column=42), end=Location(line=42, column=56))
region_000114 = Region(begin=Location(line=42, column=53), end=Location(line=42, column=54))
region_000115 = Region(begin=Location(line=42, column=36), end=Location(line=42, column=57))
region_000116 = Region(begin=Location(line=42, column=38), end=Location(line=42, column=40))
region_000117 = Region(begin=Location(line=42, column=61), end=Location(line=42, column=62))
region_000118 = Region(begin=Location(line=42, column=35), end=Location(line=42, column=62))
region_000119 = Region(begin=Location(line=42, column=59), end=Location(line=42, column=60))
region_000120 = Region(begin=Location(line=42, column=67), end=Location(line=42, column=68))
region_000121 = Region(begin=Location(line=42, column=34), end=Location(line=42, column=68))
region_000122 = Region(begin=Location(line=42, column=64), end=Location(line=42, column=66))
region_000123 = Region(begin=Location(line=42, column=32), end=Location(line=42, column=69))
region_000124 = Region(begin=Location(line=42, column=32), end=Location(line=42, column=33))
region_000125 = Region(begin=Location(line=42, column=89), end=Location(line=42, column=90))
region_000126 = Region(begin=Location(line=42, column=32), end=Location(line=42, column=90))
region_000127 = Region(begin=Location(line=42, column=18), end=Location(line=42, column=90))
region_000128 = Region(begin=Location(line=42, column=29), end=Location(line=42, column=31))
region_000129 = Region(begin=Location(line=42, column=17), end=Location(line=42, column=91))
region_000130 = Region(begin=Location(line=42, column=9), end=Location(line=42, column=91))
region_000131 = Region(begin=Location(line=42, column=9), end=Location(line=43, column=1))
region_000132 = Region(begin=Location(line=43, column=9), end=Location(line=43, column=17))
region_000133 = Region(begin=Location(line=43, column=76), end=Location(line=43, column=86))
region_000134 = Region(begin=Location(line=43, column=18), end=Location(line=43, column=28))
region_000135 = Region(begin=Location(line=43, column=35), end=Location(line=43, column=36))
region_000136 = Region(begin=Location(line=43, column=41), end=Location(line=43, column=51))
region_000137 = Region(begin=Location(line=43, column=54), end=Location(line=43, column=55))
region_000138 = Region(begin=Location(line=43, column=41), end=Location(line=43, column=55))
region_000139 = Region(begin=Location(line=43, column=52), end=Location(line=43, column=53))
region_000140 = Region(begin=Location(line=43, column=59), end=Location(line=43, column=60))
region_000141 = Region(begin=Location(line=43, column=40), end=Location(line=43, column=60))
region_000142 = Region(begin=Location(line=43, column=57), end=Location(line=43, column=58))
region_000143 = Region(begin=Location(line=43, column=35), end=Location(line=43, column=60))
region_000144 = Region(begin=Location(line=43, column=37), end=Location(line=43, column=39))
region_000145 = Region(begin=Location(line=43, column=65), end=Location(line=43, column=66))
region_000146 = Region(begin=Location(line=43, column=34), end=Location(line=43, column=66))
region_000147 = Region(begin=Location(line=43, column=62), end=Location(line=43, column=64))
region_000148 = Region(begin=Location(line=43, column=70), end=Location(line=43, column=71))
region_000149 = Region(begin=Location(line=43, column=33), end=Location(line=43, column=71))
region_000150 = Region(begin=Location(line=43, column=68), end=Location(line=43, column=69))
region_000151 = Region(begin=Location(line=43, column=18), end=Location(line=43, column=72))
region_000152 = Region(begin=Location(line=43, column=29), end=Location(line=43, column=31))
region_000153 = Region(begin=Location(line=43, column=94), end=Location(line=43, column=95))
region_000154 = Region(begin=Location(line=43, column=100), end=Location(line=43, column=110))
region_000155 = Region(begin=Location(line=43, column=113), end=Location(line=43, column=114))
region_000156 = Region(begin=Location(line=43, column=100), end=Location(line=43, column=114))
region_000157 = Region(begin=Location(line=43, column=111), end=Location(line=43, column=112))
region_000158 = Region(begin=Location(line=43, column=94), end=Location(line=43, column=115))
region_000159 = Region(begin=Location(line=43, column=96), end=Location(line=43, column=98))
region_000160 = Region(begin=Location(line=43, column=119), end=Location(line=43, column=120))
region_000161 = Region(begin=Location(line=43, column=93), end=Location(line=43, column=120))
region_000162 = Region(begin=Location(line=43, column=117), end=Location(line=43, column=118))
region_000163 = Region(begin=Location(line=43, column=18), end=Location(line=43, column=121))
region_000164 = Region(begin=Location(line=43, column=17), end=Location(line=43, column=122))
region_000165 = Region(begin=Location(line=43, column=9), end=Location(line=43, column=122))
region_000166 = Region(begin=Location(line=43, column=9), end=Location(line=45, column=1))
region_000167 = Region(begin=Location(line=46, column=9), end=Location(line=46, column=17))
region_000168 = Region(begin=Location(line=46, column=18), end=Location(line=46, column=28))
region_000169 = Region(begin=Location(line=46, column=31), end=Location(line=46, column=41))
region_000170 = Region(begin=Location(line=46, column=18), end=Location(line=46, column=41))
region_000171 = Region(begin=Location(line=46, column=29), end=Location(line=46, column=30))
region_000172 = Region(begin=Location(line=46, column=90), end=Location(line=46, column=100))
region_000173 = Region(begin=Location(line=46, column=49), end=Location(line=46, column=50))
region_000174 = Region(begin=Location(line=46, column=55), end=Location(line=46, column=65))
region_000175 = Region(begin=Location(line=46, column=68), end=Location(line=46, column=69))
region_000176 = Region(begin=Location(line=46, column=55), end=Location(line=46, column=69))
region_000177 = Region(begin=Location(line=46, column=66), end=Location(line=46, column=67))
region_000178 = Region(begin=Location(line=46, column=73), end=Location(line=46, column=74))
region_000179 = Region(begin=Location(line=46, column=54), end=Location(line=46, column=74))
region_000180 = Region(begin=Location(line=46, column=71), end=Location(line=46, column=72))
region_000181 = Region(begin=Location(line=46, column=49), end=Location(line=46, column=74))
region_000182 = Region(begin=Location(line=46, column=51), end=Location(line=46, column=53))
region_000183 = Region(begin=Location(line=46, column=79), end=Location(line=46, column=80))
region_000184 = Region(begin=Location(line=46, column=48), end=Location(line=46, column=80))
region_000185 = Region(begin=Location(line=46, column=76), end=Location(line=46, column=78))
region_000186 = Region(begin=Location(line=46, column=84), end=Location(line=46, column=85))
region_000187 = Region(begin=Location(line=46, column=47), end=Location(line=46, column=85))
region_000188 = Region(begin=Location(line=46, column=82), end=Location(line=46, column=83))
region_000189 = Region(begin=Location(line=46, column=108), end=Location(line=46, column=109))
region_000190 = Region(begin=Location(line=46, column=114), end=Location(line=46, column=124))
region_000191 = Region(begin=Location(line=46, column=127), end=Location(line=46, column=128))
region_000192 = Region(begin=Location(line=46, column=114), end=Location(line=46, column=128))
region_000193 = Region(begin=Location(line=46, column=125), end=Location(line=46, column=126))
region_000194 = Region(begin=Location(line=46, column=108), end=Location(line=46, column=129))
region_000195 = Region(begin=Location(line=46, column=110), end=Location(line=46, column=112))
region_000196 = Region(begin=Location(line=46, column=133), end=Location(line=46, column=134))
region_000197 = Region(begin=Location(line=46, column=107), end=Location(line=46, column=134))
region_000198 = Region(begin=Location(line=46, column=131), end=Location(line=46, column=132))
region_000199 = Region(begin=Location(line=46, column=46), end=Location(line=46, column=135))
region_000200 = Region(begin=Location(line=46, column=18), end=Location(line=46, column=136))
region_000201 = Region(begin=Location(line=46, column=42), end=Location(line=46, column=44))
region_000202 = Region(begin=Location(line=46, column=17), end=Location(line=46, column=137))
region_000203 = Region(begin=Location(line=46, column=9), end=Location(line=46, column=137))
region_000204 = Region(begin=Location(line=45, column=1), end=Location(line=47, column=1))
region_000205 = Region(begin=Location(line=47, column=9), end=Location(line=47, column=17))
region_000206 = Region(begin=Location(line=47, column=18), end=Location(line=47, column=28))
region_000207 = Region(begin=Location(line=47, column=31), end=Location(line=47, column=41))
region_000208 = Region(begin=Location(line=47, column=18), end=Location(line=47, column=41))
region_000209 = Region(begin=Location(line=47, column=29), end=Location(line=47, column=30))
region_000210 = Region(begin=Location(line=47, column=87), end=Location(line=47, column=97))
region_000211 = Region(begin=Location(line=47, column=50), end=Location(line=47, column=51))
region_000212 = Region(begin=Location(line=47, column=56), end=Location(line=47, column=66))
region_000213 = Region(begin=Location(line=47, column=69), end=Location(line=47, column=70))
region_000214 = Region(begin=Location(line=47, column=56), end=Location(line=47, column=70))
region_000215 = Region(begin=Location(line=47, column=67), end=Location(line=47, column=68))
region_000216 = Region(begin=Location(line=47, column=50), end=Location(line=47, column=71))
region_000217 = Region(begin=Location(line=47, column=52), end=Location(line=47, column=54))
region_000218 = Region(begin=Location(line=47, column=75), end=Location(line=47, column=76))
region_000219 = Region(begin=Location(line=47, column=49), end=Location(line=47, column=76))
region_000220 = Region(begin=Location(line=47, column=73), end=Location(line=47, column=74))
region_000221 = Region(begin=Location(line=47, column=81), end=Location(line=47, column=82))
region_000222 = Region(begin=Location(line=47, column=48), end=Location(line=47, column=82))
region_000223 = Region(begin=Location(line=47, column=78), end=Location(line=47, column=80))
region_000224 = Region(begin=Location(line=47, column=46), end=Location(line=47, column=83))
region_000225 = Region(begin=Location(line=47, column=46), end=Location(line=47, column=47))
region_000226 = Region(begin=Location(line=47, column=103), end=Location(line=47, column=104))
region_000227 = Region(begin=Location(line=47, column=46), end=Location(line=47, column=104))
region_000228 = Region(begin=Location(line=47, column=18), end=Location(line=47, column=105))
region_000229 = Region(begin=Location(line=47, column=42), end=Location(line=47, column=44))
region_000230 = Region(begin=Location(line=47, column=17), end=Location(line=47, column=106))
region_000231 = Region(begin=Location(line=47, column=9), end=Location(line=47, column=106))
region_000232 = Region(begin=Location(line=47, column=9), end=Location(line=49, column=1))
region_000233 = Region(begin=Location(line=40, column=5), end=Location(line=49, column=5))
region_000234 = Region(begin=Location(line=40, column=5), end=Location(line=40, column=25))
region_000235 = Region(begin=Location(line=40, column=27), end=Location(line=49, column=5))
region_000236 = Region(begin=Location(line=49, column=40), end=Location(line=49, column=52))
region_000237 = Region(begin=Location(line=49, column=40), end=Location(line=49, column=48))
region_000238 = Region(begin=Location(line=49, column=49), end=Location(line=49, column=52))
region_000239 = Region(begin=Location(line=49, column=70), end=Location(line=49, column=78))
region_000240 = Region(begin=Location(line=49, column=69), end=Location(line=49, column=79))
region_000241 = Region(begin=Location(line=49, column=80), end=Location(line=49, column=92))
region_000242 = Region(begin=Location(line=49, column=80), end=Location(line=49, column=88))
region_000243 = Region(begin=Location(line=49, column=89), end=Location(line=49, column=92))
region_000244 = Region(begin=Location(line=49, column=80), end=Location(line=49, column=100))
region_000245 = Region(begin=Location(line=49, column=93), end=Location(line=49, column=100))
region_000246 = Region(begin=Location(line=49, column=79), end=Location(line=49, column=101))
region_000247 = Region(begin=Location(line=49, column=5), end=Location(line=50, column=1))
region_000248 = Region(begin=Location(line=49, column=24), end=Location(line=49, column=30))
region_000249 = Region(begin=Location(line=49, column=31), end=Location(line=49, column=39))
region_000250 = Region(begin=Location(line=49, column=53), end=Location(line=49, column=69))
region_000251 = Region(begin=Location(line=49, column=6), end=Location(line=49, column=14))
region_000252 = Region(begin=Location(line=49, column=16), end=Location(line=49, column=22))
region_000253 = Region(begin=Location(line=50, column=52), end=Location(line=50, column=60))
region_000254 = Region(begin=Location(line=50, column=51), end=Location(line=50, column=61))
region_000255 = Region(begin=Location(line=50, column=62), end=Location(line=50, column=74))
region_000256 = Region(begin=Location(line=50, column=62), end=Location(line=50, column=70))
region_000257 = Region(begin=Location(line=50, column=71), end=Location(line=50, column=74))
region_000258 = Region(begin=Location(line=50, column=62), end=Location(line=50, column=82))
region_000259 = Region(begin=Location(line=50, column=75), end=Location(line=50, column=82))
region_000260 = Region(begin=Location(line=50, column=61), end=Location(line=50, column=83))
region_000261 = Region(begin=Location(line=50, column=5), end=Location(line=51, column=1))
region_000262 = Region(begin=Location(line=50, column=16), end=Location(line=50, column=22))
region_000263 = Region(begin=Location(line=50, column=84), end=Location(line=50, column=93))
region_000264 = Region(begin=Location(line=50, column=23), end=Location(line=50, column=31))
region_000265 = Region(begin=Location(line=50, column=37), end=Location(line=50, column=51))
region_000266 = Region(begin=Location(line=50, column=6), end=Location(line=50, column=14))
region_000267 = Region(begin=Location(line=51, column=52), end=Location(line=51, column=60))
region_000268 = Region(begin=Location(line=51, column=51), end=Location(line=51, column=61))
region_000269 = Region(begin=Location(line=51, column=62), end=Location(line=51, column=74))
region_000270 = Region(begin=Location(line=51, column=62), end=Location(line=51, column=70))
region_000271 = Region(begin=Location(line=51, column=71), end=Location(line=51, column=74))
region_000272 = Region(begin=Location(line=51, column=62), end=Location(line=51, column=82))
region_000273 = Region(begin=Location(line=51, column=75), end=Location(line=51, column=82))
region_000274 = Region(begin=Location(line=51, column=61), end=Location(line=51, column=83))
region_000275 = Region(begin=Location(line=51, column=5), end=Location(line=53, column=1))
region_000276 = Region(begin=Location(line=51, column=16), end=Location(line=51, column=22))
region_000277 = Region(begin=Location(line=51, column=84), end=Location(line=51, column=87))
region_000278 = Region(begin=Location(line=51, column=23), end=Location(line=51, column=31))
region_000279 = Region(begin=Location(line=51, column=37), end=Location(line=51, column=51))
region_000280 = Region(begin=Location(line=51, column=6), end=Location(line=51, column=14))
region_000281 = Region(begin=Location(line=53, column=49), end=Location(line=53, column=57))
region_000282 = Region(begin=Location(line=53, column=48), end=Location(line=53, column=58))
region_000283 = Region(begin=Location(line=53, column=59), end=Location(line=53, column=71))
region_000284 = Region(begin=Location(line=53, column=59), end=Location(line=53, column=67))
region_000285 = Region(begin=Location(line=53, column=68), end=Location(line=53, column=71))
region_000286 = Region(begin=Location(line=53, column=59), end=Location(line=53, column=79))
region_000287 = Region(begin=Location(line=53, column=72), end=Location(line=53, column=79))
region_000288 = Region(begin=Location(line=53, column=58), end=Location(line=53, column=80))
region_000289 = Region(begin=Location(line=53, column=5), end=Location(line=54, column=1))
region_000290 = Region(begin=Location(line=53, column=16), end=Location(line=53, column=22))
region_000291 = Region(begin=Location(line=53, column=81), end=Location(line=53, column=90))
region_000292 = Region(begin=Location(line=53, column=23), end=Location(line=53, column=31))
region_000293 = Region(begin=Location(line=53, column=37), end=Location(line=53, column=48))
region_000294 = Region(begin=Location(line=53, column=6), end=Location(line=53, column=14))
region_000295 = Region(begin=Location(line=54, column=49), end=Location(line=54, column=57))
region_000296 = Region(begin=Location(line=54, column=48), end=Location(line=54, column=58))
region_000297 = Region(begin=Location(line=54, column=59), end=Location(line=54, column=71))
region_000298 = Region(begin=Location(line=54, column=59), end=Location(line=54, column=67))
region_000299 = Region(begin=Location(line=54, column=68), end=Location(line=54, column=71))
region_000300 = Region(begin=Location(line=54, column=59), end=Location(line=54, column=79))
region_000301 = Region(begin=Location(line=54, column=72), end=Location(line=54, column=79))
region_000302 = Region(begin=Location(line=54, column=58), end=Location(line=54, column=80))
region_000303 = Region(begin=Location(line=54, column=5), end=Location(line=56, column=1))
region_000304 = Region(begin=Location(line=54, column=16), end=Location(line=54, column=22))
region_000305 = Region(begin=Location(line=54, column=81), end=Location(line=54, column=84))
region_000306 = Region(begin=Location(line=54, column=23), end=Location(line=54, column=31))
region_000307 = Region(begin=Location(line=54, column=37), end=Location(line=54, column=48))
region_000308 = Region(begin=Location(line=54, column=6), end=Location(line=54, column=14))
region_000309 = Region(begin=Location(line=56, column=32), end=Location(line=56, column=44))
region_000310 = Region(begin=Location(line=56, column=32), end=Location(line=56, column=40))
region_000311 = Region(begin=Location(line=56, column=41), end=Location(line=56, column=44))
region_000312 = Region(begin=Location(line=56, column=5), end=Location(line=58, column=1))
region_000313 = Region(begin=Location(line=56, column=16), end=Location(line=56, column=22))
region_000314 = Region(begin=Location(line=56, column=58), end=Location(line=56, column=67))
region_000315 = Region(begin=Location(line=56, column=23), end=Location(line=56, column=31))
region_000316 = Region(begin=Location(line=56, column=45), end=Location(line=56, column=55))
region_000317 = Region(begin=Location(line=56, column=55), end=Location(line=56, column=57))
region_000318 = Region(begin=Location(line=56, column=6), end=Location(line=56, column=14))
region_000319 = Region(begin=Location(line=58, column=32), end=Location(line=58, column=40))
region_000320 = Region(begin=Location(line=58, column=32), end=Location(line=58, column=36))
region_000321 = Region(begin=Location(line=58, column=37), end=Location(line=58, column=40))
region_000322 = Region(begin=Location(line=58, column=5), end=Location(line=59, column=1))
region_000323 = Region(begin=Location(line=58, column=16), end=Location(line=58, column=22))
region_000324 = Region(begin=Location(line=58, column=54), end=Location(line=58, column=63))
region_000325 = Region(begin=Location(line=58, column=23), end=Location(line=58, column=31))
region_000326 = Region(begin=Location(line=58, column=41), end=Location(line=58, column=51))
region_000327 = Region(begin=Location(line=58, column=51), end=Location(line=58, column=53))
region_000328 = Region(begin=Location(line=58, column=6), end=Location(line=58, column=14))
region_000329 = Region(begin=Location(line=59, column=32), end=Location(line=59, column=39))
region_000330 = Region(begin=Location(line=59, column=32), end=Location(line=59, column=35))
region_000331 = Region(begin=Location(line=59, column=36), end=Location(line=59, column=39))
region_000332 = Region(begin=Location(line=59, column=5), end=Location(line=61, column=1))
region_000333 = Region(begin=Location(line=59, column=16), end=Location(line=59, column=22))
region_000334 = Region(begin=Location(line=59, column=56), end=Location(line=59, column=65))
region_000335 = Region(begin=Location(line=59, column=23), end=Location(line=59, column=31))
region_000336 = Region(begin=Location(line=59, column=40), end=Location(line=59, column=53))
region_000337 = Region(begin=Location(line=59, column=53), end=Location(line=59, column=55))
region_000338 = Region(begin=Location(line=59, column=6), end=Location(line=59, column=14))
region_000339 = Region(begin=Location(line=61, column=40), end=Location(line=61, column=57))
region_000340 = Region(begin=Location(line=61, column=40), end=Location(line=61, column=53))
region_000341 = Region(begin=Location(line=61, column=54), end=Location(line=61, column=57))
region_000342 = Region(begin=Location(line=61, column=70), end=Location(line=61, column=88))
region_000343 = Region(begin=Location(line=61, column=70), end=Location(line=61, column=78))
region_000344 = Region(begin=Location(line=61, column=79), end=Location(line=61, column=88))
region_000345 = Region(begin=Location(line=61, column=70), end=Location(line=61, column=93))
region_000346 = Region(begin=Location(line=61, column=89), end=Location(line=61, column=93))
region_000347 = Region(begin=Location(line=61, column=95), end=Location(line=61, column=108))
region_000348 = Region(begin=Location(line=61, column=95), end=Location(line=61, column=98))
region_000349 = Region(begin=Location(line=61, column=99), end=Location(line=61, column=108))
region_000350 = Region(begin=Location(line=61, column=95), end=Location(line=61, column=113))
region_000351 = Region(begin=Location(line=61, column=109), end=Location(line=61, column=113))
region_000352 = Region(begin=Location(line=61, column=69), end=Location(line=61, column=114))
region_000353 = Region(begin=Location(line=61, column=70), end=Location(line=61, column=113))
region_000354 = Region(begin=Location(line=61, column=5), end=Location(line=63, column=1))
region_000355 = Region(begin=Location(line=61, column=24), end=Location(line=61, column=30))
region_000356 = Region(begin=Location(line=61, column=31), end=Location(line=61, column=39))
region_000357 = Region(begin=Location(line=61, column=58), end=Location(line=61, column=69))
region_000358 = Region(begin=Location(line=61, column=6), end=Location(line=61, column=14))
region_000359 = Region(begin=Location(line=61, column=16), end=Location(line=61, column=22))
region_000360 = Region(begin=Location(line=63, column=32), end=Location(line=63, column=40))
region_000361 = Region(begin=Location(line=63, column=32), end=Location(line=63, column=36))
region_000362 = Region(begin=Location(line=63, column=37), end=Location(line=63, column=40))
region_000363 = Region(begin=Location(line=63, column=51), end=Location(line=63, column=64))
region_000364 = Region(begin=Location(line=63, column=51), end=Location(line=63, column=54))
region_000365 = Region(begin=Location(line=63, column=55), end=Location(line=63, column=64))
region_000366 = Region(begin=Location(line=63, column=51), end=Location(line=63, column=69))
region_000367 = Region(begin=Location(line=63, column=65), end=Location(line=63, column=69))
region_000368 = Region(begin=Location(line=63, column=50), end=Location(line=63, column=70))
region_000369 = Region(begin=Location(line=63, column=5), end=Location(line=64, column=1))
region_000370 = Region(begin=Location(line=63, column=16), end=Location(line=63, column=22))
region_000371 = Region(begin=Location(line=63, column=71), end=Location(line=63, column=80))
region_000372 = Region(begin=Location(line=63, column=23), end=Location(line=63, column=31))
region_000373 = Region(begin=Location(line=63, column=41), end=Location(line=63, column=50))
region_000374 = Region(begin=Location(line=63, column=6), end=Location(line=63, column=14))
region_000375 = Region(begin=Location(line=64, column=32), end=Location(line=64, column=40))
region_000376 = Region(begin=Location(line=64, column=32), end=Location(line=64, column=36))
region_000377 = Region(begin=Location(line=64, column=37), end=Location(line=64, column=40))
region_000378 = Region(begin=Location(line=64, column=54), end=Location(line=64, column=67))
region_000379 = Region(begin=Location(line=64, column=54), end=Location(line=64, column=57))
region_000380 = Region(begin=Location(line=64, column=58), end=Location(line=64, column=67))
region_000381 = Region(begin=Location(line=64, column=54), end=Location(line=64, column=72))
region_000382 = Region(begin=Location(line=64, column=68), end=Location(line=64, column=72))
region_000383 = Region(begin=Location(line=64, column=53), end=Location(line=64, column=73))
region_000384 = Region(begin=Location(line=64, column=5), end=Location(line=65, column=1))
region_000385 = Region(begin=Location(line=64, column=16), end=Location(line=64, column=22))
region_000386 = Region(begin=Location(line=64, column=74), end=Location(line=64, column=83))
region_000387 = Region(begin=Location(line=64, column=23), end=Location(line=64, column=31))
region_000388 = Region(begin=Location(line=64, column=41), end=Location(line=64, column=53))
region_000389 = Region(begin=Location(line=64, column=6), end=Location(line=64, column=14))
region_000390 = Region(begin=Location(line=65, column=32), end=Location(line=65, column=40))
region_000391 = Region(begin=Location(line=65, column=32), end=Location(line=65, column=36))
region_000392 = Region(begin=Location(line=65, column=37), end=Location(line=65, column=40))
region_000393 = Region(begin=Location(line=65, column=50), end=Location(line=65, column=63))
region_000394 = Region(begin=Location(line=65, column=50), end=Location(line=65, column=53))
region_000395 = Region(begin=Location(line=65, column=54), end=Location(line=65, column=63))
region_000396 = Region(begin=Location(line=65, column=50), end=Location(line=65, column=68))
region_000397 = Region(begin=Location(line=65, column=64), end=Location(line=65, column=68))
region_000398 = Region(begin=Location(line=65, column=49), end=Location(line=65, column=69))
region_000399 = Region(begin=Location(line=65, column=5), end=Location(line=66, column=1))
region_000400 = Region(begin=Location(line=65, column=16), end=Location(line=65, column=22))
region_000401 = Region(begin=Location(line=65, column=70), end=Location(line=65, column=79))
region_000402 = Region(begin=Location(line=65, column=23), end=Location(line=65, column=31))
region_000403 = Region(begin=Location(line=65, column=41), end=Location(line=65, column=49))
region_000404 = Region(begin=Location(line=65, column=6), end=Location(line=65, column=14))
region_000405 = Region(begin=Location(line=66, column=32), end=Location(line=66, column=40))
region_000406 = Region(begin=Location(line=66, column=32), end=Location(line=66, column=36))
region_000407 = Region(begin=Location(line=66, column=37), end=Location(line=66, column=40))
region_000408 = Region(begin=Location(line=66, column=55), end=Location(line=66, column=68))
region_000409 = Region(begin=Location(line=66, column=55), end=Location(line=66, column=58))
region_000410 = Region(begin=Location(line=66, column=59), end=Location(line=66, column=68))
region_000411 = Region(begin=Location(line=66, column=55), end=Location(line=66, column=73))
region_000412 = Region(begin=Location(line=66, column=69), end=Location(line=66, column=73))
region_000413 = Region(begin=Location(line=66, column=54), end=Location(line=66, column=74))
region_000414 = Region(begin=Location(line=66, column=5), end=Location(line=67, column=1))
region_000415 = Region(begin=Location(line=66, column=16), end=Location(line=66, column=22))
region_000416 = Region(begin=Location(line=66, column=75), end=Location(line=66, column=84))
region_000417 = Region(begin=Location(line=66, column=23), end=Location(line=66, column=31))
region_000418 = Region(begin=Location(line=66, column=41), end=Location(line=66, column=54))
region_000419 = Region(begin=Location(line=66, column=6), end=Location(line=66, column=14))
region_000420 = Region(begin=Location(line=67, column=32), end=Location(line=67, column=40))
region_000421 = Region(begin=Location(line=67, column=32), end=Location(line=67, column=36))
region_000422 = Region(begin=Location(line=67, column=37), end=Location(line=67, column=40))
region_000423 = Region(begin=Location(line=67, column=53), end=Location(line=67, column=66))
region_000424 = Region(begin=Location(line=67, column=53), end=Location(line=67, column=56))
region_000425 = Region(begin=Location(line=67, column=57), end=Location(line=67, column=66))
region_000426 = Region(begin=Location(line=67, column=53), end=Location(line=67, column=71))
region_000427 = Region(begin=Location(line=67, column=67), end=Location(line=67, column=71))
region_000428 = Region(begin=Location(line=67, column=52), end=Location(line=67, column=72))
region_000429 = Region(begin=Location(line=67, column=5), end=Location(line=68, column=1))
region_000430 = Region(begin=Location(line=67, column=16), end=Location(line=67, column=22))
region_000431 = Region(begin=Location(line=67, column=73), end=Location(line=67, column=82))
region_000432 = Region(begin=Location(line=67, column=23), end=Location(line=67, column=31))
region_000433 = Region(begin=Location(line=67, column=41), end=Location(line=67, column=52))
region_000434 = Region(begin=Location(line=67, column=6), end=Location(line=67, column=14))
region_000435 = Region(begin=Location(line=68, column=32), end=Location(line=68, column=40))
region_000436 = Region(begin=Location(line=68, column=32), end=Location(line=68, column=36))
region_000437 = Region(begin=Location(line=68, column=37), end=Location(line=68, column=40))
region_000438 = Region(begin=Location(line=68, column=58), end=Location(line=68, column=71))
region_000439 = Region(begin=Location(line=68, column=58), end=Location(line=68, column=61))
region_000440 = Region(begin=Location(line=68, column=62), end=Location(line=68, column=71))
region_000441 = Region(begin=Location(line=68, column=58), end=Location(line=68, column=76))
region_000442 = Region(begin=Location(line=68, column=72), end=Location(line=68, column=76))
region_000443 = Region(begin=Location(line=68, column=57), end=Location(line=68, column=77))
region_000444 = Region(begin=Location(line=68, column=5), end=Location(line=70, column=1))
region_000445 = Region(begin=Location(line=68, column=16), end=Location(line=68, column=22))
region_000446 = Region(begin=Location(line=68, column=78), end=Location(line=68, column=87))
region_000447 = Region(begin=Location(line=68, column=23), end=Location(line=68, column=31))
region_000448 = Region(begin=Location(line=68, column=41), end=Location(line=68, column=57))
region_000449 = Region(begin=Location(line=68, column=6), end=Location(line=68, column=14))
region_000450 = Region(begin=Location(line=70, column=32), end=Location(line=70, column=44))
region_000451 = Region(begin=Location(line=70, column=32), end=Location(line=70, column=40))
region_000452 = Region(begin=Location(line=70, column=41), end=Location(line=70, column=44))
region_000453 = Region(begin=Location(line=70, column=5), end=Location(line=71, column=1))
region_000454 = Region(begin=Location(line=70, column=16), end=Location(line=70, column=22))
region_000455 = Region(begin=Location(line=70, column=61), end=Location(line=70, column=70))
region_000456 = Region(begin=Location(line=70, column=23), end=Location(line=70, column=31))
region_000457 = Region(begin=Location(line=70, column=45), end=Location(line=70, column=58))
region_000458 = Region(begin=Location(line=70, column=58), end=Location(line=70, column=60))
region_000459 = Region(begin=Location(line=70, column=6), end=Location(line=70, column=14))
region_000460 = Region(begin=Location(line=71, column=32), end=Location(line=71, column=44))
region_000461 = Region(begin=Location(line=71, column=32), end=Location(line=71, column=40))
region_000462 = Region(begin=Location(line=71, column=41), end=Location(line=71, column=44))
region_000463 = Region(begin=Location(line=71, column=5), end=Location(line=72, column=1))
region_000464 = Region(begin=Location(line=71, column=16), end=Location(line=71, column=22))
region_000465 = Region(begin=Location(line=71, column=61), end=Location(line=71, column=70))
region_000466 = Region(begin=Location(line=71, column=23), end=Location(line=71, column=31))
region_000467 = Region(begin=Location(line=71, column=45), end=Location(line=71, column=58))
region_000468 = Region(begin=Location(line=71, column=58), end=Location(line=71, column=60))
region_000469 = Region(begin=Location(line=71, column=6), end=Location(line=71, column=14))
region_000470 = Region(begin=Location(line=72, column=32), end=Location(line=72, column=44))
region_000471 = Region(begin=Location(line=72, column=32), end=Location(line=72, column=40))
region_000472 = Region(begin=Location(line=72, column=41), end=Location(line=72, column=44))
region_000473 = Region(begin=Location(line=72, column=5), end=Location(line=74, column=1))
region_000474 = Region(begin=Location(line=72, column=16), end=Location(line=72, column=22))
region_000475 = Region(begin=Location(line=72, column=60), end=Location(line=72, column=69))
region_000476 = Region(begin=Location(line=72, column=23), end=Location(line=72, column=31))
region_000477 = Region(begin=Location(line=72, column=45), end=Location(line=72, column=57))
region_000478 = Region(begin=Location(line=72, column=57), end=Location(line=72, column=59))
region_000479 = Region(begin=Location(line=72, column=6), end=Location(line=72, column=14))
region_000480 = Region(begin=Location(line=74, column=32), end=Location(line=74, column=39))
region_000481 = Region(begin=Location(line=74, column=32), end=Location(line=74, column=35))
region_000482 = Region(begin=Location(line=74, column=36), end=Location(line=74, column=39))
region_000483 = Region(begin=Location(line=74, column=52), end=Location(line=74, column=65))
region_000484 = Region(begin=Location(line=74, column=52), end=Location(line=74, column=55))
region_000485 = Region(begin=Location(line=74, column=56), end=Location(line=74, column=65))
region_000486 = Region(begin=Location(line=74, column=52), end=Location(line=74, column=73))
region_000487 = Region(begin=Location(line=74, column=66), end=Location(line=74, column=73))
region_000488 = Region(begin=Location(line=74, column=51), end=Location(line=74, column=74))
region_000489 = Region(begin=Location(line=74, column=5), end=Location(line=75, column=1))
region_000490 = Region(begin=Location(line=74, column=16), end=Location(line=74, column=22))
region_000491 = Region(begin=Location(line=74, column=75), end=Location(line=74, column=84))
region_000492 = Region(begin=Location(line=74, column=23), end=Location(line=74, column=31))
region_000493 = Region(begin=Location(line=74, column=40), end=Location(line=74, column=51))
region_000494 = Region(begin=Location(line=74, column=6), end=Location(line=74, column=14))
region_000495 = Region(begin=Location(line=75, column=32), end=Location(line=75, column=44))
region_000496 = Region(begin=Location(line=75, column=32), end=Location(line=75, column=40))
region_000497 = Region(begin=Location(line=75, column=41), end=Location(line=75, column=44))
region_000498 = Region(begin=Location(line=75, column=62), end=Location(line=75, column=75))
region_000499 = Region(begin=Location(line=75, column=62), end=Location(line=75, column=65))
region_000500 = Region(begin=Location(line=75, column=66), end=Location(line=75, column=75))
region_000501 = Region(begin=Location(line=75, column=62), end=Location(line=75, column=83))
region_000502 = Region(begin=Location(line=75, column=76), end=Location(line=75, column=83))
region_000503 = Region(begin=Location(line=75, column=61), end=Location(line=75, column=84))
region_000504 = Region(begin=Location(line=75, column=5), end=Location(line=76, column=1))
region_000505 = Region(begin=Location(line=75, column=16), end=Location(line=75, column=22))
region_000506 = Region(begin=Location(line=75, column=85), end=Location(line=75, column=94))
region_000507 = Region(begin=Location(line=75, column=23), end=Location(line=75, column=31))
region_000508 = Region(begin=Location(line=75, column=45), end=Location(line=75, column=61))
region_000509 = Region(begin=Location(line=75, column=6), end=Location(line=75, column=14))
region_000510 = Region(begin=Location(line=76, column=32), end=Location(line=76, column=44))
region_000511 = Region(begin=Location(line=76, column=32), end=Location(line=76, column=40))
region_000512 = Region(begin=Location(line=76, column=41), end=Location(line=76, column=44))
region_000513 = Region(begin=Location(line=76, column=57), end=Location(line=76, column=70))
region_000514 = Region(begin=Location(line=76, column=57), end=Location(line=76, column=60))
region_000515 = Region(begin=Location(line=76, column=61), end=Location(line=76, column=70))
region_000516 = Region(begin=Location(line=76, column=57), end=Location(line=76, column=78))
region_000517 = Region(begin=Location(line=76, column=71), end=Location(line=76, column=78))
region_000518 = Region(begin=Location(line=76, column=56), end=Location(line=76, column=79))
region_000519 = Region(begin=Location(line=76, column=5), end=Location(line=77, column=1))
region_000520 = Region(begin=Location(line=76, column=16), end=Location(line=76, column=22))
region_000521 = Region(begin=Location(line=76, column=80), end=Location(line=76, column=89))
region_000522 = Region(begin=Location(line=76, column=23), end=Location(line=76, column=31))
region_000523 = Region(begin=Location(line=76, column=45), end=Location(line=76, column=56))
region_000524 = Region(begin=Location(line=76, column=6), end=Location(line=76, column=14))
region_000525 = Region(begin=Location(line=77, column=32), end=Location(line=77, column=44))
region_000526 = Region(begin=Location(line=77, column=32), end=Location(line=77, column=40))
region_000527 = Region(begin=Location(line=77, column=41), end=Location(line=77, column=44))
region_000528 = Region(begin=Location(line=77, column=59), end=Location(line=77, column=72))
region_000529 = Region(begin=Location(line=77, column=59), end=Location(line=77, column=62))
region_000530 = Region(begin=Location(line=77, column=63), end=Location(line=77, column=72))
region_000531 = Region(begin=Location(line=77, column=59), end=Location(line=77, column=83))
region_000532 = Region(begin=Location(line=77, column=73), end=Location(line=77, column=83))
region_000533 = Region(begin=Location(line=77, column=58), end=Location(line=77, column=84))
region_000534 = Region(begin=Location(line=77, column=5), end=Location(line=78, column=1))
region_000535 = Region(begin=Location(line=77, column=16), end=Location(line=77, column=22))
region_000536 = Region(begin=Location(line=77, column=85), end=Location(line=77, column=94))
region_000537 = Region(begin=Location(line=77, column=23), end=Location(line=77, column=31))
region_000538 = Region(begin=Location(line=77, column=45), end=Location(line=77, column=58))
region_000539 = Region(begin=Location(line=77, column=6), end=Location(line=77, column=14))
region_000540 = Region(begin=Location(line=78, column=32), end=Location(line=78, column=44))
region_000541 = Region(begin=Location(line=78, column=32), end=Location(line=78, column=40))
region_000542 = Region(begin=Location(line=78, column=41), end=Location(line=78, column=44))
region_000543 = Region(begin=Location(line=78, column=56), end=Location(line=78, column=69))
region_000544 = Region(begin=Location(line=78, column=56), end=Location(line=78, column=59))
region_000545 = Region(begin=Location(line=78, column=60), end=Location(line=78, column=69))
region_000546 = Region(begin=Location(line=78, column=56), end=Location(line=78, column=78))
region_000547 = Region(begin=Location(line=78, column=70), end=Location(line=78, column=78))
region_000548 = Region(begin=Location(line=78, column=55), end=Location(line=78, column=79))
region_000549 = Region(begin=Location(line=78, column=5), end=Location(line=80, column=1))
region_000550 = Region(begin=Location(line=78, column=16), end=Location(line=78, column=22))
region_000551 = Region(begin=Location(line=78, column=80), end=Location(line=78, column=89))
region_000552 = Region(begin=Location(line=78, column=23), end=Location(line=78, column=31))
region_000553 = Region(begin=Location(line=78, column=45), end=Location(line=78, column=55))
region_000554 = Region(begin=Location(line=78, column=6), end=Location(line=78, column=14))
region_000555 = Region(begin=Location(line=80, column=32), end=Location(line=80, column=44))
region_000556 = Region(begin=Location(line=80, column=32), end=Location(line=80, column=40))
region_000557 = Region(begin=Location(line=80, column=41), end=Location(line=80, column=44))
region_000558 = Region(begin=Location(line=80, column=54), end=Location(line=80, column=67))
region_000559 = Region(begin=Location(line=80, column=54), end=Location(line=80, column=57))
region_000560 = Region(begin=Location(line=80, column=58), end=Location(line=80, column=67))
region_000561 = Region(begin=Location(line=80, column=54), end=Location(line=80, column=73))
region_000562 = Region(begin=Location(line=80, column=68), end=Location(line=80, column=73))
region_000563 = Region(begin=Location(line=80, column=53), end=Location(line=80, column=74))
region_000564 = Region(begin=Location(line=80, column=5), end=Location(line=81, column=1))
region_000565 = Region(begin=Location(line=80, column=16), end=Location(line=80, column=22))
region_000566 = Region(begin=Location(line=80, column=75), end=Location(line=80, column=84))
region_000567 = Region(begin=Location(line=80, column=23), end=Location(line=80, column=31))
region_000568 = Region(begin=Location(line=80, column=45), end=Location(line=80, column=53))
region_000569 = Region(begin=Location(line=80, column=6), end=Location(line=80, column=14))
region_000570 = Region(begin=Location(line=81, column=32), end=Location(line=81, column=44))
region_000571 = Region(begin=Location(line=81, column=32), end=Location(line=81, column=40))
region_000572 = Region(begin=Location(line=81, column=41), end=Location(line=81, column=44))
region_000573 = Region(begin=Location(line=81, column=59), end=Location(line=81, column=72))
region_000574 = Region(begin=Location(line=81, column=59), end=Location(line=81, column=62))
region_000575 = Region(begin=Location(line=81, column=63), end=Location(line=81, column=72))
region_000576 = Region(begin=Location(line=81, column=59), end=Location(line=81, column=78))
region_000577 = Region(begin=Location(line=81, column=73), end=Location(line=81, column=78))
region_000578 = Region(begin=Location(line=81, column=58), end=Location(line=81, column=79))
region_000579 = Region(begin=Location(line=81, column=5), end=Location(line=83, column=1))
region_000580 = Region(begin=Location(line=81, column=16), end=Location(line=81, column=22))
region_000581 = Region(begin=Location(line=81, column=80), end=Location(line=81, column=89))
region_000582 = Region(begin=Location(line=81, column=23), end=Location(line=81, column=31))
region_000583 = Region(begin=Location(line=81, column=45), end=Location(line=81, column=58))
region_000584 = Region(begin=Location(line=81, column=6), end=Location(line=81, column=14))
region_000585 = Region(begin=Location(line=83, column=32), end=Location(line=83, column=44))
region_000586 = Region(begin=Location(line=83, column=32), end=Location(line=83, column=40))
region_000587 = Region(begin=Location(line=83, column=41), end=Location(line=83, column=44))
region_000588 = Region(begin=Location(line=83, column=63), end=Location(line=83, column=76))
region_000589 = Region(begin=Location(line=83, column=63), end=Location(line=83, column=66))
region_000590 = Region(begin=Location(line=83, column=67), end=Location(line=83, column=76))
region_000591 = Region(begin=Location(line=83, column=63), end=Location(line=83, column=83))
region_000592 = Region(begin=Location(line=83, column=77), end=Location(line=83, column=83))
region_000593 = Region(begin=Location(line=83, column=62), end=Location(line=83, column=84))
region_000594 = Region(begin=Location(line=83, column=5), end=Location(line=84, column=1))
region_000595 = Region(begin=Location(line=83, column=16), end=Location(line=83, column=22))
region_000596 = Region(begin=Location(line=83, column=85), end=Location(line=83, column=94))
region_000597 = Region(begin=Location(line=83, column=23), end=Location(line=83, column=31))
region_000598 = Region(begin=Location(line=83, column=45), end=Location(line=83, column=62))
region_000599 = Region(begin=Location(line=83, column=6), end=Location(line=83, column=14))
region_000600 = Region(begin=Location(line=84, column=32), end=Location(line=84, column=44))
region_000601 = Region(begin=Location(line=84, column=32), end=Location(line=84, column=40))
region_000602 = Region(begin=Location(line=84, column=41), end=Location(line=84, column=44))
region_000603 = Region(begin=Location(line=84, column=64), end=Location(line=84, column=77))
region_000604 = Region(begin=Location(line=84, column=64), end=Location(line=84, column=67))
region_000605 = Region(begin=Location(line=84, column=68), end=Location(line=84, column=77))
region_000606 = Region(begin=Location(line=84, column=64), end=Location(line=84, column=84))
region_000607 = Region(begin=Location(line=84, column=78), end=Location(line=84, column=84))
region_000608 = Region(begin=Location(line=84, column=63), end=Location(line=84, column=85))
region_000609 = Region(begin=Location(line=84, column=5), end=Location(line=86, column=1))
region_000610 = Region(begin=Location(line=84, column=16), end=Location(line=84, column=22))
region_000611 = Region(begin=Location(line=84, column=86), end=Location(line=84, column=95))
region_000612 = Region(begin=Location(line=84, column=23), end=Location(line=84, column=31))
region_000613 = Region(begin=Location(line=84, column=45), end=Location(line=84, column=63))
region_000614 = Region(begin=Location(line=84, column=6), end=Location(line=84, column=14))
region_000615 = Region(begin=Location(line=86, column=32), end=Location(line=86, column=44))
region_000616 = Region(begin=Location(line=86, column=32), end=Location(line=86, column=40))
region_000617 = Region(begin=Location(line=86, column=41), end=Location(line=86, column=44))
region_000618 = Region(begin=Location(line=86, column=57), end=Location(line=86, column=70))
region_000619 = Region(begin=Location(line=86, column=57), end=Location(line=86, column=60))
region_000620 = Region(begin=Location(line=86, column=61), end=Location(line=86, column=70))
region_000621 = Region(begin=Location(line=86, column=57), end=Location(line=86, column=76))
region_000622 = Region(begin=Location(line=86, column=71), end=Location(line=86, column=76))
region_000623 = Region(begin=Location(line=86, column=56), end=Location(line=86, column=77))
region_000624 = Region(begin=Location(line=86, column=5), end=Location(line=87, column=1))
region_000625 = Region(begin=Location(line=86, column=16), end=Location(line=86, column=22))
region_000626 = Region(begin=Location(line=86, column=78), end=Location(line=86, column=87))
region_000627 = Region(begin=Location(line=86, column=23), end=Location(line=86, column=31))
region_000628 = Region(begin=Location(line=86, column=45), end=Location(line=86, column=56))
region_000629 = Region(begin=Location(line=86, column=6), end=Location(line=86, column=14))
region_000630 = Region(begin=Location(line=87, column=32), end=Location(line=87, column=44))
region_000631 = Region(begin=Location(line=87, column=32), end=Location(line=87, column=40))
region_000632 = Region(begin=Location(line=87, column=41), end=Location(line=87, column=44))
region_000633 = Region(begin=Location(line=87, column=57), end=Location(line=87, column=70))
region_000634 = Region(begin=Location(line=87, column=57), end=Location(line=87, column=60))
region_000635 = Region(begin=Location(line=87, column=61), end=Location(line=87, column=70))
region_000636 = Region(begin=Location(line=87, column=57), end=Location(line=87, column=76))
region_000637 = Region(begin=Location(line=87, column=71), end=Location(line=87, column=76))
region_000638 = Region(begin=Location(line=87, column=56), end=Location(line=87, column=77))
region_000639 = Region(begin=Location(line=87, column=5), end=Location(line=88, column=1))
region_000640 = Region(begin=Location(line=87, column=16), end=Location(line=87, column=22))
region_000641 = Region(begin=Location(line=87, column=78), end=Location(line=87, column=87))
region_000642 = Region(begin=Location(line=87, column=23), end=Location(line=87, column=31))
region_000643 = Region(begin=Location(line=87, column=45), end=Location(line=87, column=56))
region_000644 = Region(begin=Location(line=87, column=6), end=Location(line=87, column=14))
region_000645 = Region(begin=Location(line=88, column=32), end=Location(line=88, column=44))
region_000646 = Region(begin=Location(line=88, column=32), end=Location(line=88, column=40))
region_000647 = Region(begin=Location(line=88, column=41), end=Location(line=88, column=44))
region_000648 = Region(begin=Location(line=88, column=56), end=Location(line=88, column=69))
region_000649 = Region(begin=Location(line=88, column=56), end=Location(line=88, column=59))
region_000650 = Region(begin=Location(line=88, column=60), end=Location(line=88, column=69))
region_000651 = Region(begin=Location(line=88, column=56), end=Location(line=88, column=75))
region_000652 = Region(begin=Location(line=88, column=70), end=Location(line=88, column=75))
region_000653 = Region(begin=Location(line=88, column=55), end=Location(line=88, column=76))
region_000654 = Region(begin=Location(line=88, column=5), end=Location(line=90, column=1))
region_000655 = Region(begin=Location(line=88, column=16), end=Location(line=88, column=22))
region_000656 = Region(begin=Location(line=88, column=77), end=Location(line=88, column=86))
region_000657 = Region(begin=Location(line=88, column=23), end=Location(line=88, column=31))
region_000658 = Region(begin=Location(line=88, column=45), end=Location(line=88, column=55))
region_000659 = Region(begin=Location(line=88, column=6), end=Location(line=88, column=14))
region_000660 = Region(begin=Location(line=90, column=5), end=Location(line=92, column=1))
region_000661 = Region(begin=Location(line=90, column=16), end=Location(line=90, column=22))
region_000662 = Region(begin=Location(line=90, column=59), end=Location(line=90, column=62))
region_000663 = Region(begin=Location(line=90, column=23), end=Location(line=90, column=31))
region_000664 = Region(begin=Location(line=90, column=37), end=Location(line=90, column=56))
region_000665 = Region(begin=Location(line=90, column=56), end=Location(line=90, column=58))
region_000666 = Region(begin=Location(line=90, column=6), end=Location(line=90, column=14))
region_000667 = Region(begin=Location(line=92, column=61), end=Location(line=92, column=74))
region_000668 = Region(begin=Location(line=92, column=61), end=Location(line=92, column=64))
region_000669 = Region(begin=Location(line=92, column=65), end=Location(line=92, column=74))
region_000670 = Region(begin=Location(line=92, column=61), end=Location(line=92, column=82))
region_000671 = Region(begin=Location(line=92, column=75), end=Location(line=92, column=82))
region_000672 = Region(begin=Location(line=92, column=60), end=Location(line=92, column=83))
region_000673 = Region(begin=Location(line=92, column=5), end=Location(line=93, column=1))
region_000674 = Region(begin=Location(line=92, column=16), end=Location(line=92, column=22))
region_000675 = Region(begin=Location(line=92, column=84), end=Location(line=92, column=87))
region_000676 = Region(begin=Location(line=92, column=23), end=Location(line=92, column=31))
region_000677 = Region(begin=Location(line=92, column=37), end=Location(line=92, column=60))
region_000678 = Region(begin=Location(line=92, column=6), end=Location(line=92, column=14))
region_000679 = Region(begin=Location(line=93, column=56), end=Location(line=93, column=69))
region_000680 = Region(begin=Location(line=93, column=56), end=Location(line=93, column=59))
region_000681 = Region(begin=Location(line=93, column=60), end=Location(line=93, column=69))
region_000682 = Region(begin=Location(line=93, column=56), end=Location(line=93, column=77))
region_000683 = Region(begin=Location(line=93, column=70), end=Location(line=93, column=77))
region_000684 = Region(begin=Location(line=93, column=55), end=Location(line=93, column=78))
region_000685 = Region(begin=Location(line=93, column=5), end=Location(line=94, column=1))
region_000686 = Region(begin=Location(line=93, column=16), end=Location(line=93, column=22))
region_000687 = Region(begin=Location(line=93, column=79), end=Location(line=93, column=82))
region_000688 = Region(begin=Location(line=93, column=23), end=Location(line=93, column=31))
region_000689 = Region(begin=Location(line=93, column=37), end=Location(line=93, column=55))
region_000690 = Region(begin=Location(line=93, column=6), end=Location(line=93, column=14))
region_000691 = Region(begin=Location(line=94, column=58), end=Location(line=94, column=71))
region_000692 = Region(begin=Location(line=94, column=58), end=Location(line=94, column=61))
region_000693 = Region(begin=Location(line=94, column=62), end=Location(line=94, column=71))
region_000694 = Region(begin=Location(line=94, column=58), end=Location(line=94, column=82))
region_000695 = Region(begin=Location(line=94, column=72), end=Location(line=94, column=82))
region_000696 = Region(begin=Location(line=94, column=57), end=Location(line=94, column=83))
region_000697 = Region(begin=Location(line=94, column=5), end=Location(line=95, column=1))
region_000698 = Region(begin=Location(line=94, column=16), end=Location(line=94, column=22))
region_000699 = Region(begin=Location(line=94, column=84), end=Location(line=94, column=87))
region_000700 = Region(begin=Location(line=94, column=23), end=Location(line=94, column=31))
region_000701 = Region(begin=Location(line=94, column=37), end=Location(line=94, column=57))
region_000702 = Region(begin=Location(line=94, column=6), end=Location(line=94, column=14))
region_000703 = Region(begin=Location(line=95, column=55), end=Location(line=95, column=68))
region_000704 = Region(begin=Location(line=95, column=55), end=Location(line=95, column=58))
region_000705 = Region(begin=Location(line=95, column=59), end=Location(line=95, column=68))
region_000706 = Region(begin=Location(line=95, column=55), end=Location(line=95, column=77))
region_000707 = Region(begin=Location(line=95, column=69), end=Location(line=95, column=77))
region_000708 = Region(begin=Location(line=95, column=54), end=Location(line=95, column=78))
region_000709 = Region(begin=Location(line=95, column=5), end=Location(line=97, column=1))
region_000710 = Region(begin=Location(line=95, column=16), end=Location(line=95, column=22))
region_000711 = Region(begin=Location(line=95, column=79), end=Location(line=95, column=82))
region_000712 = Region(begin=Location(line=95, column=23), end=Location(line=95, column=31))
region_000713 = Region(begin=Location(line=95, column=37), end=Location(line=95, column=54))
region_000714 = Region(begin=Location(line=95, column=6), end=Location(line=95, column=14))
region_000715 = Region(begin=Location(line=97, column=53), end=Location(line=97, column=66))
region_000716 = Region(begin=Location(line=97, column=53), end=Location(line=97, column=56))
region_000717 = Region(begin=Location(line=97, column=57), end=Location(line=97, column=66))
region_000718 = Region(begin=Location(line=97, column=53), end=Location(line=97, column=72))
region_000719 = Region(begin=Location(line=97, column=67), end=Location(line=97, column=72))
region_000720 = Region(begin=Location(line=97, column=52), end=Location(line=97, column=73))
region_000721 = Region(begin=Location(line=97, column=5), end=Location(line=98, column=1))
region_000722 = Region(begin=Location(line=97, column=16), end=Location(line=97, column=22))
region_000723 = Region(begin=Location(line=97, column=74), end=Location(line=97, column=77))
region_000724 = Region(begin=Location(line=97, column=23), end=Location(line=97, column=31))
region_000725 = Region(begin=Location(line=97, column=37), end=Location(line=97, column=52))
region_000726 = Region(begin=Location(line=97, column=6), end=Location(line=97, column=14))
region_000727 = Region(begin=Location(line=98, column=58), end=Location(line=98, column=71))
region_000728 = Region(begin=Location(line=98, column=58), end=Location(line=98, column=61))
region_000729 = Region(begin=Location(line=98, column=62), end=Location(line=98, column=71))
region_000730 = Region(begin=Location(line=98, column=58), end=Location(line=98, column=77))
region_000731 = Region(begin=Location(line=98, column=72), end=Location(line=98, column=77))
region_000732 = Region(begin=Location(line=98, column=57), end=Location(line=98, column=78))
region_000733 = Region(begin=Location(line=98, column=5), end=Location(line=100, column=1))
region_000734 = Region(begin=Location(line=98, column=16), end=Location(line=98, column=22))
region_000735 = Region(begin=Location(line=98, column=79), end=Location(line=98, column=82))
region_000736 = Region(begin=Location(line=98, column=23), end=Location(line=98, column=31))
region_000737 = Region(begin=Location(line=98, column=37), end=Location(line=98, column=57))
region_000738 = Region(begin=Location(line=98, column=6), end=Location(line=98, column=14))
region_000739 = Region(begin=Location(line=100, column=62), end=Location(line=100, column=75))
region_000740 = Region(begin=Location(line=100, column=62), end=Location(line=100, column=65))
region_000741 = Region(begin=Location(line=100, column=66), end=Location(line=100, column=75))
region_000742 = Region(begin=Location(line=100, column=62), end=Location(line=100, column=82))
region_000743 = Region(begin=Location(line=100, column=76), end=Location(line=100, column=82))
region_000744 = Region(begin=Location(line=100, column=61), end=Location(line=100, column=83))
region_000745 = Region(begin=Location(line=100, column=5), end=Location(line=101, column=1))
region_000746 = Region(begin=Location(line=100, column=16), end=Location(line=100, column=22))
region_000747 = Region(begin=Location(line=100, column=84), end=Location(line=100, column=87))
region_000748 = Region(begin=Location(line=100, column=23), end=Location(line=100, column=31))
region_000749 = Region(begin=Location(line=100, column=37), end=Location(line=100, column=61))
region_000750 = Region(begin=Location(line=100, column=6), end=Location(line=100, column=14))
region_000751 = Region(begin=Location(line=101, column=63), end=Location(line=101, column=76))
region_000752 = Region(begin=Location(line=101, column=63), end=Location(line=101, column=66))
region_000753 = Region(begin=Location(line=101, column=67), end=Location(line=101, column=76))
region_000754 = Region(begin=Location(line=101, column=63), end=Location(line=101, column=83))
region_000755 = Region(begin=Location(line=101, column=77), end=Location(line=101, column=83))
region_000756 = Region(begin=Location(line=101, column=62), end=Location(line=101, column=84))
region_000757 = Region(begin=Location(line=101, column=5), end=Location(line=103, column=1))
region_000758 = Region(begin=Location(line=101, column=16), end=Location(line=101, column=22))
region_000759 = Region(begin=Location(line=101, column=85), end=Location(line=101, column=88))
region_000760 = Region(begin=Location(line=101, column=23), end=Location(line=101, column=31))
region_000761 = Region(begin=Location(line=101, column=37), end=Location(line=101, column=62))
region_000762 = Region(begin=Location(line=101, column=6), end=Location(line=101, column=14))
region_000763 = Region(begin=Location(line=103, column=56), end=Location(line=103, column=69))
region_000764 = Region(begin=Location(line=103, column=56), end=Location(line=103, column=59))
region_000765 = Region(begin=Location(line=103, column=60), end=Location(line=103, column=69))
region_000766 = Region(begin=Location(line=103, column=56), end=Location(line=103, column=75))
region_000767 = Region(begin=Location(line=103, column=70), end=Location(line=103, column=75))
region_000768 = Region(begin=Location(line=103, column=55), end=Location(line=103, column=76))
region_000769 = Region(begin=Location(line=103, column=5), end=Location(line=104, column=1))
region_000770 = Region(begin=Location(line=103, column=16), end=Location(line=103, column=22))
region_000771 = Region(begin=Location(line=103, column=77), end=Location(line=103, column=80))
region_000772 = Region(begin=Location(line=103, column=23), end=Location(line=103, column=31))
region_000773 = Region(begin=Location(line=103, column=37), end=Location(line=103, column=55))
region_000774 = Region(begin=Location(line=103, column=6), end=Location(line=103, column=14))
region_000775 = Region(begin=Location(line=104, column=56), end=Location(line=104, column=69))
region_000776 = Region(begin=Location(line=104, column=56), end=Location(line=104, column=59))
region_000777 = Region(begin=Location(line=104, column=60), end=Location(line=104, column=69))
region_000778 = Region(begin=Location(line=104, column=56), end=Location(line=104, column=75))
region_000779 = Region(begin=Location(line=104, column=70), end=Location(line=104, column=75))
region_000780 = Region(begin=Location(line=104, column=55), end=Location(line=104, column=76))
region_000781 = Region(begin=Location(line=104, column=5), end=Location(line=105, column=1))
region_000782 = Region(begin=Location(line=104, column=16), end=Location(line=104, column=22))
region_000783 = Region(begin=Location(line=104, column=77), end=Location(line=104, column=80))
region_000784 = Region(begin=Location(line=104, column=23), end=Location(line=104, column=31))
region_000785 = Region(begin=Location(line=104, column=37), end=Location(line=104, column=55))
region_000786 = Region(begin=Location(line=104, column=6), end=Location(line=104, column=14))
region_000787 = Region(begin=Location(line=105, column=55), end=Location(line=105, column=68))
region_000788 = Region(begin=Location(line=105, column=55), end=Location(line=105, column=58))
region_000789 = Region(begin=Location(line=105, column=59), end=Location(line=105, column=68))
region_000790 = Region(begin=Location(line=105, column=55), end=Location(line=105, column=74))
region_000791 = Region(begin=Location(line=105, column=69), end=Location(line=105, column=74))
region_000792 = Region(begin=Location(line=105, column=54), end=Location(line=105, column=75))
region_000793 = Region(begin=Location(line=105, column=5), end=Location(line=108, column=1))
region_000794 = Region(begin=Location(line=105, column=16), end=Location(line=105, column=22))
region_000795 = Region(begin=Location(line=105, column=76), end=Location(line=105, column=79))
region_000796 = Region(begin=Location(line=105, column=23), end=Location(line=105, column=31))
region_000797 = Region(begin=Location(line=105, column=37), end=Location(line=105, column=54))
region_000798 = Region(begin=Location(line=105, column=6), end=Location(line=105, column=14))
region_000799 = Region(begin=Location(line=20, column=1), end=Location(line=109, column=1))
region_000800 = Region(begin=Location(line=20, column=1), end=Location(line=20, column=7))
region_000801 = Region(begin=Location(line=20, column=8), end=Location(line=20, column=15))
region_000802 = Region(begin=Location(line=20, column=22), end=Location(line=20, column=30))
region_000803 = Region(begin=Location(line=30, column=1), end=Location(line=109, column=1))
region_000804 = Region(begin=Location(line=109, column=57), end=Location(line=109, column=58))
region_000805 = Region(begin=Location(line=109, column=73), end=Location(line=109, column=77))
region_000806 = Region(begin=Location(line=109, column=60), end=Location(line=109, column=77))
region_000807 = Region(begin=Location(line=109, column=60), end=Location(line=109, column=70))
region_000808 = Region(begin=Location(line=109, column=93), end=Location(line=109, column=98))
region_000809 = Region(begin=Location(line=109, column=79), end=Location(line=109, column=98))
region_000810 = Region(begin=Location(line=109, column=79), end=Location(line=109, column=90))
region_000811 = Region(begin=Location(line=109, column=56), end=Location(line=109, column=99))
region_000812 = Region(begin=Location(line=109, column=47), end=Location(line=109, column=99))
region_000813 = Region(begin=Location(line=109, column=47), end=Location(line=109, column=55))
region_000814 = Region(begin=Location(line=109, column=1), end=Location(line=110, column=1))
region_000815 = Region(begin=Location(line=109, column=1), end=Location(line=109, column=7))
region_000816 = Region(begin=Location(line=109, column=8), end=Location(line=109, column=12))
region_000817 = Region(begin=Location(line=110, column=57), end=Location(line=110, column=58))
region_000818 = Region(begin=Location(line=110, column=73), end=Location(line=110, column=77))
region_000819 = Region(begin=Location(line=110, column=60), end=Location(line=110, column=77))
region_000820 = Region(begin=Location(line=110, column=60), end=Location(line=110, column=70))
region_000821 = Region(begin=Location(line=110, column=93), end=Location(line=110, column=97))
region_000822 = Region(begin=Location(line=110, column=79), end=Location(line=110, column=97))
region_000823 = Region(begin=Location(line=110, column=79), end=Location(line=110, column=90))
region_000824 = Region(begin=Location(line=110, column=56), end=Location(line=110, column=98))
region_000825 = Region(begin=Location(line=110, column=47), end=Location(line=110, column=98))
region_000826 = Region(begin=Location(line=110, column=47), end=Location(line=110, column=55))
region_000827 = Region(begin=Location(line=110, column=1), end=Location(line=112, column=1))
region_000828 = Region(begin=Location(line=110, column=1), end=Location(line=110, column=7))
region_000829 = Region(begin=Location(line=110, column=8), end=Location(line=110, column=19))
region_000830 = Region(begin=Location(line=112, column=57), end=Location(line=112, column=58))
region_000831 = Region(begin=Location(line=112, column=73), end=Location(line=112, column=78))
region_000832 = Region(begin=Location(line=112, column=60), end=Location(line=112, column=78))
region_000833 = Region(begin=Location(line=112, column=60), end=Location(line=112, column=70))
region_000834 = Region(begin=Location(line=112, column=94), end=Location(line=112, column=99))
region_000835 = Region(begin=Location(line=112, column=80), end=Location(line=112, column=99))
region_000836 = Region(begin=Location(line=112, column=80), end=Location(line=112, column=91))
region_000837 = Region(begin=Location(line=112, column=56), end=Location(line=112, column=100))
region_000838 = Region(begin=Location(line=112, column=47), end=Location(line=112, column=100))
region_000839 = Region(begin=Location(line=112, column=47), end=Location(line=112, column=55))
region_000840 = Region(begin=Location(line=112, column=1), end=Location(line=113, column=1))
region_000841 = Region(begin=Location(line=112, column=1), end=Location(line=112, column=7))
region_000842 = Region(begin=Location(line=112, column=8), end=Location(line=112, column=13))
region_000843 = Region(begin=Location(line=113, column=57), end=Location(line=113, column=58))
region_000844 = Region(begin=Location(line=113, column=73), end=Location(line=113, column=78))
region_000845 = Region(begin=Location(line=113, column=60), end=Location(line=113, column=78))
region_000846 = Region(begin=Location(line=113, column=60), end=Location(line=113, column=70))
region_000847 = Region(begin=Location(line=113, column=94), end=Location(line=113, column=98))
region_000848 = Region(begin=Location(line=113, column=80), end=Location(line=113, column=98))
region_000849 = Region(begin=Location(line=113, column=80), end=Location(line=113, column=91))
region_000850 = Region(begin=Location(line=113, column=56), end=Location(line=113, column=99))
region_000851 = Region(begin=Location(line=113, column=47), end=Location(line=113, column=99))
region_000852 = Region(begin=Location(line=113, column=47), end=Location(line=113, column=55))
region_000853 = Region(begin=Location(line=113, column=1), end=Location(line=116, column=1))
region_000854 = Region(begin=Location(line=113, column=1), end=Location(line=113, column=7))
region_000855 = Region(begin=Location(line=113, column=8), end=Location(line=113, column=20))
region_000856 = Region(begin=Location(line=117, column=57), end=Location(line=117, column=58))
region_000857 = Region(begin=Location(line=117, column=73), end=Location(line=117, column=77))
region_000858 = Region(begin=Location(line=117, column=60), end=Location(line=117, column=77))
region_000859 = Region(begin=Location(line=117, column=60), end=Location(line=117, column=70))
region_000860 = Region(begin=Location(line=117, column=93), end=Location(line=117, column=98))
region_000861 = Region(begin=Location(line=117, column=79), end=Location(line=117, column=98))
region_000862 = Region(begin=Location(line=117, column=79), end=Location(line=117, column=90))
region_000863 = Region(begin=Location(line=117, column=56), end=Location(line=117, column=99))
region_000864 = Region(begin=Location(line=117, column=47), end=Location(line=117, column=99))
region_000865 = Region(begin=Location(line=117, column=47), end=Location(line=117, column=55))
region_000866 = Region(begin=Location(line=117, column=1), end=Location(line=118, column=1))
region_000867 = Region(begin=Location(line=117, column=1), end=Location(line=117, column=7))
region_000868 = Region(begin=Location(line=117, column=8), end=Location(line=117, column=13))
region_000869 = Region(begin=Location(line=118, column=57), end=Location(line=118, column=58))
region_000870 = Region(begin=Location(line=118, column=73), end=Location(line=118, column=77))
region_000871 = Region(begin=Location(line=118, column=60), end=Location(line=118, column=77))
region_000872 = Region(begin=Location(line=118, column=60), end=Location(line=118, column=70))
region_000873 = Region(begin=Location(line=118, column=93), end=Location(line=118, column=97))
region_000874 = Region(begin=Location(line=118, column=79), end=Location(line=118, column=97))
region_000875 = Region(begin=Location(line=118, column=79), end=Location(line=118, column=90))
region_000876 = Region(begin=Location(line=118, column=56), end=Location(line=118, column=98))
region_000877 = Region(begin=Location(line=118, column=47), end=Location(line=118, column=98))
region_000878 = Region(begin=Location(line=118, column=47), end=Location(line=118, column=55))
region_000879 = Region(begin=Location(line=118, column=1), end=Location(line=120, column=1))
region_000880 = Region(begin=Location(line=118, column=1), end=Location(line=118, column=7))
region_000881 = Region(begin=Location(line=118, column=8), end=Location(line=118, column=20))
region_000882 = Region(begin=Location(line=120, column=57), end=Location(line=120, column=58))
region_000883 = Region(begin=Location(line=120, column=73), end=Location(line=120, column=78))
region_000884 = Region(begin=Location(line=120, column=60), end=Location(line=120, column=78))
region_000885 = Region(begin=Location(line=120, column=60), end=Location(line=120, column=70))
region_000886 = Region(begin=Location(line=120, column=94), end=Location(line=120, column=99))
region_000887 = Region(begin=Location(line=120, column=80), end=Location(line=120, column=99))
region_000888 = Region(begin=Location(line=120, column=80), end=Location(line=120, column=91))
region_000889 = Region(begin=Location(line=120, column=56), end=Location(line=120, column=100))
region_000890 = Region(begin=Location(line=120, column=47), end=Location(line=120, column=100))
region_000891 = Region(begin=Location(line=120, column=47), end=Location(line=120, column=55))
region_000892 = Region(begin=Location(line=120, column=1), end=Location(line=121, column=1))
region_000893 = Region(begin=Location(line=120, column=1), end=Location(line=120, column=7))
region_000894 = Region(begin=Location(line=120, column=8), end=Location(line=120, column=14))
region_000895 = Region(begin=Location(line=121, column=57), end=Location(line=121, column=58))
region_000896 = Region(begin=Location(line=121, column=73), end=Location(line=121, column=78))
region_000897 = Region(begin=Location(line=121, column=60), end=Location(line=121, column=78))
region_000898 = Region(begin=Location(line=121, column=60), end=Location(line=121, column=70))
region_000899 = Region(begin=Location(line=121, column=94), end=Location(line=121, column=98))
region_000900 = Region(begin=Location(line=121, column=80), end=Location(line=121, column=98))
region_000901 = Region(begin=Location(line=121, column=80), end=Location(line=121, column=91))
region_000902 = Region(begin=Location(line=121, column=56), end=Location(line=121, column=99))
region_000903 = Region(begin=Location(line=121, column=47), end=Location(line=121, column=99))
region_000904 = Region(begin=Location(line=121, column=47), end=Location(line=121, column=55))
region_000905 = Region(begin=Location(line=121, column=1), end=Location(line=124, column=1))
region_000906 = Region(begin=Location(line=121, column=1), end=Location(line=121, column=7))
region_000907 = Region(begin=Location(line=121, column=8), end=Location(line=121, column=21))
region_000908 = Region(begin=Location(line=125, column=57), end=Location(line=125, column=58))
region_000909 = Region(begin=Location(line=125, column=73), end=Location(line=125, column=77))
region_000910 = Region(begin=Location(line=125, column=60), end=Location(line=125, column=77))
region_000911 = Region(begin=Location(line=125, column=60), end=Location(line=125, column=70))
region_000912 = Region(begin=Location(line=125, column=93), end=Location(line=125, column=98))
region_000913 = Region(begin=Location(line=125, column=79), end=Location(line=125, column=98))
region_000914 = Region(begin=Location(line=125, column=79), end=Location(line=125, column=90))
region_000915 = Region(begin=Location(line=125, column=56), end=Location(line=125, column=99))
region_000916 = Region(begin=Location(line=125, column=47), end=Location(line=125, column=99))
region_000917 = Region(begin=Location(line=125, column=47), end=Location(line=125, column=55))
region_000918 = Region(begin=Location(line=125, column=1), end=Location(line=126, column=1))
region_000919 = Region(begin=Location(line=125, column=1), end=Location(line=125, column=7))
region_000920 = Region(begin=Location(line=125, column=8), end=Location(line=125, column=13))
region_000921 = Region(begin=Location(line=126, column=57), end=Location(line=126, column=58))
region_000922 = Region(begin=Location(line=126, column=73), end=Location(line=126, column=77))
region_000923 = Region(begin=Location(line=126, column=60), end=Location(line=126, column=77))
region_000924 = Region(begin=Location(line=126, column=60), end=Location(line=126, column=70))
region_000925 = Region(begin=Location(line=126, column=93), end=Location(line=126, column=97))
region_000926 = Region(begin=Location(line=126, column=79), end=Location(line=126, column=97))
region_000927 = Region(begin=Location(line=126, column=79), end=Location(line=126, column=90))
region_000928 = Region(begin=Location(line=126, column=56), end=Location(line=126, column=98))
region_000929 = Region(begin=Location(line=126, column=47), end=Location(line=126, column=98))
region_000930 = Region(begin=Location(line=126, column=47), end=Location(line=126, column=55))
region_000931 = Region(begin=Location(line=126, column=1), end=Location(line=128, column=1))
region_000932 = Region(begin=Location(line=126, column=1), end=Location(line=126, column=7))
region_000933 = Region(begin=Location(line=126, column=8), end=Location(line=126, column=20))
region_000934 = Region(begin=Location(line=128, column=57), end=Location(line=128, column=58))
region_000935 = Region(begin=Location(line=128, column=73), end=Location(line=128, column=78))
region_000936 = Region(begin=Location(line=128, column=60), end=Location(line=128, column=78))
region_000937 = Region(begin=Location(line=128, column=60), end=Location(line=128, column=70))
region_000938 = Region(begin=Location(line=128, column=94), end=Location(line=128, column=99))
region_000939 = Region(begin=Location(line=128, column=80), end=Location(line=128, column=99))
region_000940 = Region(begin=Location(line=128, column=80), end=Location(line=128, column=91))
region_000941 = Region(begin=Location(line=128, column=56), end=Location(line=128, column=100))
region_000942 = Region(begin=Location(line=128, column=47), end=Location(line=128, column=100))
region_000943 = Region(begin=Location(line=128, column=47), end=Location(line=128, column=55))
region_000944 = Region(begin=Location(line=128, column=1), end=Location(line=129, column=1))
region_000945 = Region(begin=Location(line=128, column=1), end=Location(line=128, column=7))
region_000946 = Region(begin=Location(line=128, column=8), end=Location(line=128, column=14))
region_000947 = Region(begin=Location(line=129, column=57), end=Location(line=129, column=58))
region_000948 = Region(begin=Location(line=129, column=73), end=Location(line=129, column=78))
region_000949 = Region(begin=Location(line=129, column=60), end=Location(line=129, column=78))
region_000950 = Region(begin=Location(line=129, column=60), end=Location(line=129, column=70))
region_000951 = Region(begin=Location(line=129, column=94), end=Location(line=129, column=98))
region_000952 = Region(begin=Location(line=129, column=80), end=Location(line=129, column=98))
region_000953 = Region(begin=Location(line=129, column=80), end=Location(line=129, column=91))
region_000954 = Region(begin=Location(line=129, column=56), end=Location(line=129, column=99))
region_000955 = Region(begin=Location(line=129, column=47), end=Location(line=129, column=99))
region_000956 = Region(begin=Location(line=129, column=47), end=Location(line=129, column=55))
region_000957 = Region(begin=Location(line=129, column=1), end=Location(line=132, column=1))
region_000958 = Region(begin=Location(line=129, column=1), end=Location(line=129, column=7))
region_000959 = Region(begin=Location(line=129, column=8), end=Location(line=129, column=21))
region_000960 = Region(begin=Location(line=133, column=57), end=Location(line=133, column=58))
region_000961 = Region(begin=Location(line=133, column=73), end=Location(line=133, column=77))
region_000962 = Region(begin=Location(line=133, column=60), end=Location(line=133, column=77))
region_000963 = Region(begin=Location(line=133, column=60), end=Location(line=133, column=70))
region_000964 = Region(begin=Location(line=133, column=93), end=Location(line=133, column=98))
region_000965 = Region(begin=Location(line=133, column=79), end=Location(line=133, column=98))
region_000966 = Region(begin=Location(line=133, column=79), end=Location(line=133, column=90))
region_000967 = Region(begin=Location(line=133, column=56), end=Location(line=133, column=99))
region_000968 = Region(begin=Location(line=133, column=47), end=Location(line=133, column=99))
region_000969 = Region(begin=Location(line=133, column=47), end=Location(line=133, column=55))
region_000970 = Region(begin=Location(line=133, column=1), end=Location(line=134, column=1))
region_000971 = Region(begin=Location(line=133, column=1), end=Location(line=133, column=7))
region_000972 = Region(begin=Location(line=133, column=8), end=Location(line=133, column=13))
region_000973 = Region(begin=Location(line=134, column=57), end=Location(line=134, column=58))
region_000974 = Region(begin=Location(line=134, column=73), end=Location(line=134, column=77))
region_000975 = Region(begin=Location(line=134, column=60), end=Location(line=134, column=77))
region_000976 = Region(begin=Location(line=134, column=60), end=Location(line=134, column=70))
region_000977 = Region(begin=Location(line=134, column=93), end=Location(line=134, column=97))
region_000978 = Region(begin=Location(line=134, column=79), end=Location(line=134, column=97))
region_000979 = Region(begin=Location(line=134, column=79), end=Location(line=134, column=90))
region_000980 = Region(begin=Location(line=134, column=56), end=Location(line=134, column=98))
region_000981 = Region(begin=Location(line=134, column=47), end=Location(line=134, column=98))
region_000982 = Region(begin=Location(line=134, column=47), end=Location(line=134, column=55))
region_000983 = Region(begin=Location(line=134, column=1), end=Location(line=136, column=1))
region_000984 = Region(begin=Location(line=134, column=1), end=Location(line=134, column=7))
region_000985 = Region(begin=Location(line=134, column=8), end=Location(line=134, column=20))
region_000986 = Region(begin=Location(line=136, column=57), end=Location(line=136, column=58))
region_000987 = Region(begin=Location(line=136, column=73), end=Location(line=136, column=78))
region_000988 = Region(begin=Location(line=136, column=60), end=Location(line=136, column=78))
region_000989 = Region(begin=Location(line=136, column=60), end=Location(line=136, column=70))
region_000990 = Region(begin=Location(line=136, column=94), end=Location(line=136, column=99))
region_000991 = Region(begin=Location(line=136, column=80), end=Location(line=136, column=99))
region_000992 = Region(begin=Location(line=136, column=80), end=Location(line=136, column=91))
region_000993 = Region(begin=Location(line=136, column=56), end=Location(line=136, column=100))
region_000994 = Region(begin=Location(line=136, column=47), end=Location(line=136, column=100))
region_000995 = Region(begin=Location(line=136, column=47), end=Location(line=136, column=55))
region_000996 = Region(begin=Location(line=136, column=1), end=Location(line=137, column=1))
region_000997 = Region(begin=Location(line=136, column=1), end=Location(line=136, column=7))
region_000998 = Region(begin=Location(line=136, column=8), end=Location(line=136, column=14))
region_000999 = Region(begin=Location(line=137, column=57), end=Location(line=137, column=58))
region_001000 = Region(begin=Location(line=137, column=73), end=Location(line=137, column=78))
region_001001 = Region(begin=Location(line=137, column=60), end=Location(line=137, column=78))
region_001002 = Region(begin=Location(line=137, column=60), end=Location(line=137, column=70))
region_001003 = Region(begin=Location(line=137, column=94), end=Location(line=137, column=98))
region_001004 = Region(begin=Location(line=137, column=80), end=Location(line=137, column=98))
region_001005 = Region(begin=Location(line=137, column=80), end=Location(line=137, column=91))
region_001006 = Region(begin=Location(line=137, column=56), end=Location(line=137, column=99))
region_001007 = Region(begin=Location(line=137, column=47), end=Location(line=137, column=99))
region_001008 = Region(begin=Location(line=137, column=47), end=Location(line=137, column=55))
region_001009 = Region(begin=Location(line=137, column=1), end=Location(line=140, column=1))
region_001010 = Region(begin=Location(line=137, column=1), end=Location(line=137, column=7))
region_001011 = Region(begin=Location(line=137, column=8), end=Location(line=137, column=21))
region_001012 = Region(begin=Location(line=141, column=57), end=Location(line=141, column=59))
region_001013 = Region(begin=Location(line=141, column=74), end=Location(line=141, column=78))
region_001014 = Region(begin=Location(line=141, column=61), end=Location(line=141, column=78))
region_001015 = Region(begin=Location(line=141, column=61), end=Location(line=141, column=71))
region_001016 = Region(begin=Location(line=141, column=94), end=Location(line=141, column=99))
region_001017 = Region(begin=Location(line=141, column=80), end=Location(line=141, column=99))
region_001018 = Region(begin=Location(line=141, column=80), end=Location(line=141, column=91))
region_001019 = Region(begin=Location(line=141, column=56), end=Location(line=141, column=100))
region_001020 = Region(begin=Location(line=141, column=47), end=Location(line=141, column=100))
region_001021 = Region(begin=Location(line=141, column=47), end=Location(line=141, column=55))
region_001022 = Region(begin=Location(line=141, column=1), end=Location(line=142, column=1))
region_001023 = Region(begin=Location(line=141, column=1), end=Location(line=141, column=7))
region_001024 = Region(begin=Location(line=141, column=8), end=Location(line=141, column=14))
region_001025 = Region(begin=Location(line=142, column=57), end=Location(line=142, column=59))
region_001026 = Region(begin=Location(line=142, column=74), end=Location(line=142, column=78))
region_001027 = Region(begin=Location(line=142, column=61), end=Location(line=142, column=78))
region_001028 = Region(begin=Location(line=142, column=61), end=Location(line=142, column=71))
region_001029 = Region(begin=Location(line=142, column=94), end=Location(line=142, column=98))
region_001030 = Region(begin=Location(line=142, column=80), end=Location(line=142, column=98))
region_001031 = Region(begin=Location(line=142, column=80), end=Location(line=142, column=91))
region_001032 = Region(begin=Location(line=142, column=56), end=Location(line=142, column=99))
region_001033 = Region(begin=Location(line=142, column=47), end=Location(line=142, column=99))
region_001034 = Region(begin=Location(line=142, column=47), end=Location(line=142, column=55))
region_001035 = Region(begin=Location(line=142, column=1), end=Location(line=144, column=1))
region_001036 = Region(begin=Location(line=142, column=1), end=Location(line=142, column=7))
region_001037 = Region(begin=Location(line=142, column=8), end=Location(line=142, column=21))
region_001038 = Region(begin=Location(line=144, column=57), end=Location(line=144, column=59))
region_001039 = Region(begin=Location(line=144, column=74), end=Location(line=144, column=79))
region_001040 = Region(begin=Location(line=144, column=61), end=Location(line=144, column=79))
region_001041 = Region(begin=Location(line=144, column=61), end=Location(line=144, column=71))
region_001042 = Region(begin=Location(line=144, column=95), end=Location(line=144, column=100))
region_001043 = Region(begin=Location(line=144, column=81), end=Location(line=144, column=100))
region_001044 = Region(begin=Location(line=144, column=81), end=Location(line=144, column=92))
region_001045 = Region(begin=Location(line=144, column=56), end=Location(line=144, column=101))
region_001046 = Region(begin=Location(line=144, column=47), end=Location(line=144, column=101))
region_001047 = Region(begin=Location(line=144, column=47), end=Location(line=144, column=55))
region_001048 = Region(begin=Location(line=144, column=1), end=Location(line=145, column=1))
region_001049 = Region(begin=Location(line=144, column=1), end=Location(line=144, column=7))
region_001050 = Region(begin=Location(line=144, column=8), end=Location(line=144, column=15))
region_001051 = Region(begin=Location(line=145, column=57), end=Location(line=145, column=59))
region_001052 = Region(begin=Location(line=145, column=74), end=Location(line=145, column=79))
region_001053 = Region(begin=Location(line=145, column=61), end=Location(line=145, column=79))
region_001054 = Region(begin=Location(line=145, column=61), end=Location(line=145, column=71))
region_001055 = Region(begin=Location(line=145, column=95), end=Location(line=145, column=99))
region_001056 = Region(begin=Location(line=145, column=81), end=Location(line=145, column=99))
region_001057 = Region(begin=Location(line=145, column=81), end=Location(line=145, column=92))
region_001058 = Region(begin=Location(line=145, column=56), end=Location(line=145, column=100))
region_001059 = Region(begin=Location(line=145, column=47), end=Location(line=145, column=100))
region_001060 = Region(begin=Location(line=145, column=47), end=Location(line=145, column=55))
region_001061 = Region(begin=Location(line=145, column=1), end=Location(line=148, column=1))
region_001062 = Region(begin=Location(line=145, column=1), end=Location(line=145, column=7))
region_001063 = Region(begin=Location(line=145, column=8), end=Location(line=145, column=22))
region_001064 = Region(begin=Location(line=149, column=4), end=Location(line=149, column=25))
region_001065 = Region(begin=Location(line=149, column=29), end=Location(line=149, column=30))
region_001066 = Region(begin=Location(line=149, column=4), end=Location(line=149, column=30))
region_001067 = Region(begin=Location(line=149, column=26), end=Location(line=149, column=28))
region_001068 = Region(begin=Location(line=150, column=47), end=Location(line=150, column=53))
region_001069 = Region(begin=Location(line=150, column=5), end=Location(line=151, column=1))
region_001070 = Region(begin=Location(line=150, column=5), end=Location(line=150, column=11))
region_001071 = Region(begin=Location(line=150, column=12), end=Location(line=150, column=19))
region_001072 = Region(begin=Location(line=151, column=47), end=Location(line=151, column=60))
region_001073 = Region(begin=Location(line=151, column=5), end=Location(line=153, column=1))
region_001074 = Region(begin=Location(line=151, column=5), end=Location(line=151, column=11))
region_001075 = Region(begin=Location(line=151, column=12), end=Location(line=151, column=26))
region_001076 = Region(begin=Location(line=149, column=1), end=Location(line=159, column=1))
region_001077 = Region(begin=Location(line=149, column=30), end=Location(line=153, column=1))
region_001078 = Region(begin=Location(line=153, column=6), end=Location(line=153, column=27))
region_001079 = Region(begin=Location(line=153, column=31), end=Location(line=153, column=32))
region_001080 = Region(begin=Location(line=153, column=6), end=Location(line=153, column=32))
region_001081 = Region(begin=Location(line=153, column=28), end=Location(line=153, column=30))
region_001082 = Region(begin=Location(line=154, column=47), end=Location(line=154, column=53))
region_001083 = Region(begin=Location(line=154, column=5), end=Location(line=155, column=1))
region_001084 = Region(begin=Location(line=154, column=5), end=Location(line=154, column=11))
region_001085 = Region(begin=Location(line=154, column=12), end=Location(line=154, column=19))
region_001086 = Region(begin=Location(line=155, column=47), end=Location(line=155, column=60))
region_001087 = Region(begin=Location(line=155, column=5), end=Location(line=157, column=1))
region_001088 = Region(begin=Location(line=155, column=5), end=Location(line=155, column=11))
region_001089 = Region(begin=Location(line=155, column=12), end=Location(line=155, column=26))
region_001090 = Region(begin=Location(line=153, column=1), end=Location(line=157, column=1))
region_001091 = Region(begin=Location(line=153, column=32), end=Location(line=157, column=1))
region_001092 = Region(begin=Location(line=158, column=5), end=Location(line=158, column=11))
region_001093 = Region(begin=Location(line=158, column=12), end=Location(line=158, column=38))
region_001094 = Region(begin=Location(line=158, column=40), end=Location(line=158, column=61))
region_001095 = Region(begin=Location(line=158, column=11), end=Location(line=158, column=62))
region_001096 = Region(begin=Location(line=158, column=5), end=Location(line=158, column=62))
region_001097 = Region(begin=Location(line=158, column=5), end=Location(line=159, column=1))
region_001098 = Region(begin=Location(line=157, column=1), end=Location(line=159, column=1))
region_001099 = Region(begin=Location(line=157, column=5), end=Location(line=159, column=1))


# ----------------------------------------------------------------------
statement_000000 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000000, region_000000, None],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000001 = TemplateDecoratorParameterParserInfo.Create(
    regions=[region_000001, region_000002],
    type=statement_000000,
    name="num_bytes!",
    default_value=None,
)

statement_000002 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000003, region_000003, None],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000003 = TemplateDecoratorParameterParserInfo.Create(
    regions=[region_000004, region_000005],
    type=statement_000002,
    name="is_checked!",
    default_value=None,
)

statement_000004 = TemplateParametersParserInfo.Create(
    regions=[region_000006, None, region_000007, None],
    positional=None,
    any=[statement_000001, statement_000003, ],
    keyword=None,
)

statement_000005 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000008, region_000008, None],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000006 = ConstraintParameterParserInfo.Create(
    regions=[region_000009, region_000010],
    type=statement_000005,
    name="is_signed!",
    default_value=None,
)

statement_000007 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000011, region_000011, None],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000008 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000012, region_000012],
    name="is_signed!",
)

statement_000009 = IntegerExpressionParserInfo.Create(
    regions=[region_000013],
    value=1,
)

statement_000010 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000014, region_000014],
    name="num_bytes!",
)

statement_000011 = IntegerExpressionParserInfo.Create(
    regions=[region_000015],
    value=8,
)

statement_000012 = BinaryExpressionParserInfo.Create(
    regions=[region_000016, region_000017],
    left_expression=statement_000010,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000011,
)

statement_000013 = BinaryExpressionParserInfo.Create(
    regions=[region_000018, region_000019],
    left_expression=statement_000009,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000012,
)

statement_000014 = IntegerExpressionParserInfo.Create(
    regions=[region_000020],
    value=1,
)

statement_000015 = BinaryExpressionParserInfo.Create(
    regions=[region_000021, region_000022],
    left_expression=statement_000013,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000014,
)

statement_000016 = IntegerExpressionParserInfo.Create(
    regions=[region_000023],
    value=2,
)

statement_000017 = BinaryExpressionParserInfo.Create(
    regions=[region_000024, region_000025],
    left_expression=statement_000015,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000016,
)

statement_000018 = UnaryExpressionParserInfo.Create(
    regions=[region_000026, region_000027],
    operator=UnaryExpressionParserInfoOperatorType.Negative,
    expression=statement_000017,
)

statement_000019 = IntegerExpressionParserInfo.Create(
    regions=[region_000028],
    value=0,
)

statement_000020 = TernaryExpressionParserInfo.Create(
    regions=[region_000029],
    condition_expression=statement_000008,
    true_expression=statement_000018,
    false_expression=statement_000019,
)

statement_000021 = ConstraintParameterParserInfo.Create(
    regions=[region_000030, region_000031],
    type=statement_000007,
    name="min_value!",
    default_value=statement_000020,
)

statement_000022 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000032, region_000032, None],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000023 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000033, region_000033],
    name="is_signed!",
)

statement_000024 = IntegerExpressionParserInfo.Create(
    regions=[region_000034],
    value=1,
)

statement_000025 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000035, region_000035],
    name="num_bytes!",
)

statement_000026 = IntegerExpressionParserInfo.Create(
    regions=[region_000036],
    value=8,
)

statement_000027 = BinaryExpressionParserInfo.Create(
    regions=[region_000037, region_000038],
    left_expression=statement_000025,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000026,
)

statement_000028 = IntegerExpressionParserInfo.Create(
    regions=[region_000039],
    value=1,
)

statement_000029 = BinaryExpressionParserInfo.Create(
    regions=[region_000040, region_000041],
    left_expression=statement_000027,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000028,
)

statement_000030 = BinaryExpressionParserInfo.Create(
    regions=[region_000042, region_000043],
    left_expression=statement_000024,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000029,
)

statement_000031 = IntegerExpressionParserInfo.Create(
    regions=[region_000044],
    value=2,
)

statement_000032 = BinaryExpressionParserInfo.Create(
    regions=[region_000045, region_000046],
    left_expression=statement_000030,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000031,
)

statement_000033 = IntegerExpressionParserInfo.Create(
    regions=[region_000047],
    value=1,
)

statement_000034 = BinaryExpressionParserInfo.Create(
    regions=[region_000048, region_000049],
    left_expression=statement_000032,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000033,
)

statement_000035 = IntegerExpressionParserInfo.Create(
    regions=[region_000050],
    value=1,
)

statement_000036 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000051, region_000051],
    name="num_bytes!",
)

statement_000037 = IntegerExpressionParserInfo.Create(
    regions=[region_000052],
    value=8,
)

statement_000038 = BinaryExpressionParserInfo.Create(
    regions=[region_000053, region_000054],
    left_expression=statement_000036,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000037,
)

statement_000039 = BinaryExpressionParserInfo.Create(
    regions=[region_000055, region_000056],
    left_expression=statement_000035,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000038,
)

statement_000040 = IntegerExpressionParserInfo.Create(
    regions=[region_000057],
    value=1,
)

statement_000041 = BinaryExpressionParserInfo.Create(
    regions=[region_000058, region_000059],
    left_expression=statement_000039,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000040,
)

statement_000042 = TernaryExpressionParserInfo.Create(
    regions=[region_000060],
    condition_expression=statement_000023,
    true_expression=statement_000034,
    false_expression=statement_000041,
)

statement_000043 = ConstraintParameterParserInfo.Create(
    regions=[region_000061, region_000062],
    type=statement_000022,
    name="max_value!",
    default_value=statement_000042,
)

statement_000044 = ConstraintParametersParserInfo.Create(
    regions=[region_000063, None, None, region_000064],
    positional=None,
    any=None,
    keyword=[statement_000006, statement_000021, statement_000043, ],
)

statement_000045 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000065, region_000065],
    name="min_value!",
)

statement_000045 = ConstraintArgumentParserInfo.Create(
    regions=[region_000065, None],
    expression=statement_000045,
    keyword=None,
)

statement_000046 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000066, region_000066],
    name="max_value!",
)

statement_000046 = ConstraintArgumentParserInfo.Create(
    regions=[region_000066, None],
    expression=statement_000046,
    keyword=None,
)

statement_000047 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000067, region_000067],
    arguments=[statement_000045, statement_000046, ],
)

statement_000048 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000068, region_000069, None],
    value=CustomType("MutableInt"),
    templates=None,
    constraints=statement_000047,
    mutability_modifier=None,
)

statement_000049 = ClassStatementDependencyParserInfo.Create(
    regions=[region_000070, region_000071],
    visibility=VisibilityModifier.public,
    type=statement_000048,
)

statement_000050 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000072, region_000072, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000051 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000073, region_000073],
    name="num_bytes!",
)

statement_000052 = IntegerExpressionParserInfo.Create(
    regions=[region_000074],
    value=1,
)

statement_000053 = BinaryExpressionParserInfo.Create(
    regions=[region_000075, region_000076],
    left_expression=statement_000051,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000052,
)

statement_000054 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000077, region_000077],
    name="num_bytes!",
)

statement_000055 = IntegerExpressionParserInfo.Create(
    regions=[region_000078],
    value=2,
)

statement_000056 = BinaryExpressionParserInfo.Create(
    regions=[region_000079, region_000080],
    left_expression=statement_000054,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000055,
)

statement_000057 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000081, region_000081],
    name="num_bytes!",
)

statement_000058 = IntegerExpressionParserInfo.Create(
    regions=[region_000082],
    value=4,
)

statement_000059 = BinaryExpressionParserInfo.Create(
    regions=[region_000083, region_000084],
    left_expression=statement_000057,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000058,
)

statement_000060 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000085, region_000085],
    name="num_bytes!",
)

statement_000061 = IntegerExpressionParserInfo.Create(
    regions=[region_000086],
    value=8,
)

statement_000062 = BinaryExpressionParserInfo.Create(
    regions=[region_000087, region_000088],
    left_expression=statement_000060,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000061,
)

statement_000063 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000089, region_000089],
    name="num_bytes!",
)

statement_000064 = IntegerExpressionParserInfo.Create(
    regions=[region_000090],
    value=16,
)

statement_000065 = BinaryExpressionParserInfo.Create(
    regions=[region_000091, region_000092],
    left_expression=statement_000063,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000064,
)

statement_000066 = BinaryExpressionParserInfo.Create(
    regions=[region_000093, region_000094],
    left_expression=statement_000062,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000065,
)

statement_000067 = BinaryExpressionParserInfo.Create(
    regions=[region_000095, region_000096],
    left_expression=statement_000059,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000066,
)

statement_000068 = BinaryExpressionParserInfo.Create(
    regions=[region_000097, region_000098],
    left_expression=statement_000056,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000067,
)

statement_000069 = BinaryExpressionParserInfo.Create(
    regions=[region_000099, region_000100],
    left_expression=statement_000053,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000068,
)

statement_000069 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000099, None],
    expression=statement_000069,
    keyword=None,
)

statement_000070 = FuncArgumentsParserInfo.Create(
    regions=[region_000101, region_000101],
    arguments=[statement_000069, ],
)

statement_000071 = CallExpressionParserInfo.Create(
    regions=[region_000102, region_000101],
    expression=statement_000050,
    arguments=statement_000070,
)

statement_000072 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000103],
    expression=statement_000071,
)

statement_000073 = SpecialMethodStatementParserInfo.Create(
    regions=[region_000104, region_000105, region_000106],
    parent_class_capabilities=StandardCapabilities,
    name=SpecialMethodType.CompileTimeEvalTemplates,
    statements=[statement_000072, ],
)

statement_000074 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000107, region_000107, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000075 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000108, region_000108],
    name="min_value!",
)

statement_000076 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000109, region_000109],
    name="is_signed!",
)

statement_000077 = IntegerExpressionParserInfo.Create(
    regions=[region_000110],
    value=1,
)

statement_000078 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000111, region_000111],
    name="num_bytes!",
)

statement_000079 = IntegerExpressionParserInfo.Create(
    regions=[region_000112],
    value=8,
)

statement_000080 = BinaryExpressionParserInfo.Create(
    regions=[region_000113, region_000114],
    left_expression=statement_000078,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000079,
)

statement_000081 = BinaryExpressionParserInfo.Create(
    regions=[region_000115, region_000116],
    left_expression=statement_000077,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000080,
)

statement_000082 = IntegerExpressionParserInfo.Create(
    regions=[region_000117],
    value=1,
)

statement_000083 = BinaryExpressionParserInfo.Create(
    regions=[region_000118, region_000119],
    left_expression=statement_000081,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000082,
)

statement_000084 = IntegerExpressionParserInfo.Create(
    regions=[region_000120],
    value=2,
)

statement_000085 = BinaryExpressionParserInfo.Create(
    regions=[region_000121, region_000122],
    left_expression=statement_000083,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000084,
)

statement_000086 = UnaryExpressionParserInfo.Create(
    regions=[region_000123, region_000124],
    operator=UnaryExpressionParserInfoOperatorType.Negative,
    expression=statement_000085,
)

statement_000087 = IntegerExpressionParserInfo.Create(
    regions=[region_000125],
    value=0,
)

statement_000088 = TernaryExpressionParserInfo.Create(
    regions=[region_000126],
    condition_expression=statement_000076,
    true_expression=statement_000086,
    false_expression=statement_000087,
)

statement_000089 = BinaryExpressionParserInfo.Create(
    regions=[region_000127, region_000128],
    left_expression=statement_000075,
    operator=BinaryExpressionOperatorType.GreaterEqual,
    right_expression=statement_000088,
)

statement_000089 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000127, None],
    expression=statement_000089,
    keyword=None,
)

statement_000090 = FuncArgumentsParserInfo.Create(
    regions=[region_000129, region_000129],
    arguments=[statement_000089, ],
)

statement_000091 = CallExpressionParserInfo.Create(
    regions=[region_000130, region_000129],
    expression=statement_000074,
    arguments=statement_000090,
)

statement_000092 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000131],
    expression=statement_000091,
)

statement_000093 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000132, region_000132, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000094 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000133, region_000133],
    name="is_signed!",
)

statement_000095 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000134, region_000134],
    name="max_value!",
)

statement_000096 = IntegerExpressionParserInfo.Create(
    regions=[region_000135],
    value=1,
)

statement_000097 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000136, region_000136],
    name="num_bytes!",
)

statement_000098 = IntegerExpressionParserInfo.Create(
    regions=[region_000137],
    value=8,
)

statement_000099 = BinaryExpressionParserInfo.Create(
    regions=[region_000138, region_000139],
    left_expression=statement_000097,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000098,
)

statement_000100 = IntegerExpressionParserInfo.Create(
    regions=[region_000140],
    value=1,
)

statement_000101 = BinaryExpressionParserInfo.Create(
    regions=[region_000141, region_000142],
    left_expression=statement_000099,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000100,
)

statement_000102 = BinaryExpressionParserInfo.Create(
    regions=[region_000143, region_000144],
    left_expression=statement_000096,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000101,
)

statement_000103 = IntegerExpressionParserInfo.Create(
    regions=[region_000145],
    value=2,
)

statement_000104 = BinaryExpressionParserInfo.Create(
    regions=[region_000146, region_000147],
    left_expression=statement_000102,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000103,
)

statement_000105 = IntegerExpressionParserInfo.Create(
    regions=[region_000148],
    value=1,
)

statement_000106 = BinaryExpressionParserInfo.Create(
    regions=[region_000149, region_000150],
    left_expression=statement_000104,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000105,
)

statement_000107 = BinaryExpressionParserInfo.Create(
    regions=[region_000151, region_000152],
    left_expression=statement_000095,
    operator=BinaryExpressionOperatorType.LessEqual,
    right_expression=statement_000106,
)

statement_000108 = IntegerExpressionParserInfo.Create(
    regions=[region_000153],
    value=1,
)

statement_000109 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000154, region_000154],
    name="num_bytes!",
)

statement_000110 = IntegerExpressionParserInfo.Create(
    regions=[region_000155],
    value=8,
)

statement_000111 = BinaryExpressionParserInfo.Create(
    regions=[region_000156, region_000157],
    left_expression=statement_000109,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000110,
)

statement_000112 = BinaryExpressionParserInfo.Create(
    regions=[region_000158, region_000159],
    left_expression=statement_000108,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000111,
)

statement_000113 = IntegerExpressionParserInfo.Create(
    regions=[region_000160],
    value=1,
)

statement_000114 = BinaryExpressionParserInfo.Create(
    regions=[region_000161, region_000162],
    left_expression=statement_000112,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000113,
)

statement_000115 = TernaryExpressionParserInfo.Create(
    regions=[region_000163],
    condition_expression=statement_000094,
    true_expression=statement_000107,
    false_expression=statement_000114,
)

statement_000115 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000163, None],
    expression=statement_000115,
    keyword=None,
)

statement_000116 = FuncArgumentsParserInfo.Create(
    regions=[region_000164, region_000164],
    arguments=[statement_000115, ],
)

statement_000117 = CallExpressionParserInfo.Create(
    regions=[region_000165, region_000164],
    expression=statement_000093,
    arguments=statement_000116,
)

statement_000118 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000166],
    expression=statement_000117,
)

statement_000119 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000167, region_000167, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000120 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000168, region_000168],
    name="max_value!",
)

statement_000121 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000169, region_000169],
    name="min_value!",
)

statement_000122 = BinaryExpressionParserInfo.Create(
    regions=[region_000170, region_000171],
    left_expression=statement_000120,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000121,
)

statement_000123 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000172, region_000172],
    name="is_signed!",
)

statement_000124 = IntegerExpressionParserInfo.Create(
    regions=[region_000173],
    value=1,
)

statement_000125 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000174, region_000174],
    name="num_bytes!",
)

statement_000126 = IntegerExpressionParserInfo.Create(
    regions=[region_000175],
    value=8,
)

statement_000127 = BinaryExpressionParserInfo.Create(
    regions=[region_000176, region_000177],
    left_expression=statement_000125,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000126,
)

statement_000128 = IntegerExpressionParserInfo.Create(
    regions=[region_000178],
    value=1,
)

statement_000129 = BinaryExpressionParserInfo.Create(
    regions=[region_000179, region_000180],
    left_expression=statement_000127,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000128,
)

statement_000130 = BinaryExpressionParserInfo.Create(
    regions=[region_000181, region_000182],
    left_expression=statement_000124,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000129,
)

statement_000131 = IntegerExpressionParserInfo.Create(
    regions=[region_000183],
    value=2,
)

statement_000132 = BinaryExpressionParserInfo.Create(
    regions=[region_000184, region_000185],
    left_expression=statement_000130,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000131,
)

statement_000133 = IntegerExpressionParserInfo.Create(
    regions=[region_000186],
    value=1,
)

statement_000134 = BinaryExpressionParserInfo.Create(
    regions=[region_000187, region_000188],
    left_expression=statement_000132,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000133,
)

statement_000135 = IntegerExpressionParserInfo.Create(
    regions=[region_000189],
    value=1,
)

statement_000136 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000190, region_000190],
    name="num_bytes!",
)

statement_000137 = IntegerExpressionParserInfo.Create(
    regions=[region_000191],
    value=8,
)

statement_000138 = BinaryExpressionParserInfo.Create(
    regions=[region_000192, region_000193],
    left_expression=statement_000136,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000137,
)

statement_000139 = BinaryExpressionParserInfo.Create(
    regions=[region_000194, region_000195],
    left_expression=statement_000135,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000138,
)

statement_000140 = IntegerExpressionParserInfo.Create(
    regions=[region_000196],
    value=1,
)

statement_000141 = BinaryExpressionParserInfo.Create(
    regions=[region_000197, region_000198],
    left_expression=statement_000139,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000140,
)

statement_000142 = TernaryExpressionParserInfo.Create(
    regions=[region_000199],
    condition_expression=statement_000123,
    true_expression=statement_000134,
    false_expression=statement_000141,
)

statement_000143 = BinaryExpressionParserInfo.Create(
    regions=[region_000200, region_000201],
    left_expression=statement_000122,
    operator=BinaryExpressionOperatorType.LessEqual,
    right_expression=statement_000142,
)

statement_000143 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000200, None],
    expression=statement_000143,
    keyword=None,
)

statement_000144 = FuncArgumentsParserInfo.Create(
    regions=[region_000202, region_000202],
    arguments=[statement_000143, ],
)

statement_000145 = CallExpressionParserInfo.Create(
    regions=[region_000203, region_000202],
    expression=statement_000119,
    arguments=statement_000144,
)

statement_000146 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000204],
    expression=statement_000145,
)

statement_000147 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000205, region_000205, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000148 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000206, region_000206],
    name="min_value!",
)

statement_000149 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000207, region_000207],
    name="max_value!",
)

statement_000150 = BinaryExpressionParserInfo.Create(
    regions=[region_000208, region_000209],
    left_expression=statement_000148,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000149,
)

statement_000151 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000210, region_000210],
    name="is_signed!",
)

statement_000152 = IntegerExpressionParserInfo.Create(
    regions=[region_000211],
    value=1,
)

statement_000153 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000212, region_000212],
    name="num_bytes!",
)

statement_000154 = IntegerExpressionParserInfo.Create(
    regions=[region_000213],
    value=8,
)

statement_000155 = BinaryExpressionParserInfo.Create(
    regions=[region_000214, region_000215],
    left_expression=statement_000153,
    operator=BinaryExpressionOperatorType.Multiply,
    right_expression=statement_000154,
)

statement_000156 = BinaryExpressionParserInfo.Create(
    regions=[region_000216, region_000217],
    left_expression=statement_000152,
    operator=BinaryExpressionOperatorType.BitShiftLeft,
    right_expression=statement_000155,
)

statement_000157 = IntegerExpressionParserInfo.Create(
    regions=[region_000218],
    value=1,
)

statement_000158 = BinaryExpressionParserInfo.Create(
    regions=[region_000219, region_000220],
    left_expression=statement_000156,
    operator=BinaryExpressionOperatorType.Subtract,
    right_expression=statement_000157,
)

statement_000159 = IntegerExpressionParserInfo.Create(
    regions=[region_000221],
    value=2,
)

statement_000160 = BinaryExpressionParserInfo.Create(
    regions=[region_000222, region_000223],
    left_expression=statement_000158,
    operator=BinaryExpressionOperatorType.DivideFloor,
    right_expression=statement_000159,
)

statement_000161 = UnaryExpressionParserInfo.Create(
    regions=[region_000224, region_000225],
    operator=UnaryExpressionParserInfoOperatorType.Negative,
    expression=statement_000160,
)

statement_000162 = IntegerExpressionParserInfo.Create(
    regions=[region_000226],
    value=0,
)

statement_000163 = TernaryExpressionParserInfo.Create(
    regions=[region_000227],
    condition_expression=statement_000151,
    true_expression=statement_000161,
    false_expression=statement_000162,
)

statement_000164 = BinaryExpressionParserInfo.Create(
    regions=[region_000228, region_000229],
    left_expression=statement_000150,
    operator=BinaryExpressionOperatorType.GreaterEqual,
    right_expression=statement_000163,
)

statement_000164 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000228, None],
    expression=statement_000164,
    keyword=None,
)

statement_000165 = FuncArgumentsParserInfo.Create(
    regions=[region_000230, region_000230],
    arguments=[statement_000164, ],
)

statement_000166 = CallExpressionParserInfo.Create(
    regions=[region_000231, region_000230],
    expression=statement_000147,
    arguments=statement_000165,
)

statement_000167 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000232],
    expression=statement_000166,
)

statement_000168 = SpecialMethodStatementParserInfo.Create(
    regions=[region_000233, region_000234, region_000235],
    parent_class_capabilities=StandardCapabilities,
    name=SpecialMethodType.CompileTimeEvalConstraints,
    statements=[statement_000092, statement_000118, statement_000146, statement_000167, ],
)

statement_000169 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000236, region_000237, region_000238],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000170 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000239, region_000239, None],
    name="ArchiveT",
    is_variadic=None,
    default_type=None,
)

statement_000171 = TemplateParametersParserInfo.Create(
    regions=[region_000240, None, region_000239, None],
    positional=None,
    any=[statement_000170, ],
    keyword=None,
)

statement_000172 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000241, region_000242, region_000243],
    value=CustomType("ArchiveT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000173 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000244, None, region_000245],  # type: ignore
    type=statement_000172,
    is_variadic=None,
    name="archive",
    default_value=None,
)

statement_000174 = FuncParametersParserInfo.Create(
    regions=[region_000246, None, region_000244, None],
    positional=None,
    any_args=[statement_000173, ],
    keyword=None,
)

statement_000175 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000247, region_000246, region_000248, None, region_000249, region_000250, None, None, None, region_000251, None, None, None, None, region_000252],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000174,
    visibility_param=VisibilityModifier.public,
    mutability_param=None,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000169,
    name=FuncDefinitionStatementParserInfoOperatorType.Deserialize,
    documentation=None,
    templates=statement_000171,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=True,
)

statement_000176 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000253, region_000253, None],
    name="ArchiveT",
    is_variadic=None,
    default_type=None,
)

statement_000177 = TemplateParametersParserInfo.Create(
    regions=[region_000254, None, region_000253, None],
    positional=None,
    any=[statement_000176, ],
    keyword=None,
)

statement_000178 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000255, region_000256, region_000257],
    value=CustomType("ArchiveT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000179 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000258, None, region_000259],  # type: ignore
    type=statement_000178,
    is_variadic=None,
    name="archive",
    default_value=None,
)

statement_000180 = FuncParametersParserInfo.Create(
    regions=[region_000260, None, region_000258, None],
    positional=None,
    any_args=[statement_000179, ],
    keyword=None,
)

statement_000181 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000261, region_000260, region_000262, region_000263, region_000264, region_000265, None, None, None, region_000266, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000180,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Serialize,
    documentation=None,
    templates=statement_000177,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000182 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000267, region_000267, None],
    name="ArchiveT",
    is_variadic=None,
    default_type=None,
)

statement_000183 = TemplateParametersParserInfo.Create(
    regions=[region_000268, None, region_000267, None],
    positional=None,
    any=[statement_000182, ],
    keyword=None,
)

statement_000184 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000269, region_000270, region_000271],
    value=CustomType("ArchiveT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000185 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000272, None, region_000273],  # type: ignore
    type=statement_000184,
    is_variadic=None,
    name="archive",
    default_value=None,
)

statement_000186 = FuncParametersParserInfo.Create(
    regions=[region_000274, None, region_000272, None],
    positional=None,
    any_args=[statement_000185, ],
    keyword=None,
)

statement_000187 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000275, region_000274, region_000276, region_000277, region_000278, region_000279, None, None, None, region_000280, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000186,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Serialize,
    documentation=None,
    templates=statement_000183,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000188 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000281, region_000281, None],
    name="VisitorT",
    is_variadic=None,
    default_type=None,
)

statement_000189 = TemplateParametersParserInfo.Create(
    regions=[region_000282, None, region_000281, None],
    positional=None,
    any=[statement_000188, ],
    keyword=None,
)

statement_000190 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000283, region_000284, region_000285],
    value=CustomType("VisitorT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000191 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000286, None, region_000287],  # type: ignore
    type=statement_000190,
    is_variadic=None,
    name="visitor",
    default_value=None,
)

statement_000192 = FuncParametersParserInfo.Create(
    regions=[region_000288, None, region_000286, None],
    positional=None,
    any_args=[statement_000191, ],
    keyword=None,
)

statement_000193 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000289, region_000288, region_000290, region_000291, region_000292, region_000293, None, None, None, region_000294, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000192,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Accept,
    documentation=None,
    templates=statement_000189,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000194 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000295, region_000295, None],
    name="VisitorT",
    is_variadic=None,
    default_type=None,
)

statement_000195 = TemplateParametersParserInfo.Create(
    regions=[region_000296, None, region_000295, None],
    positional=None,
    any=[statement_000194, ],
    keyword=None,
)

statement_000196 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000297, region_000298, region_000299],
    value=CustomType("VisitorT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000197 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000300, None, region_000301],  # type: ignore
    type=statement_000196,
    is_variadic=None,
    name="visitor",
    default_value=None,
)

statement_000198 = FuncParametersParserInfo.Create(
    regions=[region_000302, None, region_000300, None],
    positional=None,
    any_args=[statement_000197, ],
    keyword=None,
)

statement_000199 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000303, region_000302, region_000304, region_000305, region_000306, region_000307, None, None, None, region_000308, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000198,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.val,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Accept,
    documentation=None,
    templates=statement_000195,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000200 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000309, region_000310, region_000311],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000201 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000312, region_000317, region_000313, region_000314, region_000315, region_000316, None, None, None, region_000318, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000200,
    name=FuncDefinitionStatementParserInfoOperatorType.Clone,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000202 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000319, region_000320, region_000321],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000203 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000322, region_000327, region_000323, region_000324, region_000325, region_000326, None, None, None, region_000328, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000202,
    name=FuncDefinitionStatementParserInfoOperatorType.ToBool,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000204 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000329, region_000330, region_000331],
    value=StringType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000205 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000332, region_000337, region_000333, region_000334, region_000335, region_000336, None, None, None, region_000338, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000204,
    name=FuncDefinitionStatementParserInfoOperatorType.ToString,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000206 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000339, region_000340, region_000341],
    value=CustomType("CompareResult"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000207 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000342, region_000343, region_000344],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000208 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000345, None, region_000346],  # type: ignore
    type=statement_000207,
    is_variadic=None,
    name="this",
    default_value=None,
)

statement_000209 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000347, region_000348, region_000349],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000210 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000350, None, region_000351],  # type: ignore
    type=statement_000209,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000211 = FuncParametersParserInfo.Create(
    regions=[region_000352, None, region_000353, None],
    positional=None,
    any_args=[statement_000208, statement_000210, ],
    keyword=None,
)

statement_000212 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000354, region_000352, region_000355, None, region_000356, region_000357, None, None, None, region_000358, None, None, None, None, region_000359],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000211,
    visibility_param=VisibilityModifier.public,
    mutability_param=None,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000206,
    name=FuncDefinitionStatementParserInfoOperatorType.Compare,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=True,
)

statement_000213 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000360, region_000361, region_000362],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000214 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000363, region_000364, region_000365],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000215 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000366, None, region_000367],  # type: ignore
    type=statement_000214,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000216 = FuncParametersParserInfo.Create(
    regions=[region_000368, None, region_000366, None],
    positional=None,
    any_args=[statement_000215, ],
    keyword=None,
)

statement_000217 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000369, region_000368, region_000370, region_000371, region_000372, region_000373, None, None, None, region_000374, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000216,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000213,
    name=FuncDefinitionStatementParserInfoOperatorType.Equal,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000218 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000375, region_000376, region_000377],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000219 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000378, region_000379, region_000380],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000220 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000381, None, region_000382],  # type: ignore
    type=statement_000219,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000221 = FuncParametersParserInfo.Create(
    regions=[region_000383, None, region_000381, None],
    positional=None,
    any_args=[statement_000220, ],
    keyword=None,
)

statement_000222 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000384, region_000383, region_000385, region_000386, region_000387, region_000388, None, None, None, region_000389, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000221,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000218,
    name=FuncDefinitionStatementParserInfoOperatorType.NotEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000223 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000390, region_000391, region_000392],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000224 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000393, region_000394, region_000395],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000225 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000396, None, region_000397],  # type: ignore
    type=statement_000224,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000226 = FuncParametersParserInfo.Create(
    regions=[region_000398, None, region_000396, None],
    positional=None,
    any_args=[statement_000225, ],
    keyword=None,
)

statement_000227 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000399, region_000398, region_000400, region_000401, region_000402, region_000403, None, None, None, region_000404, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000226,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000223,
    name=FuncDefinitionStatementParserInfoOperatorType.Less,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000228 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000405, region_000406, region_000407],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000229 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000408, region_000409, region_000410],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000230 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000411, None, region_000412],  # type: ignore
    type=statement_000229,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000231 = FuncParametersParserInfo.Create(
    regions=[region_000413, None, region_000411, None],
    positional=None,
    any_args=[statement_000230, ],
    keyword=None,
)

statement_000232 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000414, region_000413, region_000415, region_000416, region_000417, region_000418, None, None, None, region_000419, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000231,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000228,
    name=FuncDefinitionStatementParserInfoOperatorType.LessEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000233 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000420, region_000421, region_000422],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000234 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000423, region_000424, region_000425],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000235 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000426, None, region_000427],  # type: ignore
    type=statement_000234,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000236 = FuncParametersParserInfo.Create(
    regions=[region_000428, None, region_000426, None],
    positional=None,
    any_args=[statement_000235, ],
    keyword=None,
)

statement_000237 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000429, region_000428, region_000430, region_000431, region_000432, region_000433, None, None, None, region_000434, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000236,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000233,
    name=FuncDefinitionStatementParserInfoOperatorType.Greater,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000238 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000435, region_000436, region_000437],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000239 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000438, region_000439, region_000440],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000240 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000441, None, region_000442],  # type: ignore
    type=statement_000239,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000241 = FuncParametersParserInfo.Create(
    regions=[region_000443, None, region_000441, None],
    positional=None,
    any_args=[statement_000240, ],
    keyword=None,
)

statement_000242 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000444, region_000443, region_000445, region_000446, region_000447, region_000448, None, None, None, region_000449, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000241,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000238,
    name=FuncDefinitionStatementParserInfoOperatorType.GreaterEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000243 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000450, region_000451, region_000452],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000244 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000453, region_000458, region_000454, region_000455, region_000456, region_000457, None, None, None, region_000459, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000243,
    name=FuncDefinitionStatementParserInfoOperatorType.Negative,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000245 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000460, region_000461, region_000462],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000246 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000463, region_000468, region_000464, region_000465, region_000466, region_000467, None, None, None, region_000469, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000245,
    name=FuncDefinitionStatementParserInfoOperatorType.Positive,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000247 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000470, region_000471, region_000472],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000248 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000473, region_000478, region_000474, region_000475, region_000476, region_000477, None, None, None, region_000479, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000247,
    name=FuncDefinitionStatementParserInfoOperatorType.BitFlip,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000249 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000480, region_000481, region_000482],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000250 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000483, region_000484, region_000485],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000251 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000486, None, region_000487],  # type: ignore
    type=statement_000250,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000252 = FuncParametersParserInfo.Create(
    regions=[region_000488, None, region_000486, None],
    positional=None,
    any_args=[statement_000251, ],
    keyword=None,
)

statement_000253 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000489, region_000488, region_000490, region_000491, region_000492, region_000493, None, None, None, region_000494, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000252,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000249,
    name=FuncDefinitionStatementParserInfoOperatorType.Divide,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000254 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000495, region_000496, region_000497],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000255 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000498, region_000499, region_000500],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000256 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000501, None, region_000502],  # type: ignore
    type=statement_000255,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000257 = FuncParametersParserInfo.Create(
    regions=[region_000503, None, region_000501, None],
    positional=None,
    any_args=[statement_000256, ],
    keyword=None,
)

statement_000258 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000504, region_000503, region_000505, region_000506, region_000507, region_000508, None, None, None, region_000509, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000257,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000254,
    name=FuncDefinitionStatementParserInfoOperatorType.DivideFloor,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000259 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000510, region_000511, region_000512],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000260 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000513, region_000514, region_000515],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000261 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000516, None, region_000517],  # type: ignore
    type=statement_000260,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000262 = FuncParametersParserInfo.Create(
    regions=[region_000518, None, region_000516, None],
    positional=None,
    any_args=[statement_000261, ],
    keyword=None,
)

statement_000263 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000519, region_000518, region_000520, region_000521, region_000522, region_000523, None, None, None, region_000524, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000262,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000259,
    name=FuncDefinitionStatementParserInfoOperatorType.Modulo,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000264 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000525, region_000526, region_000527],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000265 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000528, region_000529, region_000530],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000266 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000531, None, region_000532],  # type: ignore
    type=statement_000265,
    is_variadic=None,
    name="multiplier",
    default_value=None,
)

statement_000267 = FuncParametersParserInfo.Create(
    regions=[region_000533, None, region_000531, None],
    positional=None,
    any_args=[statement_000266, ],
    keyword=None,
)

statement_000268 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000534, region_000533, region_000535, region_000536, region_000537, region_000538, None, None, None, region_000539, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000267,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000264,
    name=FuncDefinitionStatementParserInfoOperatorType.Multiply,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000269 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000540, region_000541, region_000542],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000270 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000543, region_000544, region_000545],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000271 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000546, None, region_000547],  # type: ignore
    type=statement_000270,
    is_variadic=None,
    name="exponent",
    default_value=None,
)

statement_000272 = FuncParametersParserInfo.Create(
    regions=[region_000548, None, region_000546, None],
    positional=None,
    any_args=[statement_000271, ],
    keyword=None,
)

statement_000273 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000549, region_000548, region_000550, region_000551, region_000552, region_000553, None, None, None, region_000554, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000272,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000269,
    name=FuncDefinitionStatementParserInfoOperatorType.Power,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000274 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000555, region_000556, region_000557],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000275 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000558, region_000559, region_000560],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000276 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000561, None, region_000562],  # type: ignore
    type=statement_000275,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000277 = FuncParametersParserInfo.Create(
    regions=[region_000563, None, region_000561, None],
    positional=None,
    any_args=[statement_000276, ],
    keyword=None,
)

statement_000278 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000564, region_000563, region_000565, region_000566, region_000567, region_000568, None, None, None, region_000569, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000277,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000274,
    name=FuncDefinitionStatementParserInfoOperatorType.Add,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000279 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000570, region_000571, region_000572],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000280 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000573, region_000574, region_000575],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000281 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000576, None, region_000577],  # type: ignore
    type=statement_000280,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000282 = FuncParametersParserInfo.Create(
    regions=[region_000578, None, region_000576, None],
    positional=None,
    any_args=[statement_000281, ],
    keyword=None,
)

statement_000283 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000579, region_000578, region_000580, region_000581, region_000582, region_000583, None, None, None, region_000584, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000282,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000279,
    name=FuncDefinitionStatementParserInfoOperatorType.Subtract,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000284 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000585, region_000586, region_000587],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000285 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000588, region_000589, region_000590],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000286 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000591, None, region_000592],  # type: ignore
    type=statement_000285,
    is_variadic=None,
    name="places",
    default_value=None,
)

statement_000287 = FuncParametersParserInfo.Create(
    regions=[region_000593, None, region_000591, None],
    positional=None,
    any_args=[statement_000286, ],
    keyword=None,
)

statement_000288 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000594, region_000593, region_000595, region_000596, region_000597, region_000598, None, None, None, region_000599, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000287,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000284,
    name=FuncDefinitionStatementParserInfoOperatorType.BitShiftLeft,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000289 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000600, region_000601, region_000602],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000290 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000603, region_000604, region_000605],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000291 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000606, None, region_000607],  # type: ignore
    type=statement_000290,
    is_variadic=None,
    name="places",
    default_value=None,
)

statement_000292 = FuncParametersParserInfo.Create(
    regions=[region_000608, None, region_000606, None],
    positional=None,
    any_args=[statement_000291, ],
    keyword=None,
)

statement_000293 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000609, region_000608, region_000610, region_000611, region_000612, region_000613, None, None, None, region_000614, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000292,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000289,
    name=FuncDefinitionStatementParserInfoOperatorType.BitShiftRight,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000294 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000615, region_000616, region_000617],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000295 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000618, region_000619, region_000620],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000296 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000621, None, region_000622],  # type: ignore
    type=statement_000295,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000297 = FuncParametersParserInfo.Create(
    regions=[region_000623, None, region_000621, None],
    positional=None,
    any_args=[statement_000296, ],
    keyword=None,
)

statement_000298 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000624, region_000623, region_000625, region_000626, region_000627, region_000628, None, None, None, region_000629, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000297,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000294,
    name=FuncDefinitionStatementParserInfoOperatorType.BitAnd,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000299 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000630, region_000631, region_000632],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000300 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000633, region_000634, region_000635],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000301 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000636, None, region_000637],  # type: ignore
    type=statement_000300,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000302 = FuncParametersParserInfo.Create(
    regions=[region_000638, None, region_000636, None],
    positional=None,
    any_args=[statement_000301, ],
    keyword=None,
)

statement_000303 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000639, region_000638, region_000640, region_000641, region_000642, region_000643, None, None, None, region_000644, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000302,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000299,
    name=FuncDefinitionStatementParserInfoOperatorType.BitXor,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000304 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000645, region_000646, region_000647],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.var,
)

statement_000305 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000648, region_000649, region_000650],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000306 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000651, None, region_000652],  # type: ignore
    type=statement_000305,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000307 = FuncParametersParserInfo.Create(
    regions=[region_000653, None, region_000651, None],
    positional=None,
    any_args=[statement_000306, ],
    keyword=None,
)

statement_000308 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000654, region_000653, region_000655, region_000656, region_000657, region_000658, None, None, None, region_000659, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000307,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.override,
    return_type=statement_000304,
    name=FuncDefinitionStatementParserInfoOperatorType.BitOr,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000309 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000660, region_000665, region_000661, region_000662, region_000663, region_000664, None, None, None, region_000666, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitFlipInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000310 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000667, region_000668, region_000669],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000311 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000670, None, region_000671],  # type: ignore
    type=statement_000310,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000312 = FuncParametersParserInfo.Create(
    regions=[region_000672, None, region_000670, None],
    positional=None,
    any_args=[statement_000311, ],
    keyword=None,
)

statement_000313 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000673, region_000672, region_000674, region_000675, region_000676, region_000677, None, None, None, region_000678, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000312,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.DivideFloorInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000314 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000679, region_000680, region_000681],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000315 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000682, None, region_000683],  # type: ignore
    type=statement_000314,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000316 = FuncParametersParserInfo.Create(
    regions=[region_000684, None, region_000682, None],
    positional=None,
    any_args=[statement_000315, ],
    keyword=None,
)

statement_000317 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000685, region_000684, region_000686, region_000687, region_000688, region_000689, None, None, None, region_000690, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000316,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.ModuloInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000318 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000691, region_000692, region_000693],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000319 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000694, None, region_000695],  # type: ignore
    type=statement_000318,
    is_variadic=None,
    name="multiplier",
    default_value=None,
)

statement_000320 = FuncParametersParserInfo.Create(
    regions=[region_000696, None, region_000694, None],
    positional=None,
    any_args=[statement_000319, ],
    keyword=None,
)

statement_000321 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000697, region_000696, region_000698, region_000699, region_000700, region_000701, None, None, None, region_000702, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000320,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.MultiplyInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000322 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000703, region_000704, region_000705],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000323 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000706, None, region_000707],  # type: ignore
    type=statement_000322,
    is_variadic=None,
    name="exponent",
    default_value=None,
)

statement_000324 = FuncParametersParserInfo.Create(
    regions=[region_000708, None, region_000706, None],
    positional=None,
    any_args=[statement_000323, ],
    keyword=None,
)

statement_000325 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000709, region_000708, region_000710, region_000711, region_000712, region_000713, None, None, None, region_000714, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000324,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.PowerInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000326 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000715, region_000716, region_000717],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000327 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000718, None, region_000719],  # type: ignore
    type=statement_000326,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000328 = FuncParametersParserInfo.Create(
    regions=[region_000720, None, region_000718, None],
    positional=None,
    any_args=[statement_000327, ],
    keyword=None,
)

statement_000329 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000721, region_000720, region_000722, region_000723, region_000724, region_000725, None, None, None, region_000726, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000328,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.AddInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000330 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000727, region_000728, region_000729],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000331 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000730, None, region_000731],  # type: ignore
    type=statement_000330,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000332 = FuncParametersParserInfo.Create(
    regions=[region_000732, None, region_000730, None],
    positional=None,
    any_args=[statement_000331, ],
    keyword=None,
)

statement_000333 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000733, region_000732, region_000734, region_000735, region_000736, region_000737, None, None, None, region_000738, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000332,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.SubtractInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000334 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000739, region_000740, region_000741],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000335 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000742, None, region_000743],  # type: ignore
    type=statement_000334,
    is_variadic=None,
    name="places",
    default_value=None,
)

statement_000336 = FuncParametersParserInfo.Create(
    regions=[region_000744, None, region_000742, None],
    positional=None,
    any_args=[statement_000335, ],
    keyword=None,
)

statement_000337 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000745, region_000744, region_000746, region_000747, region_000748, region_000749, None, None, None, region_000750, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000336,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitShiftLeftInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000338 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000751, region_000752, region_000753],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000339 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000754, None, region_000755],  # type: ignore
    type=statement_000338,
    is_variadic=None,
    name="places",
    default_value=None,
)

statement_000340 = FuncParametersParserInfo.Create(
    regions=[region_000756, None, region_000754, None],
    positional=None,
    any_args=[statement_000339, ],
    keyword=None,
)

statement_000341 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000757, region_000756, region_000758, region_000759, region_000760, region_000761, None, None, None, region_000762, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000340,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitShiftRightInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000342 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000763, region_000764, region_000765],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000343 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000766, None, region_000767],  # type: ignore
    type=statement_000342,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000344 = FuncParametersParserInfo.Create(
    regions=[region_000768, None, region_000766, None],
    positional=None,
    any_args=[statement_000343, ],
    keyword=None,
)

statement_000345 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000769, region_000768, region_000770, region_000771, region_000772, region_000773, None, None, None, region_000774, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000344,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitAndInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000346 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000775, region_000776, region_000777],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000347 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000778, None, region_000779],  # type: ignore
    type=statement_000346,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000348 = FuncParametersParserInfo.Create(
    regions=[region_000780, None, region_000778, None],
    positional=None,
    any_args=[statement_000347, ],
    keyword=None,
)

statement_000349 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000781, region_000780, region_000782, region_000783, region_000784, region_000785, None, None, None, region_000786, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000348,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitXorInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000350 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000787, region_000788, region_000789],
    value=IntegerType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000351 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000790, None, region_000791],  # type: ignore
    type=statement_000350,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000352 = FuncParametersParserInfo.Create(
    regions=[region_000792, None, region_000790, None],
    positional=None,
    any_args=[statement_000351, ],
    keyword=None,
)

statement_000353 = FuncDefinitionStatementParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000793, region_000792, region_000794, region_000795, region_000796, region_000797, None, None, None, region_000798, None, None, None, None, None],
    parent_class_capabilities=StandardCapabilities,
    parameters=statement_000352,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.var,
    method_modifier_param=MethodModifier.override,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.BitOrInplace,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=True,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000354 = ClassStatementParserInfo.Create(
    regions=[region_000799, region_000800, region_000801, region_000802, None, None, region_000070, None, region_000803, region_000799, None, None],
    class_capabilities=StandardCapabilities,
    visibility_param=VisibilityModifier.public,
    class_modifier_param=ClassModifier.mutable,
    name="FixedInt",
    documentation=None,
    templates=statement_000004,
    constraints=statement_000044,
    extends=None,
    implements=[statement_000049, ],
    uses=None,
    statements=[statement_000073, statement_000168, statement_000175, statement_000181, statement_000187, statement_000193, statement_000199, statement_000201, statement_000203, statement_000205, statement_000212, statement_000217, statement_000222, statement_000227, statement_000232, statement_000237, statement_000242, statement_000244, statement_000246, statement_000248, statement_000253, statement_000258, statement_000263, statement_000268, statement_000273, statement_000278, statement_000283, statement_000288, statement_000293, statement_000298, statement_000303, statement_000308, statement_000309, statement_000313, statement_000317, statement_000321, statement_000325, statement_000329, statement_000333, statement_000337, statement_000341, statement_000345, statement_000349, statement_000353, ],
    constructor_visibility_param=VisibilityModifier.public,
    is_abstract=None,
    is_final=None,
)

statement_000355 = IntegerExpressionParserInfo.Create(
    regions=[region_000804],
    value=1,
)

statement_000355 = ConstraintArgumentParserInfo.Create(
    regions=[region_000804, None],
    expression=statement_000355,
    keyword=None,
)

statement_000356 = BooleanExpressionParserInfo.Create(
    regions=[region_000805],
    value=True,
)

statement_000357 = ConstraintArgumentParserInfo.Create(
    regions=[region_000806, region_000807],
    expression=statement_000356,
    keyword="is_signed!",
)

statement_000358 = BooleanExpressionParserInfo.Create(
    regions=[region_000808],
    value=False,
)

statement_000359 = ConstraintArgumentParserInfo.Create(
    regions=[region_000809, region_000810],
    expression=statement_000358,
    keyword="is_checked!",
)

statement_000360 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000811, region_000811],
    arguments=[statement_000355, statement_000357, statement_000359, ],
)

statement_000361 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000812, region_000813, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000360,
    mutability_modifier=None,
)

statement_000362 = TypeAliasStatementParserInfo.Create(
    regions=[region_000814, region_000815, region_000816],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Int8",
    type=statement_000361,
)

statement_000363 = IntegerExpressionParserInfo.Create(
    regions=[region_000817],
    value=1,
)

statement_000363 = ConstraintArgumentParserInfo.Create(
    regions=[region_000817, None],
    expression=statement_000363,
    keyword=None,
)

statement_000364 = BooleanExpressionParserInfo.Create(
    regions=[region_000818],
    value=True,
)

statement_000365 = ConstraintArgumentParserInfo.Create(
    regions=[region_000819, region_000820],
    expression=statement_000364,
    keyword="is_signed!",
)

statement_000366 = BooleanExpressionParserInfo.Create(
    regions=[region_000821],
    value=True,
)

statement_000367 = ConstraintArgumentParserInfo.Create(
    regions=[region_000822, region_000823],
    expression=statement_000366,
    keyword="is_checked!",
)

statement_000368 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000824, region_000824],
    arguments=[statement_000363, statement_000365, statement_000367, ],
)

statement_000369 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000825, region_000826, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000368,
    mutability_modifier=None,
)

statement_000370 = TypeAliasStatementParserInfo.Create(
    regions=[region_000827, region_000828, region_000829],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedInt8",
    type=statement_000369,
)

statement_000371 = IntegerExpressionParserInfo.Create(
    regions=[region_000830],
    value=1,
)

statement_000371 = ConstraintArgumentParserInfo.Create(
    regions=[region_000830, None],
    expression=statement_000371,
    keyword=None,
)

statement_000372 = BooleanExpressionParserInfo.Create(
    regions=[region_000831],
    value=False,
)

statement_000373 = ConstraintArgumentParserInfo.Create(
    regions=[region_000832, region_000833],
    expression=statement_000372,
    keyword="is_signed!",
)

statement_000374 = BooleanExpressionParserInfo.Create(
    regions=[region_000834],
    value=False,
)

statement_000375 = ConstraintArgumentParserInfo.Create(
    regions=[region_000835, region_000836],
    expression=statement_000374,
    keyword="is_checked!",
)

statement_000376 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000837, region_000837],
    arguments=[statement_000371, statement_000373, statement_000375, ],
)

statement_000377 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000838, region_000839, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000376,
    mutability_modifier=None,
)

statement_000378 = TypeAliasStatementParserInfo.Create(
    regions=[region_000840, region_000841, region_000842],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="UInt8",
    type=statement_000377,
)

statement_000379 = IntegerExpressionParserInfo.Create(
    regions=[region_000843],
    value=1,
)

statement_000379 = ConstraintArgumentParserInfo.Create(
    regions=[region_000843, None],
    expression=statement_000379,
    keyword=None,
)

statement_000380 = BooleanExpressionParserInfo.Create(
    regions=[region_000844],
    value=False,
)

statement_000381 = ConstraintArgumentParserInfo.Create(
    regions=[region_000845, region_000846],
    expression=statement_000380,
    keyword="is_signed!",
)

statement_000382 = BooleanExpressionParserInfo.Create(
    regions=[region_000847],
    value=True,
)

statement_000383 = ConstraintArgumentParserInfo.Create(
    regions=[region_000848, region_000849],
    expression=statement_000382,
    keyword="is_checked!",
)

statement_000384 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000850, region_000850],
    arguments=[statement_000379, statement_000381, statement_000383, ],
)

statement_000385 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000851, region_000852, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000384,
    mutability_modifier=None,
)

statement_000386 = TypeAliasStatementParserInfo.Create(
    regions=[region_000853, region_000854, region_000855],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedUInt8",
    type=statement_000385,
)

statement_000387 = IntegerExpressionParserInfo.Create(
    regions=[region_000856],
    value=2,
)

statement_000387 = ConstraintArgumentParserInfo.Create(
    regions=[region_000856, None],
    expression=statement_000387,
    keyword=None,
)

statement_000388 = BooleanExpressionParserInfo.Create(
    regions=[region_000857],
    value=True,
)

statement_000389 = ConstraintArgumentParserInfo.Create(
    regions=[region_000858, region_000859],
    expression=statement_000388,
    keyword="is_signed!",
)

statement_000390 = BooleanExpressionParserInfo.Create(
    regions=[region_000860],
    value=False,
)

statement_000391 = ConstraintArgumentParserInfo.Create(
    regions=[region_000861, region_000862],
    expression=statement_000390,
    keyword="is_checked!",
)

statement_000392 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000863, region_000863],
    arguments=[statement_000387, statement_000389, statement_000391, ],
)

statement_000393 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000864, region_000865, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000392,
    mutability_modifier=None,
)

statement_000394 = TypeAliasStatementParserInfo.Create(
    regions=[region_000866, region_000867, region_000868],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Int16",
    type=statement_000393,
)

statement_000395 = IntegerExpressionParserInfo.Create(
    regions=[region_000869],
    value=2,
)

statement_000395 = ConstraintArgumentParserInfo.Create(
    regions=[region_000869, None],
    expression=statement_000395,
    keyword=None,
)

statement_000396 = BooleanExpressionParserInfo.Create(
    regions=[region_000870],
    value=True,
)

statement_000397 = ConstraintArgumentParserInfo.Create(
    regions=[region_000871, region_000872],
    expression=statement_000396,
    keyword="is_signed!",
)

statement_000398 = BooleanExpressionParserInfo.Create(
    regions=[region_000873],
    value=True,
)

statement_000399 = ConstraintArgumentParserInfo.Create(
    regions=[region_000874, region_000875],
    expression=statement_000398,
    keyword="is_checked!",
)

statement_000400 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000876, region_000876],
    arguments=[statement_000395, statement_000397, statement_000399, ],
)

statement_000401 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000877, region_000878, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000400,
    mutability_modifier=None,
)

statement_000402 = TypeAliasStatementParserInfo.Create(
    regions=[region_000879, region_000880, region_000881],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedInt16",
    type=statement_000401,
)

statement_000403 = IntegerExpressionParserInfo.Create(
    regions=[region_000882],
    value=2,
)

statement_000403 = ConstraintArgumentParserInfo.Create(
    regions=[region_000882, None],
    expression=statement_000403,
    keyword=None,
)

statement_000404 = BooleanExpressionParserInfo.Create(
    regions=[region_000883],
    value=False,
)

statement_000405 = ConstraintArgumentParserInfo.Create(
    regions=[region_000884, region_000885],
    expression=statement_000404,
    keyword="is_signed!",
)

statement_000406 = BooleanExpressionParserInfo.Create(
    regions=[region_000886],
    value=False,
)

statement_000407 = ConstraintArgumentParserInfo.Create(
    regions=[region_000887, region_000888],
    expression=statement_000406,
    keyword="is_checked!",
)

statement_000408 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000889, region_000889],
    arguments=[statement_000403, statement_000405, statement_000407, ],
)

statement_000409 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000890, region_000891, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000408,
    mutability_modifier=None,
)

statement_000410 = TypeAliasStatementParserInfo.Create(
    regions=[region_000892, region_000893, region_000894],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="UInt16",
    type=statement_000409,
)

statement_000411 = IntegerExpressionParserInfo.Create(
    regions=[region_000895],
    value=2,
)

statement_000411 = ConstraintArgumentParserInfo.Create(
    regions=[region_000895, None],
    expression=statement_000411,
    keyword=None,
)

statement_000412 = BooleanExpressionParserInfo.Create(
    regions=[region_000896],
    value=False,
)

statement_000413 = ConstraintArgumentParserInfo.Create(
    regions=[region_000897, region_000898],
    expression=statement_000412,
    keyword="is_signed!",
)

statement_000414 = BooleanExpressionParserInfo.Create(
    regions=[region_000899],
    value=True,
)

statement_000415 = ConstraintArgumentParserInfo.Create(
    regions=[region_000900, region_000901],
    expression=statement_000414,
    keyword="is_checked!",
)

statement_000416 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000902, region_000902],
    arguments=[statement_000411, statement_000413, statement_000415, ],
)

statement_000417 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000903, region_000904, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000416,
    mutability_modifier=None,
)

statement_000418 = TypeAliasStatementParserInfo.Create(
    regions=[region_000905, region_000906, region_000907],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedUInt16",
    type=statement_000417,
)

statement_000419 = IntegerExpressionParserInfo.Create(
    regions=[region_000908],
    value=4,
)

statement_000419 = ConstraintArgumentParserInfo.Create(
    regions=[region_000908, None],
    expression=statement_000419,
    keyword=None,
)

statement_000420 = BooleanExpressionParserInfo.Create(
    regions=[region_000909],
    value=True,
)

statement_000421 = ConstraintArgumentParserInfo.Create(
    regions=[region_000910, region_000911],
    expression=statement_000420,
    keyword="is_signed!",
)

statement_000422 = BooleanExpressionParserInfo.Create(
    regions=[region_000912],
    value=False,
)

statement_000423 = ConstraintArgumentParserInfo.Create(
    regions=[region_000913, region_000914],
    expression=statement_000422,
    keyword="is_checked!",
)

statement_000424 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000915, region_000915],
    arguments=[statement_000419, statement_000421, statement_000423, ],
)

statement_000425 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000916, region_000917, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000424,
    mutability_modifier=None,
)

statement_000426 = TypeAliasStatementParserInfo.Create(
    regions=[region_000918, region_000919, region_000920],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Int32",
    type=statement_000425,
)

statement_000427 = IntegerExpressionParserInfo.Create(
    regions=[region_000921],
    value=4,
)

statement_000427 = ConstraintArgumentParserInfo.Create(
    regions=[region_000921, None],
    expression=statement_000427,
    keyword=None,
)

statement_000428 = BooleanExpressionParserInfo.Create(
    regions=[region_000922],
    value=True,
)

statement_000429 = ConstraintArgumentParserInfo.Create(
    regions=[region_000923, region_000924],
    expression=statement_000428,
    keyword="is_signed!",
)

statement_000430 = BooleanExpressionParserInfo.Create(
    regions=[region_000925],
    value=True,
)

statement_000431 = ConstraintArgumentParserInfo.Create(
    regions=[region_000926, region_000927],
    expression=statement_000430,
    keyword="is_checked!",
)

statement_000432 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000928, region_000928],
    arguments=[statement_000427, statement_000429, statement_000431, ],
)

statement_000433 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000929, region_000930, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000432,
    mutability_modifier=None,
)

statement_000434 = TypeAliasStatementParserInfo.Create(
    regions=[region_000931, region_000932, region_000933],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedInt32",
    type=statement_000433,
)

statement_000435 = IntegerExpressionParserInfo.Create(
    regions=[region_000934],
    value=4,
)

statement_000435 = ConstraintArgumentParserInfo.Create(
    regions=[region_000934, None],
    expression=statement_000435,
    keyword=None,
)

statement_000436 = BooleanExpressionParserInfo.Create(
    regions=[region_000935],
    value=False,
)

statement_000437 = ConstraintArgumentParserInfo.Create(
    regions=[region_000936, region_000937],
    expression=statement_000436,
    keyword="is_signed!",
)

statement_000438 = BooleanExpressionParserInfo.Create(
    regions=[region_000938],
    value=False,
)

statement_000439 = ConstraintArgumentParserInfo.Create(
    regions=[region_000939, region_000940],
    expression=statement_000438,
    keyword="is_checked!",
)

statement_000440 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000941, region_000941],
    arguments=[statement_000435, statement_000437, statement_000439, ],
)

statement_000441 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000942, region_000943, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000440,
    mutability_modifier=None,
)

statement_000442 = TypeAliasStatementParserInfo.Create(
    regions=[region_000944, region_000945, region_000946],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="UInt32",
    type=statement_000441,
)

statement_000443 = IntegerExpressionParserInfo.Create(
    regions=[region_000947],
    value=4,
)

statement_000443 = ConstraintArgumentParserInfo.Create(
    regions=[region_000947, None],
    expression=statement_000443,
    keyword=None,
)

statement_000444 = BooleanExpressionParserInfo.Create(
    regions=[region_000948],
    value=False,
)

statement_000445 = ConstraintArgumentParserInfo.Create(
    regions=[region_000949, region_000950],
    expression=statement_000444,
    keyword="is_signed!",
)

statement_000446 = BooleanExpressionParserInfo.Create(
    regions=[region_000951],
    value=True,
)

statement_000447 = ConstraintArgumentParserInfo.Create(
    regions=[region_000952, region_000953],
    expression=statement_000446,
    keyword="is_checked!",
)

statement_000448 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000954, region_000954],
    arguments=[statement_000443, statement_000445, statement_000447, ],
)

statement_000449 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000955, region_000956, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000448,
    mutability_modifier=None,
)

statement_000450 = TypeAliasStatementParserInfo.Create(
    regions=[region_000957, region_000958, region_000959],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedUInt32",
    type=statement_000449,
)

statement_000451 = IntegerExpressionParserInfo.Create(
    regions=[region_000960],
    value=8,
)

statement_000451 = ConstraintArgumentParserInfo.Create(
    regions=[region_000960, None],
    expression=statement_000451,
    keyword=None,
)

statement_000452 = BooleanExpressionParserInfo.Create(
    regions=[region_000961],
    value=True,
)

statement_000453 = ConstraintArgumentParserInfo.Create(
    regions=[region_000962, region_000963],
    expression=statement_000452,
    keyword="is_signed!",
)

statement_000454 = BooleanExpressionParserInfo.Create(
    regions=[region_000964],
    value=False,
)

statement_000455 = ConstraintArgumentParserInfo.Create(
    regions=[region_000965, region_000966],
    expression=statement_000454,
    keyword="is_checked!",
)

statement_000456 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000967, region_000967],
    arguments=[statement_000451, statement_000453, statement_000455, ],
)

statement_000457 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000968, region_000969, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000456,
    mutability_modifier=None,
)

statement_000458 = TypeAliasStatementParserInfo.Create(
    regions=[region_000970, region_000971, region_000972],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Int64",
    type=statement_000457,
)

statement_000459 = IntegerExpressionParserInfo.Create(
    regions=[region_000973],
    value=8,
)

statement_000459 = ConstraintArgumentParserInfo.Create(
    regions=[region_000973, None],
    expression=statement_000459,
    keyword=None,
)

statement_000460 = BooleanExpressionParserInfo.Create(
    regions=[region_000974],
    value=True,
)

statement_000461 = ConstraintArgumentParserInfo.Create(
    regions=[region_000975, region_000976],
    expression=statement_000460,
    keyword="is_signed!",
)

statement_000462 = BooleanExpressionParserInfo.Create(
    regions=[region_000977],
    value=True,
)

statement_000463 = ConstraintArgumentParserInfo.Create(
    regions=[region_000978, region_000979],
    expression=statement_000462,
    keyword="is_checked!",
)

statement_000464 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000980, region_000980],
    arguments=[statement_000459, statement_000461, statement_000463, ],
)

statement_000465 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000981, region_000982, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000464,
    mutability_modifier=None,
)

statement_000466 = TypeAliasStatementParserInfo.Create(
    regions=[region_000983, region_000984, region_000985],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedInt64",
    type=statement_000465,
)

statement_000467 = IntegerExpressionParserInfo.Create(
    regions=[region_000986],
    value=8,
)

statement_000467 = ConstraintArgumentParserInfo.Create(
    regions=[region_000986, None],
    expression=statement_000467,
    keyword=None,
)

statement_000468 = BooleanExpressionParserInfo.Create(
    regions=[region_000987],
    value=False,
)

statement_000469 = ConstraintArgumentParserInfo.Create(
    regions=[region_000988, region_000989],
    expression=statement_000468,
    keyword="is_signed!",
)

statement_000470 = BooleanExpressionParserInfo.Create(
    regions=[region_000990],
    value=False,
)

statement_000471 = ConstraintArgumentParserInfo.Create(
    regions=[region_000991, region_000992],
    expression=statement_000470,
    keyword="is_checked!",
)

statement_000472 = ConstraintArgumentsParserInfo.Create(
    regions=[region_000993, region_000993],
    arguments=[statement_000467, statement_000469, statement_000471, ],
)

statement_000473 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000994, region_000995, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000472,
    mutability_modifier=None,
)

statement_000474 = TypeAliasStatementParserInfo.Create(
    regions=[region_000996, region_000997, region_000998],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="UInt64",
    type=statement_000473,
)

statement_000475 = IntegerExpressionParserInfo.Create(
    regions=[region_000999],
    value=8,
)

statement_000475 = ConstraintArgumentParserInfo.Create(
    regions=[region_000999, None],
    expression=statement_000475,
    keyword=None,
)

statement_000476 = BooleanExpressionParserInfo.Create(
    regions=[region_001000],
    value=False,
)

statement_000477 = ConstraintArgumentParserInfo.Create(
    regions=[region_001001, region_001002],
    expression=statement_000476,
    keyword="is_signed!",
)

statement_000478 = BooleanExpressionParserInfo.Create(
    regions=[region_001003],
    value=True,
)

statement_000479 = ConstraintArgumentParserInfo.Create(
    regions=[region_001004, region_001005],
    expression=statement_000478,
    keyword="is_checked!",
)

statement_000480 = ConstraintArgumentsParserInfo.Create(
    regions=[region_001006, region_001006],
    arguments=[statement_000475, statement_000477, statement_000479, ],
)

statement_000481 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001007, region_001008, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000480,
    mutability_modifier=None,
)

statement_000482 = TypeAliasStatementParserInfo.Create(
    regions=[region_001009, region_001010, region_001011],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedUInt64",
    type=statement_000481,
)

statement_000483 = IntegerExpressionParserInfo.Create(
    regions=[region_001012],
    value=16,
)

statement_000483 = ConstraintArgumentParserInfo.Create(
    regions=[region_001012, None],
    expression=statement_000483,
    keyword=None,
)

statement_000484 = BooleanExpressionParserInfo.Create(
    regions=[region_001013],
    value=True,
)

statement_000485 = ConstraintArgumentParserInfo.Create(
    regions=[region_001014, region_001015],
    expression=statement_000484,
    keyword="is_signed!",
)

statement_000486 = BooleanExpressionParserInfo.Create(
    regions=[region_001016],
    value=False,
)

statement_000487 = ConstraintArgumentParserInfo.Create(
    regions=[region_001017, region_001018],
    expression=statement_000486,
    keyword="is_checked!",
)

statement_000488 = ConstraintArgumentsParserInfo.Create(
    regions=[region_001019, region_001019],
    arguments=[statement_000483, statement_000485, statement_000487, ],
)

statement_000489 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001020, region_001021, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000488,
    mutability_modifier=None,
)

statement_000490 = TypeAliasStatementParserInfo.Create(
    regions=[region_001022, region_001023, region_001024],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="Int128",
    type=statement_000489,
)

statement_000491 = IntegerExpressionParserInfo.Create(
    regions=[region_001025],
    value=16,
)

statement_000491 = ConstraintArgumentParserInfo.Create(
    regions=[region_001025, None],
    expression=statement_000491,
    keyword=None,
)

statement_000492 = BooleanExpressionParserInfo.Create(
    regions=[region_001026],
    value=True,
)

statement_000493 = ConstraintArgumentParserInfo.Create(
    regions=[region_001027, region_001028],
    expression=statement_000492,
    keyword="is_signed!",
)

statement_000494 = BooleanExpressionParserInfo.Create(
    regions=[region_001029],
    value=True,
)

statement_000495 = ConstraintArgumentParserInfo.Create(
    regions=[region_001030, region_001031],
    expression=statement_000494,
    keyword="is_checked!",
)

statement_000496 = ConstraintArgumentsParserInfo.Create(
    regions=[region_001032, region_001032],
    arguments=[statement_000491, statement_000493, statement_000495, ],
)

statement_000497 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001033, region_001034, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000496,
    mutability_modifier=None,
)

statement_000498 = TypeAliasStatementParserInfo.Create(
    regions=[region_001035, region_001036, region_001037],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedInt128",
    type=statement_000497,
)

statement_000499 = IntegerExpressionParserInfo.Create(
    regions=[region_001038],
    value=16,
)

statement_000499 = ConstraintArgumentParserInfo.Create(
    regions=[region_001038, None],
    expression=statement_000499,
    keyword=None,
)

statement_000500 = BooleanExpressionParserInfo.Create(
    regions=[region_001039],
    value=False,
)

statement_000501 = ConstraintArgumentParserInfo.Create(
    regions=[region_001040, region_001041],
    expression=statement_000500,
    keyword="is_signed!",
)

statement_000502 = BooleanExpressionParserInfo.Create(
    regions=[region_001042],
    value=False,
)

statement_000503 = ConstraintArgumentParserInfo.Create(
    regions=[region_001043, region_001044],
    expression=statement_000502,
    keyword="is_checked!",
)

statement_000504 = ConstraintArgumentsParserInfo.Create(
    regions=[region_001045, region_001045],
    arguments=[statement_000499, statement_000501, statement_000503, ],
)

statement_000505 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001046, region_001047, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000504,
    mutability_modifier=None,
)

statement_000506 = TypeAliasStatementParserInfo.Create(
    regions=[region_001048, region_001049, region_001050],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="UInt128",
    type=statement_000505,
)

statement_000507 = IntegerExpressionParserInfo.Create(
    regions=[region_001051],
    value=16,
)

statement_000507 = ConstraintArgumentParserInfo.Create(
    regions=[region_001051, None],
    expression=statement_000507,
    keyword=None,
)

statement_000508 = BooleanExpressionParserInfo.Create(
    regions=[region_001052],
    value=False,
)

statement_000509 = ConstraintArgumentParserInfo.Create(
    regions=[region_001053, region_001054],
    expression=statement_000508,
    keyword="is_signed!",
)

statement_000510 = BooleanExpressionParserInfo.Create(
    regions=[region_001055],
    value=True,
)

statement_000511 = ConstraintArgumentParserInfo.Create(
    regions=[region_001056, region_001057],
    expression=statement_000510,
    keyword="is_checked!",
)

statement_000512 = ConstraintArgumentsParserInfo.Create(
    regions=[region_001058, region_001058],
    arguments=[statement_000507, statement_000509, statement_000511, ],
)

statement_000513 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001059, region_001060, None],
    value=CustomType("FixedInt"),
    templates=None,
    constraints=statement_000512,
    mutability_modifier=None,
)

statement_000514 = TypeAliasStatementParserInfo.Create(
    regions=[region_001061, region_001062, region_001063],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedUInt128",
    type=statement_000513,
)

statement_000515 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_001064, region_001064],
    name="__architecture_bytes!",
)

statement_000516 = IntegerExpressionParserInfo.Create(
    regions=[region_001065],
    value=4,
)

statement_000517 = BinaryExpressionParserInfo.Create(
    regions=[region_001066, region_001067],
    left_expression=statement_000515,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000516,
)

statement_000518 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001068, region_001068, None],
    value=CustomType("UInt32"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000519 = TypeAliasStatementParserInfo.Create(
    regions=[region_001069, region_001070, region_001071],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="ArchInt",
    type=statement_000518,
)

statement_000520 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001072, region_001072, None],
    value=CustomType("CheckedUInt32"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000521 = TypeAliasStatementParserInfo.Create(
    regions=[region_001073, region_001074, region_001075],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedArchInt",
    type=statement_000520,
)

statement_000522 = IfStatementClauseParserInfo.Create(
    regions=[region_001076, region_001077, None],
    expression=statement_000517,
    statements=[statement_000519, statement_000521, ],
    documentation=None,
)

statement_000523 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_001078, region_001078],
    name="__architecture_bytes!",
)

statement_000524 = IntegerExpressionParserInfo.Create(
    regions=[region_001079],
    value=8,
)

statement_000525 = BinaryExpressionParserInfo.Create(
    regions=[region_001080, region_001081],
    left_expression=statement_000523,
    operator=BinaryExpressionOperatorType.Equal,
    right_expression=statement_000524,
)

statement_000526 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001082, region_001082, None],
    value=CustomType("UInt64"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000527 = TypeAliasStatementParserInfo.Create(
    regions=[region_001083, region_001084, region_001085],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="ArchInt",
    type=statement_000526,
)

statement_000528 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001086, region_001086, None],
    value=CustomType("CheckedUInt64"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000529 = TypeAliasStatementParserInfo.Create(
    regions=[region_001087, region_001088, region_001089],
    parent_class_capabilities=None,
    visibility_param=VisibilityModifier.public,
    name="CheckedArchInt",
    type=statement_000528,
)

statement_000530 = IfStatementClauseParserInfo.Create(
    regions=[region_001090, region_001091, None],
    expression=statement_000525,
    statements=[statement_000527, statement_000529, ],
    documentation=None,
)

statement_000531 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_001092, region_001092, None],
    value=CustomType("Error!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000532 = StringExpressionParserInfo.Create(
    regions=[region_001093],
    value="Unsupported architecture",
)

statement_000532 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_001093, None],
    expression=statement_000532,
    keyword=None,
)

statement_000533 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_001094, region_001094],
    name="__architecture_bytes!",
)

statement_000533 = FuncArgumentParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_001094, None],
    expression=statement_000533,
    keyword=None,
)

statement_000534 = FuncArgumentsParserInfo.Create(
    regions=[region_001095, region_001095],
    arguments=[statement_000532, statement_000533, ],
)

statement_000535 = CallExpressionParserInfo.Create(
    regions=[region_001096, region_001095],
    expression=statement_000531,
    arguments=statement_000534,
)

statement_000536 = FuncInvocationStatementParserInfo.Create(
    regions=[region_001097],
    expression=statement_000535,
)

statement_000537 = IfStatementElseClauseParserInfo.Create(
    regions=[region_001098, region_001099, None],
    statements=[statement_000536, ],
    documentation=None,
)

statement_000522 = IfStatementParserInfo.Create(
    regions=[region_001076],
    clauses=[statement_000522, statement_000530, ],
    else_clause=statement_000537,
)

public_exports = [
    statement_000362,
    statement_000370,
    statement_000378,
    statement_000386,
    statement_000394,
    statement_000402,
    statement_000410,
    statement_000418,
    statement_000426,
    statement_000434,
    statement_000442,
    statement_000450,
    statement_000458,
    statement_000466,
    statement_000474,
    statement_000482,
    statement_000490,
    statement_000498,
    statement_000506,
    statement_000514,
    statement_000522,
]
