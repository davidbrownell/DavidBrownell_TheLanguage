# <class 'v1.Lexer.Components.AST.Node'>
children:
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Node'>
            children:
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 1] (0)"
                  end: "[1, 4] (3)"
                type: "Upper <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(0, 3), match='ONE'>"
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: true
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 4] (3)"
                  end: "[1, 5] (4)"
                type: "HorizontalWhitespace <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                    begin: 3
                    end: 4
              - # <class 'v1.Lexer.Components.AST.Node'>
                children:
                  - # <class 'v1.Lexer.Components.AST.Leaf'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 5] (4)"
                      end: "[1, 8] (7)"
                    type: "Upper <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(4, 7), match='TWO'>"
                  - # <class 'v1.Lexer.Components.AST.Leaf'>
                    is_ignored: true
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 8] (7)"
                      end: "[1, 10] (9)"
                    type: "HorizontalWhitespace <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken'>"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 7
                        end: 9
                  - # <class 'v1.Lexer.Components.AST.Leaf'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 10] (9)"
                      end: "[1, 15] (14)"
                    type: "Lower <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(9, 14), match='three'>"
                  - # <class 'v1.Lexer.Components.AST.Leaf'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 15] (14)"
                      end: "[2, 1] (15)"
                    type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                    value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 14
                        end: 15
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 5] (4)"
                  end: "[2, 1] (15)"
                type: "Upper Lower Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 1] (0)"
              end: "[2, 1] (15)"
            type: "uul <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 1] (0)"
          end: "[2, 1] (15)"
        type: "(uul | lul) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 1] (0)"
      end: "[2, 1] (15)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Node'>
            children:
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[2, 1] (15)"
                  end: "[2, 5] (19)"
                type: "Lower <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(15, 19), match='four'>"
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: true
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[2, 5] (19)"
                  end: "[2, 9] (23)"
                type: "HorizontalWhitespace <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                    begin: 19
                    end: 23
              - # <class 'v1.Lexer.Components.AST.Node'>
                children:
                  - # <class 'v1.Lexer.Components.AST.Leaf'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[2, 9] (23)"
                      end: "[2, 13] (27)"
                    type: "Upper <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(23, 27), match='FIVE'>"
                  - # <class 'v1.Lexer.Components.AST.Leaf'>
                    is_ignored: true
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[2, 13] (27)"
                      end: "[2, 14] (28)"
                    type: "HorizontalWhitespace <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken'>"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 27
                        end: 28
                  - # <class 'v1.Lexer.Components.AST.Leaf'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[2, 14] (28)"
                      end: "[2, 17] (31)"
                    type: "Lower <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(28, 31), match='six'>"
                  - # <class 'v1.Lexer.Components.AST.Leaf'>
                    is_ignored: false
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[2, 17] (31)"
                      end: "[3, 1] (32)"
                    type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                    value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 31
                        end: 32
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[2, 9] (23)"
                  end: "[3, 1] (32)"
                type: "Upper Lower Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[2, 1] (15)"
              end: "[3, 1] (32)"
            type: "lul <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[2, 1] (15)"
          end: "[3, 1] (32)"
        type: "(uul | lul) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 1] (15)"
      end: "[3, 1] (32)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
  begin: "[1, 1] (0)"
  end: "[3, 1] (32)"
type: "<None>"
