# <class 'Original.Lexer.Components.AST.Node'>
Children:
  - # <class 'Original.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Original.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Original.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 5] (4)"
                Type: "'__if' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 4), match='__if'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 6] (5)"
                            IterEnd: "[1, 14] (13)"
                            Type: "'__syntax' <class 'Original.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(5, 13), match='__syntax'>"
                            Whitespace:
                              - 4
                              - 5
                        IsIgnored: False
                        IterBegin: "[1, 6] (5)"
                        IterEnd: "[1, 14] (13)"
                        Type: "('__syntax' | '__configuration' | '__target') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 15] (14)"
                            IterEnd: "[1, 17] (16)"
                            Type: "'==' <class 'Original.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(14, 16), match='=='>"
                            Whitespace:
                              - 13
                              - 14
                        IsIgnored: False
                        IterBegin: "[1, 15] (14)"
                        IterEnd: "[1, 17] (16)"
                        Type: "('==' | '!=' | '<' | '<=' | '>' | '>=') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                      - # <class 'Original.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[1, 18] (17)"
                        IterEnd: "[1, 23] (22)"
                        Type: "<value> <class 'Original.Lexer.Components.Token.RegexToken'>"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(17, 22), match='1.2.3'>"
                        Whitespace:
                          - 16
                          - 17
                    IsIgnored: False
                    IterBegin: "[1, 6] (5)"
                    IterEnd: "[1, 23] (22)"
                    Type: "Comparison <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IsIgnored: False
                IterBegin: "[1, 6] (5)"
                IterEnd: "[1, 23] (22)"
                Type: "Condition Phrase <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 23] (22)"
                IterEnd: "[1, 24] (23)"
                Type: "':' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(22, 23), match=':'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 24] (23)"
                IterEnd: "[2, 1] (24)"
                Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 24
                  Start: 23
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 1] (24)"
                IterEnd: "[2, 5] (28)"
                Type: "Indent <class 'Original.Lexer.Components.Token.IndentToken'>"
                Value: # <class 'Original.Lexer.Components.Token.IndentToken.MatchResult'>
                  End: 28
                  Start: 24
                  Value: 4
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[2, 5] (28)"
                                IterEnd: "[2, 9] (32)"
                                Type: "Lower Token <class 'Original.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(28, 32), match='fooa'>"
                                Whitespace: None
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[2, 9] (32)"
                                IterEnd: "[4, 1] (34)"
                                Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                  End: 34
                                  Start: 32
                                Whitespace: None
                            IsIgnored: False
                            IterBegin: "[2, 5] (28)"
                            IterEnd: "[4, 1] (34)"
                            Type: "Lower Phrase <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IsIgnored: False
                        IterBegin: "[2, 5] (28)"
                        IterEnd: "[4, 1] (34)"
                        Type: "2.0.0 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                    IsIgnored: False
                    IterBegin: "[2, 5] (28)"
                    IterEnd: "[4, 1] (34)"
                    Type: "Grammar-Specific Statements <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                IsIgnored: False
                IterBegin: "[2, 5] (28)"
                IterEnd: "[4, 1] (34)"
                Type: "{Grammar-Specific Statements, 1, None} <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 1] (34)"
                IterEnd: "[4, 1] (34)"
                Type: "Dedent <class 'Original.Lexer.Components.Token.DedentToken'>"
                Value: # <class 'Original.Lexer.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[4, 1] (34)"
            Type: "Conditional Syntax Statement <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[4, 1] (34)"
        Type: "2.0.0 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[4, 1] (34)"
    Type: "Dynamic Phrase <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Original.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Original.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Original.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 1] (34)"
                IterEnd: "[4, 5] (38)"
                Type: "'__if' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(34, 38), match='__if'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[4, 6] (39)"
                        IterEnd: "[4, 9] (42)"
                        Type: "'not' <class 'Original.Lexer.Components.Token.RegexToken'>"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(39, 42), match='not'>"
                        Whitespace:
                          - 38
                          - 39
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 10] (43)"
                                    IterEnd: "[4, 18] (51)"
                                    Type: "'__syntax' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(43, 51), match='__syntax'>"
                                    Whitespace:
                                      - 42
                                      - 43
                                IsIgnored: False
                                IterBegin: "[4, 10] (43)"
                                IterEnd: "[4, 18] (51)"
                                Type: "('__syntax' | '__configuration' | '__target') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 19] (52)"
                                    IterEnd: "[4, 21] (54)"
                                    Type: "'==' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(52, 54), match='=='>"
                                    Whitespace:
                                      - 51
                                      - 52
                                IsIgnored: False
                                IterBegin: "[4, 19] (52)"
                                IterEnd: "[4, 21] (54)"
                                Type: "('==' | '!=' | '<' | '<=' | '>' | '>=') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[4, 22] (55)"
                                IterEnd: "[4, 25] (58)"
                                Type: "<value> <class 'Original.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(55, 58), match='4.0'>"
                                Whitespace:
                                  - 54
                                  - 55
                            IsIgnored: False
                            IterBegin: "[4, 10] (43)"
                            IterEnd: "[4, 25] (58)"
                            Type: "Comparison <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IsIgnored: False
                        IterBegin: "[4, 10] (43)"
                        IterEnd: "[4, 25] (58)"
                        Type: "Condition Phrase <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                    IsIgnored: False
                    IterBegin: "[4, 6] (39)"
                    IterEnd: "[4, 25] (58)"
                    Type: "Not <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IsIgnored: False
                IterBegin: "[4, 6] (39)"
                IterEnd: "[4, 25] (58)"
                Type: "Condition Phrase <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 25] (58)"
                IterEnd: "[4, 26] (59)"
                Type: "':' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(58, 59), match=':'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[4, 26] (59)"
                IterEnd: "[5, 1] (60)"
                Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 60
                  Start: 59
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 1] (60)"
                IterEnd: "[5, 5] (64)"
                Type: "Indent <class 'Original.Lexer.Components.Token.IndentToken'>"
                Value: # <class 'Original.Lexer.Components.Token.IndentToken.MatchResult'>
                  End: 64
                  Start: 60
                  Value: 4
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[5, 5] (64)"
                                IterEnd: "[5, 9] (68)"
                                Type: "Lower Token <class 'Original.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(64, 68), match='foob'>"
                                Whitespace: None
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[5, 9] (68)"
                                IterEnd: "[7, 1] (70)"
                                Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                  End: 70
                                  Start: 68
                                Whitespace: None
                            IsIgnored: False
                            IterBegin: "[5, 5] (64)"
                            IterEnd: "[7, 1] (70)"
                            Type: "Lower Phrase <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IsIgnored: False
                        IterBegin: "[5, 5] (64)"
                        IterEnd: "[7, 1] (70)"
                        Type: "2.0.0 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                    IsIgnored: False
                    IterBegin: "[5, 5] (64)"
                    IterEnd: "[7, 1] (70)"
                    Type: "Grammar-Specific Statements <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                IsIgnored: False
                IterBegin: "[5, 5] (64)"
                IterEnd: "[7, 1] (70)"
                Type: "{Grammar-Specific Statements, 1, None} <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 1] (70)"
                IterEnd: "[7, 1] (70)"
                Type: "Dedent <class 'Original.Lexer.Components.Token.DedentToken'>"
                Value: # <class 'Original.Lexer.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            IsIgnored: False
            IterBegin: "[4, 1] (34)"
            IterEnd: "[7, 1] (70)"
            Type: "Conditional Syntax Statement <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[4, 1] (34)"
        IterEnd: "[7, 1] (70)"
        Type: "2.0.0 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[4, 1] (34)"
    IterEnd: "[7, 1] (70)"
    Type: "Dynamic Phrase <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Original.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Original.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Original.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 1] (70)"
                IterEnd: "[7, 5] (74)"
                Type: "'__if' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(70, 74), match='__if'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[7, 6] (75)"
                        IterEnd: "[7, 7] (76)"
                        Type: "'(' <class 'Original.Lexer.Components.Token.RegexToken'>"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(75, 76), match='('>"
                        Whitespace:
                          - 74
                          - 75
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[7, 7] (76)"
                                    IterEnd: "[7, 15] (84)"
                                    Type: "'__syntax' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(76, 84), match='__syntax'>"
                                    Whitespace: None
                                IsIgnored: False
                                IterBegin: "[7, 7] (76)"
                                IterEnd: "[7, 15] (84)"
                                Type: "('__syntax' | '__configuration' | '__target') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[7, 16] (85)"
                                    IterEnd: "[7, 17] (86)"
                                    Type: "'<' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(85, 86), match='<'>"
                                    Whitespace:
                                      - 84
                                      - 85
                                IsIgnored: False
                                IterBegin: "[7, 16] (85)"
                                IterEnd: "[7, 17] (86)"
                                Type: "('==' | '!=' | '<' | '<=' | '>' | '>=') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[7, 18] (87)"
                                IterEnd: "[7, 21] (90)"
                                Type: "<value> <class 'Original.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(87, 90), match='1.0'>"
                                Whitespace:
                                  - 86
                                  - 87
                            IsIgnored: False
                            IterBegin: "[7, 7] (76)"
                            IterEnd: "[7, 21] (90)"
                            Type: "Comparison <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IsIgnored: False
                        IterBegin: "[7, 7] (76)"
                        IterEnd: "[7, 21] (90)"
                        Type: "Condition Phrase <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[7, 22] (91)"
                                    IterEnd: "[7, 25] (94)"
                                    Type: "'and' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(91, 94), match='and'>"
                                    Whitespace:
                                      - 90
                                      - 91
                                IsIgnored: False
                                IterBegin: "[7, 22] (91)"
                                IterEnd: "[7, 25] (94)"
                                Type: "('and' | 'or') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'Original.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[7, 26] (95)"
                                            IterEnd: "[7, 34] (103)"
                                            Type: "'__syntax' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(95, 103), match='__syntax'>"
                                            Whitespace:
                                              - 94
                                              - 95
                                        IsIgnored: False
                                        IterBegin: "[7, 26] (95)"
                                        IterEnd: "[7, 34] (103)"
                                        Type: "('__syntax' | '__configuration' | '__target') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                      - # <class 'Original.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[7, 35] (104)"
                                            IterEnd: "[7, 36] (105)"
                                            Type: "'>' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(104, 105), match='>'>"
                                            Whitespace:
                                              - 103
                                              - 104
                                        IsIgnored: False
                                        IterBegin: "[7, 35] (104)"
                                        IterEnd: "[7, 36] (105)"
                                        Type: "('==' | '!=' | '<' | '<=' | '>' | '>=') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                      - # <class 'Original.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[7, 37] (106)"
                                        IterEnd: "[7, 40] (109)"
                                        Type: "<value> <class 'Original.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(106, 109), match='2.0'>"
                                        Whitespace:
                                          - 105
                                          - 106
                                    IsIgnored: False
                                    IterBegin: "[7, 26] (95)"
                                    IterEnd: "[7, 40] (109)"
                                    Type: "Comparison <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                IsIgnored: False
                                IterBegin: "[7, 26] (95)"
                                IterEnd: "[7, 40] (109)"
                                Type: "Condition Phrase <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                            IsIgnored: False
                            IterBegin: "[7, 22] (91)"
                            IterEnd: "[7, 40] (109)"
                            Type: "[('and' | 'or'), Condition Phrase] <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IsIgnored: False
                        IterBegin: "[7, 22] (91)"
                        IterEnd: "[7, 40] (109)"
                        Type: "{[('and' | 'or'), Condition Phrase], 1, None} <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                      - # <class 'Original.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[7, 40] (109)"
                        IterEnd: "[7, 41] (110)"
                        Type: "')' <class 'Original.Lexer.Components.Token.RegexToken'>"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(109, 110), match=')'>"
                        Whitespace: None
                    IsIgnored: False
                    IterBegin: "[7, 6] (75)"
                    IterEnd: "[7, 41] (110)"
                    Type: "Logical <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IsIgnored: False
                IterBegin: "[7, 6] (75)"
                IterEnd: "[7, 41] (110)"
                Type: "Condition Phrase <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 41] (110)"
                IterEnd: "[7, 42] (111)"
                Type: "':' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(110, 111), match=':'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[7, 42] (111)"
                IterEnd: "[8, 1] (112)"
                Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 112
                  Start: 111
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 1] (112)"
                IterEnd: "[8, 5] (116)"
                Type: "Indent <class 'Original.Lexer.Components.Token.IndentToken'>"
                Value: # <class 'Original.Lexer.Components.Token.IndentToken.MatchResult'>
                  End: 116
                  Start: 112
                  Value: 4
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[8, 5] (116)"
                                IterEnd: "[8, 9] (120)"
                                Type: "Lower Token <class 'Original.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(116, 120), match='fooc'>"
                                Whitespace: None
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[8, 9] (120)"
                                IterEnd: "[10, 1] (122)"
                                Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                  End: 122
                                  Start: 120
                                Whitespace: None
                            IsIgnored: False
                            IterBegin: "[8, 5] (116)"
                            IterEnd: "[10, 1] (122)"
                            Type: "Lower Phrase <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IsIgnored: False
                        IterBegin: "[8, 5] (116)"
                        IterEnd: "[10, 1] (122)"
                        Type: "2.0.0 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                    IsIgnored: False
                    IterBegin: "[8, 5] (116)"
                    IterEnd: "[10, 1] (122)"
                    Type: "Grammar-Specific Statements <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                IsIgnored: False
                IterBegin: "[8, 5] (116)"
                IterEnd: "[10, 1] (122)"
                Type: "{Grammar-Specific Statements, 1, None} <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[10, 1] (122)"
                IterEnd: "[10, 1] (122)"
                Type: "Dedent <class 'Original.Lexer.Components.Token.DedentToken'>"
                Value: # <class 'Original.Lexer.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            IsIgnored: False
            IterBegin: "[7, 1] (70)"
            IterEnd: "[10, 1] (122)"
            Type: "Conditional Syntax Statement <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[7, 1] (70)"
        IterEnd: "[10, 1] (122)"
        Type: "2.0.0 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[7, 1] (70)"
    IterEnd: "[10, 1] (122)"
    Type: "Dynamic Phrase <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Original.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Original.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Original.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[10, 1] (122)"
                IterEnd: "[10, 5] (126)"
                Type: "'__if' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(122, 126), match='__if'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[10, 6] (127)"
                        IterEnd: "[10, 7] (128)"
                        Type: "'(' <class 'Original.Lexer.Components.Token.RegexToken'>"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(127, 128), match='('>"
                        Whitespace:
                          - 126
                          - 127
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[10, 7] (128)"
                                    IterEnd: "[10, 15] (136)"
                                    Type: "'__syntax' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(128, 136), match='__syntax'>"
                                    Whitespace: None
                                IsIgnored: False
                                IterBegin: "[10, 7] (128)"
                                IterEnd: "[10, 15] (136)"
                                Type: "('__syntax' | '__configuration' | '__target') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[10, 16] (137)"
                                    IterEnd: "[10, 18] (139)"
                                    Type: "'!=' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(137, 139), match='!='>"
                                    Whitespace:
                                      - 136
                                      - 137
                                IsIgnored: False
                                IterBegin: "[10, 16] (137)"
                                IterEnd: "[10, 18] (139)"
                                Type: "('==' | '!=' | '<' | '<=' | '>' | '>=') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[10, 19] (140)"
                                IterEnd: "[10, 22] (143)"
                                Type: "<value> <class 'Original.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(140, 143), match='2.0'>"
                                Whitespace:
                                  - 139
                                  - 140
                            IsIgnored: False
                            IterBegin: "[10, 7] (128)"
                            IterEnd: "[10, 22] (143)"
                            Type: "Comparison <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IsIgnored: False
                        IterBegin: "[10, 7] (128)"
                        IterEnd: "[10, 22] (143)"
                        Type: "Condition Phrase <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[10, 23] (144)"
                                    IterEnd: "[10, 26] (147)"
                                    Type: "'and' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(144, 147), match='and'>"
                                    Whitespace:
                                      - 143
                                      - 144
                                IsIgnored: False
                                IterBegin: "[10, 23] (144)"
                                IterEnd: "[10, 26] (147)"
                                Type: "('and' | 'or') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'Original.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[10, 27] (148)"
                                        IterEnd: "[10, 28] (149)"
                                        Type: "'(' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(148, 149), match='('>"
                                        Whitespace:
                                          - 147
                                          - 148
                                      - # <class 'Original.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'Original.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'Original.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[10, 28] (149)"
                                                    IterEnd: "[10, 36] (157)"
                                                    Type: "'__syntax' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(149, 157), match='__syntax'>"
                                                    Whitespace: None
                                                IsIgnored: False
                                                IterBegin: "[10, 28] (149)"
                                                IterEnd: "[10, 36] (157)"
                                                Type: "('__syntax' | '__configuration' | '__target') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'Original.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[10, 37] (158)"
                                                    IterEnd: "[10, 39] (160)"
                                                    Type: "'!=' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(158, 160), match='!='>"
                                                    Whitespace:
                                                      - 157
                                                      - 158
                                                IsIgnored: False
                                                IterBegin: "[10, 37] (158)"
                                                IterEnd: "[10, 39] (160)"
                                                Type: "('==' | '!=' | '<' | '<=' | '>' | '>=') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[10, 40] (161)"
                                                IterEnd: "[10, 43] (164)"
                                                Type: "<value> <class 'Original.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(161, 164), match='2.0'>"
                                                Whitespace:
                                                  - 160
                                                  - 161
                                            IsIgnored: False
                                            IterBegin: "[10, 28] (149)"
                                            IterEnd: "[10, 43] (164)"
                                            Type: "Comparison <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        IsIgnored: False
                                        IterBegin: "[10, 28] (149)"
                                        IterEnd: "[10, 43] (164)"
                                        Type: "Condition Phrase <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                      - # <class 'Original.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'Original.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'Original.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[10, 44] (165)"
                                                    IterEnd: "[10, 46] (167)"
                                                    Type: "'or' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(165, 167), match='or'>"
                                                    Whitespace:
                                                      - 164
                                                      - 165
                                                IsIgnored: False
                                                IterBegin: "[10, 44] (165)"
                                                IterEnd: "[10, 46] (167)"
                                                Type: "('and' | 'or') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'Original.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'Original.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'Original.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[10, 47] (168)"
                                                            IterEnd: "[10, 55] (176)"
                                                            Type: "'__syntax' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(168, 176), match='__syntax'>"
                                                            Whitespace:
                                                              - 167
                                                              - 168
                                                        IsIgnored: False
                                                        IterBegin: "[10, 47] (168)"
                                                        IterEnd: "[10, 55] (176)"
                                                        Type: "('__syntax' | '__configuration' | '__target') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                      - # <class 'Original.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[10, 56] (177)"
                                                            IterEnd: "[10, 58] (179)"
                                                            Type: "'!=' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(177, 179), match='!='>"
                                                            Whitespace:
                                                              - 176
                                                              - 177
                                                        IsIgnored: False
                                                        IterBegin: "[10, 56] (177)"
                                                        IterEnd: "[10, 58] (179)"
                                                        Type: "('==' | '!=' | '<' | '<=' | '>' | '>=') <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                      - # <class 'Original.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[10, 59] (180)"
                                                        IterEnd: "[10, 62] (183)"
                                                        Type: "<value> <class 'Original.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(180, 183), match='3.0'>"
                                                        Whitespace:
                                                          - 179
                                                          - 180
                                                    IsIgnored: False
                                                    IterBegin: "[10, 47] (168)"
                                                    IterEnd: "[10, 62] (183)"
                                                    Type: "Comparison <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IsIgnored: False
                                                IterBegin: "[10, 47] (168)"
                                                IterEnd: "[10, 62] (183)"
                                                Type: "Condition Phrase <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IsIgnored: False
                                            IterBegin: "[10, 44] (165)"
                                            IterEnd: "[10, 62] (183)"
                                            Type: "[('and' | 'or'), Condition Phrase] <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        IsIgnored: False
                                        IterBegin: "[10, 44] (165)"
                                        IterEnd: "[10, 62] (183)"
                                        Type: "{[('and' | 'or'), Condition Phrase], 1, None} <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'Original.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[10, 62] (183)"
                                        IterEnd: "[10, 63] (184)"
                                        Type: "')' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(183, 184), match=')'>"
                                        Whitespace: None
                                    IsIgnored: False
                                    IterBegin: "[10, 27] (148)"
                                    IterEnd: "[10, 63] (184)"
                                    Type: "Logical <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                IsIgnored: False
                                IterBegin: "[10, 27] (148)"
                                IterEnd: "[10, 63] (184)"
                                Type: "Condition Phrase <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                            IsIgnored: False
                            IterBegin: "[10, 23] (144)"
                            IterEnd: "[10, 63] (184)"
                            Type: "[('and' | 'or'), Condition Phrase] <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IsIgnored: False
                        IterBegin: "[10, 23] (144)"
                        IterEnd: "[10, 63] (184)"
                        Type: "{[('and' | 'or'), Condition Phrase], 1, None} <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                      - # <class 'Original.Lexer.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[10, 63] (184)"
                        IterEnd: "[10, 64] (185)"
                        Type: "')' <class 'Original.Lexer.Components.Token.RegexToken'>"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(184, 185), match=')'>"
                        Whitespace: None
                    IsIgnored: False
                    IterBegin: "[10, 6] (127)"
                    IterEnd: "[10, 64] (185)"
                    Type: "Logical <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IsIgnored: False
                IterBegin: "[10, 6] (127)"
                IterEnd: "[10, 64] (185)"
                Type: "Condition Phrase <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[10, 64] (185)"
                IterEnd: "[10, 65] (186)"
                Type: "':' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(185, 186), match=':'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[10, 65] (186)"
                IterEnd: "[11, 1] (187)"
                Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 187
                  Start: 186
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 1] (187)"
                IterEnd: "[11, 5] (191)"
                Type: "Indent <class 'Original.Lexer.Components.Token.IndentToken'>"
                Value: # <class 'Original.Lexer.Components.Token.IndentToken.MatchResult'>
                  End: 191
                  Start: 187
                  Value: 4
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[11, 5] (191)"
                                IterEnd: "[11, 9] (195)"
                                Type: "Lower Token <class 'Original.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(191, 195), match='food'>"
                                Whitespace: None
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[11, 9] (195)"
                                IterEnd: "[12, 1] (196)"
                                Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                  End: 196
                                  Start: 195
                                Whitespace: None
                            IsIgnored: False
                            IterBegin: "[11, 5] (191)"
                            IterEnd: "[12, 1] (196)"
                            Type: "Lower Phrase <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IsIgnored: False
                        IterBegin: "[11, 5] (191)"
                        IterEnd: "[12, 1] (196)"
                        Type: "2.0.0 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                    IsIgnored: False
                    IterBegin: "[11, 5] (191)"
                    IterEnd: "[12, 1] (196)"
                    Type: "Grammar-Specific Statements <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[12, 5] (200)"
                                IterEnd: "[12, 9] (204)"
                                Type: "Lower Token <class 'Original.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(200, 204), match='fooe'>"
                                Whitespace: None
                              - # <class 'Original.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[12, 9] (204)"
                                IterEnd: "[13, 1] (205)"
                                Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                  End: 205
                                  Start: 204
                                Whitespace: None
                            IsIgnored: False
                            IterBegin: "[12, 5] (200)"
                            IterEnd: "[13, 1] (205)"
                            Type: "Lower Phrase <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IsIgnored: False
                        IterBegin: "[12, 5] (200)"
                        IterEnd: "[13, 1] (205)"
                        Type: "2.0.0 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                    IsIgnored: False
                    IterBegin: "[12, 5] (200)"
                    IterEnd: "[13, 1] (205)"
                    Type: "Grammar-Specific Statements <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                IsIgnored: False
                IterBegin: "[11, 5] (191)"
                IterEnd: "[13, 1] (205)"
                Type: "{Grammar-Specific Statements, 1, None} <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[13, 1] (205)"
                IterEnd: "[13, 1] (205)"
                Type: "Dedent <class 'Original.Lexer.Components.Token.DedentToken'>"
                Value: # <class 'Original.Lexer.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            IsIgnored: False
            IterBegin: "[10, 1] (122)"
            IterEnd: "[13, 1] (205)"
            Type: "Conditional Syntax Statement <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[10, 1] (122)"
        IterEnd: "[13, 1] (205)"
        Type: "2.0.0 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[10, 1] (122)"
    IterEnd: "[13, 1] (205)"
    Type: "Dynamic Phrase <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[13, 1] (205)"
Type: "<None>"
