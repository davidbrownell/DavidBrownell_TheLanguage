# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[2, 1] (73)"
                    IterEnd: "[2, 7] (79)"
                    Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(73, 79), match='public'>"
                    Whitespace: None
                IterBegin: "[2, 1] (73)"
                IterEnd: "[2, 7] (79)"
                Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[2, 8] (80)"
                    IterEnd: "[2, 13] (85)"
                    Type: "'class' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(80, 85), match='class'>"
                    Whitespace:
                      - 79
                      - 80
                IterBegin: "[2, 8] (80)"
                IterEnd: "[2, 13] (85)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 14] (86)"
                IterEnd: "[2, 25] (97)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(86, 97), match='PublicClass'>"
                Whitespace:
                  - 85
                  - 86
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 25] (97)"
                IterEnd: "[2, 26] (98)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(97, 98), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 26] (98)"
                IterEnd: "[2, 27] (99)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(98, 99), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 27] (99)"
                IterEnd: "[2, 28] (100)"
                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(99, 100), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 28] (100)"
                IterEnd: "[3, 1] (101)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 101
                  Start: 100
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 1] (101)"
                IterEnd: "[3, 5] (105)"
                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                  End: 105
                  Start: 101
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[3, 5] (105)"
                                IterEnd: "[3, 9] (109)"
                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(105, 109), match='pass'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[3, 9] (109)"
                                IterEnd: "[5, 1] (111)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 111
                                  Start: 109
                                Whitespace: None
                            IterBegin: "[3, 5] (105)"
                            IterEnd: "[5, 1] (111)"
                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[3, 5] (105)"
                        IterEnd: "[5, 1] (111)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[3, 5] (105)"
                    IterEnd: "[5, 1] (111)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[3, 5] (105)"
                IterEnd: "[5, 1] (111)"
                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 1] (111)"
                IterEnd: "[5, 1] (111)"
                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.ClassStatement.ClassStatement.NodeInfo'>
              Base: None
              Interfaces: []
              Mixins: []
              Name: "PublicClass"
              Type: "ClassType.Class"
              Visibility: "VisibilityModifier.public"
            IterBegin: "[2, 1] (73)"
            IterEnd: "[5, 1] (111)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[2, 1] (73)"
        IterEnd: "[5, 1] (111)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[2, 1] (73)"
    IterEnd: "[5, 1] (111)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[5, 1] (111)"
                    IterEnd: "[5, 10] (120)"
                    Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(111, 120), match='protected'>"
                    Whitespace: None
                IterBegin: "[5, 1] (111)"
                IterEnd: "[5, 10] (120)"
                Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[5, 11] (121)"
                    IterEnd: "[5, 16] (126)"
                    Type: "'class' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(121, 126), match='class'>"
                    Whitespace:
                      - 120
                      - 121
                IterBegin: "[5, 11] (121)"
                IterEnd: "[5, 16] (126)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 17] (127)"
                IterEnd: "[5, 31] (141)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(127, 141), match='ProtectedClass'>"
                Whitespace:
                  - 126
                  - 127
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 31] (141)"
                IterEnd: "[5, 32] (142)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(141, 142), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 32] (142)"
                IterEnd: "[5, 33] (143)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(142, 143), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 33] (143)"
                IterEnd: "[5, 34] (144)"
                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(143, 144), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 34] (144)"
                IterEnd: "[6, 1] (145)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 145
                  Start: 144
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[6, 1] (145)"
                IterEnd: "[6, 5] (149)"
                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                  End: 149
                  Start: 145
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[6, 5] (149)"
                                IterEnd: "[6, 9] (153)"
                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(149, 153), match='pass'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[6, 9] (153)"
                                IterEnd: "[8, 1] (155)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 155
                                  Start: 153
                                Whitespace: None
                            IterBegin: "[6, 5] (149)"
                            IterEnd: "[8, 1] (155)"
                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[6, 5] (149)"
                        IterEnd: "[8, 1] (155)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[6, 5] (149)"
                    IterEnd: "[8, 1] (155)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[6, 5] (149)"
                IterEnd: "[8, 1] (155)"
                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 1] (155)"
                IterEnd: "[8, 1] (155)"
                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.ClassStatement.ClassStatement.NodeInfo'>
              Base: None
              Interfaces: []
              Mixins: []
              Name: "ProtectedClass"
              Type: "ClassType.Class"
              Visibility: "VisibilityModifier.protected"
            IterBegin: "[5, 1] (111)"
            IterEnd: "[8, 1] (155)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[5, 1] (111)"
        IterEnd: "[8, 1] (155)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[5, 1] (111)"
    IterEnd: "[8, 1] (155)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[8, 1] (155)"
                    IterEnd: "[8, 8] (162)"
                    Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(155, 162), match='private'>"
                    Whitespace: None
                IterBegin: "[8, 1] (155)"
                IterEnd: "[8, 8] (162)"
                Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[8, 9] (163)"
                    IterEnd: "[8, 14] (168)"
                    Type: "'class' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(163, 168), match='class'>"
                    Whitespace:
                      - 162
                      - 163
                IterBegin: "[8, 9] (163)"
                IterEnd: "[8, 14] (168)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 15] (169)"
                IterEnd: "[8, 27] (181)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(169, 181), match='PrivateClass'>"
                Whitespace:
                  - 168
                  - 169
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 27] (181)"
                IterEnd: "[8, 28] (182)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(181, 182), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 28] (182)"
                IterEnd: "[8, 29] (183)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(182, 183), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 29] (183)"
                IterEnd: "[8, 30] (184)"
                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(183, 184), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[8, 30] (184)"
                IterEnd: "[9, 1] (185)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 185
                  Start: 184
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[9, 1] (185)"
                IterEnd: "[9, 5] (189)"
                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                  End: 189
                  Start: 185
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[9, 5] (189)"
                                IterEnd: "[9, 9] (193)"
                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(189, 193), match='pass'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[9, 9] (193)"
                                IterEnd: "[11, 1] (195)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 195
                                  Start: 193
                                Whitespace: None
                            IterBegin: "[9, 5] (189)"
                            IterEnd: "[11, 1] (195)"
                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[9, 5] (189)"
                        IterEnd: "[11, 1] (195)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[9, 5] (189)"
                    IterEnd: "[11, 1] (195)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[9, 5] (189)"
                IterEnd: "[11, 1] (195)"
                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 1] (195)"
                IterEnd: "[11, 1] (195)"
                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.ClassStatement.ClassStatement.NodeInfo'>
              Base: None
              Interfaces: []
              Mixins: []
              Name: "PrivateClass"
              Type: "ClassType.Class"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[8, 1] (155)"
            IterEnd: "[11, 1] (195)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[8, 1] (155)"
        IterEnd: "[11, 1] (195)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[8, 1] (155)"
    IterEnd: "[11, 1] (195)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[11, 1] (195)"
                    IterEnd: "[11, 6] (200)"
                    Type: "'class' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(195, 200), match='class'>"
                    Whitespace: None
                IterBegin: "[11, 1] (195)"
                IterEnd: "[11, 6] (200)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 7] (201)"
                IterEnd: "[11, 19] (213)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(201, 213), match='DefaultClass'>"
                Whitespace:
                  - 200
                  - 201
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 19] (213)"
                IterEnd: "[11, 20] (214)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(213, 214), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 20] (214)"
                IterEnd: "[11, 21] (215)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(214, 215), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 21] (215)"
                IterEnd: "[11, 22] (216)"
                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(215, 216), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 22] (216)"
                IterEnd: "[12, 1] (217)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 217
                  Start: 216
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[12, 1] (217)"
                IterEnd: "[12, 5] (221)"
                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                  End: 221
                  Start: 217
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[12, 5] (221)"
                                IterEnd: "[12, 9] (225)"
                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(221, 225), match='pass'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[12, 9] (225)"
                                IterEnd: "[14, 1] (227)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 227
                                  Start: 225
                                Whitespace: None
                            IterBegin: "[12, 5] (221)"
                            IterEnd: "[14, 1] (227)"
                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[12, 5] (221)"
                        IterEnd: "[14, 1] (227)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[12, 5] (221)"
                    IterEnd: "[14, 1] (227)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[12, 5] (221)"
                IterEnd: "[14, 1] (227)"
                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[14, 1] (227)"
                IterEnd: "[14, 1] (227)"
                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.ClassStatement.ClassStatement.NodeInfo'>
              Base: None
              Interfaces: []
              Mixins: []
              Name: "DefaultClass"
              Type: "ClassType.Class"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[11, 1] (195)"
            IterEnd: "[14, 1] (227)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[11, 1] (195)"
        IterEnd: "[14, 1] (227)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[11, 1] (195)"
    IterEnd: "[14, 1] (227)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[15, 1] (300)"
                    IterEnd: "[15, 7] (306)"
                    Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(300, 306), match='public'>"
                    Whitespace: None
                IterBegin: "[15, 1] (300)"
                IterEnd: "[15, 7] (306)"
                Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[15, 8] (307)"
                    IterEnd: "[15, 17] (316)"
                    Type: "'exception' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(307, 316), match='exception'>"
                    Whitespace:
                      - 306
                      - 307
                IterBegin: "[15, 8] (307)"
                IterEnd: "[15, 17] (316)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[15, 18] (317)"
                IterEnd: "[15, 33] (332)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(317, 332), match='PublicException'>"
                Whitespace:
                  - 316
                  - 317
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[15, 33] (332)"
                IterEnd: "[15, 34] (333)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(332, 333), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[15, 34] (333)"
                IterEnd: "[15, 35] (334)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(333, 334), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[15, 35] (334)"
                IterEnd: "[15, 36] (335)"
                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(334, 335), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[15, 36] (335)"
                IterEnd: "[16, 1] (336)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 336
                  Start: 335
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[16, 1] (336)"
                IterEnd: "[16, 5] (340)"
                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                  End: 340
                  Start: 336
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[16, 5] (340)"
                                IterEnd: "[16, 9] (344)"
                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(340, 344), match='pass'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[16, 9] (344)"
                                IterEnd: "[18, 1] (346)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 346
                                  Start: 344
                                Whitespace: None
                            IterBegin: "[16, 5] (340)"
                            IterEnd: "[18, 1] (346)"
                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[16, 5] (340)"
                        IterEnd: "[18, 1] (346)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[16, 5] (340)"
                    IterEnd: "[18, 1] (346)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[16, 5] (340)"
                IterEnd: "[18, 1] (346)"
                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[18, 1] (346)"
                IterEnd: "[18, 1] (346)"
                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.ClassStatement.ClassStatement.NodeInfo'>
              Base: None
              Interfaces: []
              Mixins: []
              Name: "PublicException"
              Type: "ClassType.Exception"
              Visibility: "VisibilityModifier.public"
            IterBegin: "[15, 1] (300)"
            IterEnd: "[18, 1] (346)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[15, 1] (300)"
        IterEnd: "[18, 1] (346)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[15, 1] (300)"
    IterEnd: "[18, 1] (346)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[18, 1] (346)"
                    IterEnd: "[18, 10] (355)"
                    Type: "'exception' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(346, 355), match='exception'>"
                    Whitespace: None
                IterBegin: "[18, 1] (346)"
                IterEnd: "[18, 10] (355)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[18, 11] (356)"
                IterEnd: "[18, 27] (372)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(356, 372), match='DefaultException'>"
                Whitespace:
                  - 355
                  - 356
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[18, 27] (372)"
                IterEnd: "[18, 28] (373)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(372, 373), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[18, 28] (373)"
                IterEnd: "[18, 29] (374)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(373, 374), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[18, 29] (374)"
                IterEnd: "[18, 30] (375)"
                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(374, 375), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[18, 30] (375)"
                IterEnd: "[19, 1] (376)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 376
                  Start: 375
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[19, 1] (376)"
                IterEnd: "[19, 5] (380)"
                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                  End: 380
                  Start: 376
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[19, 5] (380)"
                                IterEnd: "[19, 9] (384)"
                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(380, 384), match='pass'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[19, 9] (384)"
                                IterEnd: "[21, 1] (386)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 386
                                  Start: 384
                                Whitespace: None
                            IterBegin: "[19, 5] (380)"
                            IterEnd: "[21, 1] (386)"
                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[19, 5] (380)"
                        IterEnd: "[21, 1] (386)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[19, 5] (380)"
                    IterEnd: "[21, 1] (386)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[19, 5] (380)"
                IterEnd: "[21, 1] (386)"
                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[21, 1] (386)"
                IterEnd: "[21, 1] (386)"
                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.ClassStatement.ClassStatement.NodeInfo'>
              Base: None
              Interfaces: []
              Mixins: []
              Name: "DefaultException"
              Type: "ClassType.Exception"
              Visibility: "VisibilityModifier.public"
            IterBegin: "[18, 1] (346)"
            IterEnd: "[21, 1] (386)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[18, 1] (346)"
        IterEnd: "[21, 1] (386)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[18, 1] (346)"
    IterEnd: "[21, 1] (386)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[22, 1] (459)"
                    IterEnd: "[22, 7] (465)"
                    Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(459, 465), match='public'>"
                    Whitespace: None
                IterBegin: "[22, 1] (459)"
                IterEnd: "[22, 7] (465)"
                Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[22, 8] (466)"
                    IterEnd: "[22, 12] (470)"
                    Type: "'enum' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(466, 470), match='enum'>"
                    Whitespace:
                      - 465
                      - 466
                IterBegin: "[22, 8] (466)"
                IterEnd: "[22, 12] (470)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[22, 13] (471)"
                IterEnd: "[22, 23] (481)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(471, 481), match='PublicEnum'>"
                Whitespace:
                  - 470
                  - 471
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[22, 23] (481)"
                IterEnd: "[22, 24] (482)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(481, 482), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[22, 24] (482)"
                IterEnd: "[22, 25] (483)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(482, 483), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[22, 25] (483)"
                IterEnd: "[22, 26] (484)"
                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(483, 484), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[22, 26] (484)"
                IterEnd: "[23, 1] (485)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 485
                  Start: 484
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[23, 1] (485)"
                IterEnd: "[23, 5] (489)"
                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                  End: 489
                  Start: 485
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[23, 5] (489)"
                                IterEnd: "[23, 9] (493)"
                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(489, 493), match='pass'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[23, 9] (493)"
                                IterEnd: "[25, 1] (495)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 495
                                  Start: 493
                                Whitespace: None
                            IterBegin: "[23, 5] (489)"
                            IterEnd: "[25, 1] (495)"
                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[23, 5] (489)"
                        IterEnd: "[25, 1] (495)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[23, 5] (489)"
                    IterEnd: "[25, 1] (495)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[23, 5] (489)"
                IterEnd: "[25, 1] (495)"
                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[25, 1] (495)"
                IterEnd: "[25, 1] (495)"
                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.ClassStatement.ClassStatement.NodeInfo'>
              Base: None
              Interfaces: []
              Mixins: []
              Name: "PublicEnum"
              Type: "ClassType.Enum"
              Visibility: "VisibilityModifier.public"
            IterBegin: "[22, 1] (459)"
            IterEnd: "[25, 1] (495)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[22, 1] (459)"
        IterEnd: "[25, 1] (495)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[22, 1] (459)"
    IterEnd: "[25, 1] (495)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[25, 1] (495)"
                    IterEnd: "[25, 10] (504)"
                    Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(495, 504), match='protected'>"
                    Whitespace: None
                IterBegin: "[25, 1] (495)"
                IterEnd: "[25, 10] (504)"
                Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[25, 11] (505)"
                    IterEnd: "[25, 20] (514)"
                    Type: "'interface' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(505, 514), match='interface'>"
                    Whitespace:
                      - 504
                      - 505
                IterBegin: "[25, 11] (505)"
                IterEnd: "[25, 20] (514)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[25, 21] (515)"
                IterEnd: "[25, 39] (533)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(515, 533), match='ProtectedInterface'>"
                Whitespace:
                  - 514
                  - 515
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[25, 39] (533)"
                IterEnd: "[25, 40] (534)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(533, 534), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[25, 40] (534)"
                IterEnd: "[25, 41] (535)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(534, 535), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[25, 41] (535)"
                IterEnd: "[25, 42] (536)"
                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(535, 536), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[25, 42] (536)"
                IterEnd: "[26, 1] (537)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 537
                  Start: 536
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[26, 1] (537)"
                IterEnd: "[26, 5] (541)"
                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                  End: 541
                  Start: 537
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[26, 5] (541)"
                                IterEnd: "[26, 9] (545)"
                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(541, 545), match='pass'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[26, 9] (545)"
                                IterEnd: "[28, 1] (547)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 547
                                  Start: 545
                                Whitespace: None
                            IterBegin: "[26, 5] (541)"
                            IterEnd: "[28, 1] (547)"
                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[26, 5] (541)"
                        IterEnd: "[28, 1] (547)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[26, 5] (541)"
                    IterEnd: "[28, 1] (547)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[26, 5] (541)"
                IterEnd: "[28, 1] (547)"
                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[28, 1] (547)"
                IterEnd: "[28, 1] (547)"
                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.ClassStatement.ClassStatement.NodeInfo'>
              Base: None
              Interfaces: []
              Mixins: []
              Name: "ProtectedInterface"
              Type: "ClassType.Interface"
              Visibility: "VisibilityModifier.protected"
            IterBegin: "[25, 1] (495)"
            IterEnd: "[28, 1] (547)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[25, 1] (495)"
        IterEnd: "[28, 1] (547)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[25, 1] (495)"
    IterEnd: "[28, 1] (547)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[28, 1] (547)"
                    IterEnd: "[28, 8] (554)"
                    Type: "Type Modifier <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(547, 554), match='private'>"
                    Whitespace: None
                IterBegin: "[28, 1] (547)"
                IterEnd: "[28, 8] (554)"
                Type: "Repeat: {Visibility, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[28, 9] (555)"
                    IterEnd: "[28, 14] (560)"
                    Type: "'mixin' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(555, 560), match='mixin'>"
                    Whitespace:
                      - 554
                      - 555
                IterBegin: "[28, 9] (555)"
                IterEnd: "[28, 14] (560)"
                Type: "Class Type <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[28, 15] (561)"
                IterEnd: "[28, 27] (573)"
                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(561, 573), match='PrivateMixin'>"
                Whitespace:
                  - 560
                  - 561
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[28, 27] (573)"
                IterEnd: "[28, 28] (574)"
                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(573, 574), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[28, 28] (574)"
                IterEnd: "[28, 29] (575)"
                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(574, 575), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[28, 29] (575)"
                IterEnd: "[28, 30] (576)"
                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(575, 576), match=':'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[28, 30] (576)"
                IterEnd: "[29, 1] (577)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 577
                  Start: 576
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[29, 1] (577)"
                IterEnd: "[29, 5] (581)"
                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                  End: 581
                  Start: 577
                  Value: 4
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[29, 5] (581)"
                                IterEnd: "[29, 9] (585)"
                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(581, 585), match='pass'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[29, 9] (585)"
                                IterEnd: "[30, 1] (586)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 586
                                  Start: 585
                                Whitespace: None
                            IterBegin: "[29, 5] (581)"
                            IterEnd: "[30, 1] (586)"
                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[29, 5] (581)"
                        IterEnd: "[30, 1] (586)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[29, 5] (581)"
                    IterEnd: "[30, 1] (586)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[29, 5] (581)"
                IterEnd: "[30, 1] (586)"
                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[30, 1] (586)"
                IterEnd: "[30, 1] (586)"
                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                  {}
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Grammars.v0_0_1.Statements.ClassStatement.ClassStatement.NodeInfo'>
              Base: None
              Interfaces: []
              Mixins: []
              Name: "PrivateMixin"
              Type: "ClassType.Mixin"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[28, 1] (547)"
            IterEnd: "[30, 1] (586)"
            Type: "Class Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[28, 1] (547)"
        IterEnd: "[30, 1] (586)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[28, 1] (547)"
    IterEnd: "[30, 1] (586)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[2, 1] (73)"
IterEnd: "[30, 1] (586)"
Type: "<None>"
