# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 6] (5)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 5), match='value'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                            Name: "value"
                          Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                            Name: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 6] (5)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 6] (5)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 7] (6)"
                IterEnd: "[1, 8] (7)"
                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(6, 7), match='='>"
                Whitespace:
                  - 5
                  - 6
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 9] (8)"
                                    IterEnd: "[1, 10] (9)"
                                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(8, 9), match='('>"
                                    Whitespace:
                                      - 7
                                      - 8
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 10] (9)"
                                    IterEnd: "[2, 1] (10)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 10
                                      Start: 9
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 1] (10)"
                                    IterEnd: "[2, 5] (14)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 14
                                      Start: 10
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 5] (14)"
                                        IterEnd: "[2, 10] (19)"
                                        Type: "'match' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(14, 19), match='match'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 11] (20)"
                                        IterEnd: "[2, 15] (24)"
                                        Type: "'type' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(20, 24), match='type'>"
                                        Whitespace:
                                          - 19
                                          - 20
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 16] (25)"
                                                            IterEnd: "[2, 21] (30)"
                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(25, 30), match='expr1'>"
                                                            Whitespace:
                                                              - 24
                                                              - 25
                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                          Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                            Name: "expr1"
                                                          Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                            Name: "[Ln 2, Col 16] -> [Ln 2, Col 21]"
                                                            Self__: "[Ln 2, Col 16] -> [Ln 2, Col 21]"
                                                        IterBegin: "[2, 16] (25)"
                                                        IterEnd: "[2, 21] (30)"
                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[2, 16] (25)"
                                                    IterEnd: "[2, 21] (30)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                  Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                      Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                        Name: "expr1"
                                                      Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                        Name: "[Ln 2, Col 16] -> [Ln 2, Col 21]"
                                                        Self__: "[Ln 2, Col 16] -> [Ln 2, Col 21]"
                                                  Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                    Name: "[Ln 2, Col 16] -> [Ln 2, Col 21]"
                                                    Self__: "[Ln 2, Col 16] -> [Ln 2, Col 21]"
                                                IterBegin: "[2, 16] (25)"
                                                IterEnd: "[2, 21] (30)"
                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[2, 16] (25)"
                                            IterEnd: "[2, 21] (30)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[2, 16] (25)"
                                        IterEnd: "[2, 21] (30)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 21] (30)"
                                        IterEnd: "[2, 22] (31)"
                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(30, 31), match=':'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 22] (31)"
                                        IterEnd: "[3, 1] (32)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 32
                                          Start: 31
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[3, 1] (32)"
                                        IterEnd: "[3, 9] (40)"
                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                          End: 40
                                          Start: 32
                                          Value: 8
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 9] (40)"
                                                IterEnd: "[3, 13] (44)"
                                                Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(40, 44), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[3, 14] (45)"
                                                                    IterEnd: "[3, 18] (49)"
                                                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(45, 49), match='Int1'>"
                                                                    Whitespace:
                                                                      - 44
                                                                      - 45
                                                                Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                                  Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                                    Modifier: None
                                                                    TypeName: "Int1"
                                                                  Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                                    Modifier: None
                                                                    Self__: "[Ln 3, Col 14] -> [Ln 3, Col 18]"
                                                                    TypeName: "[Ln 3, Col 14] -> [Ln 3, Col 18]"
                                                                IterBegin: "[3, 14] (45)"
                                                                IterEnd: "[3, 18] (49)"
                                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[3, 14] (45)"
                                                            IterEnd: "[3, 18] (49)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 14] (45)"
                                                        IterEnd: "[3, 18] (49)"
                                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[3, 14] (45)"
                                                    IterEnd: "[3, 18] (49)"
                                                    Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 14] (45)"
                                                IterEnd: "[3, 18] (49)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 18] (49)"
                                                IterEnd: "[3, 19] (50)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(49, 50), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 20] (51)"
                                                                            IterEnd: "[3, 26] (57)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(51, 57), match='value1'>"
                                                                            Whitespace:
                                                                              - 50
                                                                              - 51
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                            Name: "value1"
                                                                          Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                            Name: "[Ln 3, Col 20] -> [Ln 3, Col 26]"
                                                                            Self__: "[Ln 3, Col 20] -> [Ln 3, Col 26]"
                                                                        IterBegin: "[3, 20] (51)"
                                                                        IterEnd: "[3, 26] (57)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 20] (51)"
                                                                    IterEnd: "[3, 26] (57)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                      Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                        Name: "value1"
                                                                      Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                        Name: "[Ln 3, Col 20] -> [Ln 3, Col 26]"
                                                                        Self__: "[Ln 3, Col 20] -> [Ln 3, Col 26]"
                                                                  Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                    Name: "[Ln 3, Col 20] -> [Ln 3, Col 26]"
                                                                    Self__: "[Ln 3, Col 20] -> [Ln 3, Col 26]"
                                                                IterBegin: "[3, 20] (51)"
                                                                IterEnd: "[3, 26] (57)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 20] (51)"
                                                            IterEnd: "[3, 26] (57)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 20] (51)"
                                                        IterEnd: "[3, 26] (57)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[3, 26] (57)"
                                                        IterEnd: "[4, 1] (58)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 58
                                                          Start: 57
                                                        Whitespace: None
                                                    IterBegin: "[3, 20] (51)"
                                                    IterEnd: "[4, 1] (58)"
                                                    Type: "Single Line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 20] (51)"
                                                IterEnd: "[4, 1] (58)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 9] (40)"
                                            IterEnd: "[4, 1] (58)"
                                            Type: "Case <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 9] (66)"
                                                IterEnd: "[4, 13] (70)"
                                                Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(66, 70), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[4, 14] (71)"
                                                                    IterEnd: "[4, 18] (75)"
                                                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(71, 75), match='Int2'>"
                                                                    Whitespace:
                                                                      - 70
                                                                      - 71
                                                                Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                                  Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                                    Modifier: None
                                                                    TypeName: "Int2"
                                                                  Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                                    Modifier: None
                                                                    Self__: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                                                    TypeName: "[Ln 4, Col 14] -> [Ln 4, Col 18]"
                                                                IterBegin: "[4, 14] (71)"
                                                                IterEnd: "[4, 18] (75)"
                                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[4, 14] (71)"
                                                            IterEnd: "[4, 18] (75)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[4, 14] (71)"
                                                        IterEnd: "[4, 18] (75)"
                                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[4, 14] (71)"
                                                    IterEnd: "[4, 18] (75)"
                                                    Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[4, 14] (71)"
                                                IterEnd: "[4, 18] (75)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 18] (75)"
                                                IterEnd: "[4, 19] (76)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(75, 76), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 19] (76)"
                                                        IterEnd: "[5, 1] (77)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 77
                                                          Start: 76
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[5, 1] (77)"
                                                        IterEnd: "[5, 13] (89)"
                                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                          End: 89
                                                          Start: 77
                                                          Value: 12
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[5, 13] (89)"
                                                                            IterEnd: "[5, 14] (90)"
                                                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(89, 90), match='('>"
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[5, 14] (90)"
                                                                            IterEnd: "[6, 1] (91)"
                                                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                              End: 91
                                                                              Start: 90
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[6, 1] (91)"
                                                                            IterEnd: "[6, 17] (107)"
                                                                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                              End: 107
                                                                              Start: 91
                                                                              Value: 16
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[6, 17] (107)"
                                                                                IterEnd: "[6, 22] (112)"
                                                                                Type: "'match' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(107, 112), match='match'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[6, 23] (113)"
                                                                                IterEnd: "[6, 27] (117)"
                                                                                Type: "'type' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(113, 117), match='type'>"
                                                                                Whitespace:
                                                                                  - 112
                                                                                  - 113
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[6, 28] (118)"
                                                                                            IterEnd: "[6, 32] (122)"
                                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(118, 122), match='Func'>"
                                                                                            Whitespace:
                                                                                              - 117
                                                                                              - 118
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[6, 32] (122)"
                                                                                                IterEnd: "[6, 33] (123)"
                                                                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match: "<_sre.SRE_Match object; span=(122, 123), match='('>"
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                    Children:
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                IsIgnored: False
                                                                                                                                IterBegin: "[7, 21] (144)"
                                                                                                                                IterEnd: "[7, 22] (145)"
                                                                                                                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                  Match: "<_sre.SRE_Match object; span=(144, 145), match='a'>"
                                                                                                                                Whitespace: None
                                                                                                                            Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                              Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                                Name: "a"
                                                                                                                              Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                                Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                                Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                            IterBegin: "[7, 21] (144)"
                                                                                                                            IterEnd: "[7, 22] (145)"
                                                                                                                            Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                        IterBegin: "[7, 21] (144)"
                                                                                                                        IterEnd: "[7, 22] (145)"
                                                                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                    Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                      Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                                                                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                          Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                            Name: "a"
                                                                                                                          Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                            Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                            Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                      Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                                                                        Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                        Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                                    IterBegin: "[7, 21] (144)"
                                                                                                                    IterEnd: "[7, 22] (145)"
                                                                                                                    Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                IterBegin: "[7, 21] (144)"
                                                                                                                IterEnd: "[7, 22] (145)"
                                                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                            IterBegin: "[7, 21] (144)"
                                                                                                            IterEnd: "[7, 22] (145)"
                                                                                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                        IterBegin: "[7, 21] (144)"
                                                                                                        IterEnd: "[7, 22] (145)"
                                                                                                        Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                IsIgnored: False
                                                                                                                IterBegin: "[7, 22] (145)"
                                                                                                                IterEnd: "[7, 23] (146)"
                                                                                                                Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                  Match: "<_sre.SRE_Match object; span=(145, 146), match=','>"
                                                                                                                Whitespace: None
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                    Children:
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                Children:
                                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                    Children:
                                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                        IsIgnored: False
                                                                                                                                        IterBegin: "[8, 21] (167)"
                                                                                                                                        IterEnd: "[8, 22] (168)"
                                                                                                                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                          Match: "<_sre.SRE_Match object; span=(167, 168), match='b'>"
                                                                                                                                        Whitespace: None
                                                                                                                                    Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                      Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                                        Name: "b"
                                                                                                                                      Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                                        Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                                        Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                                    IterBegin: "[8, 21] (167)"
                                                                                                                                    IterEnd: "[8, 22] (168)"
                                                                                                                                    Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                                IterBegin: "[8, 21] (167)"
                                                                                                                                IterEnd: "[8, 22] (168)"
                                                                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                            Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                              Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                                                                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                  Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                                    Name: "b"
                                                                                                                                  Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                                    Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                                    Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                              Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                                                                                Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                                Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                                            IterBegin: "[8, 21] (167)"
                                                                                                                            IterEnd: "[8, 22] (168)"
                                                                                                                            Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                        IterBegin: "[8, 21] (167)"
                                                                                                                        IterEnd: "[8, 22] (168)"
                                                                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                    IterBegin: "[8, 21] (167)"
                                                                                                                    IterEnd: "[8, 22] (168)"
                                                                                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                IterBegin: "[8, 21] (167)"
                                                                                                                IterEnd: "[8, 22] (168)"
                                                                                                                Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                            IterBegin: "[7, 22] (145)"
                                                                                                            IterEnd: "[8, 22] (168)"
                                                                                                            Type: "Comma and Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                IsIgnored: False
                                                                                                                IterBegin: "[8, 22] (168)"
                                                                                                                IterEnd: "[8, 23] (169)"
                                                                                                                Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                  Match: "<_sre.SRE_Match object; span=(168, 169), match=','>"
                                                                                                                Whitespace: None
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                    Children:
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                Children:
                                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                    Children:
                                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                        IsIgnored: False
                                                                                                                                        IterBegin: "[9, 21] (190)"
                                                                                                                                        IterEnd: "[9, 22] (191)"
                                                                                                                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                          Match: "<_sre.SRE_Match object; span=(190, 191), match='c'>"
                                                                                                                                        Whitespace: None
                                                                                                                                    Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                      Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                                        Name: "c"
                                                                                                                                      Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                                        Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                                        Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                                    IterBegin: "[9, 21] (190)"
                                                                                                                                    IterEnd: "[9, 22] (191)"
                                                                                                                                    Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                                IterBegin: "[9, 21] (190)"
                                                                                                                                IterEnd: "[9, 22] (191)"
                                                                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                            Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                              Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                                                                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                  Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                                    Name: "c"
                                                                                                                                  Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                                    Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                                    Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                              Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                                                                                Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                                Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                                            IterBegin: "[9, 21] (190)"
                                                                                                                            IterEnd: "[9, 22] (191)"
                                                                                                                            Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                        IterBegin: "[9, 21] (190)"
                                                                                                                        IterEnd: "[9, 22] (191)"
                                                                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                    IterBegin: "[9, 21] (190)"
                                                                                                                    IterEnd: "[9, 22] (191)"
                                                                                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                IterBegin: "[9, 21] (190)"
                                                                                                                IterEnd: "[9, 22] (191)"
                                                                                                                Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                            IterBegin: "[8, 22] (168)"
                                                                                                            IterEnd: "[9, 22] (191)"
                                                                                                            Type: "Comma and Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                        IterBegin: "[7, 22] (145)"
                                                                                                        IterEnd: "[9, 22] (191)"
                                                                                                        Type: "Repeat: {Comma and Argument, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                            IsIgnored: False
                                                                                                            IterBegin: "[9, 22] (191)"
                                                                                                            IterEnd: "[9, 23] (192)"
                                                                                                            Type: "Trailing Comma <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                              Match: "<_sre.SRE_Match object; span=(191, 192), match=','>"
                                                                                                            Whitespace: None
                                                                                                        IterBegin: "[9, 22] (191)"
                                                                                                        IterEnd: "[9, 23] (192)"
                                                                                                        Type: "Repeat: {Trailing Comma, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                                                    IterBegin: "[7, 21] (144)"
                                                                                                    IterEnd: "[9, 23] (192)"
                                                                                                    Type: "Argument Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                IterBegin: "[7, 21] (144)"
                                                                                                IterEnd: "[9, 23] (192)"
                                                                                                Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[10, 17] (209)"
                                                                                                IterEnd: "[10, 18] (210)"
                                                                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                  Match: "<_sre.SRE_Match object; span=(209, 210), match=')'>"
                                                                                                Whitespace: None
                                                                                            IterBegin: "[6, 32] (122)"
                                                                                            IterEnd: "[10, 18] (210)"
                                                                                            Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        Info: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                                                                                          Data: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerData'>
                                                                                            Arguments:
                                                                                              - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                                                                                Data: # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerData'>
                                                                                                  Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                    Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                        Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                          Name: "a"
                                                                                                        Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                          Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                          Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                    Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                                                      Name: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                      Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                  Keyword: None
                                                                                                Regions: # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerRegions'>
                                                                                                  Expression: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                                  Keyword: None
                                                                                                  Self__: "[Ln 7, Col 21] -> [Ln 7, Col 22]"
                                                                                              - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                                                                                Data: # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerData'>
                                                                                                  Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                    Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                        Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                          Name: "b"
                                                                                                        Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                          Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                          Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                    Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                                                      Name: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                      Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                  Keyword: None
                                                                                                Regions: # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerRegions'>
                                                                                                  Expression: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                                  Keyword: None
                                                                                                  Self__: "[Ln 8, Col 21] -> [Ln 8, Col 22]"
                                                                                              - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                                                                                Data: # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerData'>
                                                                                                  Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                    Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                        Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                          Name: "c"
                                                                                                        Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                          Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                          Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                    Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                                                      Name: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                      Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                  Keyword: None
                                                                                                Regions: # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerRegions'>
                                                                                                  Expression: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                                  Keyword: None
                                                                                                  Self__: "[Ln 9, Col 21] -> [Ln 9, Col 22]"
                                                                                            Name: "Func"
                                                                                          Regions: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerRegions'>
                                                                                            Arguments: "[Ln 7, Col 21] -> [Ln 9, Col 23]"
                                                                                            Name: "[Ln 6, Col 28] -> [Ln 6, Col 32]"
                                                                                            Self__: "[Ln 6, Col 28] -> [Ln 10, Col 18]"
                                                                                        IterBegin: "[6, 28] (118)"
                                                                                        IterEnd: "[10, 18] (210)"
                                                                                        Type: "Func Invocation Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                    IterBegin: "[6, 28] (118)"
                                                                                    IterEnd: "[10, 18] (210)"
                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                IterBegin: "[6, 28] (118)"
                                                                                IterEnd: "[10, 18] (210)"
                                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[10, 18] (210)"
                                                                                IterEnd: "[10, 19] (211)"
                                                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(210, 211), match=':'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[10, 19] (211)"
                                                                                IterEnd: "[11, 1] (212)"
                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                  End: 212
                                                                                  Start: 211
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[11, 1] (212)"
                                                                                IterEnd: "[11, 21] (232)"
                                                                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                  End: 232
                                                                                  Start: 212
                                                                                  Value: 20
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[11, 21] (232)"
                                                                                        IterEnd: "[11, 25] (236)"
                                                                                        Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(232, 236), match='case'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                            IsIgnored: False
                                                                                                            IterBegin: "[11, 26] (237)"
                                                                                                            IterEnd: "[11, 31] (242)"
                                                                                                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                              Match: "<_sre.SRE_Match object; span=(237, 242), match='Char1'>"
                                                                                                            Whitespace:
                                                                                                              - 236
                                                                                                              - 237
                                                                                                        Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                                                                          Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                                                                            Modifier: None
                                                                                                            TypeName: "Char1"
                                                                                                          Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                                                                            Modifier: None
                                                                                                            Self__: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                                                            TypeName: "[Ln 11, Col 26] -> [Ln 11, Col 31]"
                                                                                                        IterBegin: "[11, 26] (237)"
                                                                                                        IterEnd: "[11, 31] (242)"
                                                                                                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                    IterBegin: "[11, 26] (237)"
                                                                                                    IterEnd: "[11, 31] (242)"
                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                IterBegin: "[11, 26] (237)"
                                                                                                IterEnd: "[11, 31] (242)"
                                                                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                            IterBegin: "[11, 26] (237)"
                                                                                            IterEnd: "[11, 31] (242)"
                                                                                            Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[11, 26] (237)"
                                                                                        IterEnd: "[11, 31] (242)"
                                                                                        Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[11, 31] (242)"
                                                                                        IterEnd: "[11, 32] (243)"
                                                                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(242, 243), match=':'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[11, 32] (243)"
                                                                                                IterEnd: "[12, 1] (244)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 244
                                                                                                  Start: 243
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[12, 1] (244)"
                                                                                                IterEnd: "[12, 25] (268)"
                                                                                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                                  End: 268
                                                                                                  Start: 244
                                                                                                  Value: 24
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                    IsIgnored: False
                                                                                                                    IterBegin: "[12, 25] (268)"
                                                                                                                    IterEnd: "[12, 31] (274)"
                                                                                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                      Match: "<_sre.SRE_Match object; span=(268, 274), match='value2'>"
                                                                                                                    Whitespace: None
                                                                                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                  Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                    Name: "value2"
                                                                                                                  Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                    Name: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                                    Self__: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                                IterBegin: "[12, 25] (268)"
                                                                                                                IterEnd: "[12, 31] (274)"
                                                                                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                            IterBegin: "[12, 25] (268)"
                                                                                                            IterEnd: "[12, 31] (274)"
                                                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                          Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                                                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                              Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                Name: "value2"
                                                                                                              Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                Name: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                                Self__: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                          Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                                                            Name: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                            Self__: "[Ln 12, Col 25] -> [Ln 12, Col 31]"
                                                                                                        IterBegin: "[12, 25] (268)"
                                                                                                        IterEnd: "[12, 31] (274)"
                                                                                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                    IterBegin: "[12, 25] (268)"
                                                                                                    IterEnd: "[12, 31] (274)"
                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                IterBegin: "[12, 25] (268)"
                                                                                                IterEnd: "[12, 31] (274)"
                                                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[12, 31] (274)"
                                                                                                IterEnd: "[14, 1] (276)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 276
                                                                                                  Start: 274
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[14, 1] (276)"
                                                                                                IterEnd: "[14, 21] (296)"
                                                                                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                                  {}
                                                                                                Whitespace: None
                                                                                            IterBegin: "[11, 32] (243)"
                                                                                            IterEnd: "[14, 21] (296)"
                                                                                            Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[11, 32] (243)"
                                                                                        IterEnd: "[14, 21] (296)"
                                                                                        Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                    IterBegin: "[11, 21] (232)"
                                                                                    IterEnd: "[14, 21] (296)"
                                                                                    Type: "Case <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[14, 21] (296)"
                                                                                        IterEnd: "[14, 25] (300)"
                                                                                        Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(296, 300), match='case'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                            IsIgnored: False
                                                                                                            IterBegin: "[14, 26] (301)"
                                                                                                            IterEnd: "[14, 31] (306)"
                                                                                                            Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                              Match: "<_sre.SRE_Match object; span=(301, 306), match='Char2'>"
                                                                                                            Whitespace:
                                                                                                              - 300
                                                                                                              - 301
                                                                                                        Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                                                                          Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                                                                            Modifier: None
                                                                                                            TypeName: "Char2"
                                                                                                          Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                                                                            Modifier: None
                                                                                                            Self__: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                                                            TypeName: "[Ln 14, Col 26] -> [Ln 14, Col 31]"
                                                                                                        IterBegin: "[14, 26] (301)"
                                                                                                        IterEnd: "[14, 31] (306)"
                                                                                                        Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                    IterBegin: "[14, 26] (301)"
                                                                                                    IterEnd: "[14, 31] (306)"
                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                IterBegin: "[14, 26] (301)"
                                                                                                IterEnd: "[14, 31] (306)"
                                                                                                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                            IterBegin: "[14, 26] (301)"
                                                                                            IterEnd: "[14, 31] (306)"
                                                                                            Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[14, 26] (301)"
                                                                                        IterEnd: "[14, 31] (306)"
                                                                                        Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[14, 31] (306)"
                                                                                        IterEnd: "[14, 32] (307)"
                                                                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(306, 307), match=':'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[14, 32] (307)"
                                                                                                IterEnd: "[15, 1] (308)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 308
                                                                                                  Start: 307
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[15, 1] (308)"
                                                                                                IterEnd: "[15, 25] (332)"
                                                                                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                                  End: 332
                                                                                                  Start: 308
                                                                                                  Value: 24
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                    IsIgnored: False
                                                                                                                    IterBegin: "[15, 25] (332)"
                                                                                                                    IterEnd: "[15, 31] (338)"
                                                                                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                      Match: "<_sre.SRE_Match object; span=(332, 338), match='value3'>"
                                                                                                                    Whitespace: None
                                                                                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                  Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                    Name: "value3"
                                                                                                                  Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                    Name: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                                    Self__: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                                IterBegin: "[15, 25] (332)"
                                                                                                                IterEnd: "[15, 31] (338)"
                                                                                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                            IterBegin: "[15, 25] (332)"
                                                                                                            IterEnd: "[15, 31] (338)"
                                                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                          Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                                                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                              Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                Name: "value3"
                                                                                                              Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                Name: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                                Self__: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                          Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                                                            Name: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                            Self__: "[Ln 15, Col 25] -> [Ln 15, Col 31]"
                                                                                                        IterBegin: "[15, 25] (332)"
                                                                                                        IterEnd: "[15, 31] (338)"
                                                                                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                    IterBegin: "[15, 25] (332)"
                                                                                                    IterEnd: "[15, 31] (338)"
                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                IterBegin: "[15, 25] (332)"
                                                                                                IterEnd: "[15, 31] (338)"
                                                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[15, 31] (338)"
                                                                                                IterEnd: "[17, 1] (340)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 340
                                                                                                  Start: 338
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[17, 1] (340)"
                                                                                                IterEnd: "[17, 21] (360)"
                                                                                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                                  {}
                                                                                                Whitespace: None
                                                                                            IterBegin: "[14, 32] (307)"
                                                                                            IterEnd: "[17, 21] (360)"
                                                                                            Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[14, 32] (307)"
                                                                                        IterEnd: "[17, 21] (360)"
                                                                                        Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                    IterBegin: "[14, 21] (296)"
                                                                                    IterEnd: "[17, 21] (360)"
                                                                                    Type: "Case <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[11, 21] (232)"
                                                                                IterEnd: "[17, 21] (360)"
                                                                                Type: "Repeat: {Case, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[17, 21] (360)"
                                                                                        IterEnd: "[17, 28] (367)"
                                                                                        Type: "'default' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(360, 367), match='default'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[17, 28] (367)"
                                                                                        IterEnd: "[17, 29] (368)"
                                                                                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(367, 368), match=':'>"
                                                                                        Whitespace: None
                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[17, 29] (368)"
                                                                                                IterEnd: "[18, 1] (369)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 369
                                                                                                  Start: 368
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[18, 1] (369)"
                                                                                                IterEnd: "[18, 25] (393)"
                                                                                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                                                                  End: 393
                                                                                                  Start: 369
                                                                                                  Value: 24
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                    Children:
                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                        Children:
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                            IsIgnored: False
                                                                                                            IterBegin: "[18, 25] (393)"
                                                                                                            IterEnd: "[18, 26] (394)"
                                                                                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                              Match: "<_sre.SRE_Match object; span=(393, 394), match='('>"
                                                                                                            Whitespace: None
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                            Children:
                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                Children:
                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                    Children:
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                Children:
                                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                    Children:
                                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                        Children:
                                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                            IsIgnored: False
                                                                                                                                            IterBegin: "[19, 29] (423)"
                                                                                                                                            IterEnd: "[19, 33] (427)"
                                                                                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                              Match: "<_sre.SRE_Match object; span=(423, 427), match='true'>"
                                                                                                                                            Whitespace: None
                                                                                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                          Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                                            Name: "true"
                                                                                                                                          Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                                            Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                            Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                        IterBegin: "[19, 29] (423)"
                                                                                                                                        IterEnd: "[19, 33] (427)"
                                                                                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                                    IterBegin: "[19, 29] (423)"
                                                                                                                                    IterEnd: "[19, 33] (427)"
                                                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                                  Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                                                                                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                      Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                                        Name: "true"
                                                                                                                                      Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                                        Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                        Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                  Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                                                                                    Name: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                    Self__: "[Ln 19, Col 29] -> [Ln 19, Col 33]"
                                                                                                                                IterBegin: "[19, 29] (423)"
                                                                                                                                IterEnd: "[19, 33] (427)"
                                                                                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                            IterBegin: "[19, 29] (423)"
                                                                                                                            IterEnd: "[19, 33] (427)"
                                                                                                                            Type: "Left Recursive Wrapper <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                        IterBegin: "[19, 29] (423)"
                                                                                                                        IterEnd: "[19, 33] (427)"
                                                                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                        IsIgnored: False
                                                                                                                        IterBegin: "[20, 29] (456)"
                                                                                                                        IterEnd: "[20, 31] (458)"
                                                                                                                        Type: "'if' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match: "<_sre.SRE_Match object; span=(456, 458), match='if'>"
                                                                                                                        Whitespace: None
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                Children:
                                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                    Children:
                                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                        Children:
                                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                            IsIgnored: False
                                                                                                                                            IterBegin: "[20, 32] (459)"
                                                                                                                                            IterEnd: "[20, 37] (464)"
                                                                                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                              Match: "<_sre.SRE_Match object; span=(459, 464), match='cond1'>"
                                                                                                                                            Whitespace:
                                                                                                                                              - 458
                                                                                                                                              - 459
                                                                                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                          Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                                            Name: "cond1"
                                                                                                                                          Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                                            Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                            Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                        IterBegin: "[20, 32] (459)"
                                                                                                                                        IterEnd: "[20, 37] (464)"
                                                                                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                                    IterBegin: "[20, 32] (459)"
                                                                                                                                    IterEnd: "[20, 37] (464)"
                                                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                                  Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                                                                                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                      Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                                        Name: "cond1"
                                                                                                                                      Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                                        Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                        Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                  Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                                                                                    Name: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                    Self__: "[Ln 20, Col 32] -> [Ln 20, Col 37]"
                                                                                                                                IterBegin: "[20, 32] (459)"
                                                                                                                                IterEnd: "[20, 37] (464)"
                                                                                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                            IterBegin: "[20, 32] (459)"
                                                                                                                            IterEnd: "[20, 37] (464)"
                                                                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                        IterBegin: "[20, 32] (459)"
                                                                                                                        IterEnd: "[20, 37] (464)"
                                                                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                        IsIgnored: False
                                                                                                                        IterBegin: "[20, 38] (465)"
                                                                                                                        IterEnd: "[20, 42] (469)"
                                                                                                                        Type: "'else' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                          Match: "<_sre.SRE_Match object; span=(465, 469), match='else'>"
                                                                                                                        Whitespace:
                                                                                                                          - 464
                                                                                                                          - 465
                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                        Children:
                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                            Children:
                                                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                Children:
                                                                                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                    Children:
                                                                                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                                                                                        Children:
                                                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                                                            IsIgnored: False
                                                                                                                                            IterBegin: "[21, 29] (498)"
                                                                                                                                            IterEnd: "[21, 34] (503)"
                                                                                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                                                              Match: "<_sre.SRE_Match object; span=(498, 503), match='false'>"
                                                                                                                                            Whitespace: None
                                                                                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                          Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                                            Name: "false"
                                                                                                                                          Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                                            Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                            Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                        IterBegin: "[21, 29] (498)"
                                                                                                                                        IterEnd: "[21, 34] (503)"
                                                                                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                                    IterBegin: "[21, 29] (498)"
                                                                                                                                    IterEnd: "[21, 34] (503)"
                                                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                                                                                  Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                                                                                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                                                                                      Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                                                                                        Name: "false"
                                                                                                                                      Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                                                                                        Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                        Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                  Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                                                                                    Name: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                    Self__: "[Ln 21, Col 29] -> [Ln 21, Col 34]"
                                                                                                                                IterBegin: "[21, 29] (498)"
                                                                                                                                IterEnd: "[21, 34] (503)"
                                                                                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                            IterBegin: "[21, 29] (498)"
                                                                                                                            IterEnd: "[21, 34] (503)"
                                                                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                                        IterBegin: "[21, 29] (498)"
                                                                                                                        IterEnd: "[21, 34] (503)"
                                                                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                                    IterBegin: "[19, 29] (423)"
                                                                                                                    IterEnd: "[21, 34] (503)"
                                                                                                                    Type: "Ternary Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                                IterBegin: "[19, 29] (423)"
                                                                                                                IterEnd: "[21, 34] (503)"
                                                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                            IterBegin: "[19, 29] (423)"
                                                                                                            IterEnd: "[21, 34] (503)"
                                                                                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                            IsIgnored: False
                                                                                                            IterBegin: "[22, 25] (528)"
                                                                                                            IterEnd: "[22, 26] (529)"
                                                                                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                                                              Match: "<_sre.SRE_Match object; span=(528, 529), match=')'>"
                                                                                                            Whitespace: None
                                                                                                        IterBegin: "[18, 25] (393)"
                                                                                                        IterEnd: "[22, 26] (529)"
                                                                                                        Type: "Group Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                                    IterBegin: "[18, 25] (393)"
                                                                                                    IterEnd: "[22, 26] (529)"
                                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                                IterBegin: "[18, 25] (393)"
                                                                                                IterEnd: "[22, 26] (529)"
                                                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[22, 26] (529)"
                                                                                                IterEnd: "[23, 1] (530)"
                                                                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                                                                  End: 530
                                                                                                  Start: 529
                                                                                                Whitespace: None
                                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                                IsIgnored: False
                                                                                                IterBegin: "[23, 1] (530)"
                                                                                                IterEnd: "[23, 1] (530)"
                                                                                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                                  {}
                                                                                                Whitespace: None
                                                                                            IterBegin: "[17, 29] (368)"
                                                                                            IterEnd: "[23, 1] (530)"
                                                                                            Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                        IterBegin: "[17, 29] (368)"
                                                                                        IterEnd: "[23, 1] (530)"
                                                                                        Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                                    IterBegin: "[17, 21] (360)"
                                                                                    IterEnd: "[23, 1] (530)"
                                                                                    Type: "Default <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[17, 21] (360)"
                                                                                IterEnd: "[23, 1] (530)"
                                                                                Type: "Repeat: {Default, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[23, 1] (530)"
                                                                                IterEnd: "[23, 1] (530)"
                                                                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                                  {}
                                                                                Whitespace: None
                                                                            IterBegin: "[6, 17] (107)"
                                                                            IterEnd: "[23, 1] (530)"
                                                                            Type: "Match <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[23, 1] (530)"
                                                                            IterEnd: "[23, 13] (542)"
                                                                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                                              {}
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[23, 13] (542)"
                                                                            IterEnd: "[23, 14] (543)"
                                                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(542, 543), match=')'>"
                                                                            Whitespace: None
                                                                        IterBegin: "[5, 13] (89)"
                                                                        IterEnd: "[23, 14] (543)"
                                                                        Type: "Allman-like <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[5, 13] (89)"
                                                                    IterEnd: "[23, 14] (543)"
                                                                    Type: "Style <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[5, 13] (89)"
                                                                IterEnd: "[23, 14] (543)"
                                                                Type: "Match Type Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[5, 13] (89)"
                                                            IterEnd: "[23, 14] (543)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[5, 13] (89)"
                                                        IterEnd: "[23, 14] (543)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[23, 14] (543)"
                                                        IterEnd: "[24, 1] (544)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 544
                                                          Start: 543
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[24, 1] (544)"
                                                        IterEnd: "[24, 9] (552)"
                                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                          {}
                                                        Whitespace: None
                                                    IterBegin: "[4, 19] (76)"
                                                    IterEnd: "[24, 9] (552)"
                                                    Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[4, 19] (76)"
                                                IterEnd: "[24, 9] (552)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[4, 9] (66)"
                                            IterEnd: "[24, 9] (552)"
                                            Type: "Case <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[24, 9] (552)"
                                                IterEnd: "[24, 13] (556)"
                                                Type: "'case' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(552, 556), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[24, 14] (557)"
                                                                    IterEnd: "[24, 18] (561)"
                                                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(557, 561), match='Int3'>"
                                                                    Whitespace:
                                                                      - 556
                                                                      - 557
                                                                Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                                                  Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                                    Modifier: None
                                                                    TypeName: "Int3"
                                                                  Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                                    Modifier: None
                                                                    Self__: "[Ln 24, Col 14] -> [Ln 24, Col 18]"
                                                                    TypeName: "[Ln 24, Col 14] -> [Ln 24, Col 18]"
                                                                IterBegin: "[24, 14] (557)"
                                                                IterEnd: "[24, 18] (561)"
                                                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[24, 14] (557)"
                                                            IterEnd: "[24, 18] (561)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[24, 14] (557)"
                                                        IterEnd: "[24, 18] (561)"
                                                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[24, 14] (557)"
                                                    IterEnd: "[24, 18] (561)"
                                                    Type: "Case Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[24, 14] (557)"
                                                IterEnd: "[24, 18] (561)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[24, 18] (561)"
                                                IterEnd: "[24, 19] (562)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(561, 562), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[24, 19] (562)"
                                                        IterEnd: "[25, 1] (563)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 563
                                                          Start: 562
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[25, 1] (563)"
                                                        IterEnd: "[25, 13] (575)"
                                                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                                          End: 575
                                                          Start: 563
                                                          Value: 12
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[25, 13] (575)"
                                                                            IterEnd: "[25, 19] (581)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(575, 581), match='value4'>"
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                            Name: "value4"
                                                                          Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                            Name: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                            Self__: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                        IterBegin: "[25, 13] (575)"
                                                                        IterEnd: "[25, 19] (581)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[25, 13] (575)"
                                                                    IterEnd: "[25, 19] (581)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                      Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                        Name: "value4"
                                                                      Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                        Name: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                        Self__: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                  Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                    Name: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                    Self__: "[Ln 25, Col 13] -> [Ln 25, Col 19]"
                                                                IterBegin: "[25, 13] (575)"
                                                                IterEnd: "[25, 19] (581)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[25, 13] (575)"
                                                            IterEnd: "[25, 19] (581)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[25, 13] (575)"
                                                        IterEnd: "[25, 19] (581)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[25, 19] (581)"
                                                        IterEnd: "[27, 1] (583)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 583
                                                          Start: 581
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[27, 1] (583)"
                                                        IterEnd: "[27, 9] (591)"
                                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                                          {}
                                                        Whitespace: None
                                                    IterBegin: "[24, 19] (562)"
                                                    IterEnd: "[27, 9] (591)"
                                                    Type: "Multiple Lines <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[24, 19] (562)"
                                                IterEnd: "[27, 9] (591)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[24, 9] (552)"
                                            IterEnd: "[27, 9] (591)"
                                            Type: "Case <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[3, 9] (40)"
                                        IterEnd: "[27, 9] (591)"
                                        Type: "Repeat: {Case, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[27, 9] (591)"
                                                IterEnd: "[27, 16] (598)"
                                                Type: "'default' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(591, 598), match='default'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[27, 16] (598)"
                                                IterEnd: "[27, 17] (599)"
                                                Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(598, 599), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[27, 18] (600)"
                                                                            IterEnd: "[27, 24] (606)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(600, 606), match='value5'>"
                                                                            Whitespace:
                                                                              - 599
                                                                              - 600
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                            Name: "value5"
                                                                          Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                            Name: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                            Self__: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                        IterBegin: "[27, 18] (600)"
                                                                        IterEnd: "[27, 24] (606)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[27, 18] (600)"
                                                                    IterEnd: "[27, 24] (606)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Data: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerData'>
                                                                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                      Data: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerData'>
                                                                        Name: "value5"
                                                                      Regions: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerRegions'>
                                                                        Name: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                        Self__: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                  Regions: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerRegions'>
                                                                    Name: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                    Self__: "[Ln 27, Col 18] -> [Ln 27, Col 24]"
                                                                IterBegin: "[27, 18] (600)"
                                                                IterEnd: "[27, 24] (606)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[27, 18] (600)"
                                                            IterEnd: "[27, 24] (606)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[27, 18] (600)"
                                                        IterEnd: "[27, 24] (606)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[27, 24] (606)"
                                                        IterEnd: "[30, 1] (609)"
                                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                          End: 609
                                                          Start: 606
                                                        Whitespace: None
                                                    IterBegin: "[27, 18] (600)"
                                                    IterEnd: "[30, 1] (609)"
                                                    Type: "Single Line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[27, 18] (600)"
                                                IterEnd: "[30, 1] (609)"
                                                Type: "Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[27, 9] (591)"
                                            IterEnd: "[30, 1] (609)"
                                            Type: "Default <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[27, 9] (591)"
                                        IterEnd: "[30, 1] (609)"
                                        Type: "Repeat: {Default, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[30, 1] (609)"
                                        IterEnd: "[30, 1] (609)"
                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                          {}
                                        Whitespace: None
                                    IterBegin: "[2, 5] (14)"
                                    IterEnd: "[30, 1] (609)"
                                    Type: "Match <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[30, 1] (609)"
                                    IterEnd: "[30, 1] (609)"
                                    Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[30, 1] (609)"
                                    IterEnd: "[30, 2] (610)"
                                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(609, 610), match=')'>"
                                    Whitespace: None
                                IterBegin: "[1, 9] (8)"
                                IterEnd: "[30, 2] (610)"
                                Type: "Allman-like <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 9] (8)"
                            IterEnd: "[30, 2] (610)"
                            Type: "Style <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[1, 9] (8)"
                        IterEnd: "[30, 2] (610)"
                        Type: "Match Type Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 9] (8)"
                    IterEnd: "[30, 2] (610)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 9] (8)"
                IterEnd: "[30, 2] (610)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[30, 2] (610)"
                IterEnd: "[31, 1] (611)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 611
                  Start: 610
                Whitespace: None
            IterBegin: "[1, 1] (0)"
            IterEnd: "[31, 1] (611)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[31, 1] (611)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[31, 1] (611)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[31, 1] (611)"
Type: "<None>"
