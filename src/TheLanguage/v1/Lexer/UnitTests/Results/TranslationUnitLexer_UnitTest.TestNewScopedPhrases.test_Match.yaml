# <class 'v1.Lexer.Components.AST.Node'>
children:
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 1] (0)"
              end: "[1, 4] (3)"
            type: "Upper <class 'v1.Lexer.Components.Tokens.RegexToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(0, 3), match='ONE'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 1] (0)"
          end: "[1, 4] (3)"
        type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 1] (0)"
      end: "[1, 4] (3)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 4] (3)"
              end: "[2, 1] (4)"
            type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 3
                end: 4
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 4] (3)"
          end: "[2, 1] (4)"
        type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 4] (3)"
      end: "[2, 1] (4)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[2, 1] (4)"
              end: "[2, 5] (8)"
            type: "Indent <class 'v1.Lexer.Components.Tokens.IndentToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.IndentToken.MatchResult'>
              indent_value: 4
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 4
                end: 8
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[2, 1] (4)"
          end: "[2, 5] (8)"
        type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 1] (4)"
      end: "[2, 5] (8)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[2, 5] (8)"
              end: "[2, 8] (11)"
            type: "Lower <class 'v1.Lexer.Components.Tokens.RegexToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(8, 11), match='two'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[2, 5] (8)"
          end: "[2, 8] (11)"
        type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) / (Lower Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 5] (8)"
      end: "[2, 8] (11)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[2, 8] (11)"
              end: "[3, 1] (12)"
            type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 11
                end: 12
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[2, 8] (11)"
          end: "[3, 1] (12)"
        type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) / (Lower Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 8] (11)"
      end: "[3, 1] (12)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Leaf'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[3, 1] (12)"
              end: "[3, 1] (12)"
            type: "Dedent <class 'v1.Lexer.Components.Tokens.DedentToken'>"
            value: # <class 'v1.Lexer.Components.Tokens.DedentToken.MatchResult'>
              {}
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[3, 1] (12)"
          end: "[3, 1] (12)"
        type: "(Upper Phrase | Newline Phrase | Indent Phrase | Dedent Phrase) / (Lower Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[3, 1] (12)"
      end: "[3, 1] (12)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
  begin: "[1, 1] (0)"
  end: "[3, 1] (12)"
type: "<None>"
