# ----------------------------------------------------------------------
# |
# |  Visitor.py
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2022-04-13 10:51:32
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2022
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
"""Contains the Visitor object"""

import itertools
import os
import textwrap
import types

from contextlib import contextmanager
from io import StringIO
from typing import Any, List, Optional, Union

import CommonEnvironment
from CommonEnvironment.StreamDecorator import StreamDecorator

from CommonEnvironmentEx.Package import InitRelativeImports

# ----------------------------------------------------------------------
_script_fullpath                            = CommonEnvironment.ThisFullpath()
_script_dir, _script_name                   = os.path.split(_script_fullpath)
# ----------------------------------------------------------------------

with InitRelativeImports():
    from ...Parser.Parser import ParserInfo, RootStatementParserInfo

    from ...Parser.ParserInfos.Expressions.CallExpressionParserInfo import CallExpressionParserInfo
    from ...Parser.ParserInfos.Expressions.FuncOrTypeExpressionParserInfo import FuncOrTypeExpressionParserInfo

    from ...Parser.ParserInfos.Statements.ClassStatementParserInfo import ClassStatementParserInfo, ClassStatementDependencyParserInfo
    from ...Parser.ParserInfos.Statements.FuncDefinitionStatementParserInfo import FuncDefinitionStatementParserInfo
    from ...Parser.ParserInfos.Statements.FuncInvocationStatementParserInfo import FuncInvocationStatementParserInfo
    from ...Parser.ParserInfos.Statements.IfStatementParserInfo import IfStatementParserInfo
    from ...Parser.ParserInfos.Statements.ImportStatementParserInfo import ImportStatementParserInfo
    from ...Parser.ParserInfos.Statements.PassStatementParserInfo import PassStatementParserInfo
    from ...Parser.ParserInfos.Statements.SpecialMethodStatementParserInfo import SpecialMethodStatementParserInfo
    from ...Parser.ParserInfos.Statements.TypeAliasStatementParserInfo import TypeAliasStatementParserInfo


# ----------------------------------------------------------------------
class Visitor(object):
    # ----------------------------------------------------------------------
    def __init__(
        self,
        indent_spaces: Optional[int]=None,
    ):
        indent_spaces = indent_spaces or 4

        sink = StringIO()

        self._indent_text                   = " " * indent_spaces

        self._indent_stack: List[int]       = [0, ]
        self._stream_stack: List[Any]       = [sink, ]

    # ----------------------------------------------------------------------
    def __getattr__(
        self,
        name: str,
    ):
        index = name.find("ParserInfo__")
        if index != -1 and index + len("ParserInfo__") + 1 < len(name):
            return types.MethodType(self.__class__._DefaultDetailMethod, self)  # pylint: disable=protected-access

        raise AttributeError(name)

    # ----------------------------------------------------------------------
    def GetContent(self) -> str:
        assert len(self._stream_stack) == 1

        content = self._stream_stack[-1].getvalue()
        self._stream_stack.pop()

        content = "\n".join(line.rstrip() for line in content.splitlines())

        if not content.endswith("\n"):
            content += "\n"

        return content

    # ----------------------------------------------------------------------
    @contextmanager
    def OnRootStatementParserInfo(
        self,
        parser_info: RootStatementParserInfo,
    ):
        self._stream.write(
            textwrap.dedent(
                """\
                # ----------------------------------------------------------------------
                # This code was automatically generated by the PythonTarget. Any changes made to this
                # file will be overwritten during the next generation!
                # ----------------------------------------------------------------------

                """,
            ),
        )

        if parser_info.documentation is not None:
            self._stream.write(
                textwrap.dedent(
                    '''
                    """\\
                    {}
                    """

                    ''',
                ).format(parser_info.documentation),
            )

        yield

    # ----------------------------------------------------------------------
    # |
    # |  Expressions
    # |
    # ----------------------------------------------------------------------
    @contextmanager
    def OnCallExpressionParserInfo(
        self,
        parser_info: CallExpressionParserInfo,
    ):
        yield

    # ----------------------------------------------------------------------
    @contextmanager
    def OnFuncOrTypeExpressionParserInfo(
        self,
        parser_info: FuncOrTypeExpressionParserInfo,
    ):
        yield

    # ----------------------------------------------------------------------
    # |
    # |  Statements
    # |
    # ----------------------------------------------------------------------
    @contextmanager
    def OnClassStatementParserInfo(
        self,
        parser_info: ClassStatementParserInfo,
    ):
        self._stream.write("class {}(".format(parser_info.name))

        self._stream.write(
            ", ".join(
                self._GetStandardTypeName(dependency.type) for dependency in itertools.chain(
                    (parser_info.extends or []),
                    (parser_info.implements or []),
                    (parser_info.uses or []),
                )
            ),
        )

        if not parser_info.extends and not parser_info.implements and not parser_info.uses:
            self._stream.write("object")

        self._stream.write("):\n")
        self._Indent()

        yield

        self._Dedent()
        self._stream.write("\n")

    # ----------------------------------------------------------------------
    @contextmanager
    def OnClassStatementDependencyParserInfo(
        self,
        parser_info: ClassStatementDependencyParserInfo,
    ):
        yield

    # ----------------------------------------------------------------------
    @contextmanager
    def OnFuncDefinitionStatementParserInfo(
        self,
        parser_info: FuncDefinitionStatementParserInfo,
    ):
        yield

    # ----------------------------------------------------------------------
    @contextmanager
    def OnFuncInvocationStatementParserInfo(
        self,
        parser_info: FuncInvocationStatementParserInfo,
    ):
        yield

    # ----------------------------------------------------------------------
    @contextmanager
    def OnIfStatementParserInfo(
        self,
        parser_info: IfStatementParserInfo,
    ):
        yield

    # ----------------------------------------------------------------------
    @contextmanager
    def OnImportStatementParserInfo(
        self,
        parser_info: ImportStatementParserInfo,
    ):
        yield

    # ----------------------------------------------------------------------
    @contextmanager
    def OnPassStatementParserInfo(
        self,
        parser_info: PassStatementParserInfo,  # pylint: disable=unused-argument
    ):
        self._stream.write("pass\n")
        yield

    # ----------------------------------------------------------------------
    @contextmanager
    def OnSpecialMethodStatementParserInfo(
        self,
        parser_info: SpecialMethodStatementParserInfo,
    ):
        yield

    # ----------------------------------------------------------------------
    @contextmanager
    def OnTypeAliasStatementParserInfo(
        self,
        parser_info: TypeAliasStatementParserInfo,
    ):
        yield

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    @property
    def _stream(self):
        return self._stream_stack[-1]

    # ----------------------------------------------------------------------
    def _Indent(self) -> None:
        assert self._stream_stack

        self._stream_stack.append(
            StreamDecorator(
                self._stream_stack[-1],
                line_prefix=self._indent_text,
            ),
        )

        self._indent_stack.append(1)

    # ----------------------------------------------------------------------
    def _Dedent(self) -> None:
        assert self._stream_stack
        self._stream_stack.pop()

        assert self._indent_stack
        self._indent_stack.pop()

    # ----------------------------------------------------------------------
    def _ReplaceIndent(self) -> None:
        assert len(self._stream_stack) > 1
        assert self._indent_stack

        self._indent_stack[-1] += 1

        self._stream_stack[-1] = StreamDecorator(
            self._stream_stack[-2],
            line_prefix=self._indent_stack[-1] * self._indent_text,
        )

    # ----------------------------------------------------------------------
    def _DefaultDetailMethod(
        self,
        parser_info_or_infos: Union[ParserInfo, List[ParserInfo]],
        *,
        include_disabled: bool,
    ):
        if isinstance(parser_info_or_infos, list):
            for parser_info in parser_info_or_infos:
                parser_info.Accept(
                    self,
                    include_disabled=include_disabled,
                )
        else:
            parser_info_or_infos.Accept(
                self,
                include_disabled=include_disabled,
            )

    # ----------------------------------------------------------------------
    @staticmethod
    def _GetStandardTypeName(
        parser_info,
    ) -> str:
        return parser_info.value
