0) StartPhrase, "Dynamic Phrase"
1) StartPhrase, "All Phrases <Prefix>"
2) StartPhrase, "Lower"
3) OnInternalPhrase, 0, 3
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 1] (0)"
        end: "[1, 4] (3)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
    phrase: "Lower"
4) EndPhrase, "Lower" [True]
5) StartPhrase, "Upper"
6) EndPhrase, "Upper" [False]
7) StartPhrase, "Neg"
8) StartPhrase, "'-'"
9) EndPhrase, "'-'" [False]
10) EndPhrase, "Neg" [False]
11) OnInternalPhrase, 0, 3
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 1] (0)"
          end: "[1, 4] (3)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
12) EndPhrase, "All Phrases <Prefix>" [True]
13) StartPhrase, "All Phrases <Suffix>"
14) StartPhrase, "'+'"
15) OnInternalPhrase, 4, 5
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 5] (4)"
        end: "[1, 6] (5)"
      token: "'+'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
    phrase: "'+'"
16) EndPhrase, "'+'" [True]
17) StartPhrase, "DynamicPhrasesType.Statements"
18) StartPhrase, "All Phrases <Prefix>"
19) StartPhrase, "Lower"
20) OnInternalPhrase, 6, 10
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 7] (6)"
        end: "[1, 11] (10)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
    phrase: "Lower"
21) EndPhrase, "Lower" [True]
22) StartPhrase, "Upper"
23) EndPhrase, "Upper" [False]
24) StartPhrase, "Neg"
25) StartPhrase, "'-'"
26) EndPhrase, "'-'" [False]
27) EndPhrase, "Neg" [False]
28) OnInternalPhrase, 6, 10
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 7] (6)"
          end: "[1, 11] (10)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
29) EndPhrase, "All Phrases <Prefix>" [True]
30) StartPhrase, "All Phrases <Suffix>"
31) StartPhrase, "'+'"
32) EndPhrase, "'+'" [False]
33) StartPhrase, "'-'"
34) EndPhrase, "'-'" [False]
35) StartPhrase, "'*'"
36) EndPhrase, "'*'" [False]
37) StartPhrase, "'/'"
38) EndPhrase, "'/'" [False]
39) StartPhrase, "'if'"
40) OnInternalPhrase, 11, 13
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 12] (11)"
        end: "[1, 14] (13)"
      token: "'if'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
    phrase: "'if'"
41) EndPhrase, "'if'" [True]
42) StartPhrase, "DynamicPhrasesType.Statements"
43) StartPhrase, "All Phrases <Prefix>"
44) StartPhrase, "Lower"
45) EndPhrase, "Lower" [False]
46) StartPhrase, "Upper"
47) OnInternalPhrase, 14, 23
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 15] (14)"
        end: "[1, 24] (23)"
      token: "Upper"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
    phrase: "Upper"
48) EndPhrase, "Upper" [True]
49) StartPhrase, "Neg"
50) StartPhrase, "'-'"
51) EndPhrase, "'-'" [False]
52) EndPhrase, "Neg" [False]
53) OnInternalPhrase, 14, 23
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 15] (14)"
          end: "[1, 24] (23)"
        token: "Upper"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
      phrase: "Upper"
    phrase: "All Phrases <Prefix>"
54) EndPhrase, "All Phrases <Prefix>" [True]
55) StartPhrase, "All Phrases <Suffix>"
56) StartPhrase, "'+'"
57) EndPhrase, "'+'" [False]
58) StartPhrase, "'-'"
59) EndPhrase, "'-'" [False]
60) StartPhrase, "'*'"
61) EndPhrase, "'*'" [False]
62) StartPhrase, "'/'"
63) EndPhrase, "'/'" [False]
64) StartPhrase, "'if'"
65) EndPhrase, "'if'" [False]
66) StartPhrase, "'['"
67) EndPhrase, "'['" [False]
68) EndPhrase, "All Phrases <Suffix>" [False]
69) OnInternalPhrase, 14, 23
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: False
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 15] (14)"
            end: "[1, 24] (23)"
          token: "Upper"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
        phrase: "Upper"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
70) EndPhrase, "DynamicPhrasesType.Statements" [True]
71) StartPhrase, "'else'"
72) OnInternalPhrase, 24, 28
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 25] (24)"
        end: "[1, 29] (28)"
      token: "'else'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
    phrase: "'else'"
73) EndPhrase, "'else'" [True]
74) StartPhrase, "DynamicPhrasesType.Statements"
75) StartPhrase, "All Phrases <Prefix>"
76) StartPhrase, "Lower"
77) OnInternalPhrase, 29, 34
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 30] (29)"
        end: "[1, 35] (34)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
    phrase: "Lower"
78) EndPhrase, "Lower" [True]
79) StartPhrase, "Upper"
80) EndPhrase, "Upper" [False]
81) StartPhrase, "Neg"
82) StartPhrase, "'-'"
83) EndPhrase, "'-'" [False]
84) EndPhrase, "Neg" [False]
85) OnInternalPhrase, 29, 34
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 30] (29)"
          end: "[1, 35] (34)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
86) EndPhrase, "All Phrases <Prefix>" [True]
87) StartPhrase, "All Phrases <Suffix>"
88) StartPhrase, "'+'"
89) EndPhrase, "'+'" [False]
90) StartPhrase, "'-'"
91) OnInternalPhrase, 35, 36
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 36] (35)"
        end: "[1, 37] (36)"
      token: "'-'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
    phrase: "'-'"
92) EndPhrase, "'-'" [True]
93) StartPhrase, "DynamicPhrasesType.Statements"
94) StartPhrase, "All Phrases <Prefix>"
95) StartPhrase, "Lower"
96) OnInternalPhrase, 37, 42
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 38] (37)"
        end: "[1, 43] (42)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
    phrase: "Lower"
97) EndPhrase, "Lower" [True]
98) StartPhrase, "Upper"
99) EndPhrase, "Upper" [False]
100) StartPhrase, "Neg"
101) StartPhrase, "'-'"
102) EndPhrase, "'-'" [False]
103) EndPhrase, "Neg" [False]
104) OnInternalPhrase, 37, 42
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 38] (37)"
          end: "[1, 43] (42)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
105) EndPhrase, "All Phrases <Prefix>" [True]
106) StartPhrase, "All Phrases <Suffix>"
107) StartPhrase, "'+'"
108) EndPhrase, "'+'" [False]
109) StartPhrase, "'-'"
110) EndPhrase, "'-'" [False]
111) StartPhrase, "'*'"
112) EndPhrase, "'*'" [False]
113) StartPhrase, "'/'"
114) EndPhrase, "'/'" [False]
115) StartPhrase, "'if'"
116) EndPhrase, "'if'" [False]
117) StartPhrase, "'['"
118) OnInternalPhrase, 42, 43
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 43] (42)"
        end: "[1, 44] (43)"
      token: "'['"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
    phrase: "'['"
119) EndPhrase, "'['" [True]
120) StartPhrase, "DynamicPhrasesType.Statements"
121) StartPhrase, "All Phrases <Prefix>"
122) StartPhrase, "Lower"
123) OnInternalPhrase, 43, 44
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 44] (43)"
        end: "[1, 45] (44)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
    phrase: "Lower"
124) EndPhrase, "Lower" [True]
125) StartPhrase, "Upper"
126) EndPhrase, "Upper" [False]
127) StartPhrase, "Neg"
128) StartPhrase, "'-'"
129) EndPhrase, "'-'" [False]
130) EndPhrase, "Neg" [False]
131) OnInternalPhrase, 43, 44
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 44] (43)"
          end: "[1, 45] (44)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
132) EndPhrase, "All Phrases <Prefix>" [True]
133) StartPhrase, "All Phrases <Suffix>"
134) StartPhrase, "'+'"
135) EndPhrase, "'+'" [False]
136) StartPhrase, "'-'"
137) EndPhrase, "'-'" [False]
138) StartPhrase, "'*'"
139) EndPhrase, "'*'" [False]
140) StartPhrase, "'/'"
141) EndPhrase, "'/'" [False]
142) StartPhrase, "'if'"
143) EndPhrase, "'if'" [False]
144) StartPhrase, "'['"
145) EndPhrase, "'['" [False]
146) EndPhrase, "All Phrases <Suffix>" [False]
147) OnInternalPhrase, 43, 44
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: False
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 44] (43)"
            end: "[1, 45] (44)"
          token: "Lower"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
        phrase: "Lower"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
148) EndPhrase, "DynamicPhrasesType.Statements" [True]
149) StartPhrase, "']'"
150) OnInternalPhrase, 44, 45
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 45] (44)"
        end: "[1, 46] (45)"
      token: "']'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
    phrase: "']'"
151) EndPhrase, "']'" [True]
152) OnInternalPhrase, 42, 45
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 38] (37)"
                  end: "[1, 43] (42)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 43] (42)"
              end: "[1, 44] (43)"
            token: "'['"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
          phrase: "'['"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 44] (43)"
                  end: "[1, 45] (44)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 45] (44)"
              end: "[1, 46] (45)"
            token: "']'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
          phrase: "']'"
      phrase: "Index"
    phrase: "All Phrases <Suffix>"
153) EndPhrase, "All Phrases <Suffix>" [True]
154) StartPhrase, "All Phrases <Suffix>"
155) StartPhrase, "'+'"
156) EndPhrase, "'+'" [False]
157) StartPhrase, "'-'"
158) EndPhrase, "'-'" [False]
159) StartPhrase, "'*'"
160) EndPhrase, "'*'" [False]
161) StartPhrase, "'/'"
162) EndPhrase, "'/'" [False]
163) StartPhrase, "'if'"
164) EndPhrase, "'if'" [False]
165) StartPhrase, "'['"
166) OnInternalPhrase, 45, 46
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 46] (45)"
        end: "[1, 47] (46)"
      token: "'['"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
    phrase: "'['"
167) EndPhrase, "'['" [True]
168) StartPhrase, "DynamicPhrasesType.Statements"
169) StartPhrase, "All Phrases <Prefix>"
170) StartPhrase, "Lower"
171) OnInternalPhrase, 46, 47
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 47] (46)"
        end: "[1, 48] (47)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
    phrase: "Lower"
172) EndPhrase, "Lower" [True]
173) StartPhrase, "Upper"
174) EndPhrase, "Upper" [False]
175) StartPhrase, "Neg"
176) StartPhrase, "'-'"
177) EndPhrase, "'-'" [False]
178) EndPhrase, "Neg" [False]
179) OnInternalPhrase, 46, 47
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 47] (46)"
          end: "[1, 48] (47)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
180) EndPhrase, "All Phrases <Prefix>" [True]
181) StartPhrase, "All Phrases <Suffix>"
182) StartPhrase, "'+'"
183) EndPhrase, "'+'" [False]
184) StartPhrase, "'-'"
185) EndPhrase, "'-'" [False]
186) StartPhrase, "'*'"
187) EndPhrase, "'*'" [False]
188) StartPhrase, "'/'"
189) EndPhrase, "'/'" [False]
190) StartPhrase, "'if'"
191) EndPhrase, "'if'" [False]
192) StartPhrase, "'['"
193) EndPhrase, "'['" [False]
194) EndPhrase, "All Phrases <Suffix>" [False]
195) OnInternalPhrase, 46, 47
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: False
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 47] (46)"
            end: "[1, 48] (47)"
          token: "Lower"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
        phrase: "Lower"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
196) EndPhrase, "DynamicPhrasesType.Statements" [True]
197) StartPhrase, "']'"
198) OnInternalPhrase, 47, 48
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 48] (47)"
        end: "[1, 49] (48)"
      token: "']'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
    phrase: "']'"
199) EndPhrase, "']'" [True]
200) OnInternalPhrase, 45, 48
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 38] (37)"
                          end: "[1, 43] (42)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 43] (42)"
                      end: "[1, 44] (43)"
                    token: "'['"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                  phrase: "'['"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 44] (43)"
                          end: "[1, 45] (44)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 45] (44)"
                      end: "[1, 46] (45)"
                    token: "']'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                  phrase: "']'"
              phrase: "Index"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 46] (45)"
              end: "[1, 47] (46)"
            token: "'['"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
          phrase: "'['"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 47] (46)"
                  end: "[1, 48] (47)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 48] (47)"
              end: "[1, 49] (48)"
            token: "']'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
          phrase: "']'"
      phrase: "Index"
    phrase: "All Phrases <Suffix>"
201) EndPhrase, "All Phrases <Suffix>" [True]
202) StartPhrase, "All Phrases <Suffix>"
203) StartPhrase, "'+'"
204) EndPhrase, "'+'" [False]
205) StartPhrase, "'-'"
206) EndPhrase, "'-'" [False]
207) StartPhrase, "'*'"
208) EndPhrase, "'*'" [False]
209) StartPhrase, "'/'"
210) EndPhrase, "'/'" [False]
211) StartPhrase, "'if'"
212) EndPhrase, "'if'" [False]
213) StartPhrase, "'['"
214) OnInternalPhrase, 48, 49
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 49] (48)"
        end: "[1, 50] (49)"
      token: "'['"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
    phrase: "'['"
215) EndPhrase, "'['" [True]
216) StartPhrase, "DynamicPhrasesType.Statements"
217) StartPhrase, "All Phrases <Prefix>"
218) StartPhrase, "Lower"
219) OnInternalPhrase, 49, 50
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 50] (49)"
        end: "[1, 51] (50)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
    phrase: "Lower"
220) EndPhrase, "Lower" [True]
221) StartPhrase, "Upper"
222) EndPhrase, "Upper" [False]
223) StartPhrase, "Neg"
224) StartPhrase, "'-'"
225) EndPhrase, "'-'" [False]
226) EndPhrase, "Neg" [False]
227) OnInternalPhrase, 49, 50
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 50] (49)"
          end: "[1, 51] (50)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
228) EndPhrase, "All Phrases <Prefix>" [True]
229) StartPhrase, "All Phrases <Suffix>"
230) StartPhrase, "'+'"
231) EndPhrase, "'+'" [False]
232) StartPhrase, "'-'"
233) EndPhrase, "'-'" [False]
234) StartPhrase, "'*'"
235) EndPhrase, "'*'" [False]
236) StartPhrase, "'/'"
237) EndPhrase, "'/'" [False]
238) StartPhrase, "'if'"
239) EndPhrase, "'if'" [False]
240) StartPhrase, "'['"
241) EndPhrase, "'['" [False]
242) EndPhrase, "All Phrases <Suffix>" [False]
243) OnInternalPhrase, 49, 50
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: False
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 50] (49)"
            end: "[1, 51] (50)"
          token: "Lower"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
        phrase: "Lower"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
244) EndPhrase, "DynamicPhrasesType.Statements" [True]
245) StartPhrase, "']'"
246) OnInternalPhrase, 50, 51
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 51] (50)"
        end: "[1, 52] (51)"
      token: "']'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
    phrase: "']'"
247) EndPhrase, "']'" [True]
248) OnInternalPhrase, 48, 51
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 38] (37)"
                                  end: "[1, 43] (42)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 43] (42)"
                              end: "[1, 44] (43)"
                            token: "'['"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                          phrase: "'['"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 44] (43)"
                                  end: "[1, 45] (44)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 45] (44)"
                              end: "[1, 46] (45)"
                            token: "']'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                          phrase: "']'"
                      phrase: "Index"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 46] (45)"
                      end: "[1, 47] (46)"
                    token: "'['"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                  phrase: "'['"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 47] (46)"
                          end: "[1, 48] (47)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 48] (47)"
                      end: "[1, 49] (48)"
                    token: "']'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                  phrase: "']'"
              phrase: "Index"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 49] (48)"
              end: "[1, 50] (49)"
            token: "'['"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
          phrase: "'['"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 50] (49)"
                  end: "[1, 51] (50)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 51] (50)"
              end: "[1, 52] (51)"
            token: "']'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
          phrase: "']'"
      phrase: "Index"
    phrase: "All Phrases <Suffix>"
249) EndPhrase, "All Phrases <Suffix>" [True]
250) StartPhrase, "All Phrases <Suffix>"
251) StartPhrase, "'+'"
252) EndPhrase, "'+'" [False]
253) StartPhrase, "'-'"
254) EndPhrase, "'-'" [False]
255) StartPhrase, "'*'"
256) EndPhrase, "'*'" [False]
257) StartPhrase, "'/'"
258) EndPhrase, "'/'" [False]
259) StartPhrase, "'if'"
260) EndPhrase, "'if'" [False]
261) StartPhrase, "'['"
262) OnInternalPhrase, 51, 52
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 52] (51)"
        end: "[1, 53] (52)"
      token: "'['"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
    phrase: "'['"
263) EndPhrase, "'['" [True]
264) StartPhrase, "DynamicPhrasesType.Statements"
265) StartPhrase, "All Phrases <Prefix>"
266) StartPhrase, "Lower"
267) OnInternalPhrase, 52, 53
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 53] (52)"
        end: "[1, 54] (53)"
      token: "Lower"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
    phrase: "Lower"
268) EndPhrase, "Lower" [True]
269) StartPhrase, "Upper"
270) EndPhrase, "Upper" [False]
271) StartPhrase, "Neg"
272) StartPhrase, "'-'"
273) EndPhrase, "'-'" [False]
274) EndPhrase, "Neg" [False]
275) OnInternalPhrase, 52, 53
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 53] (52)"
          end: "[1, 54] (53)"
        token: "Lower"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
      phrase: "Lower"
    phrase: "All Phrases <Prefix>"
276) EndPhrase, "All Phrases <Prefix>" [True]
277) StartPhrase, "All Phrases <Suffix>"
278) StartPhrase, "'+'"
279) EndPhrase, "'+'" [False]
280) StartPhrase, "'-'"
281) EndPhrase, "'-'" [False]
282) StartPhrase, "'*'"
283) EndPhrase, "'*'" [False]
284) StartPhrase, "'/'"
285) EndPhrase, "'/'" [False]
286) StartPhrase, "'if'"
287) EndPhrase, "'if'" [False]
288) StartPhrase, "'['"
289) EndPhrase, "'['" [False]
290) EndPhrase, "All Phrases <Suffix>" [False]
291) OnInternalPhrase, 52, 53
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: False
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 53] (52)"
            end: "[1, 54] (53)"
          token: "Lower"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
        phrase: "Lower"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
292) EndPhrase, "DynamicPhrasesType.Statements" [True]
293) StartPhrase, "']'"
294) OnInternalPhrase, 53, 54
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 54] (53)"
        end: "[1, 55] (54)"
      token: "']'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
    phrase: "']'"
295) EndPhrase, "']'" [True]
296) OnInternalPhrase, 51, 54
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data:
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                          begin: "[1, 38] (37)"
                                          end: "[1, 43] (42)"
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 43] (42)"
                                      end: "[1, 44] (43)"
                                    token: "'['"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                  phrase: "'['"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                          begin: "[1, 44] (43)"
                                          end: "[1, 45] (44)"
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 45] (44)"
                                      end: "[1, 46] (45)"
                                    token: "']'"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                  phrase: "']'"
                              phrase: "Index"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 46] (45)"
                              end: "[1, 47] (46)"
                            token: "'['"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                          phrase: "'['"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 47] (46)"
                                  end: "[1, 48] (47)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 48] (47)"
                              end: "[1, 49] (48)"
                            token: "']'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                          phrase: "']'"
                      phrase: "Index"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 49] (48)"
                      end: "[1, 50] (49)"
                    token: "'['"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                  phrase: "'['"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 50] (49)"
                          end: "[1, 51] (50)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 51] (50)"
                      end: "[1, 52] (51)"
                    token: "']'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                  phrase: "']'"
              phrase: "Index"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 52] (51)"
              end: "[1, 53] (52)"
            token: "'['"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
          phrase: "'['"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 53] (52)"
                  end: "[1, 54] (53)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 54] (53)"
              end: "[1, 55] (54)"
            token: "']'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
          phrase: "']'"
      phrase: "Index"
    phrase: "All Phrases <Suffix>"
297) EndPhrase, "All Phrases <Suffix>" [True]
298) StartPhrase, "All Phrases <Suffix>"
299) StartPhrase, "'+'"
300) EndPhrase, "'+'" [False]
301) StartPhrase, "'-'"
302) EndPhrase, "'-'" [False]
303) StartPhrase, "'*'"
304) OnInternalPhrase, 55, 56
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 56] (55)"
        end: "[1, 57] (56)"
      token: "'*'"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
    phrase: "'*'"
305) EndPhrase, "'*'" [True]
306) StartPhrase, "DynamicPhrasesType.Statements"
307) StartPhrase, "All Phrases <Prefix>"
308) StartPhrase, "Lower"
309) EndPhrase, "Lower" [False]
310) StartPhrase, "Upper"
311) OnInternalPhrase, 57, 61
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: False
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 58] (57)"
        end: "[1, 62] (61)"
      token: "Upper"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
    phrase: "Upper"
312) EndPhrase, "Upper" [True]
313) StartPhrase, "Neg"
314) StartPhrase, "'-'"
315) EndPhrase, "'-'" [False]
316) EndPhrase, "Neg" [False]
317) OnInternalPhrase, 57, 61
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: False
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 58] (57)"
          end: "[1, 62] (61)"
        token: "Upper"
        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
          match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
      phrase: "Upper"
    phrase: "All Phrases <Prefix>"
318) EndPhrase, "All Phrases <Prefix>" [True]
319) StartPhrase, "All Phrases <Suffix>"
320) StartPhrase, "'+'"
321) EndPhrase, "'+'" [False]
322) StartPhrase, "'-'"
323) EndPhrase, "'-'" [False]
324) StartPhrase, "'*'"
325) EndPhrase, "'*'" [False]
326) StartPhrase, "'/'"
327) EndPhrase, "'/'" [False]
328) StartPhrase, "'if'"
329) EndPhrase, "'if'" [False]
330) StartPhrase, "'['"
331) EndPhrase, "'['" [False]
332) EndPhrase, "All Phrases <Suffix>" [False]
333) OnInternalPhrase, 57, 61
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: False
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 58] (57)"
            end: "[1, 62] (61)"
          token: "Upper"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
        phrase: "Upper"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
334) EndPhrase, "DynamicPhrasesType.Statements" [True]
335) StartPhrase, "'/'"
336) EndPhrase, "'/'" [False]
337) StartPhrase, "'if'"
338) EndPhrase, "'if'" [False]
339) StartPhrase, "'['"
340) EndPhrase, "'['" [False]
341) OnInternalPhrase, 54, 61
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data:
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data:
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                is_ignored: False
                                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                  begin: "[1, 38] (37)"
                                                  end: "[1, 43] (42)"
                                                token: "Lower"
                                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                  match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                              phrase: "Lower"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                              begin: "[1, 43] (42)"
                                              end: "[1, 44] (43)"
                                            token: "'['"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                          phrase: "'['"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                is_ignored: False
                                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                  begin: "[1, 44] (43)"
                                                  end: "[1, 45] (44)"
                                                token: "Lower"
                                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                  match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                              phrase: "Lower"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                              begin: "[1, 45] (44)"
                                              end: "[1, 46] (45)"
                                            token: "']'"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                          phrase: "']'"
                                      phrase: "Index"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 46] (45)"
                                      end: "[1, 47] (46)"
                                    token: "'['"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                  phrase: "'['"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                          begin: "[1, 47] (46)"
                                          end: "[1, 48] (47)"
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 48] (47)"
                                      end: "[1, 49] (48)"
                                    token: "']'"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                  phrase: "']'"
                              phrase: "Index"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 49] (48)"
                              end: "[1, 50] (49)"
                            token: "'['"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                          phrase: "'['"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 50] (49)"
                                  end: "[1, 51] (50)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 51] (50)"
                              end: "[1, 52] (51)"
                            token: "']'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                          phrase: "']'"
                      phrase: "Index"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 52] (51)"
                      end: "[1, 53] (52)"
                    token: "'['"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                  phrase: "'['"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 53] (52)"
                          end: "[1, 54] (53)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 54] (53)"
                      end: "[1, 55] (54)"
                    token: "']'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                  phrase: "']'"
              phrase: "Index"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 55] (54)"
            end: "[1, 56] (55)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 54
              end: 55
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 56] (55)"
              end: "[1, 57] (56)"
            token: "'*'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
          phrase: "'*'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 57] (56)"
            end: "[1, 58] (57)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 56
              end: 57
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 58] (57)"
                  end: "[1, 62] (61)"
                token: "Upper"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
              phrase: "Upper"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Mul"
    phrase: "All Phrases <Suffix>"
342) EndPhrase, "All Phrases <Suffix>" [True]
343) StartPhrase, "All Phrases <Suffix>"
344) StartPhrase, "'+'"
345) EndPhrase, "'+'" [False]
346) StartPhrase, "'-'"
347) EndPhrase, "'-'" [False]
348) StartPhrase, "'*'"
349) EndPhrase, "'*'" [False]
350) StartPhrase, "'/'"
351) EndPhrase, "'/'" [False]
352) StartPhrase, "'if'"
353) EndPhrase, "'if'" [False]
354) StartPhrase, "'['"
355) EndPhrase, "'['" [False]
356) EndPhrase, "All Phrases <Suffix>" [False]
357) OnInternalPhrase, 37, 61
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data:
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data:
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data:
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  is_ignored: False
                                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                    begin: "[1, 38] (37)"
                                                    end: "[1, 43] (42)"
                                                  token: "Lower"
                                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                    match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                phrase: "Lower"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 43] (42)"
                                                end: "[1, 44] (43)"
                                              token: "'['"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                            phrase: "'['"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  is_ignored: False
                                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                    begin: "[1, 44] (43)"
                                                    end: "[1, 45] (44)"
                                                  token: "Lower"
                                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                    match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                phrase: "Lower"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 45] (44)"
                                                end: "[1, 46] (45)"
                                              token: "']'"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                            phrase: "']'"
                                        phrase: "Index"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 46] (45)"
                                        end: "[1, 47] (46)"
                                      token: "'['"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                    phrase: "'['"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          is_ignored: False
                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                            begin: "[1, 47] (46)"
                                            end: "[1, 48] (47)"
                                          token: "Lower"
                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                            match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                        phrase: "Lower"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 48] (47)"
                                        end: "[1, 49] (48)"
                                      token: "']'"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                    phrase: "']'"
                                phrase: "Index"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 49] (48)"
                                end: "[1, 50] (49)"
                              token: "'['"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                            phrase: "'['"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: False
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 50] (49)"
                                    end: "[1, 51] (50)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 51] (50)"
                                end: "[1, 52] (51)"
                              token: "']'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                            phrase: "']'"
                        phrase: "Index"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 52] (51)"
                        end: "[1, 53] (52)"
                      token: "'['"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                    phrase: "'['"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 53] (52)"
                            end: "[1, 54] (53)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 54] (53)"
                        end: "[1, 55] (54)"
                      token: "']'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                    phrase: "']'"
                phrase: "Index"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 55] (54)"
              end: "[1, 56] (55)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 54
                end: 55
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: False
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 56] (55)"
                end: "[1, 57] (56)"
              token: "'*'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
            phrase: "'*'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 57] (56)"
              end: "[1, 58] (57)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 56
                end: 57
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: False
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 58] (57)"
                    end: "[1, 62] (61)"
                  token: "Upper"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                phrase: "Upper"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
        phrase: "Mul"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
358) EndPhrase, "DynamicPhrasesType.Statements" [True]
359) StartPhrase, "'*'"
360) EndPhrase, "'*'" [False]
361) StartPhrase, "'/'"
362) EndPhrase, "'/'" [False]
363) StartPhrase, "'if'"
364) EndPhrase, "'if'" [False]
365) StartPhrase, "'['"
366) EndPhrase, "'['" [False]
367) OnInternalPhrase, 34, 61
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 7] (6)"
                          end: "[1, 11] (10)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 11] (10)"
                    end: "[1, 12] (11)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 10
                      end: 11
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 12] (11)"
                      end: "[1, 14] (13)"
                    token: "'if'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                  phrase: "'if'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 14] (13)"
                    end: "[1, 15] (14)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 13
                      end: 14
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 15] (14)"
                          end: "[1, 24] (23)"
                        token: "Upper"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                      phrase: "Upper"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 24] (23)"
                    end: "[1, 25] (24)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 23
                      end: 24
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 25] (24)"
                      end: "[1, 29] (28)"
                    token: "'else'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                  phrase: "'else'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 29] (28)"
                    end: "[1, 30] (29)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 28
                      end: 29
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 30] (29)"
                          end: "[1, 35] (34)"
                        token: "Lower"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                      phrase: "Lower"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
              phrase: "Ter"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 35] (34)"
            end: "[1, 36] (35)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 34
              end: 35
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 36] (35)"
              end: "[1, 37] (36)"
            token: "'-'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
          phrase: "'-'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 37] (36)"
            end: "[1, 38] (37)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 36
              end: 37
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data:
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data:
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data:
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        is_ignored: False
                                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                          begin: "[1, 38] (37)"
                                                          end: "[1, 43] (42)"
                                                        token: "Lower"
                                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                          match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                      phrase: "Lower"
                                                    phrase: "All Phrases"
                                                  phrase: "DynamicPhrasesType.Statements"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    is_ignored: False
                                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                      begin: "[1, 43] (42)"
                                                      end: "[1, 44] (43)"
                                                    token: "'['"
                                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                      match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                  phrase: "'['"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        is_ignored: False
                                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                          begin: "[1, 44] (43)"
                                                          end: "[1, 45] (44)"
                                                        token: "Lower"
                                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                          match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                      phrase: "Lower"
                                                    phrase: "All Phrases"
                                                  phrase: "DynamicPhrasesType.Statements"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    is_ignored: False
                                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                      begin: "[1, 45] (44)"
                                                      end: "[1, 46] (45)"
                                                    token: "']'"
                                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                      match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                  phrase: "']'"
                                              phrase: "Index"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                              begin: "[1, 46] (45)"
                                              end: "[1, 47] (46)"
                                            token: "'['"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                          phrase: "'['"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                is_ignored: False
                                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                  begin: "[1, 47] (46)"
                                                  end: "[1, 48] (47)"
                                                token: "Lower"
                                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                  match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                              phrase: "Lower"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                              begin: "[1, 48] (47)"
                                              end: "[1, 49] (48)"
                                            token: "']'"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                          phrase: "']'"
                                      phrase: "Index"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 49] (48)"
                                      end: "[1, 50] (49)"
                                    token: "'['"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                  phrase: "'['"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                          begin: "[1, 50] (49)"
                                          end: "[1, 51] (50)"
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 51] (50)"
                                      end: "[1, 52] (51)"
                                    token: "']'"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                  phrase: "']'"
                              phrase: "Index"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 52] (51)"
                              end: "[1, 53] (52)"
                            token: "'['"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                          phrase: "'['"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 53] (52)"
                                  end: "[1, 54] (53)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 54] (53)"
                              end: "[1, 55] (54)"
                            token: "']'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                          phrase: "']'"
                      phrase: "Index"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 55] (54)"
                    end: "[1, 56] (55)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 54
                      end: 55
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 56] (55)"
                      end: "[1, 57] (56)"
                    token: "'*'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                  phrase: "'*'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 57] (56)"
                    end: "[1, 58] (57)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 56
                      end: 57
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        is_ignored: False
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[1, 58] (57)"
                          end: "[1, 62] (61)"
                        token: "Upper"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                      phrase: "Upper"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
              phrase: "Mul"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Sub"
    phrase: "All Phrases <Suffix>"
368) EndPhrase, "All Phrases <Suffix>" [True]
369) StartPhrase, "All Phrases <Suffix>"
370) StartPhrase, "'+'"
371) EndPhrase, "'+'" [False]
372) StartPhrase, "'-'"
373) EndPhrase, "'-'" [False]
374) StartPhrase, "'*'"
375) EndPhrase, "'*'" [False]
376) StartPhrase, "'/'"
377) EndPhrase, "'/'" [False]
378) StartPhrase, "'if'"
379) EndPhrase, "'if'" [False]
380) StartPhrase, "'['"
381) EndPhrase, "'['" [False]
382) EndPhrase, "All Phrases <Suffix>" [False]
383) OnInternalPhrase, 29, 61
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 7] (6)"
                            end: "[1, 11] (10)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 11] (10)"
                      end: "[1, 12] (11)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 10
                        end: 11
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 12] (11)"
                        end: "[1, 14] (13)"
                      token: "'if'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                    phrase: "'if'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 14] (13)"
                      end: "[1, 15] (14)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 13
                        end: 14
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 15] (14)"
                            end: "[1, 24] (23)"
                          token: "Upper"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                        phrase: "Upper"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 24] (23)"
                      end: "[1, 25] (24)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 23
                        end: 24
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 25] (24)"
                        end: "[1, 29] (28)"
                      token: "'else'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                    phrase: "'else'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 29] (28)"
                      end: "[1, 30] (29)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 28
                        end: 29
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 30] (29)"
                            end: "[1, 35] (34)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Ter"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 35] (34)"
              end: "[1, 36] (35)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 34
                end: 35
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: False
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 36] (35)"
                end: "[1, 37] (36)"
              token: "'-'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            phrase: "'-'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 37] (36)"
              end: "[1, 38] (37)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 36
                end: 37
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data:
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data:
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data:
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data:
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          is_ignored: False
                                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                            begin: "[1, 38] (37)"
                                                            end: "[1, 43] (42)"
                                                          token: "Lower"
                                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                            match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                        phrase: "Lower"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 43] (42)"
                                                        end: "[1, 44] (43)"
                                                      token: "'['"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                    phrase: "'['"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          is_ignored: False
                                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                            begin: "[1, 44] (43)"
                                                            end: "[1, 45] (44)"
                                                          token: "Lower"
                                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                            match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                        phrase: "Lower"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 45] (44)"
                                                        end: "[1, 46] (45)"
                                                      token: "']'"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                    phrase: "']'"
                                                phrase: "Index"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 46] (45)"
                                                end: "[1, 47] (46)"
                                              token: "'['"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                            phrase: "'['"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  is_ignored: False
                                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                    begin: "[1, 47] (46)"
                                                    end: "[1, 48] (47)"
                                                  token: "Lower"
                                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                    match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                phrase: "Lower"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 48] (47)"
                                                end: "[1, 49] (48)"
                                              token: "']'"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                            phrase: "']'"
                                        phrase: "Index"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 49] (48)"
                                        end: "[1, 50] (49)"
                                      token: "'['"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                    phrase: "'['"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          is_ignored: False
                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                            begin: "[1, 50] (49)"
                                            end: "[1, 51] (50)"
                                          token: "Lower"
                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                            match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                        phrase: "Lower"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 51] (50)"
                                        end: "[1, 52] (51)"
                                      token: "']'"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                    phrase: "']'"
                                phrase: "Index"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 52] (51)"
                                end: "[1, 53] (52)"
                              token: "'['"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                            phrase: "'['"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: False
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 53] (52)"
                                    end: "[1, 54] (53)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 54] (53)"
                                end: "[1, 55] (54)"
                              token: "']'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                            phrase: "']'"
                        phrase: "Index"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 55] (54)"
                      end: "[1, 56] (55)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 54
                        end: 55
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 56] (55)"
                        end: "[1, 57] (56)"
                      token: "'*'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                    phrase: "'*'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 57] (56)"
                      end: "[1, 58] (57)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 56
                        end: 57
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 58] (57)"
                            end: "[1, 62] (61)"
                          token: "Upper"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                        phrase: "Upper"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Mul"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
        phrase: "Sub"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
384) EndPhrase, "DynamicPhrasesType.Statements" [True]
385) StartPhrase, "'['"
386) EndPhrase, "'['" [False]
387) OnInternalPhrase, 10, 61
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 7] (6)"
                  end: "[1, 11] (10)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 11] (10)"
            end: "[1, 12] (11)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 10
              end: 11
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 12] (11)"
              end: "[1, 14] (13)"
            token: "'if'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
          phrase: "'if'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 14] (13)"
            end: "[1, 15] (14)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 13
              end: 14
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 15] (14)"
                  end: "[1, 24] (23)"
                token: "Upper"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
              phrase: "Upper"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 24] (23)"
            end: "[1, 25] (24)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 23
              end: 24
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 25] (24)"
              end: "[1, 29] (28)"
            token: "'else'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
          phrase: "'else'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 29] (28)"
            end: "[1, 30] (29)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 28
              end: 29
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 30] (29)"
                  end: "[1, 35] (34)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Ter"
    phrase: "All Phrases <Suffix>"
388) EndPhrase, "All Phrases <Suffix>" [True]
389) StartPhrase, "All Phrases <Suffix>"
390) StartPhrase, "'+'"
391) EndPhrase, "'+'" [False]
392) StartPhrase, "'-'"
393) EndPhrase, "'-'" [False]
394) StartPhrase, "'*'"
395) EndPhrase, "'*'" [False]
396) StartPhrase, "'/'"
397) EndPhrase, "'/'" [False]
398) StartPhrase, "'if'"
399) EndPhrase, "'if'" [False]
400) StartPhrase, "'['"
401) EndPhrase, "'['" [False]
402) EndPhrase, "All Phrases <Suffix>" [False]
403) OnInternalPhrase, 6, 61
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 7] (6)"
                            end: "[1, 11] (10)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 11] (10)"
                      end: "[1, 12] (11)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 10
                        end: 11
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 12] (11)"
                        end: "[1, 14] (13)"
                      token: "'if'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                    phrase: "'if'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 14] (13)"
                      end: "[1, 15] (14)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 13
                        end: 14
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 15] (14)"
                            end: "[1, 24] (23)"
                          token: "Upper"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                        phrase: "Upper"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 24] (23)"
                      end: "[1, 25] (24)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 23
                        end: 24
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 25] (24)"
                        end: "[1, 29] (28)"
                      token: "'else'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                    phrase: "'else'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 29] (28)"
                      end: "[1, 30] (29)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 28
                        end: 29
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 30] (29)"
                            end: "[1, 35] (34)"
                          token: "Lower"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                        phrase: "Lower"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Ter"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 35] (34)"
              end: "[1, 36] (35)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 34
                end: 35
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: False
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 36] (35)"
                end: "[1, 37] (36)"
              token: "'-'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            phrase: "'-'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 37] (36)"
              end: "[1, 38] (37)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 36
                end: 37
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data:
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data:
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data:
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data:
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          is_ignored: False
                                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                            begin: "[1, 38] (37)"
                                                            end: "[1, 43] (42)"
                                                          token: "Lower"
                                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                            match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                        phrase: "Lower"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 43] (42)"
                                                        end: "[1, 44] (43)"
                                                      token: "'['"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                    phrase: "'['"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          is_ignored: False
                                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                            begin: "[1, 44] (43)"
                                                            end: "[1, 45] (44)"
                                                          token: "Lower"
                                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                            match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                        phrase: "Lower"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 45] (44)"
                                                        end: "[1, 46] (45)"
                                                      token: "']'"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                    phrase: "']'"
                                                phrase: "Index"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 46] (45)"
                                                end: "[1, 47] (46)"
                                              token: "'['"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                            phrase: "'['"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  is_ignored: False
                                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                    begin: "[1, 47] (46)"
                                                    end: "[1, 48] (47)"
                                                  token: "Lower"
                                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                    match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                phrase: "Lower"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 48] (47)"
                                                end: "[1, 49] (48)"
                                              token: "']'"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                            phrase: "']'"
                                        phrase: "Index"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 49] (48)"
                                        end: "[1, 50] (49)"
                                      token: "'['"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                    phrase: "'['"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          is_ignored: False
                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                            begin: "[1, 50] (49)"
                                            end: "[1, 51] (50)"
                                          token: "Lower"
                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                            match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                        phrase: "Lower"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 51] (50)"
                                        end: "[1, 52] (51)"
                                      token: "']'"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                    phrase: "']'"
                                phrase: "Index"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 52] (51)"
                                end: "[1, 53] (52)"
                              token: "'['"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                            phrase: "'['"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: False
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 53] (52)"
                                    end: "[1, 54] (53)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 54] (53)"
                                end: "[1, 55] (54)"
                              token: "']'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                            phrase: "']'"
                        phrase: "Index"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 55] (54)"
                      end: "[1, 56] (55)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 54
                        end: 55
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 56] (55)"
                        end: "[1, 57] (56)"
                      token: "'*'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                    phrase: "'*'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 57] (56)"
                      end: "[1, 58] (57)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 56
                        end: 57
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: False
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 58] (57)"
                            end: "[1, 62] (61)"
                          token: "Upper"
                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                            match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                        phrase: "Upper"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Mul"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
        phrase: "Sub"
      phrase: "All Phrases"
    phrase: "DynamicPhrasesType.Statements"
404) EndPhrase, "DynamicPhrasesType.Statements" [True]
405) StartPhrase, "'-'"
406) EndPhrase, "'-'" [False]
407) StartPhrase, "'*'"
408) EndPhrase, "'*'" [False]
409) StartPhrase, "'/'"
410) EndPhrase, "'/'" [False]
411) StartPhrase, "'if'"
412) EndPhrase, "'if'" [False]
413) StartPhrase, "'['"
414) EndPhrase, "'['" [False]
415) OnInternalPhrase, 3, 61
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 1] (0)"
                  end: "[1, 4] (3)"
                token: "Lower"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
              phrase: "Lower"
            phrase: "All Phrases"
          phrase: "Dynamic Phrase"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 4] (3)"
            end: "[1, 5] (4)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 3
              end: 4
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: False
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 5] (4)"
              end: "[1, 6] (5)"
            token: "'+'"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
          phrase: "'+'"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: True
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 6] (5)"
            end: "[1, 7] (6)"
          token: "HorizontalWhitespace"
          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
              begin: 5
              end: 6
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data:
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 7] (6)"
                                  end: "[1, 11] (10)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: True
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 11] (10)"
                            end: "[1, 12] (11)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 10
                              end: 11
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 12] (11)"
                              end: "[1, 14] (13)"
                            token: "'if'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                          phrase: "'if'"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: True
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 14] (13)"
                            end: "[1, 15] (14)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 13
                              end: 14
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 15] (14)"
                                  end: "[1, 24] (23)"
                                token: "Upper"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                              phrase: "Upper"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: True
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 24] (23)"
                            end: "[1, 25] (24)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 23
                              end: 24
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 25] (24)"
                              end: "[1, 29] (28)"
                            token: "'else'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                          phrase: "'else'"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: True
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 29] (28)"
                            end: "[1, 30] (29)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 28
                              end: 29
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 30] (29)"
                                  end: "[1, 35] (34)"
                                token: "Lower"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                              phrase: "Lower"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                      phrase: "Ter"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 35] (34)"
                    end: "[1, 36] (35)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 34
                      end: 35
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: False
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 36] (35)"
                      end: "[1, 37] (36)"
                    token: "'-'"
                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                      match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                  phrase: "'-'"
                - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: True
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 37] (36)"
                    end: "[1, 38] (37)"
                  token: "HorizontalWhitespace"
                  value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                      begin: 36
                      end: 37
                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data:
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data:
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data:
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data:
                                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                is_ignored: False
                                                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                                  begin: "[1, 38] (37)"
                                                                  end: "[1, 43] (42)"
                                                                token: "Lower"
                                                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                                  match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                              phrase: "Lower"
                                                            phrase: "All Phrases"
                                                          phrase: "DynamicPhrasesType.Statements"
                                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            is_ignored: False
                                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                              begin: "[1, 43] (42)"
                                                              end: "[1, 44] (43)"
                                                            token: "'['"
                                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                              match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                          phrase: "'['"
                                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                is_ignored: False
                                                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                                  begin: "[1, 44] (43)"
                                                                  end: "[1, 45] (44)"
                                                                token: "Lower"
                                                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                                  match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                              phrase: "Lower"
                                                            phrase: "All Phrases"
                                                          phrase: "DynamicPhrasesType.Statements"
                                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            is_ignored: False
                                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                              begin: "[1, 45] (44)"
                                                              end: "[1, 46] (45)"
                                                            token: "']'"
                                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                              match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                          phrase: "']'"
                                                      phrase: "Index"
                                                    phrase: "All Phrases"
                                                  phrase: "DynamicPhrasesType.Statements"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    is_ignored: False
                                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                      begin: "[1, 46] (45)"
                                                      end: "[1, 47] (46)"
                                                    token: "'['"
                                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                      match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                                  phrase: "'['"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        is_ignored: False
                                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                          begin: "[1, 47] (46)"
                                                          end: "[1, 48] (47)"
                                                        token: "Lower"
                                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                          match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                      phrase: "Lower"
                                                    phrase: "All Phrases"
                                                  phrase: "DynamicPhrasesType.Statements"
                                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    is_ignored: False
                                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                      begin: "[1, 48] (47)"
                                                      end: "[1, 49] (48)"
                                                    token: "']'"
                                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                      match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                                  phrase: "']'"
                                              phrase: "Index"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                              begin: "[1, 49] (48)"
                                              end: "[1, 50] (49)"
                                            token: "'['"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                          phrase: "'['"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                is_ignored: False
                                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                  begin: "[1, 50] (49)"
                                                  end: "[1, 51] (50)"
                                                token: "Lower"
                                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                  match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                              phrase: "Lower"
                                            phrase: "All Phrases"
                                          phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            is_ignored: False
                                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                              begin: "[1, 51] (50)"
                                              end: "[1, 52] (51)"
                                            token: "']'"
                                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                              match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                          phrase: "']'"
                                      phrase: "Index"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 52] (51)"
                                      end: "[1, 53] (52)"
                                    token: "'['"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                  phrase: "'['"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        is_ignored: False
                                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                          begin: "[1, 53] (52)"
                                          end: "[1, 54] (53)"
                                        token: "Lower"
                                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                          match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                      phrase: "Lower"
                                    phrase: "All Phrases"
                                  phrase: "DynamicPhrasesType.Statements"
                                - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                  data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    is_ignored: False
                                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                      begin: "[1, 54] (53)"
                                      end: "[1, 55] (54)"
                                    token: "']'"
                                    value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                      match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                  phrase: "']'"
                              phrase: "Index"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: True
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 55] (54)"
                            end: "[1, 56] (55)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 54
                              end: 55
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: False
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 56] (55)"
                              end: "[1, 57] (56)"
                            token: "'*'"
                            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                              match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                          phrase: "'*'"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          is_ignored: True
                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                            begin: "[1, 57] (56)"
                            end: "[1, 58] (57)"
                          token: "HorizontalWhitespace"
                          value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                            range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                              begin: 56
                              end: 57
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: False
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[1, 58] (57)"
                                  end: "[1, 62] (61)"
                                token: "Upper"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                              phrase: "Upper"
                            phrase: "All Phrases"
                          phrase: "DynamicPhrasesType.Statements"
                      phrase: "Mul"
                    phrase: "All Phrases"
                  phrase: "DynamicPhrasesType.Statements"
              phrase: "Sub"
            phrase: "All Phrases"
          phrase: "DynamicPhrasesType.Statements"
      phrase: "Add"
    phrase: "All Phrases <Suffix>"
416) EndPhrase, "All Phrases <Suffix>" [True]
417) StartPhrase, "All Phrases <Suffix>"
418) StartPhrase, "'+'"
419) EndPhrase, "'+'" [False]
420) StartPhrase, "'-'"
421) EndPhrase, "'-'" [False]
422) StartPhrase, "'*'"
423) EndPhrase, "'*'" [False]
424) StartPhrase, "'/'"
425) EndPhrase, "'/'" [False]
426) StartPhrase, "'if'"
427) EndPhrase, "'if'" [False]
428) StartPhrase, "'['"
429) EndPhrase, "'['" [False]
430) EndPhrase, "All Phrases <Suffix>" [False]
431) OnInternalPhrase, 0, 61
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  is_ignored: False
                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                    begin: "[1, 1] (0)"
                    end: "[1, 4] (3)"
                  token: "Lower"
                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                    match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                phrase: "Lower"
              phrase: "All Phrases"
            phrase: "Dynamic Phrase"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 4] (3)"
              end: "[1, 5] (4)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 3
                end: 4
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: False
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 5] (4)"
                end: "[1, 6] (5)"
              token: "'+'"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            phrase: "'+'"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: True
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 6] (5)"
              end: "[1, 7] (6)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 5
                end: 6
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data:
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: False
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 7] (6)"
                                    end: "[1, 11] (10)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 11] (10)"
                              end: "[1, 12] (11)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 10
                                end: 11
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 12] (11)"
                                end: "[1, 14] (13)"
                              token: "'if'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                            phrase: "'if'"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 14] (13)"
                              end: "[1, 15] (14)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 13
                                end: 14
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: False
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 15] (14)"
                                    end: "[1, 24] (23)"
                                  token: "Upper"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                                phrase: "Upper"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 24] (23)"
                              end: "[1, 25] (24)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 23
                                end: 24
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 25] (24)"
                                end: "[1, 29] (28)"
                              token: "'else'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                            phrase: "'else'"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 29] (28)"
                              end: "[1, 30] (29)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 28
                                end: 29
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: False
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 30] (29)"
                                    end: "[1, 35] (34)"
                                  token: "Lower"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                                phrase: "Lower"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                        phrase: "Ter"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 35] (34)"
                      end: "[1, 36] (35)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 34
                        end: 35
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: False
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[1, 36] (35)"
                        end: "[1, 37] (36)"
                      token: "'-'"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                    phrase: "'-'"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    is_ignored: True
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[1, 37] (36)"
                      end: "[1, 38] (37)"
                    token: "HorizontalWhitespace"
                    value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                      range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                        begin: 36
                        end: 37
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                        data:
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data:
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data:
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data:
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data:
                                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  is_ignored: False
                                                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                                    begin: "[1, 38] (37)"
                                                                    end: "[1, 43] (42)"
                                                                  token: "Lower"
                                                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                                    match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                                phrase: "Lower"
                                                              phrase: "All Phrases"
                                                            phrase: "DynamicPhrasesType.Statements"
                                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                              is_ignored: False
                                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                                begin: "[1, 43] (42)"
                                                                end: "[1, 44] (43)"
                                                              token: "'['"
                                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                                match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                            phrase: "'['"
                                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  is_ignored: False
                                                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                                    begin: "[1, 44] (43)"
                                                                    end: "[1, 45] (44)"
                                                                  token: "Lower"
                                                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                                    match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                                phrase: "Lower"
                                                              phrase: "All Phrases"
                                                            phrase: "DynamicPhrasesType.Statements"
                                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                              is_ignored: False
                                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                                begin: "[1, 45] (44)"
                                                                end: "[1, 46] (45)"
                                                              token: "']'"
                                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                                match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                            phrase: "']'"
                                                        phrase: "Index"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 46] (45)"
                                                        end: "[1, 47] (46)"
                                                      token: "'['"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                                    phrase: "'['"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          is_ignored: False
                                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                            begin: "[1, 47] (46)"
                                                            end: "[1, 48] (47)"
                                                          token: "Lower"
                                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                            match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                        phrase: "Lower"
                                                      phrase: "All Phrases"
                                                    phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      is_ignored: False
                                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                        begin: "[1, 48] (47)"
                                                        end: "[1, 49] (48)"
                                                      token: "']'"
                                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                        match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                                    phrase: "']'"
                                                phrase: "Index"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 49] (48)"
                                                end: "[1, 50] (49)"
                                              token: "'['"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                            phrase: "'['"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  is_ignored: False
                                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                    begin: "[1, 50] (49)"
                                                    end: "[1, 51] (50)"
                                                  token: "Lower"
                                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                    match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                                phrase: "Lower"
                                              phrase: "All Phrases"
                                            phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              is_ignored: False
                                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                                begin: "[1, 51] (50)"
                                                end: "[1, 52] (51)"
                                              token: "']'"
                                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                                match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                            phrase: "']'"
                                        phrase: "Index"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 52] (51)"
                                        end: "[1, 53] (52)"
                                      token: "'['"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                    phrase: "'['"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          is_ignored: False
                                          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                            begin: "[1, 53] (52)"
                                            end: "[1, 54] (53)"
                                          token: "Lower"
                                          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                            match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                        phrase: "Lower"
                                      phrase: "All Phrases"
                                    phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      is_ignored: False
                                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                        begin: "[1, 54] (53)"
                                        end: "[1, 55] (54)"
                                      token: "']'"
                                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                        match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                    phrase: "']'"
                                phrase: "Index"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 55] (54)"
                              end: "[1, 56] (55)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 54
                                end: 55
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              is_ignored: False
                              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                begin: "[1, 56] (55)"
                                end: "[1, 57] (56)"
                              token: "'*'"
                              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                            phrase: "'*'"
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            is_ignored: True
                            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                              begin: "[1, 57] (56)"
                              end: "[1, 58] (57)"
                            token: "HorizontalWhitespace"
                            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
                              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                begin: 56
                                end: 57
                          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: False
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[1, 58] (57)"
                                    end: "[1, 62] (61)"
                                  token: "Upper"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                                phrase: "Upper"
                              phrase: "All Phrases"
                            phrase: "DynamicPhrasesType.Statements"
                        phrase: "Mul"
                      phrase: "All Phrases"
                    phrase: "DynamicPhrasesType.Statements"
                phrase: "Sub"
              phrase: "All Phrases"
            phrase: "DynamicPhrasesType.Statements"
        phrase: "Add"
      phrase: "All Phrases"
    phrase: "Dynamic Phrase"
432) EndPhrase, "Dynamic Phrase" [True]
