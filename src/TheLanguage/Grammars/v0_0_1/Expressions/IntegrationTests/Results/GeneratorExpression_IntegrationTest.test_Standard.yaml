# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 2] (1)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 1), match='a'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Name: "a"
                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                            Name: "[Ln 1, Col 1] -> [Ln 1, Col 2]"
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 2]"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 2] (1)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 2] (1)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 2] (1)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 3] (2)"
                IterEnd: "[1, 4] (3)"
                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(2, 3), match='='>"
                Whitespace:
                  - 1
                  - 2
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[1, 5] (4)"
                                                IterEnd: "[1, 11] (10)"
                                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(4, 10), match='value1'>"
                                                Whitespace:
                                                  - 3
                                                  - 4
                                            Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                              Name: "value1"
                                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                Name: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                                                Self__: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                                            IterBegin: "[1, 5] (4)"
                                            IterEnd: "[1, 11] (10)"
                                            Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[1, 5] (4)"
                                        IterEnd: "[1, 11] (10)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                        Name: "value1"
                                        Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                          Name: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                                          Self__: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                                      Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                        Name: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                                        Self__: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                                    IterBegin: "[1, 5] (4)"
                                    IterEnd: "[1, 11] (10)"
                                    Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                IterBegin: "[1, 5] (4)"
                                IterEnd: "[1, 11] (10)"
                                Type: "Left Recursive Wrapper <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[1, 5] (4)"
                            IterEnd: "[1, 11] (10)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 12] (11)"
                            IterEnd: "[1, 15] (14)"
                            Type: "'for' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(11, 14), match='for'>"
                            Whitespace:
                              - 10
                              - 11
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 16] (15)"
                                        IterEnd: "[1, 22] (21)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(15, 21), match='value1'>"
                                        Whitespace:
                                          - 14
                                          - 15
                                    Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                      Name: "value1"
                                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                        Name: "[Ln 1, Col 16] -> [Ln 1, Col 22]"
                                        Self__: "[Ln 1, Col 16] -> [Ln 1, Col 22]"
                                    IterBegin: "[1, 16] (15)"
                                    IterEnd: "[1, 22] (21)"
                                    Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[1, 16] (15)"
                                IterEnd: "[1, 22] (21)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[1, 16] (15)"
                            IterEnd: "[1, 22] (21)"
                            Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 23] (22)"
                            IterEnd: "[1, 25] (24)"
                            Type: "'in' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(22, 24), match='in'>"
                            Whitespace:
                              - 21
                              - 22
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 26] (25)"
                                        IterEnd: "[1, 34] (33)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(25, 33), match='OneToTen'>"
                                        Whitespace:
                                          - 24
                                          - 25
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 34] (33)"
                                            IterEnd: "[1, 35] (34)"
                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(33, 34), match='('>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 35] (34)"
                                            IterEnd: "[1, 36] (35)"
                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(34, 35), match=')'>"
                                            Whitespace: None
                                        IterBegin: "[1, 34] (33)"
                                        IterEnd: "[1, 36] (35)"
                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                                      Arguments: None
                                      Name: "OneToTen"
                                      Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                                        Arguments: None
                                        Name: "[Ln 1, Col 26] -> [Ln 1, Col 34]"
                                        Self__: "[Ln 1, Col 26] -> [Ln 1, Col 36]"
                                    IterBegin: "[1, 26] (25)"
                                    IterEnd: "[1, 36] (35)"
                                    Type: "Func Invocation Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[1, 26] (25)"
                                IterEnd: "[1, 36] (35)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[1, 26] (25)"
                            IterEnd: "[1, 36] (35)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.Expressions.GeneratorExpressionLexerInfo.GeneratorExpressionLexerInfo'>
                          ConditionExpression: None
                          DisplayExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                              Name: "value1"
                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                Name: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                                Self__: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                            Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                              Name: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                              Self__: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                            Name: "value1"
                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                              Name: "[Ln 1, Col 16] -> [Ln 1, Col 22]"
                              Self__: "[Ln 1, Col 16] -> [Ln 1, Col 22]"
                          Regions: # <class 'types.GeneratorExpressionLexerInfoRegions'>
                            ConditionExpression: None
                            DisplayExpression: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                            Name: "[Ln 1, Col 16] -> [Ln 1, Col 22]"
                            Self__: "[Ln 1, Col 5] -> [Ln 1, Col 36]"
                            SourceExpression: "[Ln 1, Col 26] -> [Ln 1, Col 36]"
                          SourceExpression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                            Arguments: None
                            Name: "OneToTen"
                            Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                              Arguments: None
                              Name: "[Ln 1, Col 26] -> [Ln 1, Col 34]"
                              Self__: "[Ln 1, Col 26] -> [Ln 1, Col 36]"
                        IterBegin: "[1, 5] (4)"
                        IterEnd: "[1, 36] (35)"
                        Type: "Generator Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 5] (4)"
                    IterEnd: "[1, 36] (35)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 5] (4)"
                IterEnd: "[1, 36] (35)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 36] (35)"
                IterEnd: "[3, 1] (37)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 37
                  Start: 35
                Whitespace: None
            Info: # <class 'TheLanguage.Lexer.Statements.VariableDeclarationStatementLexerInfo.VariableDeclarationStatementLexerInfo'>
              Expression: # <class 'TheLanguage.Lexer.Expressions.GeneratorExpressionLexerInfo.GeneratorExpressionLexerInfo'>
                ConditionExpression: None
                DisplayExpression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                    Name: "value1"
                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                      Name: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                      Self__: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                    Name: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                    Self__: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                  Name: "value1"
                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                    Name: "[Ln 1, Col 16] -> [Ln 1, Col 22]"
                    Self__: "[Ln 1, Col 16] -> [Ln 1, Col 22]"
                Regions: # <class 'types.GeneratorExpressionLexerInfoRegions'>
                  ConditionExpression: None
                  DisplayExpression: "[Ln 1, Col 5] -> [Ln 1, Col 11]"
                  Name: "[Ln 1, Col 16] -> [Ln 1, Col 22]"
                  Self__: "[Ln 1, Col 5] -> [Ln 1, Col 36]"
                  SourceExpression: "[Ln 1, Col 26] -> [Ln 1, Col 36]"
                SourceExpression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                  Arguments: None
                  Name: "OneToTen"
                  Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                    Arguments: None
                    Name: "[Ln 1, Col 26] -> [Ln 1, Col 34]"
                    Self__: "[Ln 1, Col 26] -> [Ln 1, Col 36]"
              Modifier: None
              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                Name: "a"
                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                  Name: "[Ln 1, Col 1] -> [Ln 1, Col 2]"
                  Self__: "[Ln 1, Col 1] -> [Ln 1, Col 2]"
              Regions: # <class 'types.VariableDeclarationStatementLexerInfoRegions'>
                Expression: "[Ln 1, Col 5] -> [Ln 1, Col 36]"
                Modifier: None
                Name: "[Ln 1, Col 1] -> [Ln 1, Col 2]"
                Self__: "[Ln 1, Col 1] -> [Ln 3, Col 1]"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[3, 1] (37)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[3, 1] (37)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[3, 1] (37)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 1] (37)"
                            IterEnd: "[3, 2] (38)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(37, 38), match='b'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Name: "b"
                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                            Name: "[Ln 3, Col 1] -> [Ln 3, Col 2]"
                            Self__: "[Ln 3, Col 1] -> [Ln 3, Col 2]"
                        IterBegin: "[3, 1] (37)"
                        IterEnd: "[3, 2] (38)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[3, 1] (37)"
                    IterEnd: "[3, 2] (38)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[3, 1] (37)"
                IterEnd: "[3, 2] (38)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 3] (39)"
                IterEnd: "[3, 4] (40)"
                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(39, 40), match='='>"
                Whitespace:
                  - 38
                  - 39
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[3, 5] (41)"
                                        IterEnd: "[3, 11] (47)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(41, 47), match='AddOne'>"
                                        Whitespace:
                                          - 40
                                          - 41
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 11] (47)"
                                            IterEnd: "[3, 12] (48)"
                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(47, 48), match='('>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 12] (48)"
                                                                            IterEnd: "[3, 18] (54)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(48, 54), match='value2'>"
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value2"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                                                            Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                                                        IterBegin: "[3, 12] (48)"
                                                                        IterEnd: "[3, 18] (54)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 12] (48)"
                                                                    IterEnd: "[3, 18] (54)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "value2"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                                                      Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                                                    Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                                                IterBegin: "[3, 12] (48)"
                                                                IterEnd: "[3, 18] (54)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 12] (48)"
                                                            IterEnd: "[3, 18] (54)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 12] (48)"
                                                        IterEnd: "[3, 18] (54)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[3, 12] (48)"
                                                    IterEnd: "[3, 18] (54)"
                                                    Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 12] (48)"
                                                IterEnd: "[3, 18] (54)"
                                                Type: "Argument Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[3, 12] (48)"
                                            IterEnd: "[3, 18] (54)"
                                            Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 18] (54)"
                                            IterEnd: "[3, 19] (55)"
                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(54, 55), match=')'>"
                                            Whitespace: None
                                        IterBegin: "[3, 11] (47)"
                                        IterEnd: "[3, 19] (55)"
                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                                      Arguments:
                                        - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                          Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                              Name: "value2"
                                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                Name: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                                Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                            Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                              Name: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                              Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                          Keyword: None
                                          Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                            Expression: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                            Keyword: None
                                            Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                      Name: "AddOne"
                                      Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                                        Arguments: "[Ln 3, Col 11] -> [Ln 3, Col 19]"
                                        Name: "[Ln 3, Col 5] -> [Ln 3, Col 11]"
                                        Self__: "[Ln 3, Col 5] -> [Ln 3, Col 19]"
                                    IterBegin: "[3, 5] (41)"
                                    IterEnd: "[3, 19] (55)"
                                    Type: "Func Invocation Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[3, 5] (41)"
                                IterEnd: "[3, 19] (55)"
                                Type: "Left Recursive Wrapper <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[3, 5] (41)"
                            IterEnd: "[3, 19] (55)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 20] (56)"
                            IterEnd: "[3, 23] (59)"
                            Type: "'for' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(56, 59), match='for'>"
                            Whitespace:
                              - 55
                              - 56
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[3, 24] (60)"
                                        IterEnd: "[3, 30] (66)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(60, 66), match='value2'>"
                                        Whitespace:
                                          - 59
                                          - 60
                                    Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                      Name: "value2"
                                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                        Name: "[Ln 3, Col 24] -> [Ln 3, Col 30]"
                                        Self__: "[Ln 3, Col 24] -> [Ln 3, Col 30]"
                                    IterBegin: "[3, 24] (60)"
                                    IterEnd: "[3, 30] (66)"
                                    Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[3, 24] (60)"
                                IterEnd: "[3, 30] (66)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[3, 24] (60)"
                            IterEnd: "[3, 30] (66)"
                            Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 31] (67)"
                            IterEnd: "[3, 33] (69)"
                            Type: "'in' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(67, 69), match='in'>"
                            Whitespace:
                              - 66
                              - 67
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[3, 34] (70)"
                                        IterEnd: "[3, 42] (78)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(70, 78), match='OneToTen'>"
                                        Whitespace:
                                          - 69
                                          - 70
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 42] (78)"
                                            IterEnd: "[3, 43] (79)"
                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(78, 79), match='('>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 43] (79)"
                                            IterEnd: "[3, 44] (80)"
                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(79, 80), match=')'>"
                                            Whitespace: None
                                        IterBegin: "[3, 42] (78)"
                                        IterEnd: "[3, 44] (80)"
                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                                      Arguments: None
                                      Name: "OneToTen"
                                      Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                                        Arguments: None
                                        Name: "[Ln 3, Col 34] -> [Ln 3, Col 42]"
                                        Self__: "[Ln 3, Col 34] -> [Ln 3, Col 44]"
                                    IterBegin: "[3, 34] (70)"
                                    IterEnd: "[3, 44] (80)"
                                    Type: "Func Invocation Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[3, 34] (70)"
                                IterEnd: "[3, 44] (80)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[3, 34] (70)"
                            IterEnd: "[3, 44] (80)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.Expressions.GeneratorExpressionLexerInfo.GeneratorExpressionLexerInfo'>
                          ConditionExpression: None
                          DisplayExpression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                            Arguments:
                              - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                    Name: "value2"
                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                      Name: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                      Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                    Name: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                    Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                Keyword: None
                                Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                  Expression: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                                  Keyword: None
                                  Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                            Name: "AddOne"
                            Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                              Arguments: "[Ln 3, Col 11] -> [Ln 3, Col 19]"
                              Name: "[Ln 3, Col 5] -> [Ln 3, Col 11]"
                              Self__: "[Ln 3, Col 5] -> [Ln 3, Col 19]"
                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                            Name: "value2"
                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                              Name: "[Ln 3, Col 24] -> [Ln 3, Col 30]"
                              Self__: "[Ln 3, Col 24] -> [Ln 3, Col 30]"
                          Regions: # <class 'types.GeneratorExpressionLexerInfoRegions'>
                            ConditionExpression: None
                            DisplayExpression: "[Ln 3, Col 5] -> [Ln 3, Col 19]"
                            Name: "[Ln 3, Col 24] -> [Ln 3, Col 30]"
                            Self__: "[Ln 3, Col 5] -> [Ln 3, Col 44]"
                            SourceExpression: "[Ln 3, Col 34] -> [Ln 3, Col 44]"
                          SourceExpression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                            Arguments: None
                            Name: "OneToTen"
                            Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                              Arguments: None
                              Name: "[Ln 3, Col 34] -> [Ln 3, Col 42]"
                              Self__: "[Ln 3, Col 34] -> [Ln 3, Col 44]"
                        IterBegin: "[3, 5] (41)"
                        IterEnd: "[3, 44] (80)"
                        Type: "Generator Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[3, 5] (41)"
                    IterEnd: "[3, 44] (80)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[3, 5] (41)"
                IterEnd: "[3, 44] (80)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 44] (80)"
                IterEnd: "[5, 1] (82)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 82
                  Start: 80
                Whitespace: None
            Info: # <class 'TheLanguage.Lexer.Statements.VariableDeclarationStatementLexerInfo.VariableDeclarationStatementLexerInfo'>
              Expression: # <class 'TheLanguage.Lexer.Expressions.GeneratorExpressionLexerInfo.GeneratorExpressionLexerInfo'>
                ConditionExpression: None
                DisplayExpression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                  Arguments:
                    - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                      Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Name: "value2"
                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                            Name: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                            Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                          Name: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                          Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                      Keyword: None
                      Regions: # <class 'types.ArgumentLexerInfoRegions'>
                        Expression: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                        Keyword: None
                        Self__: "[Ln 3, Col 12] -> [Ln 3, Col 18]"
                  Name: "AddOne"
                  Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                    Arguments: "[Ln 3, Col 11] -> [Ln 3, Col 19]"
                    Name: "[Ln 3, Col 5] -> [Ln 3, Col 11]"
                    Self__: "[Ln 3, Col 5] -> [Ln 3, Col 19]"
                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                  Name: "value2"
                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                    Name: "[Ln 3, Col 24] -> [Ln 3, Col 30]"
                    Self__: "[Ln 3, Col 24] -> [Ln 3, Col 30]"
                Regions: # <class 'types.GeneratorExpressionLexerInfoRegions'>
                  ConditionExpression: None
                  DisplayExpression: "[Ln 3, Col 5] -> [Ln 3, Col 19]"
                  Name: "[Ln 3, Col 24] -> [Ln 3, Col 30]"
                  Self__: "[Ln 3, Col 5] -> [Ln 3, Col 44]"
                  SourceExpression: "[Ln 3, Col 34] -> [Ln 3, Col 44]"
                SourceExpression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                  Arguments: None
                  Name: "OneToTen"
                  Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                    Arguments: None
                    Name: "[Ln 3, Col 34] -> [Ln 3, Col 42]"
                    Self__: "[Ln 3, Col 34] -> [Ln 3, Col 44]"
              Modifier: None
              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                Name: "b"
                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                  Name: "[Ln 3, Col 1] -> [Ln 3, Col 2]"
                  Self__: "[Ln 3, Col 1] -> [Ln 3, Col 2]"
              Regions: # <class 'types.VariableDeclarationStatementLexerInfoRegions'>
                Expression: "[Ln 3, Col 5] -> [Ln 3, Col 44]"
                Modifier: None
                Name: "[Ln 3, Col 1] -> [Ln 3, Col 2]"
                Self__: "[Ln 3, Col 1] -> [Ln 5, Col 1]"
            IterBegin: "[3, 1] (37)"
            IterEnd: "[5, 1] (82)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[3, 1] (37)"
        IterEnd: "[5, 1] (82)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[3, 1] (37)"
    IterEnd: "[5, 1] (82)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[5, 1] (82)"
                            IterEnd: "[5, 2] (83)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(82, 83), match='c'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Name: "c"
                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                            Name: "[Ln 5, Col 1] -> [Ln 5, Col 2]"
                            Self__: "[Ln 5, Col 1] -> [Ln 5, Col 2]"
                        IterBegin: "[5, 1] (82)"
                        IterEnd: "[5, 2] (83)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[5, 1] (82)"
                    IterEnd: "[5, 2] (83)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[5, 1] (82)"
                IterEnd: "[5, 2] (83)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 3] (84)"
                IterEnd: "[5, 4] (85)"
                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(84, 85), match='='>"
                Whitespace:
                  - 83
                  - 84
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[5, 5] (86)"
                                        IterEnd: "[5, 11] (92)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(86, 92), match='AddOne'>"
                                        Whitespace:
                                          - 85
                                          - 86
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[5, 11] (92)"
                                            IterEnd: "[5, 12] (93)"
                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(92, 93), match='('>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[5, 12] (93)"
                                                                            IterEnd: "[5, 18] (99)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(93, 99), match='value3'>"
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                          Name: "value3"
                                                                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                            Name: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                                                            Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                                                        IterBegin: "[5, 12] (93)"
                                                                        IterEnd: "[5, 18] (99)"
                                                                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[5, 12] (93)"
                                                                    IterEnd: "[5, 18] (99)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                    Name: "value3"
                                                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                      Name: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                                                      Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                                    Name: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                                                    Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                                                IterBegin: "[5, 12] (93)"
                                                                IterEnd: "[5, 18] (99)"
                                                                Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[5, 12] (93)"
                                                            IterEnd: "[5, 18] (99)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[5, 12] (93)"
                                                        IterEnd: "[5, 18] (99)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[5, 12] (93)"
                                                    IterEnd: "[5, 18] (99)"
                                                    Type: "Argument <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[5, 12] (93)"
                                                IterEnd: "[5, 18] (99)"
                                                Type: "Argument Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[5, 12] (93)"
                                            IterEnd: "[5, 18] (99)"
                                            Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[5, 18] (99)"
                                            IterEnd: "[5, 19] (100)"
                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(99, 100), match=')'>"
                                            Whitespace: None
                                        IterBegin: "[5, 11] (92)"
                                        IterEnd: "[5, 19] (100)"
                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                                      Arguments:
                                        - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                          Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                            Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                              Name: "value3"
                                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                Name: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                                Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                            Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                              Name: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                              Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                          Keyword: None
                                          Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                            Expression: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                            Keyword: None
                                            Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                      Name: "AddOne"
                                      Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                                        Arguments: "[Ln 5, Col 11] -> [Ln 5, Col 19]"
                                        Name: "[Ln 5, Col 5] -> [Ln 5, Col 11]"
                                        Self__: "[Ln 5, Col 5] -> [Ln 5, Col 19]"
                                    IterBegin: "[5, 5] (86)"
                                    IterEnd: "[5, 19] (100)"
                                    Type: "Func Invocation Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[5, 5] (86)"
                                IterEnd: "[5, 19] (100)"
                                Type: "Left Recursive Wrapper <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[5, 5] (86)"
                            IterEnd: "[5, 19] (100)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[5, 20] (101)"
                            IterEnd: "[5, 23] (104)"
                            Type: "'for' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(101, 104), match='for'>"
                            Whitespace:
                              - 100
                              - 101
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[5, 24] (105)"
                                        IterEnd: "[5, 30] (111)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(105, 111), match='value3'>"
                                        Whitespace:
                                          - 104
                                          - 105
                                    Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                      Name: "value3"
                                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                        Name: "[Ln 5, Col 24] -> [Ln 5, Col 30]"
                                        Self__: "[Ln 5, Col 24] -> [Ln 5, Col 30]"
                                    IterBegin: "[5, 24] (105)"
                                    IterEnd: "[5, 30] (111)"
                                    Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[5, 24] (105)"
                                IterEnd: "[5, 30] (111)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[5, 24] (105)"
                            IterEnd: "[5, 30] (111)"
                            Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[5, 31] (112)"
                            IterEnd: "[5, 33] (114)"
                            Type: "'in' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(112, 114), match='in'>"
                            Whitespace:
                              - 111
                              - 112
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[5, 34] (115)"
                                        IterEnd: "[5, 42] (123)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(115, 123), match='OneToTen'>"
                                        Whitespace:
                                          - 114
                                          - 115
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[5, 42] (123)"
                                            IterEnd: "[5, 43] (124)"
                                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(123, 124), match='('>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[5, 43] (124)"
                                            IterEnd: "[5, 44] (125)"
                                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(124, 125), match=')'>"
                                            Whitespace: None
                                        IterBegin: "[5, 42] (123)"
                                        IterEnd: "[5, 44] (125)"
                                        Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                                      Arguments: None
                                      Name: "OneToTen"
                                      Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                                        Arguments: None
                                        Name: "[Ln 5, Col 34] -> [Ln 5, Col 42]"
                                        Self__: "[Ln 5, Col 34] -> [Ln 5, Col 44]"
                                    IterBegin: "[5, 34] (115)"
                                    IterEnd: "[5, 44] (125)"
                                    Type: "Func Invocation Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[5, 34] (115)"
                                IterEnd: "[5, 44] (125)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[5, 34] (115)"
                            IterEnd: "[5, 44] (125)"
                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[5, 45] (126)"
                                    IterEnd: "[5, 47] (128)"
                                    Type: "'if' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(126, 128), match='if'>"
                                    Whitespace:
                                      - 125
                                      - 126
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[5, 48] (129)"
                                                                    IterEnd: "[5, 54] (135)"
                                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(129, 135), match='value3'>"
                                                                    Whitespace:
                                                                      - 128
                                                                      - 129
                                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                  Name: "value3"
                                                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                    Name: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                                                    Self__: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                                                IterBegin: "[5, 48] (129)"
                                                                IterEnd: "[5, 54] (135)"
                                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[5, 48] (129)"
                                                            IterEnd: "[5, 54] (135)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                            Name: "value3"
                                                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                              Name: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                                              Self__: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                            Name: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                                            Self__: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                                        IterBegin: "[5, 48] (129)"
                                                        IterEnd: "[5, 54] (135)"
                                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[5, 48] (129)"
                                                    IterEnd: "[5, 54] (135)"
                                                    Type: "Left Recursive Wrapper <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[5, 48] (129)"
                                                IterEnd: "[5, 54] (135)"
                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[5, 55] (136)"
                                                    IterEnd: "[5, 56] (137)"
                                                    Type: "'%' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(136, 137), match='%'>"
                                                    Whitespace:
                                                      - 135
                                                      - 136
                                                IterBegin: "[5, 55] (136)"
                                                IterEnd: "[5, 56] (137)"
                                                Type: "Operator <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[5, 57] (138)"
                                                                    IterEnd: "[5, 60] (141)"
                                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(138, 141), match='two'>"
                                                                    Whitespace:
                                                                      - 137
                                                                      - 138
                                                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                                  Name: "two"
                                                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                    Name: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                                                    Self__: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                                                IterBegin: "[5, 57] (138)"
                                                                IterEnd: "[5, 60] (141)"
                                                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[5, 57] (138)"
                                                            IterEnd: "[5, 60] (141)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                            Name: "two"
                                                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                              Name: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                                              Self__: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                            Name: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                                            Self__: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                                        IterBegin: "[5, 57] (138)"
                                                        IterEnd: "[5, 60] (141)"
                                                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                    IterBegin: "[5, 57] (138)"
                                                    IterEnd: "[5, 60] (141)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[5, 57] (138)"
                                                IterEnd: "[5, 60] (141)"
                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            Info: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                                              Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                  Name: "value3"
                                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                    Name: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                                    Self__: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                                Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                  Name: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                                  Self__: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                              Operator: "OperatorType.Modulo"
                                              Regions: # <class 'types.BinaryExpressionLexerInfoRegions'>
                                                Left: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                                Operator: "[Ln 5, Col 55] -> [Ln 5, Col 56]"
                                                Right: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                                Self__: "[Ln 5, Col 48] -> [Ln 5, Col 60]"
                                              Right: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                  Name: "two"
                                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                    Name: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                                    Self__: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                                Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                  Name: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                                  Self__: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                            IterBegin: "[5, 48] (129)"
                                            IterEnd: "[5, 60] (141)"
                                            Type: "Binary Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[5, 48] (129)"
                                        IterEnd: "[5, 60] (141)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[5, 48] (129)"
                                    IterEnd: "[5, 60] (141)"
                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                IterBegin: "[5, 45] (126)"
                                IterEnd: "[5, 60] (141)"
                                Type: "Conditional <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[5, 45] (126)"
                            IterEnd: "[5, 60] (141)"
                            Type: "Repeat: {Conditional, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.Expressions.GeneratorExpressionLexerInfo.GeneratorExpressionLexerInfo'>
                          ConditionExpression: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                            Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                Name: "value3"
                                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                  Name: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                  Self__: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                              Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                Name: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                                Self__: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                            Operator: "OperatorType.Modulo"
                            Regions: # <class 'types.BinaryExpressionLexerInfoRegions'>
                              Left: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                              Operator: "[Ln 5, Col 55] -> [Ln 5, Col 56]"
                              Right: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                              Self__: "[Ln 5, Col 48] -> [Ln 5, Col 60]"
                            Right: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                Name: "two"
                                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                  Name: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                  Self__: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                              Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                Name: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                                Self__: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                          DisplayExpression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                            Arguments:
                              - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                                Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                    Name: "value3"
                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                      Name: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                      Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                    Name: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                    Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                Keyword: None
                                Regions: # <class 'types.ArgumentLexerInfoRegions'>
                                  Expression: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                                  Keyword: None
                                  Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                            Name: "AddOne"
                            Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                              Arguments: "[Ln 5, Col 11] -> [Ln 5, Col 19]"
                              Name: "[Ln 5, Col 5] -> [Ln 5, Col 11]"
                              Self__: "[Ln 5, Col 5] -> [Ln 5, Col 19]"
                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                            Name: "value3"
                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                              Name: "[Ln 5, Col 24] -> [Ln 5, Col 30]"
                              Self__: "[Ln 5, Col 24] -> [Ln 5, Col 30]"
                          Regions: # <class 'types.GeneratorExpressionLexerInfoRegions'>
                            ConditionExpression: "[Ln 5, Col 45] -> [Ln 5, Col 60]"
                            DisplayExpression: "[Ln 5, Col 5] -> [Ln 5, Col 19]"
                            Name: "[Ln 5, Col 24] -> [Ln 5, Col 30]"
                            Self__: "[Ln 5, Col 5] -> [Ln 5, Col 60]"
                            SourceExpression: "[Ln 5, Col 34] -> [Ln 5, Col 44]"
                          SourceExpression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                            Arguments: None
                            Name: "OneToTen"
                            Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                              Arguments: None
                              Name: "[Ln 5, Col 34] -> [Ln 5, Col 42]"
                              Self__: "[Ln 5, Col 34] -> [Ln 5, Col 44]"
                        IterBegin: "[5, 5] (86)"
                        IterEnd: "[5, 60] (141)"
                        Type: "Generator Expression <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[5, 5] (86)"
                    IterEnd: "[5, 60] (141)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[5, 5] (86)"
                IterEnd: "[5, 60] (141)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 60] (141)"
                IterEnd: "[6, 1] (142)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 142
                  Start: 141
                Whitespace: None
            Info: # <class 'TheLanguage.Lexer.Statements.VariableDeclarationStatementLexerInfo.VariableDeclarationStatementLexerInfo'>
              Expression: # <class 'TheLanguage.Lexer.Expressions.GeneratorExpressionLexerInfo.GeneratorExpressionLexerInfo'>
                ConditionExpression: # <class 'TheLanguage.Lexer.Expressions.BinaryExpressionLexerInfo.BinaryExpressionLexerInfo'>
                  Left: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                      Name: "value3"
                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                        Name: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                        Self__: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                    Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                      Name: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                      Self__: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                  Operator: "OperatorType.Modulo"
                  Regions: # <class 'types.BinaryExpressionLexerInfoRegions'>
                    Left: "[Ln 5, Col 48] -> [Ln 5, Col 54]"
                    Operator: "[Ln 5, Col 55] -> [Ln 5, Col 56]"
                    Right: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                    Self__: "[Ln 5, Col 48] -> [Ln 5, Col 60]"
                  Right: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                      Name: "two"
                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                        Name: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                        Self__: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                    Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                      Name: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                      Self__: "[Ln 5, Col 57] -> [Ln 5, Col 60]"
                DisplayExpression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                  Arguments:
                    - # <class 'TheLanguage.Lexer.Common.ArgumentLexerInfo.ArgumentLexerInfo'>
                      Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                        Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Name: "value3"
                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                            Name: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                            Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                        Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                          Name: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                          Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                      Keyword: None
                      Regions: # <class 'types.ArgumentLexerInfoRegions'>
                        Expression: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                        Keyword: None
                        Self__: "[Ln 5, Col 12] -> [Ln 5, Col 18]"
                  Name: "AddOne"
                  Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                    Arguments: "[Ln 5, Col 11] -> [Ln 5, Col 19]"
                    Name: "[Ln 5, Col 5] -> [Ln 5, Col 11]"
                    Self__: "[Ln 5, Col 5] -> [Ln 5, Col 19]"
                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                  Name: "value3"
                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                    Name: "[Ln 5, Col 24] -> [Ln 5, Col 30]"
                    Self__: "[Ln 5, Col 24] -> [Ln 5, Col 30]"
                Regions: # <class 'types.GeneratorExpressionLexerInfoRegions'>
                  ConditionExpression: "[Ln 5, Col 45] -> [Ln 5, Col 60]"
                  DisplayExpression: "[Ln 5, Col 5] -> [Ln 5, Col 19]"
                  Name: "[Ln 5, Col 24] -> [Ln 5, Col 30]"
                  Self__: "[Ln 5, Col 5] -> [Ln 5, Col 60]"
                  SourceExpression: "[Ln 5, Col 34] -> [Ln 5, Col 44]"
                SourceExpression: # <class 'TheLanguage.Lexer.Expressions.FuncInvocationExpressionLexerInfo.FuncInvocationExpressionLexerInfo'>
                  Arguments: None
                  Name: "OneToTen"
                  Regions: # <class 'types.FuncInvocationExpressionLexerInfoRegions'>
                    Arguments: None
                    Name: "[Ln 5, Col 34] -> [Ln 5, Col 42]"
                    Self__: "[Ln 5, Col 34] -> [Ln 5, Col 44]"
              Modifier: None
              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                Name: "c"
                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                  Name: "[Ln 5, Col 1] -> [Ln 5, Col 2]"
                  Self__: "[Ln 5, Col 1] -> [Ln 5, Col 2]"
              Regions: # <class 'types.VariableDeclarationStatementLexerInfoRegions'>
                Expression: "[Ln 5, Col 5] -> [Ln 5, Col 60]"
                Modifier: None
                Name: "[Ln 5, Col 1] -> [Ln 5, Col 2]"
                Self__: "[Ln 5, Col 1] -> [Ln 6, Col 1]"
            IterBegin: "[5, 1] (82)"
            IterEnd: "[6, 1] (142)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[5, 1] (82)"
        IterEnd: "[6, 1] (142)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[5, 1] (82)"
    IterEnd: "[6, 1] (142)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[6, 1] (142)"
Type: "<None>"
