# ----------------------------------------------------------------------
# |
# |  FixedInt.TheLanguage
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2022-04-18 10:27:42
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2022
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
from .Concepts.MutableInt import MutableInt


# ----------------------------------------------------------------------
[Fundamental]
public mutable class FixedInt <TEMPLATE
    pos:
        Int! num_bytes!,                    # 1, 2, 4, 8, 16
    key:
        Bool! is_checked!,
        Bool! is_signed!,
TEMPLATE> {
    Int! min_value! , # BugBug: = -(((1 << (num_bytes! * 8)) - 1) // 2) if is_signed! else 0,
    Int! max_value! , # BugBug: = (((1 << (num_bytes! * 8) - 1) // 2) - 1) if is_signed! else ((1 << (num_bytes! * 8)) - 1),
}
    implements public MutableInt { min_value!, max_value! }
:
    __EvalTemplates!__():
        Enforce!(
            num_bytes! == 1
            or num_bytes! == 2
            or num_bytes! == 4
            or num_bytes! == 8
            or num_bytes! == 16
        )

    __EvalConstraints!__():
        pass! # BugBug: # Enforce that the min and max values are valid given the number of bytes
        pass! # BugBug: Enforce!(min_value! >= -(((1 << (num_bytes! * 8)) - 1) // 2) if is_signed! else 0)
        pass! # BugBug: Enforce!(max_value! <= (((1 << (num_bytes! * 8) - 1) // 2) - 1) if is_signed! else ((1 << (num_bytes! * 8)) - 1))
        pass! # BugBug:
        pass! # BugBug: # Ensure that the range between the min and the max can be contained within the bytes
        pass! # BugBug: Enforce!(max_value! - min_value! <= ((((1 << (num_bytes! * 8) - 1) // 2) - 1) if is_signed! else ((1 << (num_bytes! * 8)) - 1)))
        pass! # BugBug: Enforce!(min_value! - max_value! >= (-(((1 << (num_bytes! * 8)) - 1) // 2) if is_signed! else 0))

    [Deferred, Static] public override ThisType var __Deserialize?__<TEMPLATE ArchiveT TEMPLATE>(ArchiveT ref archive)
    [Deferred] public override None __Serialize?__<TEMPLATE ArchiveT TEMPLATE>(ArchiveT ref archive) immutable
    [Deferred] public override None __Serialize?__<TEMPLATE ArchiveT TEMPLATE>(ArchiveT ref archive) var

    [Deferred] public override None __Accept?__<TEMPLATE VisitorT TEMPLATE>(VisitorT ref visitor) immutable
    [Deferred] public override None __Accept?__<TEMPLATE VisitorT TEMPLATE>(VisitorT ref visitor) val

    [Deferred] public override ThisType var __Clone?__() immutable

    [Deferred] public override Bool val __ToBool__() immutable              # value != 0
    [Deferred] public override Str val __ToString?__() immutable

    [Deferred, Static] public override CompareResult val __Compare__(ThisType immutable this, Int immutable that)

    [Deferred] public override Bool val __Equal__(Int immutable that) immutable
    [Deferred] public override Bool val __NotEqual__(Int immutable that) immutable
    [Deferred] public override Bool val __Less__(Int immutable that) immutable
    [Deferred] public override Bool val __LessEqual__(Int immutable that) immutable
    [Deferred] public override Bool val __Greater__(Int immutable that) immutable
    [Deferred] public override Bool val __GreaterEqual__(Int immutable that) immutable

    [Deferred] public override ThisType var __Negative?__() immutable
    [Deferred] public override ThisType var __Positive?__() immutable
    [Deferred] public override ThisType var __BitFlip?__() immutable

    [Deferred] public override Num var __Divide?__(Int immutable divisor) immutable
    [Deferred] public override ThisType var __DivideFloor?__(Int immutable divisor) immutable
    [Deferred] public override ThisType var __Modulo?__(Int immutable divisor) immutable
    [Deferred] public override ThisType var __Multiply?__(Int immutable multiplier) immutable
    [Deferred] public override ThisType var __Power?__(Int immutable exponent) immutable

    [Deferred] public override ThisType var __Add?__(Int immutable value) immutable
    [Deferred] public override ThisType var __Subtract?__(Int immutable value) immutable

    [Deferred] public override ThisType var __BitShiftLeft?__(Int immutable places) immutable
    [Deferred] public override ThisType var __BitShiftRight?__(Int immutable places) immutable

    [Deferred] public override ThisType var __BitAnd?__(Int immutable value) immutable
    [Deferred] public override ThisType var __BitXOr?__(Int immutable value) immutable
    [Deferred] public override ThisType var __BitOr?__(Int immutable value) immutable

    [Deferred] public override None __BitFlipInplace?__() var

    [Deferred] public override None __DivideFloorInplace?__(Int immutable divisor) var
    [Deferred] public override None __ModuloInplace?__(Int immutable divisor) var
    [Deferred] public override None __MultiplyInplace?__(Int immutable multiplier) var
    [Deferred] public override None __PowerInplace?__(Int immutable exponent) var

    [Deferred] public override None __AddInplace?__(Int immutable value) var
    [Deferred] public override None __SubtractInplace?__(Int immutable value) var

    [Deferred] public override None __BitShiftLeftInplace?__(Int immutable places) var
    [Deferred] public override None __BitShiftRightInplace?__(Int immutable places) var

    [Deferred] public override None __BitAndInplace?__(Int immutable value) var
    [Deferred] public override None __BitXOrInplace?__(Int immutable value) var
    [Deferred] public override None __BitOrInplace?__(Int immutable value) var


# ----------------------------------------------------------------------
public Int8 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 1, is_signed! = True!, is_checked! = False! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public CheckedInt8 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 1, is_signed! = True!, is_checked! = True! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public UInt8 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 1, is_signed! = False!, is_checked! = False! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public CheckedUInt8 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 1, is_signed! = False!, is_checked! = True! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}


# ----------------------------------------------------------------------
public Int16 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 2, is_signed! = True!, is_checked! = False! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public CheckedInt16 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 2, is_signed! = True!, is_checked! = True! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public UInt16 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 2, is_signed! = False!, is_checked! = False! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public CheckedUInt16 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                          = FixedInt <TEMPLATE 2, is_signed! = False!, is_checked! = True! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}


# ----------------------------------------------------------------------
public Int32 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 4, is_signed! = True!, is_checked! = False! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public CheckedInt32 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 4, is_signed! = True!, is_checked! = True! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public UInt32 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 4, is_signed! = False!, is_checked! = False! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public CheckedUInt32 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 4, is_signed! = False!, is_checked! = True! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}


# ----------------------------------------------------------------------
public Int64 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 8, is_signed! = True!, is_checked! = False! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public CheckedInt64 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 8, is_signed! = True!, is_checked! = True! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public UInt64 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 8, is_signed! = False!, is_checked! = False! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public CheckedUInt64 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 8, is_signed! = False!, is_checked! = True! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}


# ----------------------------------------------------------------------
public Int128 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 16, is_signed! = True!, is_checked! = False! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public CheckedInt128 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 16, is_signed! = True!, is_checked! = True! TEMPLATE> {min_value! = min_value!, max_value! = max_value!}

public UInt128 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 16, is_signed! = False!, is_checked! = False! TEMPLATE>

public CheckedUInt128 {
    (Int! | None!) min_value! = None!,
    (Int! | None!) max_value! = None!,
}                                           = FixedInt <TEMPLATE 16, is_signed! = False!, is_checked! = True! TEMPLATE>


# ----------------------------------------------------------------------
if __architecture_bytes! == 4:
    public ArchInt                          = Int32
    public CheckedArchInt                   = CheckedInt32

    public UArchInt                         = UInt32
    public CheckedUArchInt                  = CheckedUInt32

elif __architecture_bytes! == 8:
    public ArchInt                          = Int64
    public CheckedArchInt                   = CheckedInt64

    public UArchInt                         = UInt64
    public CheckedUArchInt                  = CheckedUInt64

else:
    Error!("Unsupported architecture", __architecture_bytes!)
