# <class 'Bootstrap.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
    DataItems:
      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 1] (0)"
          IterEnd: "[1, 6] (5)"
          Token: "Word Token"
          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(0, 5), match='worda'>"
          Whitespace: None
        Phrase: "Word Token"
      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 6] (5)"
          IterEnd: "[4, 1] (8)"
          Token: "Newline+"
          Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 8
            Start: 5
          Whitespace: None
        Phrase: "Newline+"
      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[4, 1] (8)"
              IterEnd: "[4, 9] (16)"
              Token: "Indent"
              Value: # <class 'Bootstrap.Lexer.Components.Token.IndentToken.MatchResult'>
                End: 16
                Start: 8
                Value: 8
              Whitespace: None
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[4, 9] (16)"
                IterEnd: "[4, 14] (21)"
                Token: "Word Token"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(16, 21), match='wordb'>"
                Whitespace: None
              Phrase: "Word Token"
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[4, 14] (21)"
              IterEnd: "[5, 1] (22)"
              Token: "Newline+"
              Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
                End: 22
                Start: 21
              Whitespace: None
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[5, 1] (22)"
              IterEnd: "[5, 13] (34)"
              Token: "Indent"
              Value: # <class 'Bootstrap.Lexer.Components.Token.IndentToken.MatchResult'>
                End: 34
                Start: 22
                Value: 12
              Whitespace: None
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[5, 13] (34)"
                IterEnd: "[5, 18] (39)"
                Token: "Word Token"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(34, 39), match='wordc'>"
                Whitespace: None
              Phrase: "Word Token"
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[5, 18] (39)"
              IterEnd: "[7, 1] (41)"
              Token: "Newline+"
              Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
                End: 41
                Start: 39
              Whitespace: None
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[7, 1] (41)"
              IterEnd: "[7, 1] (41)"
              Token: "Dedent"
              Value: # <class 'Bootstrap.Lexer.Components.Token.DedentToken.MatchResult'>
                {}
              Whitespace: None
            - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: True
              IterBegin: "[7, 1] (41)"
              IterEnd: "[7, 1] (41)"
              Token: "Dedent"
              Value: # <class 'Bootstrap.Lexer.Components.Token.DedentToken.MatchResult'>
                {}
              Whitespace: None
          IsComplete: True
        Phrase: "Nested"
      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[7, 1] (41)"
          IterEnd: "[7, 6] (46)"
          Token: "Word Token"
          Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(41, 46), match='wordd'>"
          Whitespace: None
        Phrase: "Word Token"
      - # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Bootstrap.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[7, 6] (46)"
          IterEnd: "[8, 1] (47)"
          Token: "Newline+"
          Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 47
            Start: 46
          Whitespace: None
        Phrase: "Newline+"
    IsComplete: True
  Phrase: "Phrase"
IterBegin: "[1, 1] (0)"
IterEnd: "[8, 1] (47)"
Success: True
