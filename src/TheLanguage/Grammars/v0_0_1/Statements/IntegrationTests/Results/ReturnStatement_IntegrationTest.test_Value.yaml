# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 7] (6)"
                Type: "'return' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 6), match='return'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 8] (7)"
                                        IterEnd: "[1, 13] (12)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(7, 12), match='value'>"
                                        Whitespace:
                                          - 6
                                          - 7
                                    Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                      Name: "value"
                                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                        Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                        Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                    IterBegin: "[1, 8] (7)"
                                    IterEnd: "[1, 13] (12)"
                                    Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[1, 8] (7)"
                                IterEnd: "[1, 13] (12)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                Name: "value"
                                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                  Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                  Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                              Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                                Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                            IterBegin: "[1, 8] (7)"
                            IterEnd: "[1, 13] (12)"
                            Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                        IterBegin: "[1, 8] (7)"
                        IterEnd: "[1, 13] (12)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[1, 8] (7)"
                    IterEnd: "[1, 13] (12)"
                    Type: "Value <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[1, 8] (7)"
                IterEnd: "[1, 13] (12)"
                Type: "Repeat: {Value, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 13] (12)"
                IterEnd: "[2, 1] (13)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 13
                  Start: 12
                Whitespace: None
            Info: # <class 'TheLanguage.Lexer.Statements.ReturnStatementLexerInfo.ReturnStatementLexerInfo'>
              Expression: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                  Name: "value"
                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                    Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                    Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                  Name: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                  Self__: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
              Regions: # <class 'types.ReturnStatementLexerInfoRegions'>
                Expression: "[Ln 1, Col 8] -> [Ln 1, Col 13]"
                Self__: "[Ln 1, Col 1] -> [Ln 2, Col 1]"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (13)"
            Type: "Return Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (13)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (13)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 1] (13)"
                IterEnd: "[2, 7] (19)"
                Type: "'return' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(13, 19), match='return'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 8] (20)"
                                    IterEnd: "[2, 9] (21)"
                                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(20, 21), match='('>"
                                    Whitespace:
                                      - 19
                                      - 20
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[2, 9] (21)"
                                                        IterEnd: "[2, 10] (22)"
                                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(21, 22), match='a'>"
                                                        Whitespace: None
                                                    Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                      Name: "a"
                                                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                        Name: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                                                        Self__: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                                                    IterBegin: "[2, 9] (21)"
                                                    IterEnd: "[2, 10] (22)"
                                                    Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[2, 9] (21)"
                                                IterEnd: "[2, 10] (22)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                              Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                Name: "a"
                                                Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                  Name: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                                                  Self__: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                                              Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                Name: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                                                Self__: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                                            IterBegin: "[2, 9] (21)"
                                            IterEnd: "[2, 10] (22)"
                                            Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                        IterBegin: "[2, 9] (21)"
                                        IterEnd: "[2, 10] (22)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[2, 9] (21)"
                                    IterEnd: "[2, 10] (22)"
                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 10] (22)"
                                            IterEnd: "[2, 11] (23)"
                                            Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(22, 23), match=','>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[2, 11] (23)"
                                                                IterEnd: "[2, 12] (24)"
                                                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(23, 24), match='b'>"
                                                                Whitespace: None
                                                            Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                              Name: "b"
                                                              Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                                Name: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                                                                Self__: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                                                            IterBegin: "[2, 11] (23)"
                                                            IterEnd: "[2, 12] (24)"
                                                            Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[2, 11] (23)"
                                                        IterEnd: "[2, 12] (24)"
                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                    Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                                      Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                                        Name: "b"
                                                        Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                                          Name: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                                                          Self__: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                                                      Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                                        Name: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                                                        Self__: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                                                    IterBegin: "[2, 11] (23)"
                                                    IterEnd: "[2, 12] (24)"
                                                    Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                IterBegin: "[2, 11] (23)"
                                                IterEnd: "[2, 12] (24)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[2, 11] (23)"
                                            IterEnd: "[2, 12] (24)"
                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                        IterBegin: "[2, 10] (22)"
                                        IterEnd: "[2, 12] (24)"
                                        Type: "Comma and Element <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[2, 10] (22)"
                                    IterEnd: "[2, 12] (24)"
                                    Type: "Repeat: {Comma and Element, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 12] (24)"
                                    IterEnd: "[2, 13] (25)"
                                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(24, 25), match=')'>"
                                    Whitespace: None
                                IterBegin: "[2, 8] (20)"
                                IterEnd: "[2, 13] (25)"
                                Type: "Multiple <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            Info: # <class 'TheLanguage.Lexer.Expressions.TupleExpressionLexerInfo.TupleExpressionLexerInfo'>
                              Expressions:
                                - # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                    Name: "a"
                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                      Name: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                                      Self__: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                    Name: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                                    Self__: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                                - # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                                  Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                    Name: "b"
                                    Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                      Name: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                                      Self__: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                                  Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                                    Name: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                                    Self__: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                              Regions: # <class 'types.TupleExpressionLexerInfoRegions'>
                                Expressions: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                                Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                            IterBegin: "[2, 8] (20)"
                            IterEnd: "[2, 13] (25)"
                            Type: "Tuple Expression <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[2, 8] (20)"
                        IterEnd: "[2, 13] (25)"
                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[2, 8] (20)"
                    IterEnd: "[2, 13] (25)"
                    Type: "Value <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                IterBegin: "[2, 8] (20)"
                IterEnd: "[2, 13] (25)"
                Type: "Repeat: {Value, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 13] (25)"
                IterEnd: "[3, 1] (26)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 26
                  Start: 25
                Whitespace: None
            Info: # <class 'TheLanguage.Lexer.Statements.ReturnStatementLexerInfo.ReturnStatementLexerInfo'>
              Expression: # <class 'TheLanguage.Lexer.Expressions.TupleExpressionLexerInfo.TupleExpressionLexerInfo'>
                Expressions:
                  - # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                      Name: "a"
                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                        Name: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                        Self__: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                    Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                      Name: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                      Self__: "[Ln 2, Col 9] -> [Ln 2, Col 10]"
                  - # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                    Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                      Name: "b"
                      Regions: # <class 'types.VariableNameLexerInfoRegions'>
                        Name: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                        Self__: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                    Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                      Name: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                      Self__: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                Regions: # <class 'types.TupleExpressionLexerInfoRegions'>
                  Expressions: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                  Self__: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
              Regions: # <class 'types.ReturnStatementLexerInfoRegions'>
                Expression: "[Ln 2, Col 8] -> [Ln 2, Col 13]"
                Self__: "[Ln 2, Col 1] -> [Ln 3, Col 1]"
            IterBegin: "[2, 1] (13)"
            IterEnd: "[3, 1] (26)"
            Type: "Return Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[2, 1] (13)"
        IterEnd: "[3, 1] (26)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[2, 1] (13)"
    IterEnd: "[3, 1] (26)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[3, 1] (26)"
Type: "<None>"
