# <class 'Bootstrap.Lexer.Components.AST.Node'>
Children:
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 4] (3)"
            Type: "Upper <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
            Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 3), match='ONE'>"
            Whitespace: None
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[1, 4] (3)"
        Type: "(Upper Phrase) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[1, 4] (3)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Bootstrap.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Bootstrap.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Bootstrap.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 5] (4)"
                IterEnd: "[1, 8] (7)"
                Type: "Lower <class 'Bootstrap.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(4, 7), match='two'>"
                Whitespace:
                  - 3
                  - 4
              - # <class 'Bootstrap.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 8] (7)"
                IterEnd: "[2, 1] (8)"
                Type: "Newline+ <class 'Bootstrap.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Bootstrap.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 8
                  Start: 7
                Whitespace: None
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[2, 1] (8)"
            Type: "Lower Phrase <class 'Bootstrap.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[1, 5] (4)"
        IterEnd: "[2, 1] (8)"
        Type: "(Upper Phrase) Statements / (Lower Phrase) Statements <class 'Bootstrap.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 5] (4)"
    IterEnd: "[2, 1] (8)"
    Type: "Dynamic Phrase <class 'Bootstrap.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[2, 1] (8)"
Type: "<None>"
