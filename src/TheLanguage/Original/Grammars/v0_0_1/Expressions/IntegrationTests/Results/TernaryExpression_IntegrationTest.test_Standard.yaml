# <class 'Original.Parser.RootParserInfo.RootParserInfo'>
Documentation: None
Regions__: # <class 'types.RootParserInfoRegions'>
  Documentation: None
  Self__: "[Ln 1, Col 1] -> [Ln 3, Col 1]"
Statements:
  - # <class 'Original.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
    Expression: # <class 'Original.Parser.Expressions.TernaryExpressionParserInfo.TernaryExpressionParserInfo'>
      ConditionExpression: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
        Arguments: False
        Expression: # <class 'Original.Parser.Expressions.FuncNameExpressionParserInfo.FuncNameExpressionParserInfo'>
          Name: "Condition1"
          Regions__: # <class 'types.FuncNameExpressionParserInfoRegions'>
            Name: "[Ln 1, Col 24] -> [Ln 1, Col 34]"
            Self__: "[Ln 1, Col 24] -> [Ln 1, Col 34]"
        Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
          Arguments: "[Ln 1, Col 34] -> [Ln 1, Col 36]"
          Expression: "[Ln 1, Col 24] -> [Ln 1, Col 34]"
          Self__: "[Ln 1, Col 24] -> [Ln 1, Col 36]"
      FalseExpression: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
        Arguments: False
        Expression: # <class 'Original.Parser.Expressions.FuncNameExpressionParserInfo.FuncNameExpressionParserInfo'>
          Name: "FalseFunc"
          Regions__: # <class 'types.FuncNameExpressionParserInfoRegions'>
            Name: "[Ln 1, Col 42] -> [Ln 1, Col 51]"
            Self__: "[Ln 1, Col 42] -> [Ln 1, Col 51]"
        Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
          Arguments: "[Ln 1, Col 51] -> [Ln 1, Col 53]"
          Expression: "[Ln 1, Col 42] -> [Ln 1, Col 51]"
          Self__: "[Ln 1, Col 42] -> [Ln 1, Col 53]"
      Regions__: # <class 'types.TernaryExpressionParserInfoRegions'>
        ConditionExpression: "[Ln 1, Col 24] -> [Ln 1, Col 36]"
        FalseExpression: "[Ln 1, Col 42] -> [Ln 1, Col 53]"
        Self__: "[Ln 1, Col 10] -> [Ln 1, Col 53]"
        TrueExpression: "[Ln 1, Col 10] -> [Ln 1, Col 20]"
      TrueExpression: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
        Arguments: False
        Expression: # <class 'Original.Parser.Expressions.FuncNameExpressionParserInfo.FuncNameExpressionParserInfo'>
          Name: "TrueFunc"
          Regions__: # <class 'types.FuncNameExpressionParserInfoRegions'>
            Name: "[Ln 1, Col 10] -> [Ln 1, Col 18]"
            Self__: "[Ln 1, Col 10] -> [Ln 1, Col 18]"
        Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
          Arguments: "[Ln 1, Col 18] -> [Ln 1, Col 20]"
          Expression: "[Ln 1, Col 10] -> [Ln 1, Col 18]"
          Self__: "[Ln 1, Col 10] -> [Ln 1, Col 20]"
    Modifier: None
    Name: # <class 'Original.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
      Name: "value1"
      Regions__: # <class 'types.VariableNameParserInfoRegions'>
        Name: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
        Self__: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
    Regions__: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
      Expression: "[Ln 1, Col 10] -> [Ln 1, Col 53]"
      Modifier: None
      Name: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
      Self__: "[Ln 1, Col 1] -> [Ln 2, Col 1]"
  - # <class 'Original.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
    Expression: # <class 'Original.Parser.Expressions.TernaryExpressionParserInfo.TernaryExpressionParserInfo'>
      ConditionExpression: # <class 'Original.Parser.Expressions.FuncInvocationExpressionParserInfo.FuncInvocationExpressionParserInfo'>
        Arguments: False
        Expression: # <class 'Original.Parser.Expressions.FuncNameExpressionParserInfo.FuncNameExpressionParserInfo'>
          Name: "Condition2"
          Regions__: # <class 'types.FuncNameExpressionParserInfoRegions'>
            Name: "[Ln 2, Col 23] -> [Ln 2, Col 33]"
            Self__: "[Ln 2, Col 23] -> [Ln 2, Col 33]"
        Regions__: # <class 'types.FuncInvocationExpressionParserInfoRegions'>
          Arguments: "[Ln 2, Col 33] -> [Ln 2, Col 35]"
          Expression: "[Ln 2, Col 23] -> [Ln 2, Col 33]"
          Self__: "[Ln 2, Col 23] -> [Ln 2, Col 35]"
      FalseExpression: # <class 'Original.Parser.Expressions.TupleExpressionParserInfo.TupleExpressionParserInfo'>
        Expressions:
          - # <class 'Original.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
            Name: # <class 'Original.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
              Name: "d"
              Regions__: # <class 'types.VariableNameParserInfoRegions'>
                Name: "[Ln 2, Col 42] -> [Ln 2, Col 43]"
                Self__: "[Ln 2, Col 42] -> [Ln 2, Col 43]"
            Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
              Name: "[Ln 2, Col 42] -> [Ln 2, Col 43]"
              Self__: "[Ln 2, Col 42] -> [Ln 2, Col 43]"
        Regions__: # <class 'types.TupleExpressionParserInfoRegions'>
          Self__: "[Ln 2, Col 41] -> [Ln 2, Col 45]"
      Regions__: # <class 'types.TernaryExpressionParserInfoRegions'>
        ConditionExpression: "[Ln 2, Col 23] -> [Ln 2, Col 35]"
        FalseExpression: "[Ln 2, Col 41] -> [Ln 2, Col 45]"
        Self__: "[Ln 2, Col 10] -> [Ln 2, Col 45]"
        TrueExpression: "[Ln 2, Col 10] -> [Ln 2, Col 19]"
      TrueExpression: # <class 'Original.Parser.Expressions.TupleExpressionParserInfo.TupleExpressionParserInfo'>
        Expressions:
          - # <class 'Original.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
            Name: # <class 'Original.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
              Name: "a"
              Regions__: # <class 'types.VariableNameParserInfoRegions'>
                Name: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
                Self__: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
            Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
              Name: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
              Self__: "[Ln 2, Col 11] -> [Ln 2, Col 12]"
          - # <class 'Original.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
            Name: # <class 'Original.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
              Name: "b"
              Regions__: # <class 'types.VariableNameParserInfoRegions'>
                Name: "[Ln 2, Col 14] -> [Ln 2, Col 15]"
                Self__: "[Ln 2, Col 14] -> [Ln 2, Col 15]"
            Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
              Name: "[Ln 2, Col 14] -> [Ln 2, Col 15]"
              Self__: "[Ln 2, Col 14] -> [Ln 2, Col 15]"
          - # <class 'Original.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
            Name: # <class 'Original.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
              Name: "c"
              Regions__: # <class 'types.VariableNameParserInfoRegions'>
                Name: "[Ln 2, Col 17] -> [Ln 2, Col 18]"
                Self__: "[Ln 2, Col 17] -> [Ln 2, Col 18]"
            Regions__: # <class 'types.VariableExpressionParserInfoRegions'>
              Name: "[Ln 2, Col 17] -> [Ln 2, Col 18]"
              Self__: "[Ln 2, Col 17] -> [Ln 2, Col 18]"
        Regions__: # <class 'types.TupleExpressionParserInfoRegions'>
          Self__: "[Ln 2, Col 10] -> [Ln 2, Col 19]"
    Modifier: None
    Name: # <class 'Original.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
      Name: "value2"
      Regions__: # <class 'types.VariableNameParserInfoRegions'>
        Name: "[Ln 2, Col 1] -> [Ln 2, Col 7]"
        Self__: "[Ln 2, Col 1] -> [Ln 2, Col 7]"
    Regions__: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
      Expression: "[Ln 2, Col 10] -> [Ln 2, Col 45]"
      Modifier: None
      Name: "[Ln 2, Col 1] -> [Ln 2, Col 7]"
      Self__: "[Ln 2, Col 1] -> [Ln 3, Col 1]"
