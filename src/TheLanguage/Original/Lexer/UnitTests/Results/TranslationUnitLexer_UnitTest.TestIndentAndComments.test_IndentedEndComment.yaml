# <class 'Original.Lexer.Components.AST.Node'>
Children:
  - # <class 'Original.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Original.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Original.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 7] (6)"
                    Type: "Lower <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(0, 6), match='lower1'>"
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 7] (6)"
                    IterEnd: "[1, 8] (7)"
                    Type: "':' <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(6, 7), match=':'>"
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 8] (7)"
                    IterEnd: "[2, 1] (8)"
                    Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                      End: 8
                      Start: 7
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[2, 1] (8)"
                    IterEnd: "[2, 5] (12)"
                    Type: "Indent <class 'Original.Lexer.Components.Token.IndentToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.IndentToken.MatchResult'>
                      End: 12
                      Start: 8
                      Value: 4
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 5] (12)"
                            IterEnd: "[2, 11] (18)"
                            Type: "Upper <class 'Original.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(12, 18), match='UPPER1'>"
                            Whitespace: None
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 11] (18)"
                            IterEnd: "[4, 1] (20)"
                            Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                              End: 20
                              Start: 18
                            Whitespace: None
                        IsIgnored: False
                        IterBegin: "[2, 5] (12)"
                        IterEnd: "[4, 1] (20)"
                        Type: "[Upper, Newline+] <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IsIgnored: False
                    IterBegin: "[2, 5] (12)"
                    IterEnd: "[4, 1] (20)"
                    Type: "{[Upper, Newline+], 1, None} <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: True
                    IterBegin: "[4, 9] (28)"
                    IterEnd: "[4, 20] (39)"
                    Type: "<comment> <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(28, 39), match='# Comment 1'>"
                    Whitespace:
                      - 20
                      - 28
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: True
                    IterBegin: "[4, 20] (39)"
                    IterEnd: "[8, 1] (43)"
                    Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                      End: 43
                      Start: 39
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[8, 1] (43)"
                    IterEnd: "[8, 1] (43)"
                    Type: "Dedent <class 'Original.Lexer.Components.Token.DedentToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.DedentToken.MatchResult'>
                      {}
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[8, 1] (43)"
                Type: "[Lower, ':', Newline+, Indent, {[Upper, Newline+], 1, None}, Dedent] <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[8, 1] (43)"
                    IterEnd: "[8, 7] (49)"
                    Type: "Lower <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(43, 49), match='lower2'>"
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[8, 7] (49)"
                    IterEnd: "[8, 8] (50)"
                    Type: "':' <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(49, 50), match=':'>"
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[8, 8] (50)"
                    IterEnd: "[9, 1] (51)"
                    Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                      End: 51
                      Start: 50
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[9, 1] (51)"
                    IterEnd: "[9, 5] (55)"
                    Type: "Indent <class 'Original.Lexer.Components.Token.IndentToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.IndentToken.MatchResult'>
                      End: 55
                      Start: 51
                      Value: 4
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[9, 5] (55)"
                            IterEnd: "[9, 11] (61)"
                            Type: "Upper <class 'Original.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(55, 61), match='UPPER2'>"
                            Whitespace: None
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[9, 11] (61)"
                            IterEnd: "[10, 1] (62)"
                            Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                              End: 62
                              Start: 61
                            Whitespace: None
                        IsIgnored: False
                        IterBegin: "[9, 5] (55)"
                        IterEnd: "[10, 1] (62)"
                        Type: "[Upper, Newline+] <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IsIgnored: False
                    IterBegin: "[9, 5] (55)"
                    IterEnd: "[10, 1] (62)"
                    Type: "{[Upper, Newline+], 1, None} <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[10, 1] (62)"
                    IterEnd: "[10, 1] (62)"
                    Type: "Dedent <class 'Original.Lexer.Components.Token.DedentToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.DedentToken.MatchResult'>
                      {}
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[8, 1] (43)"
                IterEnd: "[10, 1] (62)"
                Type: "[Lower, ':', Newline+, Indent, {[Upper, Newline+], 1, None}, Dedent] <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[10, 1] (62)"
            Type: "Phrase <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[10, 1] (62)"
        Type: "(Phrase) Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[10, 1] (62)"
    Type: "Dynamic Phrase <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[10, 1] (62)"
Type: "<None>"
