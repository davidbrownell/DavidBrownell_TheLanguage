# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 6] (5)"
                    Type: "'class' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(0, 5), match='class'>"
                    Whitespace: None
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 6] (5)"
                Type: "Class Type <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 7] (6)"
                IterEnd: "[1, 10] (9)"
                Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(6, 9), match='Foo'>"
                Whitespace:
                  - 5
                  - 6
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 10] (9)"
                IterEnd: "[1, 11] (10)"
                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(9, 10), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 11] (10)"
                IterEnd: "[1, 12] (11)"
                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(10, 11), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 12] (11)"
                    IterEnd: "[1, 13] (12)"
                    Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(11, 12), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 13] (12)"
                            IterEnd: "[2, 1] (13)"
                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                              End: 13
                              Start: 12
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 1] (13)"
                            IterEnd: "[2, 5] (17)"
                            Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                              End: 17
                              Start: 13
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 5] (17)"
                                                    IterEnd: "[2, 6] (18)"
                                                    Type: "'@' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(17, 18), match='@'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 6] (18)"
                                                    IterEnd: "[2, 12] (24)"
                                                    Type: "<method_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(18, 24), match='Member'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 12] (24)"
                                                            IterEnd: "[2, 13] (25)"
                                                            Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(24, 25), match='('>"
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[2, 13] (25)"
                                                                                IterEnd: "[2, 17] (29)"
                                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(25, 29), match='init'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[2, 17] (29)"
                                                                                IterEnd: "[2, 18] (30)"
                                                                                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(29, 30), match='='>"
                                                                                Whitespace: None
                                                                            IterBegin: "[2, 13] (25)"
                                                                            IterEnd: "[2, 18] (30)"
                                                                            Type: "With Keyword <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[2, 13] (25)"
                                                                        IterEnd: "[2, 18] (30)"
                                                                        Type: "Repeat: {With Keyword, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[2, 18] (30)"
                                                                                            IterEnd: "[2, 22] (34)"
                                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(30, 34), match='true'>"
                                                                                            Whitespace: None
                                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                          Name: "true"
                                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                            Name: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                            Self__: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                        IterBegin: "[2, 18] (30)"
                                                                                        IterEnd: "[2, 22] (34)"
                                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                    IterBegin: "[2, 18] (30)"
                                                                                    IterEnd: "[2, 22] (34)"
                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                    Name: "true"
                                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                      Name: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                      Self__: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                    Name: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                    Self__: "[Ln 2, Col 18] -> [Ln 2, Col 22]"
                                                                                IterBegin: "[2, 18] (30)"
                                                                                IterEnd: "[2, 22] (34)"
                                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                            IterBegin: "[2, 18] (30)"
                                                                            IterEnd: "[2, 22] (34)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                        IterBegin: "[2, 18] (30)"
                                                                        IterEnd: "[2, 22] (34)"
                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[2, 13] (25)"
                                                                    IterEnd: "[2, 22] (34)"
                                                                    Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[2, 13] (25)"
                                                                IterEnd: "[2, 22] (34)"
                                                                Type: "Argument Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[2, 13] (25)"
                                                            IterEnd: "[2, 22] (34)"
                                                            Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 22] (34)"
                                                            IterEnd: "[2, 23] (35)"
                                                            Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(34, 35), match=')'>"
                                                            Whitespace: None
                                                        IterBegin: "[2, 12] (24)"
                                                        IterEnd: "[2, 23] (35)"
                                                        Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[2, 12] (24)"
                                                    IterEnd: "[2, 23] (35)"
                                                    Type: "Repeat: {Arguments, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                IterBegin: "[2, 5] (17)"
                                                IterEnd: "[2, 23] (35)"
                                                Type: "Attribute <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 24] (36)"
                                                    IterEnd: "[2, 25] (37)"
                                                    Type: "'@' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(36, 37), match='@'>"
                                                    Whitespace:
                                                      - 35
                                                      - 36
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[2, 25] (37)"
                                                    IterEnd: "[2, 31] (43)"
                                                    Type: "<method_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(37, 43), match='Member'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 31] (43)"
                                                            IterEnd: "[2, 32] (44)"
                                                            Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(43, 44), match='('>"
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[2, 32] (44)"
                                                                                IterEnd: "[2, 41] (53)"
                                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(44, 53), match='serialize'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[2, 41] (53)"
                                                                                IterEnd: "[2, 42] (54)"
                                                                                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(53, 54), match='='>"
                                                                                Whitespace: None
                                                                            IterBegin: "[2, 32] (44)"
                                                                            IterEnd: "[2, 42] (54)"
                                                                            Type: "With Keyword <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[2, 32] (44)"
                                                                        IterEnd: "[2, 42] (54)"
                                                                        Type: "Repeat: {With Keyword, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[2, 42] (54)"
                                                                                            IterEnd: "[2, 47] (59)"
                                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(54, 59), match='false'>"
                                                                                            Whitespace: None
                                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                          Name: "false"
                                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                            Name: "[Ln 2, Col 42] -> [Ln 2, Col 47]"
                                                                                            Self__: "[Ln 2, Col 42] -> [Ln 2, Col 47]"
                                                                                        IterBegin: "[2, 42] (54)"
                                                                                        IterEnd: "[2, 47] (59)"
                                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                    IterBegin: "[2, 42] (54)"
                                                                                    IterEnd: "[2, 47] (59)"
                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                    Name: "false"
                                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                      Name: "[Ln 2, Col 42] -> [Ln 2, Col 47]"
                                                                                      Self__: "[Ln 2, Col 42] -> [Ln 2, Col 47]"
                                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                    Name: "[Ln 2, Col 42] -> [Ln 2, Col 47]"
                                                                                    Self__: "[Ln 2, Col 42] -> [Ln 2, Col 47]"
                                                                                IterBegin: "[2, 42] (54)"
                                                                                IterEnd: "[2, 47] (59)"
                                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                            IterBegin: "[2, 42] (54)"
                                                                            IterEnd: "[2, 47] (59)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                        IterBegin: "[2, 42] (54)"
                                                                        IterEnd: "[2, 47] (59)"
                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[2, 32] (44)"
                                                                    IterEnd: "[2, 47] (59)"
                                                                    Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[2, 32] (44)"
                                                                IterEnd: "[2, 47] (59)"
                                                                Type: "Argument Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[2, 32] (44)"
                                                            IterEnd: "[2, 47] (59)"
                                                            Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 47] (59)"
                                                            IterEnd: "[2, 48] (60)"
                                                            Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(59, 60), match=')'>"
                                                            Whitespace: None
                                                        IterBegin: "[2, 31] (43)"
                                                        IterEnd: "[2, 48] (60)"
                                                        Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[2, 31] (43)"
                                                    IterEnd: "[2, 48] (60)"
                                                    Type: "Repeat: {Arguments, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                IterBegin: "[2, 24] (36)"
                                                IterEnd: "[2, 48] (60)"
                                                Type: "Attribute <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[2, 5] (17)"
                                            IterEnd: "[2, 48] (60)"
                                            Type: "Repeat: {Attribute, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[2, 49] (61)"
                                                        IterEnd: "[2, 52] (64)"
                                                        Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(61, 64), match='Int'>"
                                                        Whitespace:
                                                          - 60
                                                          - 61
                                                    Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                                      Modifier: None
                                                      Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                                        Modifier: None
                                                        Self__: "[Ln 2, Col 49] -> [Ln 2, Col 52]"
                                                        TypeName: "[Ln 2, Col 49] -> [Ln 2, Col 52]"
                                                      TypeName: "Int"
                                                    IterBegin: "[2, 49] (61)"
                                                    IterEnd: "[2, 52] (64)"
                                                    Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[2, 49] (61)"
                                                IterEnd: "[2, 52] (64)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[2, 49] (61)"
                                            IterEnd: "[2, 52] (64)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 53] (65)"
                                            IterEnd: "[2, 59] (71)"
                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(65, 71), match='value1'>"
                                            Whitespace:
                                              - 64
                                              - 65
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 59] (71)"
                                            IterEnd: "[3, 1] (72)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 72
                                              Start: 71
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Parser.Statements.ClassMemberStatementParserInfo.ClassMemberStatementParserInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          DefaultValue: None
                                          Name: "value1"
                                          Regions: # <class 'types.ClassMemberStatementParserInfoRegions'>
                                            ClassModifier: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                                            DefaultValue: None
                                            Name: "[Ln 2, Col 53] -> [Ln 2, Col 59]"
                                            Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                                            Type: "[Ln 2, Col 49] -> [Ln 2, Col 52]"
                                            Visibility: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                                          Type: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                            Modifier: None
                                            Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                              Modifier: None
                                              Self__: "[Ln 2, Col 49] -> [Ln 2, Col 52]"
                                              TypeName: "[Ln 2, Col 49] -> [Ln 2, Col 52]"
                                            TypeName: "Int"
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[2, 5] (17)"
                                        IterEnd: "[3, 1] (72)"
                                        Type: "Class Member Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[2, 5] (17)"
                                    IterEnd: "[3, 1] (72)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 5] (17)"
                                IterEnd: "[3, 1] (72)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[3, 5] (76)"
                                                    IterEnd: "[3, 6] (77)"
                                                    Type: "'@' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(76, 77), match='@'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[3, 6] (77)"
                                                    IterEnd: "[3, 12] (83)"
                                                    Type: "<method_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(77, 83), match='Member'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[3, 12] (83)"
                                                            IterEnd: "[3, 13] (84)"
                                                            Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(83, 84), match='('>"
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[3, 13] (84)"
                                                                                IterEnd: "[3, 22] (93)"
                                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(84, 93), match='serialize'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[3, 22] (93)"
                                                                                IterEnd: "[3, 23] (94)"
                                                                                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(93, 94), match='='>"
                                                                                Whitespace: None
                                                                            IterBegin: "[3, 13] (84)"
                                                                            IterEnd: "[3, 23] (94)"
                                                                            Type: "With Keyword <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[3, 13] (84)"
                                                                        IterEnd: "[3, 23] (94)"
                                                                        Type: "Repeat: {With Keyword, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[3, 23] (94)"
                                                                                            IterEnd: "[3, 28] (99)"
                                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(94, 99), match='false'>"
                                                                                            Whitespace: None
                                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                          Name: "false"
                                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                            Name: "[Ln 3, Col 23] -> [Ln 3, Col 28]"
                                                                                            Self__: "[Ln 3, Col 23] -> [Ln 3, Col 28]"
                                                                                        IterBegin: "[3, 23] (94)"
                                                                                        IterEnd: "[3, 28] (99)"
                                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                    IterBegin: "[3, 23] (94)"
                                                                                    IterEnd: "[3, 28] (99)"
                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                    Name: "false"
                                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                      Name: "[Ln 3, Col 23] -> [Ln 3, Col 28]"
                                                                                      Self__: "[Ln 3, Col 23] -> [Ln 3, Col 28]"
                                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                    Name: "[Ln 3, Col 23] -> [Ln 3, Col 28]"
                                                                                    Self__: "[Ln 3, Col 23] -> [Ln 3, Col 28]"
                                                                                IterBegin: "[3, 23] (94)"
                                                                                IterEnd: "[3, 28] (99)"
                                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                            IterBegin: "[3, 23] (94)"
                                                                            IterEnd: "[3, 28] (99)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                        IterBegin: "[3, 23] (94)"
                                                                        IterEnd: "[3, 28] (99)"
                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[3, 13] (84)"
                                                                    IterEnd: "[3, 28] (99)"
                                                                    Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[3, 13] (84)"
                                                                IterEnd: "[3, 28] (99)"
                                                                Type: "Argument Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[3, 13] (84)"
                                                            IterEnd: "[3, 28] (99)"
                                                            Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[3, 28] (99)"
                                                            IterEnd: "[3, 29] (100)"
                                                            Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(99, 100), match=')'>"
                                                            Whitespace: None
                                                        IterBegin: "[3, 12] (83)"
                                                        IterEnd: "[3, 29] (100)"
                                                        Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[3, 12] (83)"
                                                    IterEnd: "[3, 29] (100)"
                                                    Type: "Repeat: {Arguments, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                IterBegin: "[3, 5] (76)"
                                                IterEnd: "[3, 29] (100)"
                                                Type: "Attribute <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[3, 5] (76)"
                                            IterEnd: "[3, 29] (100)"
                                            Type: "Repeat: {Attribute, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[3, 30] (101)"
                                                        IterEnd: "[3, 33] (104)"
                                                        Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(101, 104), match='Int'>"
                                                        Whitespace:
                                                          - 100
                                                          - 101
                                                    Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                                      Modifier: None
                                                      Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                                        Modifier: None
                                                        Self__: "[Ln 3, Col 30] -> [Ln 3, Col 33]"
                                                        TypeName: "[Ln 3, Col 30] -> [Ln 3, Col 33]"
                                                      TypeName: "Int"
                                                    IterBegin: "[3, 30] (101)"
                                                    IterEnd: "[3, 33] (104)"
                                                    Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 30] (101)"
                                                IterEnd: "[3, 33] (104)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 30] (101)"
                                            IterEnd: "[3, 33] (104)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 34] (105)"
                                            IterEnd: "[3, 40] (111)"
                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(105, 111), match='value2'>"
                                            Whitespace:
                                              - 104
                                              - 105
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[3, 40] (111)"
                                            IterEnd: "[4, 1] (112)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 112
                                              Start: 111
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Parser.Statements.ClassMemberStatementParserInfo.ClassMemberStatementParserInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          DefaultValue: None
                                          Name: "value2"
                                          Regions: # <class 'types.ClassMemberStatementParserInfoRegions'>
                                            ClassModifier: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
                                            DefaultValue: None
                                            Name: "[Ln 3, Col 34] -> [Ln 3, Col 40]"
                                            Self__: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
                                            Type: "[Ln 3, Col 30] -> [Ln 3, Col 33]"
                                            Visibility: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
                                          Type: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                            Modifier: None
                                            Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                              Modifier: None
                                              Self__: "[Ln 3, Col 30] -> [Ln 3, Col 33]"
                                              TypeName: "[Ln 3, Col 30] -> [Ln 3, Col 33]"
                                            TypeName: "Int"
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[3, 5] (76)"
                                        IterEnd: "[4, 1] (112)"
                                        Type: "Class Member Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[3, 5] (76)"
                                    IterEnd: "[4, 1] (112)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[3, 5] (76)"
                                IterEnd: "[4, 1] (112)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[4, 5] (116)"
                                                    IterEnd: "[4, 6] (117)"
                                                    Type: "'@' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(116, 117), match='@'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[4, 6] (117)"
                                                    IterEnd: "[4, 12] (123)"
                                                    Type: "<method_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(117, 123), match='Member'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[4, 12] (123)"
                                                            IterEnd: "[4, 13] (124)"
                                                            Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(123, 124), match='('>"
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[4, 13] (124)"
                                                                                IterEnd: "[4, 17] (128)"
                                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(124, 128), match='init'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[4, 17] (128)"
                                                                                IterEnd: "[4, 18] (129)"
                                                                                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(128, 129), match='='>"
                                                                                Whitespace: None
                                                                            IterBegin: "[4, 13] (124)"
                                                                            IterEnd: "[4, 18] (129)"
                                                                            Type: "With Keyword <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[4, 13] (124)"
                                                                        IterEnd: "[4, 18] (129)"
                                                                        Type: "Repeat: {With Keyword, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[4, 18] (129)"
                                                                                            IterEnd: "[4, 22] (133)"
                                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(129, 133), match='true'>"
                                                                                            Whitespace: None
                                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                          Name: "true"
                                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                            Name: "[Ln 4, Col 18] -> [Ln 4, Col 22]"
                                                                                            Self__: "[Ln 4, Col 18] -> [Ln 4, Col 22]"
                                                                                        IterBegin: "[4, 18] (129)"
                                                                                        IterEnd: "[4, 22] (133)"
                                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                    IterBegin: "[4, 18] (129)"
                                                                                    IterEnd: "[4, 22] (133)"
                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                    Name: "true"
                                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                      Name: "[Ln 4, Col 18] -> [Ln 4, Col 22]"
                                                                                      Self__: "[Ln 4, Col 18] -> [Ln 4, Col 22]"
                                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                    Name: "[Ln 4, Col 18] -> [Ln 4, Col 22]"
                                                                                    Self__: "[Ln 4, Col 18] -> [Ln 4, Col 22]"
                                                                                IterBegin: "[4, 18] (129)"
                                                                                IterEnd: "[4, 22] (133)"
                                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                            IterBegin: "[4, 18] (129)"
                                                                            IterEnd: "[4, 22] (133)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                        IterBegin: "[4, 18] (129)"
                                                                        IterEnd: "[4, 22] (133)"
                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[4, 13] (124)"
                                                                    IterEnd: "[4, 22] (133)"
                                                                    Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[4, 22] (133)"
                                                                            IterEnd: "[4, 23] (134)"
                                                                            Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(133, 134), match=','>"
                                                                            Whitespace: None
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[4, 24] (135)"
                                                                                        IterEnd: "[4, 34] (145)"
                                                                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(135, 145), match='comparison'>"
                                                                                        Whitespace:
                                                                                          - 134
                                                                                          - 135
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[4, 34] (145)"
                                                                                        IterEnd: "[4, 35] (146)"
                                                                                        Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(145, 146), match='='>"
                                                                                        Whitespace: None
                                                                                    IterBegin: "[4, 24] (135)"
                                                                                    IterEnd: "[4, 35] (146)"
                                                                                    Type: "With Keyword <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[4, 24] (135)"
                                                                                IterEnd: "[4, 35] (146)"
                                                                                Type: "Repeat: {With Keyword, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                            Children:
                                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                                Children:
                                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                                    IsIgnored: False
                                                                                                    IterBegin: "[4, 35] (146)"
                                                                                                    IterEnd: "[4, 40] (151)"
                                                                                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                                      Match: "<_sre.SRE_Match object; span=(146, 151), match='false'>"
                                                                                                    Whitespace: None
                                                                                                Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                                  Name: "false"
                                                                                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                                    Name: "[Ln 4, Col 35] -> [Ln 4, Col 40]"
                                                                                                    Self__: "[Ln 4, Col 35] -> [Ln 4, Col 40]"
                                                                                                IterBegin: "[4, 35] (146)"
                                                                                                IterEnd: "[4, 40] (151)"
                                                                                                Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                            IterBegin: "[4, 35] (146)"
                                                                                            IterEnd: "[4, 40] (151)"
                                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                                        Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                            Name: "false"
                                                                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                              Name: "[Ln 4, Col 35] -> [Ln 4, Col 40]"
                                                                                              Self__: "[Ln 4, Col 35] -> [Ln 4, Col 40]"
                                                                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                            Name: "[Ln 4, Col 35] -> [Ln 4, Col 40]"
                                                                                            Self__: "[Ln 4, Col 35] -> [Ln 4, Col 40]"
                                                                                        IterBegin: "[4, 35] (146)"
                                                                                        IterEnd: "[4, 40] (151)"
                                                                                        Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                                    IterBegin: "[4, 35] (146)"
                                                                                    IterEnd: "[4, 40] (151)"
                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                                IterBegin: "[4, 35] (146)"
                                                                                IterEnd: "[4, 40] (151)"
                                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                            IterBegin: "[4, 24] (135)"
                                                                            IterEnd: "[4, 40] (151)"
                                                                            Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[4, 22] (133)"
                                                                        IterEnd: "[4, 40] (151)"
                                                                        Type: "Comma and Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[4, 22] (133)"
                                                                    IterEnd: "[4, 40] (151)"
                                                                    Type: "Repeat: {Comma and Argument, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                IterBegin: "[4, 13] (124)"
                                                                IterEnd: "[4, 40] (151)"
                                                                Type: "Argument Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[4, 13] (124)"
                                                            IterEnd: "[4, 40] (151)"
                                                            Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[4, 40] (151)"
                                                            IterEnd: "[4, 41] (152)"
                                                            Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(151, 152), match=')'>"
                                                            Whitespace: None
                                                        IterBegin: "[4, 12] (123)"
                                                        IterEnd: "[4, 41] (152)"
                                                        Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[4, 12] (123)"
                                                    IterEnd: "[4, 41] (152)"
                                                    Type: "Repeat: {Arguments, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                IterBegin: "[4, 5] (116)"
                                                IterEnd: "[4, 41] (152)"
                                                Type: "Attribute <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[4, 5] (116)"
                                            IterEnd: "[4, 41] (152)"
                                            Type: "Repeat: {Attribute, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 42] (153)"
                                                        IterEnd: "[4, 46] (157)"
                                                        Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(153, 157), match='Char'>"
                                                        Whitespace:
                                                          - 152
                                                          - 153
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[4, 47] (158)"
                                                                IterEnd: "[4, 50] (161)"
                                                                Type: "'var' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(158, 161), match='var'>"
                                                                Whitespace:
                                                                  - 157
                                                                  - 158
                                                            IterBegin: "[4, 47] (158)"
                                                            IterEnd: "[4, 50] (161)"
                                                            Type: "Modifier <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[4, 47] (158)"
                                                        IterEnd: "[4, 50] (161)"
                                                        Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                    Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                                      Modifier: TypeModifier.var
                                                      Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                                        Modifier: "[Ln 4, Col 47] -> [Ln 4, Col 50]"
                                                        Self__: "[Ln 4, Col 42] -> [Ln 4, Col 50]"
                                                        TypeName: "[Ln 4, Col 42] -> [Ln 4, Col 46]"
                                                      TypeName: "Char"
                                                    IterBegin: "[4, 42] (153)"
                                                    IterEnd: "[4, 50] (161)"
                                                    Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[4, 42] (153)"
                                                IterEnd: "[4, 50] (161)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[4, 42] (153)"
                                            IterEnd: "[4, 50] (161)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[4, 51] (162)"
                                            IterEnd: "[4, 57] (168)"
                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(162, 168), match='value3'>"
                                            Whitespace:
                                              - 161
                                              - 162
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[4, 57] (168)"
                                            IterEnd: "[5, 1] (169)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 169
                                              Start: 168
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Parser.Statements.ClassMemberStatementParserInfo.ClassMemberStatementParserInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          DefaultValue: None
                                          Name: "value3"
                                          Regions: # <class 'types.ClassMemberStatementParserInfoRegions'>
                                            ClassModifier: "[Ln 4, Col 5] -> [Ln 5, Col 1]"
                                            DefaultValue: None
                                            Name: "[Ln 4, Col 51] -> [Ln 4, Col 57]"
                                            Self__: "[Ln 4, Col 5] -> [Ln 5, Col 1]"
                                            Type: "[Ln 4, Col 42] -> [Ln 4, Col 50]"
                                            Visibility: "[Ln 4, Col 5] -> [Ln 5, Col 1]"
                                          Type: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                            Modifier: TypeModifier.var
                                            Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                              Modifier: "[Ln 4, Col 47] -> [Ln 4, Col 50]"
                                              Self__: "[Ln 4, Col 42] -> [Ln 4, Col 50]"
                                              TypeName: "[Ln 4, Col 42] -> [Ln 4, Col 46]"
                                            TypeName: "Char"
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[4, 5] (116)"
                                        IterEnd: "[5, 1] (169)"
                                        Type: "Class Member Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[4, 5] (116)"
                                    IterEnd: "[5, 1] (169)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[4, 5] (116)"
                                IterEnd: "[5, 1] (169)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[5, 5] (173)"
                                                    IterEnd: "[5, 6] (174)"
                                                    Type: "'@' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(173, 174), match='@'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[5, 6] (174)"
                                                    IterEnd: "[5, 12] (180)"
                                                    Type: "<method_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(174, 180), match='Member'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[5, 12] (180)"
                                                            IterEnd: "[5, 13] (181)"
                                                            Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(180, 181), match='('>"
                                                            Whitespace: None
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[5, 13] (181)"
                                                                                IterEnd: "[5, 23] (191)"
                                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(181, 191), match='comparison'>"
                                                                                Whitespace: None
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[5, 23] (191)"
                                                                                IterEnd: "[5, 24] (192)"
                                                                                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(191, 192), match='='>"
                                                                                Whitespace: None
                                                                            IterBegin: "[5, 13] (181)"
                                                                            IterEnd: "[5, 24] (192)"
                                                                            Type: "With Keyword <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[5, 13] (181)"
                                                                        IterEnd: "[5, 24] (192)"
                                                                        Type: "Repeat: {With Keyword, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                        Children:
                                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                            IsIgnored: False
                                                                                            IterBegin: "[5, 24] (192)"
                                                                                            IterEnd: "[5, 29] (197)"
                                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                              Match: "<_sre.SRE_Match object; span=(192, 197), match='false'>"
                                                                                            Whitespace: None
                                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                          Name: "false"
                                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                            Name: "[Ln 5, Col 24] -> [Ln 5, Col 29]"
                                                                                            Self__: "[Ln 5, Col 24] -> [Ln 5, Col 29]"
                                                                                        IterBegin: "[5, 24] (192)"
                                                                                        IterEnd: "[5, 29] (197)"
                                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                    IterBegin: "[5, 24] (192)"
                                                                                    IterEnd: "[5, 29] (197)"
                                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                    Name: "false"
                                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                      Name: "[Ln 5, Col 24] -> [Ln 5, Col 29]"
                                                                                      Self__: "[Ln 5, Col 24] -> [Ln 5, Col 29]"
                                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                    Name: "[Ln 5, Col 24] -> [Ln 5, Col 29]"
                                                                                    Self__: "[Ln 5, Col 24] -> [Ln 5, Col 29]"
                                                                                IterBegin: "[5, 24] (192)"
                                                                                IterEnd: "[5, 29] (197)"
                                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                            IterBegin: "[5, 24] (192)"
                                                                            IterEnd: "[5, 29] (197)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                        IterBegin: "[5, 24] (192)"
                                                                        IterEnd: "[5, 29] (197)"
                                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[5, 13] (181)"
                                                                    IterEnd: "[5, 29] (197)"
                                                                    Type: "Argument <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                IterBegin: "[5, 13] (181)"
                                                                IterEnd: "[5, 29] (197)"
                                                                Type: "Argument Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[5, 13] (181)"
                                                            IterEnd: "[5, 29] (197)"
                                                            Type: "Repeat: {Argument Items, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[5, 29] (197)"
                                                            IterEnd: "[5, 30] (198)"
                                                            Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(197, 198), match=')'>"
                                                            Whitespace: None
                                                        IterBegin: "[5, 12] (180)"
                                                        IterEnd: "[5, 30] (198)"
                                                        Type: "Arguments <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[5, 12] (180)"
                                                    IterEnd: "[5, 30] (198)"
                                                    Type: "Repeat: {Arguments, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                IterBegin: "[5, 5] (173)"
                                                IterEnd: "[5, 30] (198)"
                                                Type: "Attribute <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[5, 5] (173)"
                                            IterEnd: "[5, 30] (198)"
                                            Type: "Repeat: {Attribute, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[5, 31] (199)"
                                                        IterEnd: "[5, 35] (203)"
                                                        Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(199, 203), match='Char'>"
                                                        Whitespace:
                                                          - 198
                                                          - 199
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[5, 36] (204)"
                                                                IterEnd: "[5, 39] (207)"
                                                                Type: "'var' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(204, 207), match='var'>"
                                                                Whitespace:
                                                                  - 203
                                                                  - 204
                                                            IterBegin: "[5, 36] (204)"
                                                            IterEnd: "[5, 39] (207)"
                                                            Type: "Modifier <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[5, 36] (204)"
                                                        IterEnd: "[5, 39] (207)"
                                                        Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                    Info: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                                      Modifier: TypeModifier.var
                                                      Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                                        Modifier: "[Ln 5, Col 36] -> [Ln 5, Col 39]"
                                                        Self__: "[Ln 5, Col 31] -> [Ln 5, Col 39]"
                                                        TypeName: "[Ln 5, Col 31] -> [Ln 5, Col 35]"
                                                      TypeName: "Char"
                                                    IterBegin: "[5, 31] (199)"
                                                    IterEnd: "[5, 39] (207)"
                                                    Type: "Standard Type <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[5, 31] (199)"
                                                IterEnd: "[5, 39] (207)"
                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[5, 31] (199)"
                                            IterEnd: "[5, 39] (207)"
                                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[5, 40] (208)"
                                            IterEnd: "[5, 46] (214)"
                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(208, 214), match='value4'>"
                                            Whitespace:
                                              - 207
                                              - 208
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[5, 46] (214)"
                                            IterEnd: "[6, 1] (215)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 215
                                              Start: 214
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Parser.Statements.ClassMemberStatementParserInfo.ClassMemberStatementParserInfo'>
                                          ClassModifier: "ClassModifier.immutable"
                                          DefaultValue: None
                                          Name: "value4"
                                          Regions: # <class 'types.ClassMemberStatementParserInfoRegions'>
                                            ClassModifier: "[Ln 5, Col 5] -> [Ln 6, Col 1]"
                                            DefaultValue: None
                                            Name: "[Ln 5, Col 40] -> [Ln 5, Col 46]"
                                            Self__: "[Ln 5, Col 5] -> [Ln 6, Col 1]"
                                            Type: "[Ln 5, Col 31] -> [Ln 5, Col 39]"
                                            Visibility: "[Ln 5, Col 5] -> [Ln 6, Col 1]"
                                          Type: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                                            Modifier: TypeModifier.var
                                            Regions: # <class 'types.StandardTypeParserInfoRegions'>
                                              Modifier: "[Ln 5, Col 36] -> [Ln 5, Col 39]"
                                              Self__: "[Ln 5, Col 31] -> [Ln 5, Col 39]"
                                              TypeName: "[Ln 5, Col 31] -> [Ln 5, Col 35]"
                                            TypeName: "Char"
                                          Visibility: "VisibilityModifier.private"
                                        IterBegin: "[5, 5] (173)"
                                        IterEnd: "[6, 1] (215)"
                                        Type: "Class Member Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[5, 5] (173)"
                                    IterEnd: "[6, 1] (215)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[5, 5] (173)"
                                IterEnd: "[6, 1] (215)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[2, 5] (17)"
                            IterEnd: "[6, 1] (215)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[6, 1] (215)"
                            IterEnd: "[6, 1] (215)"
                            Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[1, 13] (12)"
                        IterEnd: "[6, 1] (215)"
                        Type: "Multi-line <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 13] (12)"
                    IterEnd: "[6, 1] (215)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 12] (11)"
                IterEnd: "[6, 1] (215)"
                Type: "Statements <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            Info: # <class 'TheLanguage.Parser.Statements.ClassStatementParserInfo.ClassStatementParserInfo'>
              Base: None
              ClassModifier: "ClassModifier.immutable"
              ClassType: "ClassType.Class"
              Documentation: None
              Interfaces: None
              Mixins: None
              Name: "Foo"
              Regions: # <class 'types.ClassStatementParserInfoRegions'>
                Base: None
                ClassModifier: "[Ln 1, Col 1] -> [Ln 6, Col 1]"
                ClassType: "[Ln 1, Col 1] -> [Ln 1, Col 6]"
                Documentation: None
                Interfaces: None
                Mixins: None
                Name: "[Ln 1, Col 7] -> [Ln 1, Col 10]"
                Self__: "[Ln 1, Col 1] -> [Ln 6, Col 1]"
                Statements: "[Ln 1, Col 12] -> [Ln 6, Col 1]"
                Visibility: "[Ln 1, Col 1] -> [Ln 6, Col 1]"
              Statements:
                - # <class 'TheLanguage.Parser.Statements.ClassMemberStatementParserInfo.ClassMemberStatementParserInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  DefaultValue: None
                  Name: "value1"
                  Regions: # <class 'types.ClassMemberStatementParserInfoRegions'>
                    ClassModifier: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                    DefaultValue: None
                    Name: "[Ln 2, Col 53] -> [Ln 2, Col 59]"
                    Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                    Type: "[Ln 2, Col 49] -> [Ln 2, Col 52]"
                    Visibility: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                  Type: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                    Modifier: None
                    Regions: # <class 'types.StandardTypeParserInfoRegions'>
                      Modifier: None
                      Self__: "[Ln 2, Col 49] -> [Ln 2, Col 52]"
                      TypeName: "[Ln 2, Col 49] -> [Ln 2, Col 52]"
                    TypeName: "Int"
                  Visibility: "VisibilityModifier.private"
                - # <class 'TheLanguage.Parser.Statements.ClassMemberStatementParserInfo.ClassMemberStatementParserInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  DefaultValue: None
                  Name: "value2"
                  Regions: # <class 'types.ClassMemberStatementParserInfoRegions'>
                    ClassModifier: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
                    DefaultValue: None
                    Name: "[Ln 3, Col 34] -> [Ln 3, Col 40]"
                    Self__: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
                    Type: "[Ln 3, Col 30] -> [Ln 3, Col 33]"
                    Visibility: "[Ln 3, Col 5] -> [Ln 4, Col 1]"
                  Type: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                    Modifier: None
                    Regions: # <class 'types.StandardTypeParserInfoRegions'>
                      Modifier: None
                      Self__: "[Ln 3, Col 30] -> [Ln 3, Col 33]"
                      TypeName: "[Ln 3, Col 30] -> [Ln 3, Col 33]"
                    TypeName: "Int"
                  Visibility: "VisibilityModifier.private"
                - # <class 'TheLanguage.Parser.Statements.ClassMemberStatementParserInfo.ClassMemberStatementParserInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  DefaultValue: None
                  Name: "value3"
                  Regions: # <class 'types.ClassMemberStatementParserInfoRegions'>
                    ClassModifier: "[Ln 4, Col 5] -> [Ln 5, Col 1]"
                    DefaultValue: None
                    Name: "[Ln 4, Col 51] -> [Ln 4, Col 57]"
                    Self__: "[Ln 4, Col 5] -> [Ln 5, Col 1]"
                    Type: "[Ln 4, Col 42] -> [Ln 4, Col 50]"
                    Visibility: "[Ln 4, Col 5] -> [Ln 5, Col 1]"
                  Type: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                    Modifier: TypeModifier.var
                    Regions: # <class 'types.StandardTypeParserInfoRegions'>
                      Modifier: "[Ln 4, Col 47] -> [Ln 4, Col 50]"
                      Self__: "[Ln 4, Col 42] -> [Ln 4, Col 50]"
                      TypeName: "[Ln 4, Col 42] -> [Ln 4, Col 46]"
                    TypeName: "Char"
                  Visibility: "VisibilityModifier.private"
                - # <class 'TheLanguage.Parser.Statements.ClassMemberStatementParserInfo.ClassMemberStatementParserInfo'>
                  ClassModifier: "ClassModifier.immutable"
                  DefaultValue: None
                  Name: "value4"
                  Regions: # <class 'types.ClassMemberStatementParserInfoRegions'>
                    ClassModifier: "[Ln 5, Col 5] -> [Ln 6, Col 1]"
                    DefaultValue: None
                    Name: "[Ln 5, Col 40] -> [Ln 5, Col 46]"
                    Self__: "[Ln 5, Col 5] -> [Ln 6, Col 1]"
                    Type: "[Ln 5, Col 31] -> [Ln 5, Col 39]"
                    Visibility: "[Ln 5, Col 5] -> [Ln 6, Col 1]"
                  Type: # <class 'TheLanguage.Parser.Types.StandardTypeParserInfo.StandardTypeParserInfo'>
                    Modifier: TypeModifier.var
                    Regions: # <class 'types.StandardTypeParserInfoRegions'>
                      Modifier: "[Ln 5, Col 36] -> [Ln 5, Col 39]"
                      Self__: "[Ln 5, Col 31] -> [Ln 5, Col 39]"
                      TypeName: "[Ln 5, Col 31] -> [Ln 5, Col 35]"
                    TypeName: "Char"
                  Visibility: "VisibilityModifier.private"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[6, 1] (215)"
            Type: "Class Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[6, 1] (215)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[6, 1] (215)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[6, 1] (215)"
Type: "<None>"
