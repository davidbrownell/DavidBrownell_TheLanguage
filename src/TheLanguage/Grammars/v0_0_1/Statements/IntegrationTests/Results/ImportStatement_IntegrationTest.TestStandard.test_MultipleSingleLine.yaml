# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 5] (4)"
                Type: "'from' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 4), match='from'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 6] (5)"
                IterEnd: "[1, 11] (10)"
                Type: "<dotted_generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(5, 10), match='File1'>"
                Whitespace:
                  - 4
                  - 5
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 12] (11)"
                IterEnd: "[1, 18] (17)"
                Type: "'import' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(11, 17), match='import'>"
                Whitespace:
                  - 10
                  - 11
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 19] (18)"
                            IterEnd: "[1, 23] (22)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(18, 22), match='obj1'>"
                            Whitespace:
                              - 17
                              - 18
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children: []
                            IterBegin: None
                            IterEnd: None
                            Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                        IterBegin: "[1, 19] (18)"
                        IterEnd: "[1, 23] (22)"
                        Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 23] (22)"
                                IterEnd: "[1, 24] (23)"
                                Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(22, 23), match=','>"
                                Whitespace: None
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 25] (24)"
                                    IterEnd: "[1, 29] (28)"
                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(24, 28), match='obj2'>"
                                    Whitespace:
                                      - 23
                                      - 24
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 30] (29)"
                                            IterEnd: "[1, 32] (31)"
                                            Type: "'as' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(29, 31), match='as'>"
                                            Whitespace:
                                              - 28
                                              - 29
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 33] (32)"
                                            IterEnd: "[1, 46] (45)"
                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(32, 45), match='obj2Decorated'>"
                                            Whitespace:
                                              - 31
                                              - 32
                                        IterBegin: "[1, 30] (29)"
                                        IterEnd: "[1, 46] (45)"
                                        Type: "Suffix <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[1, 30] (29)"
                                    IterEnd: "[1, 46] (45)"
                                    Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                IterBegin: "[1, 25] (24)"
                                IterEnd: "[1, 46] (45)"
                                Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 23] (22)"
                            IterEnd: "[1, 46] (45)"
                            Type: "Comma and Content <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 46] (45)"
                                IterEnd: "[1, 47] (46)"
                                Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(45, 46), match=','>"
                                Whitespace: None
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 48] (47)"
                                    IterEnd: "[1, 52] (51)"
                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(47, 51), match='obj3'>"
                                    Whitespace:
                                      - 46
                                      - 47
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 53] (52)"
                                            IterEnd: "[1, 55] (54)"
                                            Type: "'as' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(52, 54), match='as'>"
                                            Whitespace:
                                              - 51
                                              - 52
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[1, 56] (55)"
                                            IterEnd: "[1, 69] (68)"
                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(55, 68), match='obj3Decorated'>"
                                            Whitespace:
                                              - 54
                                              - 55
                                        IterBegin: "[1, 53] (52)"
                                        IterEnd: "[1, 69] (68)"
                                        Type: "Suffix <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[1, 53] (52)"
                                    IterEnd: "[1, 69] (68)"
                                    Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                IterBegin: "[1, 48] (47)"
                                IterEnd: "[1, 69] (68)"
                                Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 46] (45)"
                            IterEnd: "[1, 69] (68)"
                            Type: "Comma and Content <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 69] (68)"
                                IterEnd: "[1, 70] (69)"
                                Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(68, 69), match=','>"
                                Whitespace: None
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 71] (70)"
                                    IterEnd: "[1, 75] (74)"
                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(70, 74), match='obj4'>"
                                    Whitespace:
                                      - 69
                                      - 70
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children: []
                                    IterBegin: None
                                    IterEnd: None
                                    Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                IterBegin: "[1, 71] (70)"
                                IterEnd: "[1, 75] (74)"
                                Type: "Content Item <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 69] (68)"
                            IterEnd: "[1, 75] (74)"
                            Type: "Comma and Content <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[1, 23] (22)"
                        IterEnd: "[1, 75] (74)"
                        Type: "Repeat: {Comma and Content, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children: []
                        IterBegin: None
                        IterEnd: None
                        Type: "Repeat: {Trailing Comma, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                    IterBegin: "[1, 19] (18)"
                    IterEnd: "[1, 75] (74)"
                    Type: "Content Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[1, 19] (18)"
                IterEnd: "[1, 75] (74)"
                Type: "Or: (Grouped, Content Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 75] (74)"
                IterEnd: "[2, 1] (75)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 75
                  Start: 74
                Whitespace: None
            Info: # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.NodeInfo'>
              ImportItems:
                - # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.ImportItemInfo'>
                  Alias: None
                  Name: "obj1"
                - # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.ImportItemInfo'>
                  Alias: "obj2Decorated"
                  Name: "obj2"
                - # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.ImportItemInfo'>
                  Alias: "obj3Decorated"
                  Name: "obj3"
                - # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.ImportItemInfo'>
                  Alias: None
                  Name: "obj4"
              ImportType: "ImportType.SourceIsModule"
              SourceFilename: "<generic_root>/Statements/File1.TheLanguage"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (75)"
            Type: "Import Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (75)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (75)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[2, 1] (75)"
Type: "<None>"
