# <class 'v1.Lexer.Components.Phrase.Phrase.LexResult'>
data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
  data:
    - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data:
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 1] (0)"
              end: "[1, 4] (3)"
            token: "Number Token"
            value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
              match: "<_sre.SRE_Match object; span=(0, 3), match='123'>"
          phrase: "Number Token"
        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
          data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: false
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 4] (3)"
              end: "[2, 1] (4)"
            token: "Newline+"
            value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 3
                end: 4
          phrase: "Newline+"
      phrase: "[Number Token, Newline+]"
    - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
      data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data:
              - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data:
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: false
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[2, 1] (4)"
                        end: "[2, 4] (7)"
                      token: "Number Token"
                      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                        match: "<_sre.SRE_Match object; span=(4, 7), match='456'>"
                    phrase: "Number Token"
                  - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      is_ignored: false
                      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                        begin: "[2, 4] (7)"
                        end: "[3, 1] (8)"
                      token: "Newline+"
                      value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                        range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                          begin: 7
                          end: 8
                    phrase: "Newline+"
                phrase: "[Number Token, Newline+]"
              - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                  data:
                    - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                      data:
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data:
                            - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: false
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[3, 1] (8)"
                                  end: "[3, 4] (11)"
                                token: "Number Token"
                                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                  match: "<_sre.SRE_Match object; span=(8, 11), match='789'>"
                              phrase: "Number Token"
                            - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                              data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                is_ignored: false
                                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                  begin: "[3, 4] (11)"
                                  end: "[4, 1] (12)"
                                token: "Newline+"
                                value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                    begin: 11
                                    end: 12
                              phrase: "Newline+"
                          phrase: "[Number Token, Newline+]"
                        - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                          data: # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                            data:
                              - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: false
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[4, 1] (12)"
                                    end: "[4, 7] (18)"
                                  token: "Word Token"
                                  value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                                    match: "<_sre.SRE_Match object; span=(12, 18), match='helloa'>"
                                phrase: "Word Token"
                              - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
                                data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  is_ignored: false
                                  iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                                    begin: "[4, 7] (18)"
                                    end: "[5, 1] (19)"
                                  token: "Newline+"
                                  value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                                    range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                                      begin: 18
                                      end: 19
                                phrase: "Newline+"
                            phrase: "[Word Token, Newline+]"
                          phrase: "({Recursive Phrase, 1, 2} | [Word Token, Newline+])"
                      phrase: "Recursive Phrase"
                  phrase: "{Recursive Phrase, 1, 2}"
                phrase: "({Recursive Phrase, 1, 2} | [Word Token, Newline+])"
            phrase: "Recursive Phrase"
        phrase: "{Recursive Phrase, 1, 2}"
      phrase: "({Recursive Phrase, 1, 2} | [Word Token, Newline+])"
  phrase: "Recursive Phrase"
iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
  begin: "[1, 1] (0)"
  end: "[5, 1] (19)"
success: true
