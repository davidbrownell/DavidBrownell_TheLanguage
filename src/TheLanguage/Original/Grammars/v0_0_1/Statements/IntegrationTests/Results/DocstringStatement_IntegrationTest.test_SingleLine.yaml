# <class 'Original.Lexer.Components.AST.Node'>
Children:
  - # <class 'Original.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Original.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Original.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[3, 4] (22)"
                Type: "Multi-line Content <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 22), match='<<<\\nSingle line 1.\\n>>>'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 4] (22)"
                IterEnd: "[5, 1] (24)"
                Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 24
                  Start: 22
                Whitespace: None
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[5, 1] (24)"
            Type: "Docstring Statement <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[5, 1] (24)"
        Type: "0.0.1 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[5, 1] (24)"
    Type: "Dynamic Phrase <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Original.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Original.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Original.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[5, 1] (24)"
                    IterEnd: "[5, 6] (29)"
                    Type: "'class' <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(24, 29), match='class'>"
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[5, 1] (24)"
                IterEnd: "[5, 6] (29)"
                Type: "Class Type <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 7] (30)"
                IterEnd: "[5, 10] (33)"
                Type: "<type_name> <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(30, 33), match='Foo'>"
                Whitespace:
                  - 29
                  - 30
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 10] (33)"
                IterEnd: "[5, 11] (34)"
                Type: "'(' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(33, 34), match='('>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 11] (34)"
                IterEnd: "[5, 12] (35)"
                Type: "')' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(34, 35), match=')'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[5, 12] (35)"
                    IterEnd: "[5, 13] (36)"
                    Type: "':' <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(35, 36), match=':'>"
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[5, 13] (36)"
                            IterEnd: "[6, 1] (37)"
                            Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                              End: 37
                              Start: 36
                            Whitespace: None
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[6, 1] (37)"
                            IterEnd: "[6, 5] (41)"
                            Type: "Indent <class 'Original.Lexer.Components.Token.IndentToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.IndentToken.MatchResult'>
                              End: 41
                              Start: 37
                              Value: 4
                            Whitespace: None
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'Original.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[6, 5] (41)"
                                            IterEnd: "[8, 8] (71)"
                                            Type: "Multi-line Content <class 'Original.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(41, 71), match='<<<\\n    Single line 2.\\n    >>>'>"
                                            Whitespace: None
                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[8, 8] (71)"
                                            IterEnd: "[9, 1] (72)"
                                            Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 72
                                              Start: 71
                                            Whitespace: None
                                        IsIgnored: False
                                        IterBegin: "[6, 5] (41)"
                                        IterEnd: "[9, 1] (72)"
                                        Type: "Docstring Statement <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IsIgnored: False
                                    IterBegin: "[6, 5] (41)"
                                    IterEnd: "[9, 1] (72)"
                                    Type: "0.0.1 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IsIgnored: False
                                IterBegin: "[6, 5] (41)"
                                IterEnd: "[9, 1] (72)"
                                Type: "DynamicPhrasesType.Statements <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'Original.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[9, 5] (76)"
                                            IterEnd: "[9, 9] (80)"
                                            Type: "'pass' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(76, 80), match='pass'>"
                                            Whitespace: None
                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[9, 9] (80)"
                                            IterEnd: "[11, 1] (82)"
                                            Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 82
                                              Start: 80
                                            Whitespace: None
                                        IsIgnored: False
                                        IterBegin: "[9, 5] (76)"
                                        IterEnd: "[11, 1] (82)"
                                        Type: "Pass Statement <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IsIgnored: False
                                    IterBegin: "[9, 5] (76)"
                                    IterEnd: "[11, 1] (82)"
                                    Type: "0.0.1 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IsIgnored: False
                                IterBegin: "[9, 5] (76)"
                                IterEnd: "[11, 1] (82)"
                                Type: "DynamicPhrasesType.Statements <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IsIgnored: False
                            IterBegin: "[6, 5] (41)"
                            IterEnd: "[11, 1] (82)"
                            Type: "Statements <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[11, 1] (82)"
                            IterEnd: "[11, 1] (82)"
                            Type: "Dedent <class 'Original.Lexer.Components.Token.DedentToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IsIgnored: False
                        IterBegin: "[5, 13] (36)"
                        IterEnd: "[11, 1] (82)"
                        Type: "Multi-line <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IsIgnored: False
                    IterBegin: "[5, 13] (36)"
                    IterEnd: "[11, 1] (82)"
                    Type: "(Multi-line | DynamicPhrasesType.Statements) <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IsIgnored: False
                IterBegin: "[5, 12] (35)"
                IterEnd: "[11, 1] (82)"
                Type: "Statements <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            IsIgnored: False
            IterBegin: "[5, 1] (24)"
            IterEnd: "[11, 1] (82)"
            Type: "Class Statement <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[5, 1] (24)"
        IterEnd: "[11, 1] (82)"
        Type: "0.0.1 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[5, 1] (24)"
    IterEnd: "[11, 1] (82)"
    Type: "Dynamic Phrase <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'Original.Lexer.Components.AST.Node'>
    Children:
      - # <class 'Original.Lexer.Components.AST.Node'>
        Children:
          - # <class 'Original.Lexer.Components.AST.Node'>
            Children:
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[11, 1] (82)"
                    IterEnd: "[11, 6] (87)"
                    Type: "'class' <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(82, 87), match='class'>"
                    Whitespace: None
                IsIgnored: False
                IterBegin: "[11, 1] (82)"
                IterEnd: "[11, 6] (87)"
                Type: "Class Type <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 7] (88)"
                IterEnd: "[11, 10] (91)"
                Type: "<type_name> <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(88, 91), match='Bar'>"
                Whitespace:
                  - 87
                  - 88
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 10] (91)"
                IterEnd: "[11, 11] (92)"
                Type: "'(' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(91, 92), match='('>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 11] (92)"
                IterEnd: "[11, 12] (93)"
                Type: "')' <class 'Original.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(92, 93), match=')'>"
                Whitespace: None
              - # <class 'Original.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'Original.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[11, 12] (93)"
                    IterEnd: "[11, 13] (94)"
                    Type: "':' <class 'Original.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(93, 94), match=':'>"
                    Whitespace: None
                  - # <class 'Original.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'Original.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[11, 13] (94)"
                            IterEnd: "[12, 1] (95)"
                            Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                              End: 95
                              Start: 94
                            Whitespace: None
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[12, 1] (95)"
                            IterEnd: "[12, 5] (99)"
                            Type: "Indent <class 'Original.Lexer.Components.Token.IndentToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.IndentToken.MatchResult'>
                              End: 99
                              Start: 95
                              Value: 4
                            Whitespace: None
                          - # <class 'Original.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'Original.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[12, 5] (99)"
                                            IterEnd: "[14, 8] (131)"
                                            Type: "Multi-line Content <class 'Original.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(99, 131), match='<<<\\n    With escape \\\\>>>\\n    >>>'>"
                                            Whitespace: None
                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[14, 8] (131)"
                                            IterEnd: "[16, 1] (133)"
                                            Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 133
                                              Start: 131
                                            Whitespace: None
                                        IsIgnored: False
                                        IterBegin: "[12, 5] (99)"
                                        IterEnd: "[16, 1] (133)"
                                        Type: "Docstring Statement <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IsIgnored: False
                                    IterBegin: "[12, 5] (99)"
                                    IterEnd: "[16, 1] (133)"
                                    Type: "0.0.1 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IsIgnored: False
                                IterBegin: "[12, 5] (99)"
                                IterEnd: "[16, 1] (133)"
                                Type: "DynamicPhrasesType.Statements <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'Original.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'Original.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'Original.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[16, 5] (137)"
                                            IterEnd: "[16, 9] (141)"
                                            Type: "'pass' <class 'Original.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(137, 141), match='pass'>"
                                            Whitespace: None
                                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[16, 9] (141)"
                                            IterEnd: "[17, 1] (142)"
                                            Type: "Newline+ <class 'Original.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 142
                                              Start: 141
                                            Whitespace: None
                                        IsIgnored: False
                                        IterBegin: "[16, 5] (137)"
                                        IterEnd: "[17, 1] (142)"
                                        Type: "Pass Statement <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IsIgnored: False
                                    IterBegin: "[16, 5] (137)"
                                    IterEnd: "[17, 1] (142)"
                                    Type: "0.0.1 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IsIgnored: False
                                IterBegin: "[16, 5] (137)"
                                IterEnd: "[17, 1] (142)"
                                Type: "DynamicPhrasesType.Statements <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IsIgnored: False
                            IterBegin: "[12, 5] (99)"
                            IterEnd: "[17, 1] (142)"
                            Type: "Statements <class 'Original.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'Original.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[17, 1] (142)"
                            IterEnd: "[17, 1] (142)"
                            Type: "Dedent <class 'Original.Lexer.Components.Token.DedentToken'>"
                            Value: # <class 'Original.Lexer.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IsIgnored: False
                        IterBegin: "[11, 13] (94)"
                        IterEnd: "[17, 1] (142)"
                        Type: "Multi-line <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IsIgnored: False
                    IterBegin: "[11, 13] (94)"
                    IterEnd: "[17, 1] (142)"
                    Type: "(Multi-line | DynamicPhrasesType.Statements) <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IsIgnored: False
                IterBegin: "[11, 12] (93)"
                IterEnd: "[17, 1] (142)"
                Type: "Statements <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            IsIgnored: False
            IterBegin: "[11, 1] (82)"
            IterEnd: "[17, 1] (142)"
            Type: "Class Statement <class 'Original.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[11, 1] (82)"
        IterEnd: "[17, 1] (142)"
        Type: "0.0.1 Grammar Statements <class 'Original.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[11, 1] (82)"
    IterEnd: "[17, 1] (142)"
    Type: "Dynamic Phrase <class 'Original.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[17, 1] (142)"
Type: "<None>"
