0) StartPhrase, "Phrase"
1) StartPhrase, "lpar"
2) OnInternalPhrase, 0, 1
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 1] (0)"
        end: "[1, 2] (1)"
      token: "lpar"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(0, 1), match='('>"
    phrase: "lpar"
3) EndPhrase, "lpar" [True]
4) StartPhrase, "Inner"
5) StartPhrase, "Word Token"
6) OnInternalPhrase, 2, 5
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 3] (2)"
        end: "[1, 6] (5)"
      token: "Word Token"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(2, 5), match='one'>"
    phrase: "Word Token"
7) EndPhrase, "Word Token" [True]
8) StartPhrase, "Word Token"
9) OnInternalPhrase, 6, 9
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 7] (6)"
        end: "[1, 10] (9)"
      token: "Word Token"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(6, 9), match='two'>"
    phrase: "Word Token"
10) EndPhrase, "Word Token" [True]
11) OnInternalPhrase, 2, 9
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data:
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 3] (2)"
            end: "[1, 6] (5)"
          token: "Word Token"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(2, 5), match='one'>"
        phrase: "Word Token"
      - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: true
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 6] (5)"
          end: "[1, 7] (6)"
        token: "HorizontalWhitespace"
        value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
          range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
            begin: 5
            end: 6
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 7] (6)"
            end: "[1, 10] (9)"
          token: "Word Token"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(6, 9), match='two'>"
        phrase: "Word Token"
    phrase: "Inner"
12) EndPhrase, "Inner" [True]
13) StartPhrase, "rpar"
14) OnInternalPhrase, 10, 11
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      is_ignored: false
      iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
        begin: "[1, 11] (10)"
        end: "[1, 12] (11)"
      token: "rpar"
      value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
        match: "<_sre.SRE_Match object; span=(10, 11), match=')'>"
    phrase: "rpar"
15) EndPhrase, "rpar" [True]
16) OnInternalPhrase, 0, 11
    # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
    data:
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 1] (0)"
            end: "[1, 2] (1)"
          token: "lpar"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(0, 1), match='('>"
        phrase: "lpar"
      - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: true
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 2] (1)"
          end: "[1, 3] (2)"
        token: "HorizontalWhitespace"
        value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
          range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
            begin: 1
            end: 2
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data:
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 3] (2)"
                end: "[1, 6] (5)"
              token: "Word Token"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(2, 5), match='one'>"
            phrase: "Word Token"
          - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            is_ignored: true
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 6] (5)"
              end: "[1, 7] (6)"
            token: "HorizontalWhitespace"
            value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
              range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                begin: 5
                end: 6
          - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
            data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              is_ignored: false
              iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                begin: "[1, 7] (6)"
                end: "[1, 10] (9)"
              token: "Word Token"
              value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                match: "<_sre.SRE_Match object; span=(6, 9), match='two'>"
            phrase: "Word Token"
        phrase: "Inner"
      - # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        is_ignored: true
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 10] (9)"
          end: "[1, 11] (10)"
        token: "HorizontalWhitespace"
        value: # <class 'v1.Lexer.Components.Tokens.HorizontalWhitespaceToken.MatchResult'>
          range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
            begin: 9
            end: 10
      - # <class 'v1.Lexer.Components.Phrase.Phrase.LexResultData'>
        data: # <class 'v1.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          is_ignored: false
          iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
            begin: "[1, 11] (10)"
            end: "[1, 12] (11)"
          token: "rpar"
          value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
            match: "<_sre.SRE_Match object; span=(10, 11), match=')'>"
        phrase: "rpar"
    phrase: "Phrase"
17) EndPhrase, "Phrase" [True]
