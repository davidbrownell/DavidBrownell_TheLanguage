# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 5] (4)"
                Type: "'from' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 4), match='from'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 6] (5)"
                IterEnd: "[1, 11] (10)"
                Type: "<dotted_generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(5, 10), match='File1'>"
                Whitespace:
                  - 4
                  - 5
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 12] (11)"
                IterEnd: "[1, 18] (17)"
                Type: "'import' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(11, 17), match='import'>"
                Whitespace:
                  - 10
                  - 11
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[1, 19] (18)"
                        IterEnd: "[1, 20] (19)"
                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(18, 19), match='('>"
                        Whitespace:
                          - 17
                          - 18
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[1, 20] (19)"
                                IterEnd: "[1, 24] (23)"
                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(19, 23), match='obj1'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children: []
                                IterBegin: None
                                IterEnd: None
                                Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                            IterBegin: "[1, 20] (19)"
                            IterEnd: "[1, 24] (23)"
                            Type: "Content Item <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 24] (23)"
                                    IterEnd: "[1, 25] (24)"
                                    Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(23, 24), match=','>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[1, 26] (25)"
                                        IterEnd: "[1, 30] (29)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(25, 29), match='obj2'>"
                                        Whitespace:
                                          - 24
                                          - 25
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[1, 31] (30)"
                                                IterEnd: "[1, 33] (32)"
                                                Type: "'as' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(30, 32), match='as'>"
                                                Whitespace:
                                                  - 29
                                                  - 30
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[1, 34] (33)"
                                                IterEnd: "[1, 47] (46)"
                                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(33, 46), match='obj2Decorated'>"
                                                Whitespace:
                                                  - 32
                                                  - 33
                                            IterBegin: "[1, 31] (30)"
                                            IterEnd: "[1, 47] (46)"
                                            Type: "Suffix <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[1, 31] (30)"
                                        IterEnd: "[1, 47] (46)"
                                        Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                    IterBegin: "[1, 26] (25)"
                                    IterEnd: "[1, 47] (46)"
                                    Type: "Content Item <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[1, 24] (23)"
                                IterEnd: "[1, 47] (46)"
                                Type: "Comma and Content <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 24] (23)"
                            IterEnd: "[1, 47] (46)"
                            Type: "Repeat: {Comma and Content, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children: []
                            IterBegin: None
                            IterEnd: None
                            Type: "Repeat: {Trailing Comma, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                        IterBegin: "[1, 20] (19)"
                        IterEnd: "[1, 47] (46)"
                        Type: "Content Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[1, 47] (46)"
                        IterEnd: "[1, 48] (47)"
                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(46, 47), match=')'>"
                        Whitespace: None
                    IterBegin: "[1, 19] (18)"
                    IterEnd: "[1, 48] (47)"
                    Type: "Grouped <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[1, 19] (18)"
                IterEnd: "[1, 48] (47)"
                Type: "Or: (Grouped, Content Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 48] (47)"
                IterEnd: "[3, 1] (49)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 49
                  Start: 47
                Whitespace: None
            Info: # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.NodeInfo'>
              ImportItems:
                - # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.ImportItemInfo'>
                  Alias: None
                  Name: "obj1"
                - # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.ImportItemInfo'>
                  Alias: "obj2Decorated"
                  Name: "obj2"
              ImportType: "ImportType.SourceIsModule"
              SourceFilename: "<generic_root>/Statements/File1.TheLanguage"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[3, 1] (49)"
            Type: "Import Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[3, 1] (49)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[3, 1] (49)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 1] (49)"
                IterEnd: "[3, 5] (53)"
                Type: "'from' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(49, 53), match='from'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 6] (54)"
                IterEnd: "[3, 14] (62)"
                Type: "<dotted_generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(54, 62), match='...File2'>"
                Whitespace:
                  - 53
                  - 54
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 15] (63)"
                IterEnd: "[3, 21] (69)"
                Type: "'import' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(63, 69), match='import'>"
                Whitespace:
                  - 62
                  - 63
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[3, 22] (70)"
                        IterEnd: "[3, 23] (71)"
                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(70, 71), match='('>"
                        Whitespace:
                          - 69
                          - 70
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: True
                        IterBegin: "[3, 23] (71)"
                        IterEnd: "[4, 1] (72)"
                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                          End: 72
                          Start: 71
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: True
                        IterBegin: "[4, 1] (72)"
                        IterEnd: "[4, 5] (76)"
                        Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                          End: 76
                          Start: 72
                          Value: 4
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[4, 5] (76)"
                                IterEnd: "[4, 9] (80)"
                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(76, 80), match='obj3'>"
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[4, 10] (81)"
                                        IterEnd: "[4, 12] (83)"
                                        Type: "'as' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(81, 83), match='as'>"
                                        Whitespace:
                                          - 80
                                          - 81
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[4, 13] (84)"
                                        IterEnd: "[4, 26] (97)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(84, 97), match='obj3Decorated'>"
                                        Whitespace:
                                          - 83
                                          - 84
                                    IterBegin: "[4, 10] (81)"
                                    IterEnd: "[4, 26] (97)"
                                    Type: "Suffix <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[4, 10] (81)"
                                IterEnd: "[4, 26] (97)"
                                Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                            IterBegin: "[4, 5] (76)"
                            IterEnd: "[4, 26] (97)"
                            Type: "Content Item <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 26] (97)"
                                    IterEnd: "[4, 27] (98)"
                                    Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(97, 98), match=','>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: True
                                    IterBegin: "[4, 27] (98)"
                                    IterEnd: "[5, 1] (99)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 99
                                      Start: 98
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[5, 5] (103)"
                                        IterEnd: "[5, 9] (107)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(103, 107), match='obj4'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children: []
                                        IterBegin: None
                                        IterEnd: None
                                        Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                    IterBegin: "[5, 5] (103)"
                                    IterEnd: "[5, 9] (107)"
                                    Type: "Content Item <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[4, 26] (97)"
                                IterEnd: "[5, 9] (107)"
                                Type: "Comma and Content <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[5, 9] (107)"
                                    IterEnd: "[5, 10] (108)"
                                    Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(107, 108), match=','>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: True
                                    IterBegin: "[5, 10] (108)"
                                    IterEnd: "[7, 1] (110)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 110
                                      Start: 108
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: True
                                    IterBegin: "[7, 1] (110)"
                                    IterEnd: "[7, 9] (118)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 118
                                      Start: 110
                                      Value: 8
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[7, 9] (118)"
                                        IterEnd: "[7, 13] (122)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(118, 122), match='obj5'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[7, 14] (123)"
                                                IterEnd: "[7, 16] (125)"
                                                Type: "'as' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(123, 125), match='as'>"
                                                Whitespace:
                                                  - 122
                                                  - 123
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[7, 17] (126)"
                                                IterEnd: "[7, 30] (139)"
                                                Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(126, 139), match='obj5Decorated'>"
                                                Whitespace:
                                                  - 125
                                                  - 126
                                            IterBegin: "[7, 14] (123)"
                                            IterEnd: "[7, 30] (139)"
                                            Type: "Suffix <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[7, 14] (123)"
                                        IterEnd: "[7, 30] (139)"
                                        Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                    IterBegin: "[7, 9] (118)"
                                    IterEnd: "[7, 30] (139)"
                                    Type: "Content Item <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[5, 9] (107)"
                                IterEnd: "[7, 30] (139)"
                                Type: "Comma and Content <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[7, 30] (139)"
                                    IterEnd: "[7, 31] (140)"
                                    Type: "',' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(139, 140), match=','>"
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: True
                                    IterBegin: "[7, 31] (140)"
                                    IterEnd: "[9, 1] (142)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 142
                                      Start: 140
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: True
                                    IterBegin: "[9, 1] (142)"
                                    IterEnd: "[9, 13] (154)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 154
                                      Start: 142
                                      Value: 12
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[9, 13] (154)"
                                        IterEnd: "[9, 17] (158)"
                                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(154, 158), match='obj6'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: True
                                        IterBegin: "[9, 17] (158)"
                                        IterEnd: "[10, 1] (159)"
                                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                          End: 159
                                          Start: 158
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: True
                                        IterBegin: "[10, 1] (159)"
                                        IterEnd: "[10, 1] (159)"
                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                          {}
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: True
                                        IterBegin: "[10, 1] (159)"
                                        IterEnd: "[10, 1] (159)"
                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                          {}
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: True
                                        IterBegin: "[10, 1] (159)"
                                        IterEnd: "[10, 1] (159)"
                                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                          {}
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children: []
                                        IterBegin: None
                                        IterEnd: None
                                        Type: "Repeat: {Suffix, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                    IterBegin: "[9, 13] (154)"
                                    IterEnd: "[9, 17] (158)"
                                    Type: "Content Item <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[7, 30] (139)"
                                IterEnd: "[9, 17] (158)"
                                Type: "Comma and Content <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[4, 26] (97)"
                            IterEnd: "[9, 17] (158)"
                            Type: "Repeat: {Comma and Content, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: True
                            IterBegin: "[9, 17] (158)"
                            IterEnd: "[10, 1] (159)"
                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                              End: 159
                              Start: 158
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: True
                            IterBegin: "[10, 1] (159)"
                            IterEnd: "[10, 1] (159)"
                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: True
                            IterBegin: "[10, 1] (159)"
                            IterEnd: "[10, 1] (159)"
                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: True
                            IterBegin: "[10, 1] (159)"
                            IterEnd: "[10, 1] (159)"
                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children: []
                            IterBegin: None
                            IterEnd: None
                            Type: "Repeat: {Trailing Comma, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                        IterBegin: "[4, 5] (76)"
                        IterEnd: "[9, 17] (158)"
                        Type: "Content Items <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: True
                        IterBegin: "[9, 17] (158)"
                        IterEnd: "[10, 1] (159)"
                        Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                          End: 159
                          Start: 158
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: True
                        IterBegin: "[10, 1] (159)"
                        IterEnd: "[10, 1] (159)"
                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                          {}
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: True
                        IterBegin: "[10, 1] (159)"
                        IterEnd: "[10, 1] (159)"
                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                          {}
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: True
                        IterBegin: "[10, 1] (159)"
                        IterEnd: "[10, 1] (159)"
                        Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                          {}
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[10, 1] (159)"
                        IterEnd: "[10, 2] (160)"
                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(159, 160), match=')'>"
                        Whitespace: None
                    IterBegin: "[3, 22] (70)"
                    IterEnd: "[10, 2] (160)"
                    Type: "Grouped <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[3, 22] (70)"
                IterEnd: "[10, 2] (160)"
                Type: "Or: (Grouped, Content Items) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[10, 2] (160)"
                IterEnd: "[11, 1] (161)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 161
                  Start: 160
                Whitespace: None
            Info: # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.NodeInfo'>
              ImportItems:
                - # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.ImportItemInfo'>
                  Alias: "obj3Decorated"
                  Name: "obj3"
                - # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.ImportItemInfo'>
                  Alias: None
                  Name: "obj4"
                - # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.ImportItemInfo'>
                  Alias: "obj5Decorated"
                  Name: "obj5"
                - # <class 'TheLanguage.Grammars.v0_0_1.Statements.ImportStatement.ImportStatement.ImportItemInfo'>
                  Alias: None
                  Name: "obj6"
              ImportType: "ImportType.SourceIsModule"
              SourceFilename: "<generic_root>/File2.TheLanguage"
            IterBegin: "[3, 1] (49)"
            IterEnd: "[11, 1] (161)"
            Type: "Import Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[3, 1] (49)"
        IterEnd: "[11, 1] (161)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[3, 1] (49)"
    IterEnd: "[11, 1] (161)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[11, 1] (161)"
Type: "<None>"
