# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 7] (6)"
                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 6), match='value1'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "value1"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
                            Self__: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 7] (6)"
                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 7] (6)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 7] (6)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 8] (7)"
                IterEnd: "[1, 9] (8)"
                Type: "'=' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(7, 8), match='='>"
                Whitespace:
                  - 6
                  - 7
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 10] (9)"
                                    IterEnd: "[1, 11] (10)"
                                    Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(9, 10), match='('>"
                                    Whitespace:
                                      - 8
                                      - 9
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 11] (10)"
                                    IterEnd: "[2, 1] (11)"
                                    Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                      End: 11
                                      Start: 10
                                    Whitespace: None
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[2, 1] (11)"
                                    IterEnd: "[2, 5] (15)"
                                    Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                                      End: 15
                                      Start: 11
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 5] (15)"
                                        IterEnd: "[2, 10] (20)"
                                        Type: "'match' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(15, 20), match='match'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 11] (21)"
                                        IterEnd: "[2, 16] (26)"
                                        Type: "'value' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(21, 26), match='value'>"
                                        Whitespace:
                                          - 20
                                          - 21
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                            IsIgnored: False
                                                            IterBegin: "[2, 17] (27)"
                                                            IterEnd: "[2, 22] (32)"
                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(27, 32), match='expr1'>"
                                                            Whitespace:
                                                              - 26
                                                              - 27
                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                          Name: "expr1"
                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                            Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                            Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                        IterBegin: "[2, 17] (27)"
                                                        IterEnd: "[2, 22] (32)"
                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                    IterBegin: "[2, 17] (27)"
                                                    IterEnd: "[2, 22] (32)"
                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                    Name: "expr1"
                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                      Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                      Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                    Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                    Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                                IterBegin: "[2, 17] (27)"
                                                IterEnd: "[2, 22] (32)"
                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                            IterBegin: "[2, 17] (27)"
                                            IterEnd: "[2, 22] (32)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[2, 17] (27)"
                                        IterEnd: "[2, 22] (32)"
                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 22] (32)"
                                        IterEnd: "[2, 23] (33)"
                                        Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(32, 33), match=':'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 23] (33)"
                                        IterEnd: "[3, 1] (34)"
                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                          End: 34
                                          Start: 33
                                        Whitespace: None
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[3, 1] (34)"
                                        IterEnd: "[3, 9] (42)"
                                        Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                                          End: 42
                                          Start: 34
                                          Value: 8
                                        Whitespace: None
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 9] (42)"
                                                IterEnd: "[3, 13] (46)"
                                                Type: "'case' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(42, 46), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 14] (47)"
                                                                            IterEnd: "[3, 19] (52)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(47, 52), match='case1'>"
                                                                            Whitespace:
                                                                              - 46
                                                                              - 47
                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                          Name: "case1"
                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                            Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                            Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                        IterBegin: "[3, 14] (47)"
                                                                        IterEnd: "[3, 19] (52)"
                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 14] (47)"
                                                                    IterEnd: "[3, 19] (52)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "case1"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                      Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                    Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                                                IterBegin: "[3, 14] (47)"
                                                                IterEnd: "[3, 19] (52)"
                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 14] (47)"
                                                            IterEnd: "[3, 19] (52)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 14] (47)"
                                                        IterEnd: "[3, 19] (52)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[3, 19] (52)"
                                                                IterEnd: "[3, 20] (53)"
                                                                Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(52, 53), match=','>"
                                                                Whitespace: None
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                    IsIgnored: False
                                                                                    IterBegin: "[3, 21] (54)"
                                                                                    IterEnd: "[3, 26] (59)"
                                                                                    Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                      Match: "<_sre.SRE_Match object; span=(54, 59), match='case2'>"
                                                                                    Whitespace:
                                                                                      - 53
                                                                                      - 54
                                                                                Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                  Name: "case2"
                                                                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                    Name: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                                                                                    Self__: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                                                                                IterBegin: "[3, 21] (54)"
                                                                                IterEnd: "[3, 26] (59)"
                                                                                Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                            IterBegin: "[3, 21] (54)"
                                                                            IterEnd: "[3, 26] (59)"
                                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                        Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                          Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                            Name: "case2"
                                                                            Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                              Name: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                                                                              Self__: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                                                                          Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                            Name: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                                                                            Self__: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                                                                        IterBegin: "[3, 21] (54)"
                                                                        IterEnd: "[3, 26] (59)"
                                                                        Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                    IterBegin: "[3, 21] (54)"
                                                                    IterEnd: "[3, 26] (59)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                IterBegin: "[3, 21] (54)"
                                                                IterEnd: "[3, 26] (59)"
                                                                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 19] (52)"
                                                            IterEnd: "[3, 26] (59)"
                                                            Type: "Comma and Content <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                        IterBegin: "[3, 19] (52)"
                                                        IterEnd: "[3, 26] (59)"
                                                        Type: "Repeat: {Comma and Content, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                    IterBegin: "[3, 14] (47)"
                                                    IterEnd: "[3, 26] (59)"
                                                    Type: "Case Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 14] (47)"
                                                IterEnd: "[3, 26] (59)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 26] (59)"
                                                IterEnd: "[3, 27] (60)"
                                                Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(59, 60), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[3, 28] (61)"
                                                                            IterEnd: "[3, 35] (68)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(61, 68), match='value1a'>"
                                                                            Whitespace:
                                                                              - 60
                                                                              - 61
                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                          Name: "value1a"
                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                            Name: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                                                                            Self__: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                                                                        IterBegin: "[3, 28] (61)"
                                                                        IterEnd: "[3, 35] (68)"
                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[3, 28] (61)"
                                                                    IterEnd: "[3, 35] (68)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "value1a"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                                                                      Self__: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                                                                    Self__: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                                                                IterBegin: "[3, 28] (61)"
                                                                IterEnd: "[3, 35] (68)"
                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[3, 28] (61)"
                                                            IterEnd: "[3, 35] (68)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[3, 28] (61)"
                                                        IterEnd: "[3, 35] (68)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[3, 35] (68)"
                                                        IterEnd: "[4, 1] (69)"
                                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                          End: 69
                                                          Start: 68
                                                        Whitespace: None
                                                    IterBegin: "[3, 28] (61)"
                                                    IterEnd: "[4, 1] (69)"
                                                    Type: "Single Line <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[3, 28] (61)"
                                                IterEnd: "[4, 1] (69)"
                                                Type: "Expression <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[3, 9] (42)"
                                            IterEnd: "[4, 1] (69)"
                                            Type: "Case Phrase <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 9] (77)"
                                                IterEnd: "[4, 13] (81)"
                                                Type: "'case' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(77, 81), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 14] (82)"
                                                        IterEnd: "[4, 15] (83)"
                                                        Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(82, 83), match='('>"
                                                        Whitespace:
                                                          - 81
                                                          - 82
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[4, 15] (83)"
                                                                                IterEnd: "[4, 20] (88)"
                                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(83, 88), match='case3'>"
                                                                                Whitespace: None
                                                                            Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                              Name: "case3"
                                                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                Name: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                                                                                Self__: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                                                                            IterBegin: "[4, 15] (83)"
                                                                            IterEnd: "[4, 20] (88)"
                                                                            Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[4, 15] (83)"
                                                                        IterEnd: "[4, 20] (88)"
                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                    Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                        Name: "case3"
                                                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                          Name: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                                                                          Self__: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                                                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                        Name: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                                                                        Self__: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                                                                    IterBegin: "[4, 15] (83)"
                                                                    IterEnd: "[4, 20] (88)"
                                                                    Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                IterBegin: "[4, 15] (83)"
                                                                IterEnd: "[4, 20] (88)"
                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                            IterBegin: "[4, 15] (83)"
                                                            IterEnd: "[4, 20] (88)"
                                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[4, 20] (88)"
                                                                    IterEnd: "[4, 21] (89)"
                                                                    Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(88, 89), match=','>"
                                                                    Whitespace: None
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[4, 22] (90)"
                                                                                        IterEnd: "[4, 27] (95)"
                                                                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(90, 95), match='case4'>"
                                                                                        Whitespace:
                                                                                          - 89
                                                                                          - 90
                                                                                    Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                      Name: "case4"
                                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                        Name: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                                                                                        Self__: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                                                                                    IterBegin: "[4, 22] (90)"
                                                                                    IterEnd: "[4, 27] (95)"
                                                                                    Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[4, 22] (90)"
                                                                                IterEnd: "[4, 27] (95)"
                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                            Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                Name: "case4"
                                                                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                  Name: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                                                                                  Self__: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                                                                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                Name: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                                                                                Self__: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                                                                            IterBegin: "[4, 22] (90)"
                                                                            IterEnd: "[4, 27] (95)"
                                                                            Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                        IterBegin: "[4, 22] (90)"
                                                                        IterEnd: "[4, 27] (95)"
                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                    IterBegin: "[4, 22] (90)"
                                                                    IterEnd: "[4, 27] (95)"
                                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                IterBegin: "[4, 20] (88)"
                                                                IterEnd: "[4, 27] (95)"
                                                                Type: "Comma and Content <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[4, 20] (88)"
                                                            IterEnd: "[4, 27] (95)"
                                                            Type: "Repeat: {Comma and Content, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[4, 27] (95)"
                                                                IterEnd: "[4, 28] (96)"
                                                                Type: "Trailing Comma <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(95, 96), match=','>"
                                                                Whitespace: None
                                                            IterBegin: "[4, 27] (95)"
                                                            IterEnd: "[4, 28] (96)"
                                                            Type: "Repeat: {Trailing Comma, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                        IterBegin: "[4, 15] (83)"
                                                        IterEnd: "[4, 28] (96)"
                                                        Type: "Case Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 28] (96)"
                                                        IterEnd: "[4, 29] (97)"
                                                        Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(96, 97), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[4, 14] (82)"
                                                    IterEnd: "[4, 29] (97)"
                                                    Type: "Grouped <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[4, 14] (82)"
                                                IterEnd: "[4, 29] (97)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 29] (97)"
                                                IterEnd: "[4, 30] (98)"
                                                Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(97, 98), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 30] (98)"
                                                        IterEnd: "[5, 1] (99)"
                                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                          End: 99
                                                          Start: 98
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[5, 1] (99)"
                                                        IterEnd: "[5, 13] (111)"
                                                        Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                                                          End: 111
                                                          Start: 99
                                                          Value: 12
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[5, 13] (111)"
                                                                            IterEnd: "[5, 20] (118)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(111, 118), match='value1b'>"
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                          Name: "value1b"
                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                            Name: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                                                                            Self__: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                                                                        IterBegin: "[5, 13] (111)"
                                                                        IterEnd: "[5, 20] (118)"
                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[5, 13] (111)"
                                                                    IterEnd: "[5, 20] (118)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "value1b"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                                                                      Self__: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                                                                    Self__: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                                                                IterBegin: "[5, 13] (111)"
                                                                IterEnd: "[5, 20] (118)"
                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[5, 13] (111)"
                                                            IterEnd: "[5, 20] (118)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[5, 13] (111)"
                                                        IterEnd: "[5, 20] (118)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[5, 20] (118)"
                                                        IterEnd: "[6, 1] (119)"
                                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                          End: 119
                                                          Start: 118
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[6, 1] (119)"
                                                        IterEnd: "[6, 9] (127)"
                                                        Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                                                          {}
                                                        Whitespace: None
                                                    IterBegin: "[4, 30] (98)"
                                                    IterEnd: "[6, 9] (127)"
                                                    Type: "Multiple Lines <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[4, 30] (98)"
                                                IterEnd: "[6, 9] (127)"
                                                Type: "Expression <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[4, 9] (77)"
                                            IterEnd: "[6, 9] (127)"
                                            Type: "Case Phrase <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[6, 9] (127)"
                                                IterEnd: "[6, 13] (131)"
                                                Type: "'case' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(127, 131), match='case'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[6, 14] (132)"
                                                        IterEnd: "[6, 15] (133)"
                                                        Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(132, 133), match='('>"
                                                        Whitespace:
                                                          - 131
                                                          - 132
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                IsIgnored: False
                                                                                IterBegin: "[7, 13] (146)"
                                                                                IterEnd: "[7, 18] (151)"
                                                                                Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                  Match: "<_sre.SRE_Match object; span=(146, 151), match='case5'>"
                                                                                Whitespace: None
                                                                            Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                              Name: "case5"
                                                                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                Name: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                                                                                Self__: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                                                                            IterBegin: "[7, 13] (146)"
                                                                            IterEnd: "[7, 18] (151)"
                                                                            Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                        IterBegin: "[7, 13] (146)"
                                                                        IterEnd: "[7, 18] (151)"
                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                    Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                        Name: "case5"
                                                                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                          Name: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                                                                          Self__: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                                                                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                        Name: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                                                                        Self__: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                                                                    IterBegin: "[7, 13] (146)"
                                                                    IterEnd: "[7, 18] (151)"
                                                                    Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                IterBegin: "[7, 13] (146)"
                                                                IterEnd: "[7, 18] (151)"
                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                            IterBegin: "[7, 13] (146)"
                                                            IterEnd: "[7, 18] (151)"
                                                            Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[7, 18] (151)"
                                                                    IterEnd: "[7, 19] (152)"
                                                                    Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(151, 152), match=','>"
                                                                    Whitespace: None
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[8, 17] (169)"
                                                                                        IterEnd: "[8, 22] (174)"
                                                                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(169, 174), match='case6'>"
                                                                                        Whitespace: None
                                                                                    Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                      Name: "case6"
                                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                        Name: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                                                                                        Self__: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                                                                                    IterBegin: "[8, 17] (169)"
                                                                                    IterEnd: "[8, 22] (174)"
                                                                                    Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[8, 17] (169)"
                                                                                IterEnd: "[8, 22] (174)"
                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                            Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                Name: "case6"
                                                                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                  Name: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                                                                                  Self__: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                                                                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                Name: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                                                                                Self__: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                                                                            IterBegin: "[8, 17] (169)"
                                                                            IterEnd: "[8, 22] (174)"
                                                                            Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                        IterBegin: "[8, 17] (169)"
                                                                        IterEnd: "[8, 22] (174)"
                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                    IterBegin: "[8, 17] (169)"
                                                                    IterEnd: "[8, 22] (174)"
                                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                IterBegin: "[7, 18] (151)"
                                                                IterEnd: "[8, 22] (174)"
                                                                Type: "Comma and Content <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[8, 22] (174)"
                                                                    IterEnd: "[8, 23] (175)"
                                                                    Type: "',' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(174, 175), match=','>"
                                                                    Whitespace: None
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                            Children:
                                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                Children:
                                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                                    Children:
                                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                                        IsIgnored: False
                                                                                        IterBegin: "[9, 21] (196)"
                                                                                        IterEnd: "[9, 26] (201)"
                                                                                        Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                                          Match: "<_sre.SRE_Match object; span=(196, 201), match='case7'>"
                                                                                        Whitespace: None
                                                                                    Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                      Name: "case7"
                                                                                      Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                        Name: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                                                                                        Self__: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                                                                                    IterBegin: "[9, 21] (196)"
                                                                                    IterEnd: "[9, 26] (201)"
                                                                                    Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                                IterBegin: "[9, 21] (196)"
                                                                                IterEnd: "[9, 26] (201)"
                                                                                Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                            Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                                Name: "case7"
                                                                                Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                                  Name: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                                                                                  Self__: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                                                                              Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                                Name: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                                                                                Self__: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                                                                            IterBegin: "[9, 21] (196)"
                                                                            IterEnd: "[9, 26] (201)"
                                                                            Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                        IterBegin: "[9, 21] (196)"
                                                                        IterEnd: "[9, 26] (201)"
                                                                        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                    IterBegin: "[9, 21] (196)"
                                                                    IterEnd: "[9, 26] (201)"
                                                                    Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                                IterBegin: "[8, 22] (174)"
                                                                IterEnd: "[9, 26] (201)"
                                                                Type: "Comma and Content <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                            IterBegin: "[7, 18] (151)"
                                                            IterEnd: "[9, 26] (201)"
                                                            Type: "Repeat: {Comma and Content, 0, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                IsIgnored: False
                                                                IterBegin: "[9, 26] (201)"
                                                                IterEnd: "[9, 27] (202)"
                                                                Type: "Trailing Comma <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(201, 202), match=','>"
                                                                Whitespace: None
                                                            IterBegin: "[9, 26] (201)"
                                                            IterEnd: "[9, 27] (202)"
                                                            Type: "Repeat: {Trailing Comma, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                                        IterBegin: "[7, 13] (146)"
                                                        IterEnd: "[9, 27] (202)"
                                                        Type: "Case Items <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[10, 9] (211)"
                                                        IterEnd: "[10, 10] (212)"
                                                        Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(211, 212), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[6, 14] (132)"
                                                    IterEnd: "[10, 10] (212)"
                                                    Type: "Grouped <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[6, 14] (132)"
                                                IterEnd: "[10, 10] (212)"
                                                Type: "Or: (Grouped, Case Items) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[10, 10] (212)"
                                                IterEnd: "[10, 11] (213)"
                                                Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(212, 213), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[10, 11] (213)"
                                                        IterEnd: "[11, 1] (214)"
                                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                          End: 214
                                                          Start: 213
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[11, 1] (214)"
                                                        IterEnd: "[11, 13] (226)"
                                                        Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                                                          End: 226
                                                          Start: 214
                                                          Value: 12
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[11, 13] (226)"
                                                                            IterEnd: "[11, 20] (233)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(226, 233), match='value1c'>"
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                          Name: "value1c"
                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                            Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                            Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                        IterBegin: "[11, 13] (226)"
                                                                        IterEnd: "[11, 20] (233)"
                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[11, 13] (226)"
                                                                    IterEnd: "[11, 20] (233)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "value1c"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                      Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                    Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                                                IterBegin: "[11, 13] (226)"
                                                                IterEnd: "[11, 20] (233)"
                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[11, 13] (226)"
                                                            IterEnd: "[11, 20] (233)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[11, 13] (226)"
                                                        IterEnd: "[11, 20] (233)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[11, 20] (233)"
                                                        IterEnd: "[12, 1] (234)"
                                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                          End: 234
                                                          Start: 233
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[12, 1] (234)"
                                                        IterEnd: "[12, 9] (242)"
                                                        Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                                                          {}
                                                        Whitespace: None
                                                    IterBegin: "[10, 11] (213)"
                                                    IterEnd: "[12, 9] (242)"
                                                    Type: "Multiple Lines <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[10, 11] (213)"
                                                IterEnd: "[12, 9] (242)"
                                                Type: "Expression <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[6, 9] (127)"
                                            IterEnd: "[12, 9] (242)"
                                            Type: "Case Phrase <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[3, 9] (42)"
                                        IterEnd: "[12, 9] (242)"
                                        Type: "Repeat: {Case Phrase, 1, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[12, 9] (242)"
                                                IterEnd: "[12, 16] (249)"
                                                Type: "'default' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(242, 249), match='default'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[12, 16] (249)"
                                                IterEnd: "[12, 17] (250)"
                                                Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(249, 250), match=':'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[12, 17] (250)"
                                                        IterEnd: "[13, 1] (251)"
                                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                          End: 251
                                                          Start: 250
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[13, 1] (251)"
                                                        IterEnd: "[13, 13] (263)"
                                                        Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                                                          End: 263
                                                          Start: 251
                                                          Value: 12
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                        Children:
                                                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                            Children:
                                                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                Children:
                                                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                    Children:
                                                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                                                        Children:
                                                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                                            IsIgnored: False
                                                                            IterBegin: "[13, 13] (263)"
                                                                            IterEnd: "[13, 20] (270)"
                                                                            Type: "<generic_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                              Match: "<_sre.SRE_Match object; span=(263, 270), match='value1d'>"
                                                                            Whitespace: None
                                                                        Info: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                          Name: "value1d"
                                                                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                            Name: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                                                                            Self__: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                                                                        IterBegin: "[13, 13] (263)"
                                                                        IterEnd: "[13, 20] (270)"
                                                                        Type: "Variable Name <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                                    IterBegin: "[13, 13] (263)"
                                                                    IterEnd: "[13, 20] (270)"
                                                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                                Info: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                                                    Name: "value1d"
                                                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                                                      Name: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                                                                      Self__: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                                                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                                                    Name: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                                                                    Self__: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                                                                IterBegin: "[13, 13] (263)"
                                                                IterEnd: "[13, 20] (270)"
                                                                Type: "Variable Expression <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                            IterBegin: "[13, 13] (263)"
                                                            IterEnd: "[13, 20] (270)"
                                                            Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                                        IterBegin: "[13, 13] (263)"
                                                        IterEnd: "[13, 20] (270)"
                                                        Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[13, 20] (270)"
                                                        IterEnd: "[14, 1] (271)"
                                                        Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                                          End: 271
                                                          Start: 270
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[14, 1] (271)"
                                                        IterEnd: "[14, 1] (271)"
                                                        Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                                                          {}
                                                        Whitespace: None
                                                    IterBegin: "[12, 17] (250)"
                                                    IterEnd: "[14, 1] (271)"
                                                    Type: "Multiple Lines <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                                IterBegin: "[12, 17] (250)"
                                                IterEnd: "[14, 1] (271)"
                                                Type: "Expression <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                            IterBegin: "[12, 9] (242)"
                                            IterEnd: "[14, 1] (271)"
                                            Type: "Default <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[12, 9] (242)"
                                        IterEnd: "[14, 1] (271)"
                                        Type: "Repeat: {Default, 0, 1} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                                      - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[14, 1] (271)"
                                        IterEnd: "[14, 1] (271)"
                                        Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                                          {}
                                        Whitespace: None
                                    IterBegin: "[2, 5] (15)"
                                    IterEnd: "[14, 1] (271)"
                                    Type: "Match <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[14, 1] (271)"
                                    IterEnd: "[14, 1] (271)"
                                    Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[14, 1] (271)"
                                    IterEnd: "[14, 2] (272)"
                                    Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(271, 272), match=')'>"
                                    Whitespace: None
                                IterBegin: "[1, 10] (9)"
                                IterEnd: "[14, 2] (272)"
                                Type: "Allman-like <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 10] (9)"
                            IterEnd: "[14, 2] (272)"
                            Type: "Style <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                        Info: # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueExpressionParserInfo'>
                          CasePhrases:
                            - # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueCasePhraseParserInfo'>
                              Cases:
                                - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "case1"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                      Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                    Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                                - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "case2"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                                      Self__: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                                    Self__: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "value1a"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                                    Self__: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                                  Self__: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                              Regions: # <class 'types.MatchValueCasePhraseParserInfoRegions'>
                                Cases: "[Ln 3, Col 14] -> [Ln 3, Col 26]"
                                Expression: "[Ln 3, Col 28] -> [Ln 4, Col 1]"
                                Self__: "[Ln 3, Col 9] -> [Ln 4, Col 1]"
                            - # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueCasePhraseParserInfo'>
                              Cases:
                                - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "case3"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                                      Self__: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                                    Self__: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                                - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "case4"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                                      Self__: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                                    Self__: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "value1b"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                                    Self__: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                                  Self__: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                              Regions: # <class 'types.MatchValueCasePhraseParserInfoRegions'>
                                Cases: "[Ln 4, Col 15] -> [Ln 4, Col 28]"
                                Expression: "[Ln 4, Col 30] -> [Ln 6, Col 9]"
                                Self__: "[Ln 4, Col 9] -> [Ln 6, Col 9]"
                            - # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueCasePhraseParserInfo'>
                              Cases:
                                - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "case5"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                                      Self__: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                                    Self__: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                                - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "case6"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                                      Self__: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                                    Self__: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                                - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                    Name: "case7"
                                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                                      Name: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                                      Self__: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                    Name: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                                    Self__: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                              Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                                Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                                  Name: "value1c"
                                  Regions: # <class 'types.VariableNameParserInfoRegions'>
                                    Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                    Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                                  Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                                  Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                              Regions: # <class 'types.MatchValueCasePhraseParserInfoRegions'>
                                Cases: "[Ln 7, Col 13] -> [Ln 9, Col 27]"
                                Expression: "[Ln 10, Col 11] -> [Ln 12, Col 9]"
                                Self__: "[Ln 6, Col 9] -> [Ln 12, Col 9]"
                          Default: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                              Name: "value1d"
                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                Name: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                                Self__: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                            Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                              Name: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                              Self__: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                          Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                            Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                              Name: "expr1"
                              Regions: # <class 'types.VariableNameParserInfoRegions'>
                                Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                                Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                            Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                              Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                              Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                          Regions: # <class 'types.MatchValueExpressionParserInfoRegions'>
                            CasePhrases: "[Ln 3, Col 9] -> [Ln 12, Col 9]"
                            Default: "[Ln 12, Col 17] -> [Ln 14, Col 1]"
                            Expression: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                            Self__: "[Ln 1, Col 10] -> [Ln 14, Col 2]"
                        IterBegin: "[1, 10] (9)"
                        IterEnd: "[14, 2] (272)"
                        Type: "Match Value Expression <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 10] (9)"
                    IterEnd: "[14, 2] (272)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 10] (9)"
                IterEnd: "[14, 2] (272)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[14, 2] (272)"
                IterEnd: "[15, 1] (273)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 273
                  Start: 272
                Whitespace: None
            Info: # <class 'TheLanguage.Parser.Statements.VariableDeclarationStatementParserInfo.VariableDeclarationStatementParserInfo'>
              Expression: # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueExpressionParserInfo'>
                CasePhrases:
                  - # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueCasePhraseParserInfo'>
                    Cases:
                      - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "case1"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                            Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                          Self__: "[Ln 3, Col 14] -> [Ln 3, Col 19]"
                      - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "case2"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                            Self__: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                          Self__: "[Ln 3, Col 21] -> [Ln 3, Col 26]"
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "value1a"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                          Self__: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                        Self__: "[Ln 3, Col 28] -> [Ln 3, Col 35]"
                    Regions: # <class 'types.MatchValueCasePhraseParserInfoRegions'>
                      Cases: "[Ln 3, Col 14] -> [Ln 3, Col 26]"
                      Expression: "[Ln 3, Col 28] -> [Ln 4, Col 1]"
                      Self__: "[Ln 3, Col 9] -> [Ln 4, Col 1]"
                  - # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueCasePhraseParserInfo'>
                    Cases:
                      - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "case3"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                            Self__: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                          Self__: "[Ln 4, Col 15] -> [Ln 4, Col 20]"
                      - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "case4"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                            Self__: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                          Self__: "[Ln 4, Col 22] -> [Ln 4, Col 27]"
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "value1b"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                          Self__: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                        Self__: "[Ln 5, Col 13] -> [Ln 5, Col 20]"
                    Regions: # <class 'types.MatchValueCasePhraseParserInfoRegions'>
                      Cases: "[Ln 4, Col 15] -> [Ln 4, Col 28]"
                      Expression: "[Ln 4, Col 30] -> [Ln 6, Col 9]"
                      Self__: "[Ln 4, Col 9] -> [Ln 6, Col 9]"
                  - # <class 'TheLanguage.Parser.Expressions.MatchValueExpressionParserInfo.MatchValueCasePhraseParserInfo'>
                    Cases:
                      - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "case5"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                            Self__: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                          Self__: "[Ln 7, Col 13] -> [Ln 7, Col 18]"
                      - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "case6"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                            Self__: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                          Self__: "[Ln 8, Col 17] -> [Ln 8, Col 22]"
                      - # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                        Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                          Name: "case7"
                          Regions: # <class 'types.VariableNameParserInfoRegions'>
                            Name: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                            Self__: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                        Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                          Name: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                          Self__: "[Ln 9, Col 21] -> [Ln 9, Col 26]"
                    Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                      Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                        Name: "value1c"
                        Regions: # <class 'types.VariableNameParserInfoRegions'>
                          Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                          Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                      Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                        Name: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                        Self__: "[Ln 11, Col 13] -> [Ln 11, Col 20]"
                    Regions: # <class 'types.MatchValueCasePhraseParserInfoRegions'>
                      Cases: "[Ln 7, Col 13] -> [Ln 9, Col 27]"
                      Expression: "[Ln 10, Col 11] -> [Ln 12, Col 9]"
                      Self__: "[Ln 6, Col 9] -> [Ln 12, Col 9]"
                Default: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                    Name: "value1d"
                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                      Name: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                      Self__: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                    Name: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                    Self__: "[Ln 13, Col 13] -> [Ln 13, Col 20]"
                Expression: # <class 'TheLanguage.Parser.Expressions.VariableExpressionParserInfo.VariableExpressionParserInfo'>
                  Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                    Name: "expr1"
                    Regions: # <class 'types.VariableNameParserInfoRegions'>
                      Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                      Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                  Regions: # <class 'types.VariableExpressionParserInfoRegions'>
                    Name: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                    Self__: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                Regions: # <class 'types.MatchValueExpressionParserInfoRegions'>
                  CasePhrases: "[Ln 3, Col 9] -> [Ln 12, Col 9]"
                  Default: "[Ln 12, Col 17] -> [Ln 14, Col 1]"
                  Expression: "[Ln 2, Col 17] -> [Ln 2, Col 22]"
                  Self__: "[Ln 1, Col 10] -> [Ln 14, Col 2]"
              Modifier: None
              Name: # <class 'TheLanguage.Parser.Names.VariableNameParserInfo.VariableNameParserInfo'>
                Name: "value1"
                Regions: # <class 'types.VariableNameParserInfoRegions'>
                  Name: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
                  Self__: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
              Regions: # <class 'types.VariableDeclarationStatementParserInfoRegions'>
                Expression: "[Ln 1, Col 10] -> [Ln 14, Col 2]"
                Modifier: None
                Name: "[Ln 1, Col 1] -> [Ln 1, Col 7]"
                Self__: "[Ln 1, Col 1] -> [Ln 15, Col 1]"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[15, 1] (273)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[15, 1] (273)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[15, 1] (273)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[15, 1] (273)"
Type: "<None>"
