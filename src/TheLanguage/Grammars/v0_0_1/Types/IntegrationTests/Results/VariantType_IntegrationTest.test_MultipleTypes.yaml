# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 1] (0)"
                            IterEnd: "[1, 2] (1)"
                            Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(0, 1), match='('>"
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[2, 5] (6)"
                                        IterEnd: "[2, 8] (9)"
                                        Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(6, 9), match='Int'>"
                                        Whitespace: None
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 9] (10)"
                                                IterEnd: "[2, 12] (13)"
                                                Type: "'var' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(10, 13), match='var'>"
                                                Whitespace:
                                                  - 9
                                                  - 10
                                            IterBegin: "[2, 9] (10)"
                                            IterEnd: "[2, 12] (13)"
                                            Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[2, 9] (10)"
                                        IterEnd: "[2, 12] (13)"
                                        Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                      Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                        Modifier: TypeModifier.var
                                        TypeName: "Int"
                                      Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                        Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                          Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 9
                                            Line: 2
                                          End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 12
                                            Line: 2
                                        Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                          Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 5
                                            Line: 2
                                          End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 12
                                            Line: 2
                                        TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                          Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 5
                                            Line: 2
                                          End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 8
                                            Line: 2
                                    IterBegin: "[2, 5] (6)"
                                    IterEnd: "[2, 12] (13)"
                                    Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[2, 5] (6)"
                                IterEnd: "[2, 12] (13)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[2, 5] (6)"
                            IterEnd: "[2, 12] (13)"
                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 5] (18)"
                            IterEnd: "[3, 6] (19)"
                            Type: "'|' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(18, 19), match='|'>"
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[3, 7] (20)"
                                                IterEnd: "[3, 11] (24)"
                                                Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(20, 24), match='Char'>"
                                                Whitespace:
                                                  - 19
                                                  - 20
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[3, 12] (25)"
                                                        IterEnd: "[3, 16] (29)"
                                                        Type: "'view' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(25, 29), match='view'>"
                                                        Whitespace:
                                                          - 24
                                                          - 25
                                                    IterBegin: "[3, 12] (25)"
                                                    IterEnd: "[3, 16] (29)"
                                                    Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                                IterBegin: "[3, 12] (25)"
                                                IterEnd: "[3, 16] (29)"
                                                Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                            Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                              Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                Modifier: TypeModifier.view
                                                TypeName: "Char"
                                              Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 12
                                                    Line: 3
                                                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 16
                                                    Line: 3
                                                Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 7
                                                    Line: 3
                                                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 16
                                                    Line: 3
                                                TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 7
                                                    Line: 3
                                                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 11
                                                    Line: 3
                                            IterBegin: "[3, 7] (20)"
                                            IterEnd: "[3, 16] (29)"
                                            Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[3, 7] (20)"
                                        IterEnd: "[3, 16] (29)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[3, 7] (20)"
                                    IterEnd: "[3, 16] (29)"
                                    Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 5] (34)"
                                    IterEnd: "[4, 6] (35)"
                                    Type: "'|' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(34, 35), match='|'>"
                                    Whitespace: None
                                IterBegin: "[3, 7] (20)"
                                IterEnd: "[4, 6] (35)"
                                Type: "Type and Sep <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[4, 7] (36)"
                                                IterEnd: "[4, 13] (42)"
                                                Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(36, 42), match='Double'>"
                                                Whitespace:
                                                  - 35
                                                  - 36
                                            Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                              Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                                Modifier: None
                                                TypeName: "Double"
                                              Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                                Modifier: None
                                                Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 7
                                                    Line: 4
                                                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 13
                                                    Line: 4
                                                TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 7
                                                    Line: 4
                                                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                                    Column: 13
                                                    Line: 4
                                            IterBegin: "[4, 7] (36)"
                                            IterEnd: "[4, 13] (42)"
                                            Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[4, 7] (36)"
                                        IterEnd: "[4, 13] (42)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[4, 7] (36)"
                                    IterEnd: "[4, 13] (42)"
                                    Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[5, 5] (47)"
                                    IterEnd: "[5, 6] (48)"
                                    Type: "'|' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(47, 48), match='|'>"
                                    Whitespace: None
                                IterBegin: "[4, 7] (36)"
                                IterEnd: "[5, 6] (48)"
                                Type: "Type and Sep <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[3, 7] (20)"
                            IterEnd: "[5, 6] (48)"
                            Type: "Repeat: {Type and Sep, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                        IsIgnored: False
                                        IterBegin: "[5, 7] (49)"
                                        IterEnd: "[5, 10] (52)"
                                        Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(49, 52), match='Foo'>"
                                        Whitespace:
                                          - 48
                                          - 49
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[5, 11] (53)"
                                                IterEnd: "[5, 14] (56)"
                                                Type: "'var' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(53, 56), match='var'>"
                                                Whitespace:
                                                  - 52
                                                  - 53
                                            IterBegin: "[5, 11] (53)"
                                            IterEnd: "[5, 14] (56)"
                                            Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[5, 11] (53)"
                                        IterEnd: "[5, 14] (56)"
                                        Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                    Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                      Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                        Modifier: TypeModifier.var
                                        TypeName: "Foo"
                                      Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                        Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                          Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 11
                                            Line: 5
                                          End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 14
                                            Line: 5
                                        Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                          Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 7
                                            Line: 5
                                          End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 14
                                            Line: 5
                                        TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                          Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 7
                                            Line: 5
                                          End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                            Column: 10
                                            Line: 5
                                    IterBegin: "[5, 7] (49)"
                                    IterEnd: "[5, 14] (56)"
                                    Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                IterBegin: "[5, 7] (49)"
                                IterEnd: "[5, 14] (56)"
                                Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                            IterBegin: "[5, 7] (49)"
                            IterEnd: "[5, 14] (56)"
                            Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[6, 1] (57)"
                            IterEnd: "[6, 2] (58)"
                            Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(57, 58), match=')'>"
                            Whitespace: None
                        Info: # <class 'TheLanguage.Lexer.Types.VariantTypeLexerInfo.VariantTypeLexerInfo'>
                          Data: # <class 'TheLanguage.Lexer.Types.VariantTypeLexerInfo.VariantTypeLexerData'>
                            Types:
                              - # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                  Modifier: TypeModifier.var
                                  TypeName: "Int"
                                Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                  Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                    Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 9
                                      Line: 2
                                    End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 12
                                      Line: 2
                                  Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                    Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 5
                                      Line: 2
                                    End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 12
                                      Line: 2
                                  TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                    Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 5
                                      Line: 2
                                    End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 8
                                      Line: 2
                              - # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                  Modifier: TypeModifier.view
                                  TypeName: "Char"
                                Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                  Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                    Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 12
                                      Line: 3
                                    End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 16
                                      Line: 3
                                  Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                    Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 7
                                      Line: 3
                                    End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 16
                                      Line: 3
                                  TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                    Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 7
                                      Line: 3
                                    End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 11
                                      Line: 3
                              - # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                  Modifier: None
                                  TypeName: "Double"
                                Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                  Modifier: None
                                  Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                    Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 7
                                      Line: 4
                                    End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 13
                                      Line: 4
                                  TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                    Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 7
                                      Line: 4
                                    End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 13
                                      Line: 4
                              - # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                Data: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerData'>
                                  Modifier: TypeModifier.var
                                  TypeName: "Foo"
                                Regions: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerRegions'>
                                  Modifier: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                    Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 11
                                      Line: 5
                                    End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 14
                                      Line: 5
                                  Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                    Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 7
                                      Line: 5
                                    End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 14
                                      Line: 5
                                  TypeName: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                                    Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 7
                                      Line: 5
                                    End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                      Column: 10
                                      Line: 5
                          Regions: # <class 'TheLanguage.Lexer.Types.VariantTypeLexerInfo.VariantTypeLexerRegions'>
                            Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 1
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 2
                                Line: 6
                            Types: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                              Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 1
                                Line: 1
                              End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                                Column: 2
                                Line: 6
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[6, 2] (58)"
                        Type: "Variant Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[6, 2] (58)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[6, 2] (58)"
                Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[6, 3] (59)"
                IterEnd: "[6, 7] (63)"
                Type: "<method_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(59, 63), match='Func'>"
                Whitespace:
                  - 58
                  - 59
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[6, 7] (63)"
                    IterEnd: "[6, 8] (64)"
                    Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(63, 64), match='('>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[6, 8] (64)"
                    IterEnd: "[6, 9] (65)"
                    Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(64, 65), match=')'>"
                    Whitespace: None
                IterBegin: "[6, 7] (63)"
                IterEnd: "[6, 9] (65)"
                Type: "Parameters <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[6, 9] (65)"
                        IterEnd: "[6, 10] (66)"
                        Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(65, 66), match=':'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[6, 10] (66)"
                                IterEnd: "[7, 1] (67)"
                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                  End: 67
                                  Start: 66
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[7, 1] (67)"
                                IterEnd: "[7, 5] (71)"
                                Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                  End: 71
                                  Start: 67
                                  Value: 4
                                Whitespace: None
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[7, 5] (71)"
                                                IterEnd: "[7, 9] (75)"
                                                Type: "'pass' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(71, 75), match='pass'>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[7, 9] (75)"
                                                IterEnd: "[8, 1] (76)"
                                                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                  End: 76
                                                  Start: 75
                                                Whitespace: None
                                            IterBegin: "[7, 5] (71)"
                                            IterEnd: "[8, 1] (76)"
                                            Type: "Pass Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                        IterBegin: "[7, 5] (71)"
                                        IterEnd: "[8, 1] (76)"
                                        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                    IterBegin: "[7, 5] (71)"
                                    IterEnd: "[8, 1] (76)"
                                    Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                IterBegin: "[7, 5] (71)"
                                IterEnd: "[8, 1] (76)"
                                Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                IsIgnored: False
                                IterBegin: "[8, 1] (76)"
                                IterEnd: "[8, 1] (76)"
                                Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                  {}
                                Whitespace: None
                            IterBegin: "[6, 10] (66)"
                            IterEnd: "[8, 1] (76)"
                            Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                        IterBegin: "[6, 10] (66)"
                        IterEnd: "[8, 1] (76)"
                        Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                    IterBegin: "[6, 9] (65)"
                    IterEnd: "[8, 1] (76)"
                    Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[6, 9] (65)"
                IterEnd: "[8, 1] (76)"
                Type: "Or: (Statements, Newline+) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
            Info: # <class 'TheLanguage.Lexer.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerInfo'>
              Data: # <class 'TheLanguage.Lexer.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerData'>
                ClassModifier: None
                MethodType: "MethodType.standard"
                Name: "Func"
                Parameters: {}
                ReturnType: None
                Visibility: "VisibilityModifier.private"
              Regions: # <class 'TheLanguage.Lexer.Statements.FuncAndMethodDefinitionStatementLexerInfo.FuncAndMethodDefinitionStatementLexerRegions'>
                ClassModifier: None
                MethodType: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 8
                Name: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 3
                    Line: 6
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 7
                    Line: 6
                Parameters: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 7
                    Line: 6
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 9
                    Line: 6
                ReturnType: None
                Self__: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 8
                Visibility: # <class 'TheLanguage.Lexer.LexerInfo.Region'>
                  Begin: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 1
                  End: # <class 'TheLanguage.Lexer.LexerInfo.Location'>
                    Column: 1
                    Line: 8
            IterBegin: "[1, 1] (0)"
            IterEnd: "[8, 1] (76)"
            Type: "Func And Method Definition Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[8, 1] (76)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[8, 1] (76)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[8, 1] (76)"
Type: "<None>"
