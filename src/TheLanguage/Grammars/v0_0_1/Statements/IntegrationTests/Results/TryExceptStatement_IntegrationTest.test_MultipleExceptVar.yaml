# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "'try' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 3), match='try'>"
                Whitespace: None
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[1, 4] (3)"
                    IterEnd: "[1, 5] (4)"
                    Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(3, 4), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 5] (4)"
                            IterEnd: "[2, 1] (5)"
                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                              End: 5
                              Start: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[2, 1] (5)"
                            IterEnd: "[2, 5] (9)"
                            Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                              End: 9
                              Start: 5
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 5] (9)"
                                            IterEnd: "[2, 11] (15)"
                                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(9, 15), match='Func1a'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 11] (15)"
                                                IterEnd: "[2, 12] (16)"
                                                Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(15, 16), match='('>"
                                                Whitespace: None
                                              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                IsIgnored: False
                                                IterBegin: "[2, 12] (16)"
                                                IterEnd: "[2, 13] (17)"
                                                Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(16, 17), match=')'>"
                                                Whitespace: None
                                            IterBegin: "[2, 11] (15)"
                                            IterEnd: "[2, 13] (17)"
                                            Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[2, 13] (17)"
                                            IterEnd: "[3, 1] (18)"
                                            Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                              End: 18
                                              Start: 17
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                          Arguments: None
                                          Name: "Func1a"
                                          Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                            Arguments: None
                                            Name: "[Ln 2, Col 5] -> [Ln 2, Col 11]"
                                            Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
                                        IterBegin: "[2, 5] (9)"
                                        IterEnd: "[3, 1] (18)"
                                        Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[2, 5] (9)"
                                    IterEnd: "[3, 1] (18)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[2, 5] (9)"
                                IterEnd: "[3, 1] (18)"
                                Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[2, 5] (9)"
                            IterEnd: "[3, 1] (18)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 1] (18)"
                            IterEnd: "[3, 1] (18)"
                            Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[1, 5] (4)"
                        IterEnd: "[3, 1] (18)"
                        Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 5] (4)"
                    IterEnd: "[3, 1] (18)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 4] (3)"
                IterEnd: "[3, 1] (18)"
                Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[3, 1] (18)"
                        IterEnd: "[3, 7] (24)"
                        Type: "'except' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(18, 24), match='except'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[3, 8] (25)"
                                    IterEnd: "[3, 18] (35)"
                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(25, 35), match='Exception1'>"
                                    Whitespace:
                                      - 24
                                      - 25
                                Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                  Modifier: None
                                  Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                    Modifier: None
                                    Self__: "[Ln 3, Col 8] -> [Ln 3, Col 18]"
                                    TypeName: "[Ln 3, Col 8] -> [Ln 3, Col 18]"
                                  TypeName: "Exception1"
                                IterBegin: "[3, 8] (25)"
                                IterEnd: "[3, 18] (35)"
                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[3, 8] (25)"
                            IterEnd: "[3, 18] (35)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[3, 8] (25)"
                        IterEnd: "[3, 18] (35)"
                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[3, 19] (36)"
                        IterEnd: "[3, 28] (45)"
                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(36, 45), match='exception'>"
                        Whitespace:
                          - 35
                          - 36
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[3, 28] (45)"
                            IterEnd: "[3, 29] (46)"
                            Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(45, 46), match=':'>"
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[3, 29] (46)"
                                    IterEnd: "[4, 1] (47)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 47
                                      Start: 46
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[4, 1] (47)"
                                    IterEnd: "[4, 5] (51)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 51
                                      Start: 47
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[4, 5] (51)"
                                                    IterEnd: "[4, 11] (57)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(51, 57), match='Func1b'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 11] (57)"
                                                        IterEnd: "[4, 12] (58)"
                                                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(57, 58), match='('>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[4, 12] (58)"
                                                        IterEnd: "[4, 13] (59)"
                                                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(58, 59), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[4, 11] (57)"
                                                    IterEnd: "[4, 13] (59)"
                                                    Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[4, 13] (59)"
                                                    IterEnd: "[5, 1] (60)"
                                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                      End: 60
                                                      Start: 59
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                  Arguments: None
                                                  Name: "Func1b"
                                                  Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                                    Arguments: None
                                                    Name: "[Ln 4, Col 5] -> [Ln 4, Col 11]"
                                                    Self__: "[Ln 4, Col 5] -> [Ln 5, Col 1]"
                                                IterBegin: "[4, 5] (51)"
                                                IterEnd: "[5, 1] (60)"
                                                Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[4, 5] (51)"
                                            IterEnd: "[5, 1] (60)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[4, 5] (51)"
                                        IterEnd: "[5, 1] (60)"
                                        Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[4, 5] (51)"
                                    IterEnd: "[5, 1] (60)"
                                    Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[5, 1] (60)"
                                    IterEnd: "[5, 1] (60)"
                                    Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                IterBegin: "[3, 29] (46)"
                                IterEnd: "[5, 1] (60)"
                                Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[3, 29] (46)"
                            IterEnd: "[5, 1] (60)"
                            Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[3, 28] (45)"
                        IterEnd: "[5, 1] (60)"
                        Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[3, 1] (18)"
                    IterEnd: "[5, 1] (60)"
                    Type: "Except Var <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[5, 1] (60)"
                        IterEnd: "[5, 7] (66)"
                        Type: "'except' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(60, 66), match='except'>"
                        Whitespace: None
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[5, 8] (67)"
                                    IterEnd: "[5, 18] (77)"
                                    Type: "<type_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(67, 77), match='Exception2'>"
                                    Whitespace:
                                      - 66
                                      - 67
                                Info: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                                  Modifier: None
                                  Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                                    Modifier: None
                                    Self__: "[Ln 5, Col 8] -> [Ln 5, Col 18]"
                                    TypeName: "[Ln 5, Col 8] -> [Ln 5, Col 18]"
                                  TypeName: "Exception2"
                                IterBegin: "[5, 8] (67)"
                                IterEnd: "[5, 18] (77)"
                                Type: "Standard Type <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[5, 8] (67)"
                            IterEnd: "[5, 18] (77)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[5, 8] (67)"
                        IterEnd: "[5, 18] (77)"
                        Type: "DynamicPhrasesType.Types <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[5, 19] (78)"
                        IterEnd: "[5, 21] (80)"
                        Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(78, 80), match='ex'>"
                        Whitespace:
                          - 77
                          - 78
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[5, 21] (80)"
                            IterEnd: "[5, 22] (81)"
                            Type: "':' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(80, 81), match=':'>"
                            Whitespace: None
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[5, 22] (81)"
                                    IterEnd: "[6, 1] (82)"
                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                      End: 82
                                      Start: 81
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[6, 1] (82)"
                                    IterEnd: "[6, 5] (86)"
                                    Type: "Indent <class 'TheLanguage.Parser.Components.Token.IndentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.IndentToken.MatchResult'>
                                      End: 86
                                      Start: 82
                                      Value: 4
                                    Whitespace: None
                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                            Children:
                                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                Children:
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[6, 5] (86)"
                                                    IterEnd: "[6, 11] (92)"
                                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(86, 92), match='Func1c'>"
                                                    Whitespace: None
                                                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                                    Children:
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[6, 11] (92)"
                                                        IterEnd: "[6, 12] (93)"
                                                        Type: "'(' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(92, 93), match='('>"
                                                        Whitespace: None
                                                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                        IsIgnored: False
                                                        IterBegin: "[6, 12] (93)"
                                                        IterEnd: "[6, 13] (94)"
                                                        Type: "')' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(93, 94), match=')'>"
                                                        Whitespace: None
                                                    IterBegin: "[6, 11] (92)"
                                                    IterEnd: "[6, 13] (94)"
                                                    Type: "Arguments <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                                    IsIgnored: False
                                                    IterBegin: "[6, 13] (94)"
                                                    IterEnd: "[7, 1] (95)"
                                                    Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                                                    Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                                                      End: 95
                                                      Start: 94
                                                    Whitespace: None
                                                Info: # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                                                  Arguments: None
                                                  Name: "Func1c"
                                                  Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                                                    Arguments: None
                                                    Name: "[Ln 6, Col 5] -> [Ln 6, Col 11]"
                                                    Self__: "[Ln 6, Col 5] -> [Ln 7, Col 1]"
                                                IterBegin: "[6, 5] (86)"
                                                IterEnd: "[7, 1] (95)"
                                                Type: "Func Invocation Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                                            IterBegin: "[6, 5] (86)"
                                            IterEnd: "[7, 1] (95)"
                                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                                        IterBegin: "[6, 5] (86)"
                                        IterEnd: "[7, 1] (95)"
                                        Type: "Statements <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                                    IterBegin: "[6, 5] (86)"
                                    IterEnd: "[7, 1] (95)"
                                    Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[7, 1] (95)"
                                    IterEnd: "[7, 1] (95)"
                                    Type: "Dedent <class 'TheLanguage.Parser.Components.Token.DedentToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.DedentToken.MatchResult'>
                                      {}
                                    Whitespace: None
                                IterBegin: "[5, 22] (81)"
                                IterEnd: "[7, 1] (95)"
                                Type: "Multi-line <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[5, 22] (81)"
                            IterEnd: "[7, 1] (95)"
                            Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        IterBegin: "[5, 21] (80)"
                        IterEnd: "[7, 1] (95)"
                        Type: "Statements <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[5, 1] (60)"
                    IterEnd: "[7, 1] (95)"
                    Type: "Except Var <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                IterBegin: "[3, 1] (18)"
                IterEnd: "[7, 1] (95)"
                Type: "Repeat: {Except Var, 0, None} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
            Info: # <class 'TheLanguage.Lexer.Statements.TryExceptStatementLexerInfo.TryExceptStatementLexerInfo'>
              DefaultStatements: None
              ExceptClauses:
                - # <class 'TheLanguage.Lexer.Statements.TryExceptStatementLexerInfo.TryExceptStatementClauseLexerInfo'>
                  Name: "exception"
                  Regions: # <class 'types.TryExceptStatementClauseLexerInfoRegions'>
                    Name: "[Ln 3, Col 19] -> [Ln 3, Col 28]"
                    Self__: "[Ln 3, Col 1] -> [Ln 5, Col 1]"
                    Statements: "[Ln 3, Col 28] -> [Ln 5, Col 1]"
                    Type: "[Ln 3, Col 8] -> [Ln 3, Col 18]"
                  Statements:
                    - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                      Arguments: None
                      Name: "Func1b"
                      Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                        Arguments: None
                        Name: "[Ln 4, Col 5] -> [Ln 4, Col 11]"
                        Self__: "[Ln 4, Col 5] -> [Ln 5, Col 1]"
                  Type: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                    Modifier: None
                    Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                      Modifier: None
                      Self__: "[Ln 3, Col 8] -> [Ln 3, Col 18]"
                      TypeName: "[Ln 3, Col 8] -> [Ln 3, Col 18]"
                    TypeName: "Exception1"
                - # <class 'TheLanguage.Lexer.Statements.TryExceptStatementLexerInfo.TryExceptStatementClauseLexerInfo'>
                  Name: "ex"
                  Regions: # <class 'types.TryExceptStatementClauseLexerInfoRegions'>
                    Name: "[Ln 5, Col 19] -> [Ln 5, Col 21]"
                    Self__: "[Ln 5, Col 1] -> [Ln 7, Col 1]"
                    Statements: "[Ln 5, Col 21] -> [Ln 7, Col 1]"
                    Type: "[Ln 5, Col 8] -> [Ln 5, Col 18]"
                  Statements:
                    - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                      Arguments: None
                      Name: "Func1c"
                      Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                        Arguments: None
                        Name: "[Ln 6, Col 5] -> [Ln 6, Col 11]"
                        Self__: "[Ln 6, Col 5] -> [Ln 7, Col 1]"
                  Type: # <class 'TheLanguage.Lexer.Types.StandardTypeLexerInfo.StandardTypeLexerInfo'>
                    Modifier: None
                    Regions: # <class 'types.StandardTypeLexerInfoRegions'>
                      Modifier: None
                      Self__: "[Ln 5, Col 8] -> [Ln 5, Col 18]"
                      TypeName: "[Ln 5, Col 8] -> [Ln 5, Col 18]"
                    TypeName: "Exception2"
              Regions: # <class 'types.TryExceptStatementLexerInfoRegions'>
                DefaultStatements: None
                ExceptClauses: "[Ln 3, Col 1] -> [Ln 7, Col 1]"
                Self__: "[Ln 1, Col 1] -> [Ln 7, Col 1]"
                TryStatements: "[Ln 1, Col 4] -> [Ln 3, Col 1]"
              TryStatements:
                - # <class 'TheLanguage.Lexer.Statements.FuncInvocationStatementLexerInfo.FuncInvocationStatementLexerInfo'>
                  Arguments: None
                  Name: "Func1a"
                  Regions: # <class 'types.FuncInvocationStatementLexerInfoRegions'>
                    Arguments: None
                    Name: "[Ln 2, Col 5] -> [Ln 2, Col 11]"
                    Self__: "[Ln 2, Col 5] -> [Ln 3, Col 1]"
            IterBegin: "[1, 1] (0)"
            IterEnd: "[7, 1] (95)"
            Type: "Try Except Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[7, 1] (95)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[7, 1] (95)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[7, 1] (95)"
Type: "<None>"
