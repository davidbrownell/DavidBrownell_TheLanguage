0) StartPhrase, "Phrases"
1) StartPhrase, "Lower", "Phrases"
2) OnInternalPhraseAsync, 0, 3
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 1] (0)"
      IterEnd: "[1, 4] (3)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
3) EndPhrase, "Lower" [True], "Phrases" [None]
4) StartPhrase, "Upper", "Phrases"
5) EndPhrase, "Upper" [False], "Phrases" [None]
6) OnInternalPhraseAsync, 0, 3
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[1, 4] (3)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
7) EndPhrase, "Phrases" [True]
8) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>"
9) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
10) OnInternalPhraseAsync, 4, 5
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 5] (4)"
      IterEnd: "[1, 6] (5)"
      Token: "'+'"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
      Whitespace:
        - 3
        - 4
    Phrase: "'+'"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
11) EndPhrase, "'+'" [True], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
12) StartPhrase, "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
13) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
14) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
15) OnInternalPhraseAsync, 6, 10
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 7] (6)"
      IterEnd: "[1, 11] (10)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
      Whitespace:
        - 5
        - 6
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
16) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
17) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
18) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
19) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
20) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
21) OnInternalPhraseAsync, 6, 10
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 7] (6)"
      IterEnd: "[1, 11] (10)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
      Whitespace:
        - 5
        - 6
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
22) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
23) OnInternalPhraseAsync, 5, 10
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 7] (6)"
        IterEnd: "[1, 11] (10)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
        Whitespace:
          - 5
          - 6
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
24) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
25) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
26) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
27) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
28) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
29) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
30) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
31) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
32) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
33) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
34) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
35) OnInternalPhraseAsync, 11, 13
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 12] (11)"
      IterEnd: "[1, 14] (13)"
      Token: "'if'"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
      Whitespace:
        - 10
        - 11
    Phrase: "'if'"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
36) EndPhrase, "'if'" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
37) StartPhrase, "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
38) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
39) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
40) EndPhrase, "Lower" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
41) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
42) OnInternalPhraseAsync, 14, 23
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 15] (14)"
      IterEnd: "[1, 24] (23)"
      Token: "Upper"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
      Whitespace:
        - 13
        - 14
    Phrase: "Upper"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Lower"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
43) EndPhrase, "Upper" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
44) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
45) StartPhrase, "Upper", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
46) OnInternalPhraseAsync, 14, 23
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 15] (14)"
      IterEnd: "[1, 24] (23)"
      Token: "Upper"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
      Whitespace:
        - 13
        - 14
    Phrase: "Upper"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Lower"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 24] (23)"
            Token: "Upper"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
            Whitespace:
              - 13
              - 14
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
47) EndPhrase, "Upper" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
48) OnInternalPhraseAsync, 13, 23
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 15] (14)"
        IterEnd: "[1, 24] (23)"
        Token: "Upper"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
        Whitespace:
          - 13
          - 14
      Phrase: "Upper"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 15] (14)"
            IterEnd: "[1, 24] (23)"
            Token: "Upper"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
            Whitespace:
              - 13
              - 14
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
49) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
50) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
51) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
52) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
53) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
54) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
55) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
56) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
57) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
58) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
59) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
60) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
61) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
62) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
63) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
64) OnInternalPhraseAsync, 13, 23
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 15] (14)"
        IterEnd: "[1, 24] (23)"
        Token: "Upper"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
        Whitespace:
          - 13
          - 14
      Phrase: "Upper"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
65) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
66) OnInternalPhraseAsync, 13, 23
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 15] (14)"
          IterEnd: "[1, 24] (23)"
          Token: "Upper"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
          Whitespace:
            - 13
            - 14
        Phrase: "Upper"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
67) EndPhrase, "DynamicPhrasesType.Statements" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
68) StartPhrase, "'else'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
69) OnInternalPhraseAsync, 24, 28
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 25] (24)"
      IterEnd: "[1, 29] (28)"
      Token: "'else'"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
      Whitespace:
        - 23
        - 24
    Phrase: "'else'"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
70) EndPhrase, "'else'" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
71) StartPhrase, "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
72) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
73) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
74) OnInternalPhraseAsync, 29, 34
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 30] (29)"
      IterEnd: "[1, 35] (34)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
      Whitespace:
        - 28
        - 29
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
75) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
76) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
77) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
78) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
79) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
80) OnInternalPhraseAsync, 29, 34
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 30] (29)"
      IterEnd: "[1, 35] (34)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
      Whitespace:
        - 28
        - 29
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
81) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
82) OnInternalPhraseAsync, 28, 34
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 30] (29)"
        IterEnd: "[1, 35] (34)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
        Whitespace:
          - 28
          - 29
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
83) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
84) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
85) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
86) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
87) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
88) OnInternalPhraseAsync, 35, 36
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 36] (35)"
      IterEnd: "[1, 37] (36)"
      Token: "'-'"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
      Whitespace:
        - 34
        - 35
    Phrase: "'-'"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
89) EndPhrase, "'-'" [True], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
90) StartPhrase, "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
91) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
92) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
93) OnInternalPhraseAsync, 37, 42
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 38] (37)"
      IterEnd: "[1, 43] (42)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
      Whitespace:
        - 36
        - 37
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
94) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
95) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
96) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
97) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
98) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
99) OnInternalPhraseAsync, 37, 42
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 38] (37)"
      IterEnd: "[1, 43] (42)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
      Whitespace:
        - 36
        - 37
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
100) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
101) OnInternalPhraseAsync, 36, 42
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 38] (37)"
        IterEnd: "[1, 43] (42)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
        Whitespace:
          - 36
          - 37
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
102) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
103) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
104) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
105) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
106) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
107) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
108) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
109) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
110) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
111) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
112) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
113) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
114) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
115) OnInternalPhraseAsync, 42, 43
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 43] (42)"
      IterEnd: "[1, 44] (43)"
      Token: "'['"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
      Whitespace: None
    Phrase: "'['"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
116) EndPhrase, "'['" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
117) StartPhrase, "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
118) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
119) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
120) OnInternalPhraseAsync, 43, 44
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 44] (43)"
      IterEnd: "[1, 45] (44)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 43] (42)"
            IterEnd: "[1, 44] (43)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
121) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
122) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
123) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
124) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
125) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
126) OnInternalPhraseAsync, 43, 44
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 44] (43)"
      IterEnd: "[1, 45] (44)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 44] (43)"
            IterEnd: "[1, 45] (44)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 43] (42)"
            IterEnd: "[1, 44] (43)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
127) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
128) OnInternalPhraseAsync, 43, 44
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 44] (43)"
        IterEnd: "[1, 45] (44)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 44] (43)"
            IterEnd: "[1, 45] (44)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 43] (42)"
            IterEnd: "[1, 44] (43)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
129) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
130) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
131) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
132) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
133) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
134) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
135) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
136) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
137) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
138) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
139) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
140) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
141) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
142) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
143) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
144) OnInternalPhraseAsync, 43, 44
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 44] (43)"
        IterEnd: "[1, 45] (44)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 43] (42)"
            IterEnd: "[1, 44] (43)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
145) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
146) OnInternalPhraseAsync, 43, 44
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 44] (43)"
          IterEnd: "[1, 45] (44)"
          Token: "Lower"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 43] (42)"
            IterEnd: "[1, 44] (43)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
147) EndPhrase, "DynamicPhrasesType.Statements" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
148) StartPhrase, "']'", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
149) OnInternalPhraseAsync, 44, 45
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 45] (44)"
      IterEnd: "[1, 46] (45)"
      Token: "']'"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
      Whitespace: None
    Phrase: "']'"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 43] (42)"
            IterEnd: "[1, 44] (43)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
            Whitespace: None
          Phrase: "'['"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 44] (43)"
                IterEnd: "[1, 45] (44)"
                Token: "Lower"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                Whitespace: None
              Phrase: "Lower"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
150) EndPhrase, "']'" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
151) OnInternalPhraseAsync, 42, 45
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 38] (37)"
                  IterEnd: "[1, 43] (42)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                  Whitespace:
                    - 36
                    - 37
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 43] (42)"
              IterEnd: "[1, 44] (43)"
              Token: "'['"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 44] (43)"
                  IterEnd: "[1, 45] (44)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 45] (44)"
              IterEnd: "[1, 46] (45)"
              Token: "']'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
152) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
153) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
154) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
155) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
156) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
157) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
158) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
159) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
160) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
161) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
162) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
163) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
164) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
165) OnInternalPhraseAsync, 45, 46
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 46] (45)"
      IterEnd: "[1, 47] (46)"
      Token: "'['"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
      Whitespace: None
    Phrase: "'['"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
166) EndPhrase, "'['" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
167) StartPhrase, "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
168) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
169) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
170) OnInternalPhraseAsync, 46, 47
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 47] (46)"
      IterEnd: "[1, 48] (47)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 46] (45)"
            IterEnd: "[1, 47] (46)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
171) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
172) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
173) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
174) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
175) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
176) OnInternalPhraseAsync, 46, 47
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 47] (46)"
      IterEnd: "[1, 48] (47)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 47] (46)"
            IterEnd: "[1, 48] (47)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 46] (45)"
            IterEnd: "[1, 47] (46)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
177) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
178) OnInternalPhraseAsync, 46, 47
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 47] (46)"
        IterEnd: "[1, 48] (47)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 47] (46)"
            IterEnd: "[1, 48] (47)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 46] (45)"
            IterEnd: "[1, 47] (46)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
179) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
180) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
181) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
182) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
183) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
184) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
185) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
186) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
187) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
188) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
189) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
190) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
191) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
192) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
193) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
194) OnInternalPhraseAsync, 46, 47
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 47] (46)"
        IterEnd: "[1, 48] (47)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 46] (45)"
            IterEnd: "[1, 47] (46)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
195) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
196) OnInternalPhraseAsync, 46, 47
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 47] (46)"
          IterEnd: "[1, 48] (47)"
          Token: "Lower"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 46] (45)"
            IterEnd: "[1, 47] (46)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
197) EndPhrase, "DynamicPhrasesType.Statements" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
198) StartPhrase, "']'", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
199) OnInternalPhraseAsync, 47, 48
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 48] (47)"
      IterEnd: "[1, 49] (48)"
      Token: "']'"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
      Whitespace: None
    Phrase: "']'"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 46] (45)"
            IterEnd: "[1, 47] (46)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
            Whitespace: None
          Phrase: "'['"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 47] (46)"
                IterEnd: "[1, 48] (47)"
                Token: "Lower"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                Whitespace: None
              Phrase: "Lower"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
200) EndPhrase, "']'" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
201) OnInternalPhraseAsync, 45, 48
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
              DataItems:
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 38] (37)"
                        IterEnd: "[1, 43] (42)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                        Whitespace:
                          - 36
                          - 37
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 43] (42)"
                    IterEnd: "[1, 44] (43)"
                    Token: "'['"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                    Whitespace: None
                  Phrase: "'['"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 44] (43)"
                        IterEnd: "[1, 45] (44)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                        Whitespace: None
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 45] (44)"
                    IterEnd: "[1, 46] (45)"
                    Token: "']'"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                    Whitespace: None
                  Phrase: "']'"
              IsComplete: True
            Phrase: "Index"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 46] (45)"
              IterEnd: "[1, 47] (46)"
              Token: "'['"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 47] (46)"
                  IterEnd: "[1, 48] (47)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 48] (47)"
              IterEnd: "[1, 49] (48)"
              Token: "']'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
202) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
203) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
204) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
205) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
206) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
207) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
208) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
209) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
210) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
211) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
212) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
213) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
214) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
215) OnInternalPhraseAsync, 48, 49
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 49] (48)"
      IterEnd: "[1, 50] (49)"
      Token: "'['"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
      Whitespace: None
    Phrase: "'['"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
216) EndPhrase, "'['" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
217) StartPhrase, "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
218) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
219) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
220) OnInternalPhraseAsync, 49, 50
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 50] (49)"
      IterEnd: "[1, 51] (50)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 49] (48)"
            IterEnd: "[1, 50] (49)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
221) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
222) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
223) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
224) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
225) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
226) OnInternalPhraseAsync, 49, 50
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 50] (49)"
      IterEnd: "[1, 51] (50)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 50] (49)"
            IterEnd: "[1, 51] (50)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 49] (48)"
            IterEnd: "[1, 50] (49)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
227) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
228) OnInternalPhraseAsync, 49, 50
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 50] (49)"
        IterEnd: "[1, 51] (50)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 50] (49)"
            IterEnd: "[1, 51] (50)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 49] (48)"
            IterEnd: "[1, 50] (49)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
229) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
230) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
231) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
232) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
233) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
234) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
235) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
236) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
237) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
238) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
239) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
240) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
241) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
242) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
243) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
244) OnInternalPhraseAsync, 49, 50
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 50] (49)"
        IterEnd: "[1, 51] (50)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 49] (48)"
            IterEnd: "[1, 50] (49)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
245) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
246) OnInternalPhraseAsync, 49, 50
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 50] (49)"
          IterEnd: "[1, 51] (50)"
          Token: "Lower"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 49] (48)"
            IterEnd: "[1, 50] (49)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
247) EndPhrase, "DynamicPhrasesType.Statements" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
248) StartPhrase, "']'", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
249) OnInternalPhraseAsync, 50, 51
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 51] (50)"
      IterEnd: "[1, 52] (51)"
      Token: "']'"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
      Whitespace: None
    Phrase: "']'"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 49] (48)"
            IterEnd: "[1, 50] (49)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
            Whitespace: None
          Phrase: "'['"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 50] (49)"
                IterEnd: "[1, 51] (50)"
                Token: "Lower"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                Whitespace: None
              Phrase: "Lower"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
250) EndPhrase, "']'" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
251) OnInternalPhraseAsync, 48, 51
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
              DataItems:
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 38] (37)"
                              IterEnd: "[1, 43] (42)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                              Whitespace:
                                - 36
                                - 37
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 43] (42)"
                          IterEnd: "[1, 44] (43)"
                          Token: "'['"
                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                          Whitespace: None
                        Phrase: "'['"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 44] (43)"
                              IterEnd: "[1, 45] (44)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                              Whitespace: None
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 45] (44)"
                          IterEnd: "[1, 46] (45)"
                          Token: "']'"
                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                          Whitespace: None
                        Phrase: "']'"
                    IsComplete: True
                  Phrase: "Index"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 46] (45)"
                    IterEnd: "[1, 47] (46)"
                    Token: "'['"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                    Whitespace: None
                  Phrase: "'['"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 47] (46)"
                        IterEnd: "[1, 48] (47)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                        Whitespace: None
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 48] (47)"
                    IterEnd: "[1, 49] (48)"
                    Token: "']'"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                    Whitespace: None
                  Phrase: "']'"
              IsComplete: True
            Phrase: "Index"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 49] (48)"
              IterEnd: "[1, 50] (49)"
              Token: "'['"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 50] (49)"
                  IterEnd: "[1, 51] (50)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 51] (50)"
              IterEnd: "[1, 52] (51)"
              Token: "']'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
252) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
253) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
254) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
255) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
256) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
257) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
258) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
259) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
260) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
261) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
262) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
263) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
264) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
265) OnInternalPhraseAsync, 51, 52
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 52] (51)"
      IterEnd: "[1, 53] (52)"
      Token: "'['"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
      Whitespace: None
    Phrase: "'['"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
266) EndPhrase, "'['" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
267) StartPhrase, "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
268) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
269) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
270) OnInternalPhraseAsync, 52, 53
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 53] (52)"
      IterEnd: "[1, 54] (53)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 52] (51)"
            IterEnd: "[1, 53] (52)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
271) EndPhrase, "Lower" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
272) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
273) EndPhrase, "Upper" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
274) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
275) StartPhrase, "Lower", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
276) OnInternalPhraseAsync, 52, 53
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 53] (52)"
      IterEnd: "[1, 54] (53)"
      Token: "Lower"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
      Whitespace: None
    Phrase: "Lower"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 53] (52)"
            IterEnd: "[1, 54] (53)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 52] (51)"
            IterEnd: "[1, 53] (52)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
277) EndPhrase, "Lower" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
278) OnInternalPhraseAsync, 52, 53
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 53] (52)"
        IterEnd: "[1, 54] (53)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 53] (52)"
            IterEnd: "[1, 54] (53)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
            Whitespace: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 52] (51)"
            IterEnd: "[1, 53] (52)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
279) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
280) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
281) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
282) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
283) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
284) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
285) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
286) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
287) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
288) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
289) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
290) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
291) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
292) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
293) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
294) OnInternalPhraseAsync, 52, 53
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 53] (52)"
        IterEnd: "[1, 54] (53)"
        Token: "Lower"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
        Whitespace: None
      Phrase: "Lower"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 52] (51)"
            IterEnd: "[1, 53] (52)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
295) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
296) OnInternalPhraseAsync, 52, 53
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 53] (52)"
          IterEnd: "[1, 54] (53)"
          Token: "Lower"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
          Whitespace: None
        Phrase: "Lower"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 52] (51)"
            IterEnd: "[1, 53] (52)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
            Whitespace: None
          Phrase: "'['"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
297) EndPhrase, "DynamicPhrasesType.Statements" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
298) StartPhrase, "']'", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
299) OnInternalPhraseAsync, 53, 54
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 54] (53)"
      IterEnd: "[1, 55] (54)"
      Token: "']'"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
      Whitespace: None
    Phrase: "']'"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 52] (51)"
            IterEnd: "[1, 53] (52)"
            Token: "'['"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
            Whitespace: None
          Phrase: "'['"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 53] (52)"
                IterEnd: "[1, 54] (53)"
                Token: "Lower"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                Whitespace: None
              Phrase: "Lower"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
      IsComplete: False
    Phrase: "Index"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'if'"
            IsComplete: True
          Phrase: "Ter"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
300) EndPhrase, "']'" [True], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
301) OnInternalPhraseAsync, 51, 54
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
              DataItems:
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 38] (37)"
                                    IterEnd: "[1, 43] (42)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                    Whitespace:
                                      - 36
                                      - 37
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 43] (42)"
                                IterEnd: "[1, 44] (43)"
                                Token: "'['"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                Whitespace: None
                              Phrase: "'['"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 44] (43)"
                                    IterEnd: "[1, 45] (44)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 45] (44)"
                                IterEnd: "[1, 46] (45)"
                                Token: "']'"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                Whitespace: None
                              Phrase: "']'"
                          IsComplete: True
                        Phrase: "Index"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 46] (45)"
                          IterEnd: "[1, 47] (46)"
                          Token: "'['"
                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                          Whitespace: None
                        Phrase: "'['"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 47] (46)"
                              IterEnd: "[1, 48] (47)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                              Whitespace: None
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 48] (47)"
                          IterEnd: "[1, 49] (48)"
                          Token: "']'"
                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                          Whitespace: None
                        Phrase: "']'"
                    IsComplete: True
                  Phrase: "Index"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 49] (48)"
                    IterEnd: "[1, 50] (49)"
                    Token: "'['"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                    Whitespace: None
                  Phrase: "'['"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 50] (49)"
                        IterEnd: "[1, 51] (50)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                        Whitespace: None
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 51] (50)"
                    IterEnd: "[1, 52] (51)"
                    Token: "']'"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                    Whitespace: None
                  Phrase: "']'"
              IsComplete: True
            Phrase: "Index"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 52] (51)"
              IterEnd: "[1, 53] (52)"
              Token: "'['"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
              Whitespace: None
            Phrase: "'['"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 53] (52)"
                  IterEnd: "[1, 54] (53)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 54] (53)"
              IterEnd: "[1, 55] (54)"
              Token: "']'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
              Whitespace: None
            Phrase: "']'"
        IsComplete: True
      Phrase: "Index"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
302) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
303) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
304) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
305) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
306) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
307) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
308) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
309) OnInternalPhraseAsync, 55, 56
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 56] (55)"
      IterEnd: "[1, 57] (56)"
      Token: "'*'"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
      Whitespace:
        - 54
        - 55
    Phrase: "'*'"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "Mul"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
310) EndPhrase, "'*'" [True], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
311) StartPhrase, "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
312) StartPhrase, "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
313) StartPhrase, "Lower", "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
314) EndPhrase, "Lower" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
315) StartPhrase, "Upper", "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
316) OnInternalPhraseAsync, 57, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 58] (57)"
      IterEnd: "[1, 62] (61)"
      Token: "Upper"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
      Whitespace:
        - 56
        - 57
    Phrase: "Upper"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Lower"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 56] (55)"
            IterEnd: "[1, 57] (56)"
            Token: "'*'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
            Whitespace:
              - 54
              - 55
          Phrase: "'*'"
      IsComplete: False
    Phrase: "Mul"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
317) EndPhrase, "Upper" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
318) StartPhrase, "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
319) StartPhrase, "Upper", "Phrases", "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
320) OnInternalPhraseAsync, 57, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 58] (57)"
      IterEnd: "[1, 62] (61)"
      Token: "Upper"
      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
      Whitespace:
        - 56
        - 57
    Phrase: "Upper"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Lower"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 58] (57)"
            IterEnd: "[1, 62] (61)"
            Token: "Upper"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
            Whitespace:
              - 56
              - 57
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 56] (55)"
            IterEnd: "[1, 57] (56)"
            Token: "'*'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
            Whitespace:
              - 54
              - 55
          Phrase: "'*'"
      IsComplete: False
    Phrase: "Mul"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
321) EndPhrase, "Upper" [True], "Phrases" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
322) OnInternalPhraseAsync, 56, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 58] (57)"
        IterEnd: "[1, 62] (61)"
        Token: "Upper"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
        Whitespace:
          - 56
          - 57
      Phrase: "Upper"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 58] (57)"
            IterEnd: "[1, 62] (61)"
            Token: "Upper"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
            Whitespace:
              - 56
              - 57
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 56] (55)"
            IterEnd: "[1, 57] (56)"
            Token: "'*'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
            Whitespace:
              - 54
              - 55
          Phrase: "'*'"
      IsComplete: False
    Phrase: "Mul"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
323) EndPhrase, "Phrases" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
324) StartPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
325) StartPhrase, "'+'", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
326) EndPhrase, "'+'" [False], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
327) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
328) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
329) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
330) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
331) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
332) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
333) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
334) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
335) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
336) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
337) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [False], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
338) OnInternalPhraseAsync, 56, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
        IsIgnored: False
        IterBegin: "[1, 58] (57)"
        IterEnd: "[1, 62] (61)"
        Token: "Upper"
        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
          Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
        Whitespace:
          - 56
          - 57
      Phrase: "Upper"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 56] (55)"
            IterEnd: "[1, 57] (56)"
            Token: "'*'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
            Whitespace:
              - 54
              - 55
          Phrase: "'*'"
      IsComplete: False
    Phrase: "Mul"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
339) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
340) OnInternalPhraseAsync, 56, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: False
          IterBegin: "[1, 58] (57)"
          IterEnd: "[1, 62] (61)"
          Token: "Upper"
          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
          Whitespace:
            - 56
            - 57
        Phrase: "Upper"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 56] (55)"
            IterEnd: "[1, 57] (56)"
            Token: "'*'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
            Whitespace:
              - 54
              - 55
          Phrase: "'*'"
      IsComplete: False
    Phrase: "Mul"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
341) EndPhrase, "DynamicPhrasesType.Statements" [True], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
342) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
343) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
344) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
345) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
346) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
347) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
348) OnInternalPhraseAsync, 54, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
              DataItems:
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                DataItems:
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 38] (37)"
                                          IterEnd: "[1, 43] (42)"
                                          Token: "Lower"
                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                          Whitespace:
                                            - 36
                                            - 37
                                        Phrase: "Lower"
                                      Phrase: "Phrases"
                                    Phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 43] (42)"
                                      IterEnd: "[1, 44] (43)"
                                      Token: "'['"
                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                      Whitespace: None
                                    Phrase: "'['"
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 44] (43)"
                                          IterEnd: "[1, 45] (44)"
                                          Token: "Lower"
                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                          Whitespace: None
                                        Phrase: "Lower"
                                      Phrase: "Phrases"
                                    Phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 45] (44)"
                                      IterEnd: "[1, 46] (45)"
                                      Token: "']'"
                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                      Whitespace: None
                                    Phrase: "']'"
                                IsComplete: True
                              Phrase: "Index"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 46] (45)"
                                IterEnd: "[1, 47] (46)"
                                Token: "'['"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                Whitespace: None
                              Phrase: "'['"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 47] (46)"
                                    IterEnd: "[1, 48] (47)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 48] (47)"
                                IterEnd: "[1, 49] (48)"
                                Token: "']'"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                Whitespace: None
                              Phrase: "']'"
                          IsComplete: True
                        Phrase: "Index"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 49] (48)"
                          IterEnd: "[1, 50] (49)"
                          Token: "'['"
                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                          Whitespace: None
                        Phrase: "'['"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 50] (49)"
                              IterEnd: "[1, 51] (50)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                              Whitespace: None
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 51] (50)"
                          IterEnd: "[1, 52] (51)"
                          Token: "']'"
                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                          Whitespace: None
                        Phrase: "']'"
                    IsComplete: True
                  Phrase: "Index"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 52] (51)"
                    IterEnd: "[1, 53] (52)"
                    Token: "'['"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                    Whitespace: None
                  Phrase: "'['"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 53] (52)"
                        IterEnd: "[1, 54] (53)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                        Whitespace: None
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 54] (53)"
                    IterEnd: "[1, 55] (54)"
                    Token: "']'"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                    Whitespace: None
                  Phrase: "']'"
              IsComplete: True
            Phrase: "Index"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 56] (55)"
              IterEnd: "[1, 57] (56)"
              Token: "'*'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
              Whitespace:
                - 54
                - 55
            Phrase: "'*'"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 58] (57)"
                  IterEnd: "[1, 62] (61)"
                  Token: "Upper"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                  Whitespace:
                    - 56
                    - 57
                Phrase: "Upper"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Mul"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 38] (37)"
            IterEnd: "[1, 43] (42)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
            Whitespace:
              - 36
              - 37
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
349) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
350) OnInternalPhraseAsync, 36, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
              DataItems:
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                DataItems:
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 38] (37)"
                                          IterEnd: "[1, 43] (42)"
                                          Token: "Lower"
                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                          Whitespace:
                                            - 36
                                            - 37
                                        Phrase: "Lower"
                                      Phrase: "Phrases"
                                    Phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 43] (42)"
                                      IterEnd: "[1, 44] (43)"
                                      Token: "'['"
                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                      Whitespace: None
                                    Phrase: "'['"
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 44] (43)"
                                          IterEnd: "[1, 45] (44)"
                                          Token: "Lower"
                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                          Whitespace: None
                                        Phrase: "Lower"
                                      Phrase: "Phrases"
                                    Phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 45] (44)"
                                      IterEnd: "[1, 46] (45)"
                                      Token: "']'"
                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                      Whitespace: None
                                    Phrase: "']'"
                                IsComplete: True
                              Phrase: "Index"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 46] (45)"
                                IterEnd: "[1, 47] (46)"
                                Token: "'['"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                Whitespace: None
                              Phrase: "'['"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 47] (46)"
                                    IterEnd: "[1, 48] (47)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 48] (47)"
                                IterEnd: "[1, 49] (48)"
                                Token: "']'"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                Whitespace: None
                              Phrase: "']'"
                          IsComplete: True
                        Phrase: "Index"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 49] (48)"
                          IterEnd: "[1, 50] (49)"
                          Token: "'['"
                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                          Whitespace: None
                        Phrase: "'['"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 50] (49)"
                              IterEnd: "[1, 51] (50)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                              Whitespace: None
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 51] (50)"
                          IterEnd: "[1, 52] (51)"
                          Token: "']'"
                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                          Whitespace: None
                        Phrase: "']'"
                    IsComplete: True
                  Phrase: "Index"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 52] (51)"
                    IterEnd: "[1, 53] (52)"
                    Token: "'['"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                    Whitespace: None
                  Phrase: "'['"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 53] (52)"
                        IterEnd: "[1, 54] (53)"
                        Token: "Lower"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                        Whitespace: None
                      Phrase: "Lower"
                    Phrase: "Phrases"
                  Phrase: "DynamicPhrasesType.Statements"
                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 54] (53)"
                    IterEnd: "[1, 55] (54)"
                    Token: "']'"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                    Whitespace: None
                  Phrase: "']'"
              IsComplete: True
            Phrase: "Index"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 56] (55)"
              IterEnd: "[1, 57] (56)"
              Token: "'*'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
              Whitespace:
                - 54
                - 55
            Phrase: "'*'"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 58] (57)"
                  IterEnd: "[1, 62] (61)"
                  Token: "Upper"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                  Whitespace:
                    - 56
                    - 57
                Phrase: "Upper"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Mul"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
351) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
352) OnInternalPhraseAsync, 36, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
          DataItems:
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                DataItems:
                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                      DataItems:
                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                            DataItems:
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                  DataItems:
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 38] (37)"
                                            IterEnd: "[1, 43] (42)"
                                            Token: "Lower"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                            Whitespace:
                                              - 36
                                              - 37
                                          Phrase: "Lower"
                                        Phrase: "Phrases"
                                      Phrase: "DynamicPhrasesType.Statements"
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 43] (42)"
                                        IterEnd: "[1, 44] (43)"
                                        Token: "'['"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                        Whitespace: None
                                      Phrase: "'['"
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 44] (43)"
                                            IterEnd: "[1, 45] (44)"
                                            Token: "Lower"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                            Whitespace: None
                                          Phrase: "Lower"
                                        Phrase: "Phrases"
                                      Phrase: "DynamicPhrasesType.Statements"
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 45] (44)"
                                        IterEnd: "[1, 46] (45)"
                                        Token: "']'"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                        Whitespace: None
                                      Phrase: "']'"
                                  IsComplete: True
                                Phrase: "Index"
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 46] (45)"
                                  IterEnd: "[1, 47] (46)"
                                  Token: "'['"
                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                  Whitespace: None
                                Phrase: "'['"
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 47] (46)"
                                      IterEnd: "[1, 48] (47)"
                                      Token: "Lower"
                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                      Whitespace: None
                                    Phrase: "Lower"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 48] (47)"
                                  IterEnd: "[1, 49] (48)"
                                  Token: "']'"
                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                  Whitespace: None
                                Phrase: "']'"
                            IsComplete: True
                          Phrase: "Index"
                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 49] (48)"
                            IterEnd: "[1, 50] (49)"
                            Token: "'['"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                            Whitespace: None
                          Phrase: "'['"
                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 50] (49)"
                                IterEnd: "[1, 51] (50)"
                                Token: "Lower"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                Whitespace: None
                              Phrase: "Lower"
                            Phrase: "Phrases"
                          Phrase: "DynamicPhrasesType.Statements"
                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 51] (50)"
                            IterEnd: "[1, 52] (51)"
                            Token: "']'"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                            Whitespace: None
                          Phrase: "']'"
                      IsComplete: True
                    Phrase: "Index"
                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 52] (51)"
                      IterEnd: "[1, 53] (52)"
                      Token: "'['"
                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                      Whitespace: None
                    Phrase: "'['"
                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 53] (52)"
                          IterEnd: "[1, 54] (53)"
                          Token: "Lower"
                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                          Whitespace: None
                        Phrase: "Lower"
                      Phrase: "Phrases"
                    Phrase: "DynamicPhrasesType.Statements"
                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 54] (53)"
                      IterEnd: "[1, 55] (54)"
                      Token: "']'"
                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                      Whitespace: None
                    Phrase: "']'"
                IsComplete: True
              Phrase: "Index"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 56] (55)"
                IterEnd: "[1, 57] (56)"
                Token: "'*'"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                Whitespace:
                  - 54
                  - 55
              Phrase: "'*'"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 58] (57)"
                    IterEnd: "[1, 62] (61)"
                    Token: "Upper"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                    Whitespace:
                      - 56
                      - 57
                  Phrase: "Upper"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Mul"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 36] (35)"
            IterEnd: "[1, 37] (36)"
            Token: "'-'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
            Whitespace:
              - 34
              - 35
          Phrase: "'-'"
      IsComplete: False
    Phrase: "Sub"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
353) EndPhrase, "DynamicPhrasesType.Statements" [True], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
354) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
355) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
356) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
357) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
358) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
359) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
360) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
361) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
362) OnInternalPhraseAsync, 34, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 30] (29)"
                  IterEnd: "[1, 35] (34)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                  Whitespace:
                    - 28
                    - 29
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 36] (35)"
              IterEnd: "[1, 37] (36)"
              Token: "'-'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
              Whitespace:
                - 34
                - 35
            Phrase: "'-'"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                        DataItems:
                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                              DataItems:
                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                    DataItems:
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                          DataItems:
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 38] (37)"
                                                    IterEnd: "[1, 43] (42)"
                                                    Token: "Lower"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                    Whitespace:
                                                      - 36
                                                      - 37
                                                  Phrase: "Lower"
                                                Phrase: "Phrases"
                                              Phrase: "DynamicPhrasesType.Statements"
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 43] (42)"
                                                IterEnd: "[1, 44] (43)"
                                                Token: "'['"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                Whitespace: None
                                              Phrase: "'['"
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 44] (43)"
                                                    IterEnd: "[1, 45] (44)"
                                                    Token: "Lower"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                    Whitespace: None
                                                  Phrase: "Lower"
                                                Phrase: "Phrases"
                                              Phrase: "DynamicPhrasesType.Statements"
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 45] (44)"
                                                IterEnd: "[1, 46] (45)"
                                                Token: "']'"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                Whitespace: None
                                              Phrase: "']'"
                                          IsComplete: True
                                        Phrase: "Index"
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 46] (45)"
                                          IterEnd: "[1, 47] (46)"
                                          Token: "'['"
                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                          Whitespace: None
                                        Phrase: "'['"
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 47] (46)"
                                              IterEnd: "[1, 48] (47)"
                                              Token: "Lower"
                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                              Whitespace: None
                                            Phrase: "Lower"
                                          Phrase: "Phrases"
                                        Phrase: "DynamicPhrasesType.Statements"
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 48] (47)"
                                          IterEnd: "[1, 49] (48)"
                                          Token: "']'"
                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                          Whitespace: None
                                        Phrase: "']'"
                                    IsComplete: True
                                  Phrase: "Index"
                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 49] (48)"
                                    IterEnd: "[1, 50] (49)"
                                    Token: "'['"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                    Whitespace: None
                                  Phrase: "'['"
                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 50] (49)"
                                        IterEnd: "[1, 51] (50)"
                                        Token: "Lower"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                        Whitespace: None
                                      Phrase: "Lower"
                                    Phrase: "Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 51] (50)"
                                    IterEnd: "[1, 52] (51)"
                                    Token: "']'"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                    Whitespace: None
                                  Phrase: "']'"
                              IsComplete: True
                            Phrase: "Index"
                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 52] (51)"
                              IterEnd: "[1, 53] (52)"
                              Token: "'['"
                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                              Whitespace: None
                            Phrase: "'['"
                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 53] (52)"
                                  IterEnd: "[1, 54] (53)"
                                  Token: "Lower"
                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                  Whitespace: None
                                Phrase: "Lower"
                              Phrase: "Phrases"
                            Phrase: "DynamicPhrasesType.Statements"
                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 54] (53)"
                              IterEnd: "[1, 55] (54)"
                              Token: "']'"
                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                              Whitespace: None
                            Phrase: "']'"
                        IsComplete: True
                      Phrase: "Index"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 56] (55)"
                        IterEnd: "[1, 57] (56)"
                        Token: "'*'"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                        Whitespace:
                          - 54
                          - 55
                      Phrase: "'*'"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 58] (57)"
                            IterEnd: "[1, 62] (61)"
                            Token: "Upper"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                            Whitespace:
                              - 56
                              - 57
                          Phrase: "Upper"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Mul"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Sub"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 30] (29)"
            IterEnd: "[1, 35] (34)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
            Whitespace:
              - 28
              - 29
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
363) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
364) OnInternalPhraseAsync, 28, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 30] (29)"
                  IterEnd: "[1, 35] (34)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                  Whitespace:
                    - 28
                    - 29
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 36] (35)"
              IterEnd: "[1, 37] (36)"
              Token: "'-'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
              Whitespace:
                - 34
                - 35
            Phrase: "'-'"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                        DataItems:
                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                              DataItems:
                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                    DataItems:
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                          DataItems:
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 38] (37)"
                                                    IterEnd: "[1, 43] (42)"
                                                    Token: "Lower"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                    Whitespace:
                                                      - 36
                                                      - 37
                                                  Phrase: "Lower"
                                                Phrase: "Phrases"
                                              Phrase: "DynamicPhrasesType.Statements"
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 43] (42)"
                                                IterEnd: "[1, 44] (43)"
                                                Token: "'['"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                Whitespace: None
                                              Phrase: "'['"
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 44] (43)"
                                                    IterEnd: "[1, 45] (44)"
                                                    Token: "Lower"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                    Whitespace: None
                                                  Phrase: "Lower"
                                                Phrase: "Phrases"
                                              Phrase: "DynamicPhrasesType.Statements"
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 45] (44)"
                                                IterEnd: "[1, 46] (45)"
                                                Token: "']'"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                Whitespace: None
                                              Phrase: "']'"
                                          IsComplete: True
                                        Phrase: "Index"
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 46] (45)"
                                          IterEnd: "[1, 47] (46)"
                                          Token: "'['"
                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                          Whitespace: None
                                        Phrase: "'['"
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 47] (46)"
                                              IterEnd: "[1, 48] (47)"
                                              Token: "Lower"
                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                              Whitespace: None
                                            Phrase: "Lower"
                                          Phrase: "Phrases"
                                        Phrase: "DynamicPhrasesType.Statements"
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 48] (47)"
                                          IterEnd: "[1, 49] (48)"
                                          Token: "']'"
                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                          Whitespace: None
                                        Phrase: "']'"
                                    IsComplete: True
                                  Phrase: "Index"
                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 49] (48)"
                                    IterEnd: "[1, 50] (49)"
                                    Token: "'['"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                    Whitespace: None
                                  Phrase: "'['"
                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 50] (49)"
                                        IterEnd: "[1, 51] (50)"
                                        Token: "Lower"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                        Whitespace: None
                                      Phrase: "Lower"
                                    Phrase: "Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 51] (50)"
                                    IterEnd: "[1, 52] (51)"
                                    Token: "']'"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                    Whitespace: None
                                  Phrase: "']'"
                              IsComplete: True
                            Phrase: "Index"
                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 52] (51)"
                              IterEnd: "[1, 53] (52)"
                              Token: "'['"
                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                              Whitespace: None
                            Phrase: "'['"
                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 53] (52)"
                                  IterEnd: "[1, 54] (53)"
                                  Token: "Lower"
                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                  Whitespace: None
                                Phrase: "Lower"
                              Phrase: "Phrases"
                            Phrase: "DynamicPhrasesType.Statements"
                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 54] (53)"
                              IterEnd: "[1, 55] (54)"
                              Token: "']'"
                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                              Whitespace: None
                            Phrase: "']'"
                        IsComplete: True
                      Phrase: "Index"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 56] (55)"
                        IterEnd: "[1, 57] (56)"
                        Token: "'*'"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                        Whitespace:
                          - 54
                          - 55
                      Phrase: "'*'"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 58] (57)"
                            IterEnd: "[1, 62] (61)"
                            Token: "Upper"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                            Whitespace:
                              - 56
                              - 57
                          Phrase: "Upper"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Mul"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Sub"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
365) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
366) OnInternalPhraseAsync, 28, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
          DataItems:
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 30] (29)"
                    IterEnd: "[1, 35] (34)"
                    Token: "Lower"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                    Whitespace:
                      - 28
                      - 29
                  Phrase: "Lower"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 36] (35)"
                IterEnd: "[1, 37] (36)"
                Token: "'-'"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                Whitespace:
                  - 34
                  - 35
              Phrase: "'-'"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                          DataItems:
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                DataItems:
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                      DataItems:
                                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                            DataItems:
                                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 38] (37)"
                                                      IterEnd: "[1, 43] (42)"
                                                      Token: "Lower"
                                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                      Whitespace:
                                                        - 36
                                                        - 37
                                                    Phrase: "Lower"
                                                  Phrase: "Phrases"
                                                Phrase: "DynamicPhrasesType.Statements"
                                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 43] (42)"
                                                  IterEnd: "[1, 44] (43)"
                                                  Token: "'['"
                                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                  Whitespace: None
                                                Phrase: "'['"
                                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 44] (43)"
                                                      IterEnd: "[1, 45] (44)"
                                                      Token: "Lower"
                                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                      Whitespace: None
                                                    Phrase: "Lower"
                                                  Phrase: "Phrases"
                                                Phrase: "DynamicPhrasesType.Statements"
                                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 45] (44)"
                                                  IterEnd: "[1, 46] (45)"
                                                  Token: "']'"
                                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                  Whitespace: None
                                                Phrase: "']'"
                                            IsComplete: True
                                          Phrase: "Index"
                                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 46] (45)"
                                            IterEnd: "[1, 47] (46)"
                                            Token: "'['"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                            Whitespace: None
                                          Phrase: "'['"
                                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 47] (46)"
                                                IterEnd: "[1, 48] (47)"
                                                Token: "Lower"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                Whitespace: None
                                              Phrase: "Lower"
                                            Phrase: "Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 48] (47)"
                                            IterEnd: "[1, 49] (48)"
                                            Token: "']'"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                            Whitespace: None
                                          Phrase: "']'"
                                      IsComplete: True
                                    Phrase: "Index"
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 49] (48)"
                                      IterEnd: "[1, 50] (49)"
                                      Token: "'['"
                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                      Whitespace: None
                                    Phrase: "'['"
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 50] (49)"
                                          IterEnd: "[1, 51] (50)"
                                          Token: "Lower"
                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                          Whitespace: None
                                        Phrase: "Lower"
                                      Phrase: "Phrases"
                                    Phrase: "DynamicPhrasesType.Statements"
                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 51] (50)"
                                      IterEnd: "[1, 52] (51)"
                                      Token: "']'"
                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                      Whitespace: None
                                    Phrase: "']'"
                                IsComplete: True
                              Phrase: "Index"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 52] (51)"
                                IterEnd: "[1, 53] (52)"
                                Token: "'['"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                Whitespace: None
                              Phrase: "'['"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 53] (52)"
                                    IterEnd: "[1, 54] (53)"
                                    Token: "Lower"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                    Whitespace: None
                                  Phrase: "Lower"
                                Phrase: "Phrases"
                              Phrase: "DynamicPhrasesType.Statements"
                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                IsIgnored: False
                                IterBegin: "[1, 54] (53)"
                                IterEnd: "[1, 55] (54)"
                                Token: "']'"
                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                  Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                Whitespace: None
                              Phrase: "']'"
                          IsComplete: True
                        Phrase: "Index"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 56] (55)"
                          IterEnd: "[1, 57] (56)"
                          Token: "'*'"
                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                          Whitespace:
                            - 54
                            - 55
                        Phrase: "'*'"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 58] (57)"
                              IterEnd: "[1, 62] (61)"
                              Token: "Upper"
                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                              Whitespace:
                                - 56
                                - 57
                            Phrase: "Upper"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Mul"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Sub"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 12] (11)"
            IterEnd: "[1, 14] (13)"
            Token: "'if'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
            Whitespace:
              - 10
              - 11
          Phrase: "'if'"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[1, 24] (23)"
                Token: "Upper"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                Whitespace:
                  - 13
                  - 14
              Phrase: "Upper"
            Phrase: "Phrases"
          Phrase: "DynamicPhrasesType.Statements"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 25] (24)"
            IterEnd: "[1, 29] (28)"
            Token: "'else'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
            Whitespace:
              - 23
              - 24
          Phrase: "'else'"
      IsComplete: False
    Phrase: "Ter"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'+'"
            IsComplete: True
          Phrase: "Add"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'-'"
            IsComplete: True
          Phrase: "Sub"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'*'"
            IsComplete: True
          Phrase: "Mul"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
            DataItems:
              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: None
                Phrase: "'/'"
            IsComplete: True
          Phrase: "Div"
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
367) EndPhrase, "DynamicPhrasesType.Statements" [True], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
368) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>", "Phrases", "DynamicPhrasesType.Statements", "Add", "LeftRecursiveSequencePhraseWrapper <Suffix>"
369) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
370) OnInternalPhraseAsync, 10, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 7] (6)"
                  IterEnd: "[1, 11] (10)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                  Whitespace:
                    - 5
                    - 6
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 12] (11)"
              IterEnd: "[1, 14] (13)"
              Token: "'if'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
              Whitespace:
                - 10
                - 11
            Phrase: "'if'"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 15] (14)"
                  IterEnd: "[1, 24] (23)"
                  Token: "Upper"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                  Whitespace:
                    - 13
                    - 14
                Phrase: "Upper"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 25] (24)"
              IterEnd: "[1, 29] (28)"
              Token: "'else'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
              Whitespace:
                - 23
                - 24
            Phrase: "'else'"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 30] (29)"
                            IterEnd: "[1, 35] (34)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                            Whitespace:
                              - 28
                              - 29
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 36] (35)"
                        IterEnd: "[1, 37] (36)"
                        Token: "'-'"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                        Whitespace:
                          - 34
                          - 35
                      Phrase: "'-'"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                            DataItems:
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                  DataItems:
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                        DataItems:
                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                              DataItems:
                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                                    DataItems:
                                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                              IsIgnored: False
                                                              IterBegin: "[1, 38] (37)"
                                                              IterEnd: "[1, 43] (42)"
                                                              Token: "Lower"
                                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                              Whitespace:
                                                                - 36
                                                                - 37
                                                            Phrase: "Lower"
                                                          Phrase: "Phrases"
                                                        Phrase: "DynamicPhrasesType.Statements"
                                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 43] (42)"
                                                          IterEnd: "[1, 44] (43)"
                                                          Token: "'['"
                                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                          Whitespace: None
                                                        Phrase: "'['"
                                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                              IsIgnored: False
                                                              IterBegin: "[1, 44] (43)"
                                                              IterEnd: "[1, 45] (44)"
                                                              Token: "Lower"
                                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                              Whitespace: None
                                                            Phrase: "Lower"
                                                          Phrase: "Phrases"
                                                        Phrase: "DynamicPhrasesType.Statements"
                                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 45] (44)"
                                                          IterEnd: "[1, 46] (45)"
                                                          Token: "']'"
                                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                          Whitespace: None
                                                        Phrase: "']'"
                                                    IsComplete: True
                                                  Phrase: "Index"
                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 46] (45)"
                                                    IterEnd: "[1, 47] (46)"
                                                    Token: "'['"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                                    Whitespace: None
                                                  Phrase: "'['"
                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 47] (46)"
                                                        IterEnd: "[1, 48] (47)"
                                                        Token: "Lower"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                        Whitespace: None
                                                      Phrase: "Lower"
                                                    Phrase: "Phrases"
                                                  Phrase: "DynamicPhrasesType.Statements"
                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 48] (47)"
                                                    IterEnd: "[1, 49] (48)"
                                                    Token: "']'"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                                    Whitespace: None
                                                  Phrase: "']'"
                                              IsComplete: True
                                            Phrase: "Index"
                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 49] (48)"
                                              IterEnd: "[1, 50] (49)"
                                              Token: "'['"
                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                              Whitespace: None
                                            Phrase: "'['"
                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 50] (49)"
                                                  IterEnd: "[1, 51] (50)"
                                                  Token: "Lower"
                                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 51] (50)"
                                              IterEnd: "[1, 52] (51)"
                                              Token: "']'"
                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                              Whitespace: None
                                            Phrase: "']'"
                                        IsComplete: True
                                      Phrase: "Index"
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 52] (51)"
                                        IterEnd: "[1, 53] (52)"
                                        Token: "'['"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                        Whitespace: None
                                      Phrase: "'['"
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 53] (52)"
                                            IterEnd: "[1, 54] (53)"
                                            Token: "Lower"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                            Whitespace: None
                                          Phrase: "Lower"
                                        Phrase: "Phrases"
                                      Phrase: "DynamicPhrasesType.Statements"
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 54] (53)"
                                        IterEnd: "[1, 55] (54)"
                                        Token: "']'"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                        Whitespace: None
                                      Phrase: "']'"
                                  IsComplete: True
                                Phrase: "Index"
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 56] (55)"
                                  IterEnd: "[1, 57] (56)"
                                  Token: "'*'"
                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                                  Whitespace:
                                    - 54
                                    - 55
                                Phrase: "'*'"
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 58] (57)"
                                      IterEnd: "[1, 62] (61)"
                                      Token: "Upper"
                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                                      Whitespace:
                                        - 56
                                        - 57
                                    Phrase: "Upper"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                            IsComplete: True
                          Phrase: "Mul"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Sub"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Ter"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 7] (6)"
            IterEnd: "[1, 11] (10)"
            Token: "Lower"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
            Whitespace:
              - 5
              - 6
          Phrase: "Lower"
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: None
          Phrase: "Upper"
      IsComplete: False
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
371) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True], "Phrases" [None], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
372) OnInternalPhraseAsync, 5, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 7] (6)"
                  IterEnd: "[1, 11] (10)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                  Whitespace:
                    - 5
                    - 6
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 12] (11)"
              IterEnd: "[1, 14] (13)"
              Token: "'if'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
              Whitespace:
                - 10
                - 11
            Phrase: "'if'"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 15] (14)"
                  IterEnd: "[1, 24] (23)"
                  Token: "Upper"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                  Whitespace:
                    - 13
                    - 14
                Phrase: "Upper"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 25] (24)"
              IterEnd: "[1, 29] (28)"
              Token: "'else'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
              Whitespace:
                - 23
                - 24
            Phrase: "'else'"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 30] (29)"
                            IterEnd: "[1, 35] (34)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                            Whitespace:
                              - 28
                              - 29
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 36] (35)"
                        IterEnd: "[1, 37] (36)"
                        Token: "'-'"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                        Whitespace:
                          - 34
                          - 35
                      Phrase: "'-'"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                            DataItems:
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                  DataItems:
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                        DataItems:
                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                              DataItems:
                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                                    DataItems:
                                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                              IsIgnored: False
                                                              IterBegin: "[1, 38] (37)"
                                                              IterEnd: "[1, 43] (42)"
                                                              Token: "Lower"
                                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                              Whitespace:
                                                                - 36
                                                                - 37
                                                            Phrase: "Lower"
                                                          Phrase: "Phrases"
                                                        Phrase: "DynamicPhrasesType.Statements"
                                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 43] (42)"
                                                          IterEnd: "[1, 44] (43)"
                                                          Token: "'['"
                                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                          Whitespace: None
                                                        Phrase: "'['"
                                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                              IsIgnored: False
                                                              IterBegin: "[1, 44] (43)"
                                                              IterEnd: "[1, 45] (44)"
                                                              Token: "Lower"
                                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                              Whitespace: None
                                                            Phrase: "Lower"
                                                          Phrase: "Phrases"
                                                        Phrase: "DynamicPhrasesType.Statements"
                                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 45] (44)"
                                                          IterEnd: "[1, 46] (45)"
                                                          Token: "']'"
                                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                          Whitespace: None
                                                        Phrase: "']'"
                                                    IsComplete: True
                                                  Phrase: "Index"
                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 46] (45)"
                                                    IterEnd: "[1, 47] (46)"
                                                    Token: "'['"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                                    Whitespace: None
                                                  Phrase: "'['"
                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 47] (46)"
                                                        IterEnd: "[1, 48] (47)"
                                                        Token: "Lower"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                        Whitespace: None
                                                      Phrase: "Lower"
                                                    Phrase: "Phrases"
                                                  Phrase: "DynamicPhrasesType.Statements"
                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 48] (47)"
                                                    IterEnd: "[1, 49] (48)"
                                                    Token: "']'"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                                    Whitespace: None
                                                  Phrase: "']'"
                                              IsComplete: True
                                            Phrase: "Index"
                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 49] (48)"
                                              IterEnd: "[1, 50] (49)"
                                              Token: "'['"
                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                              Whitespace: None
                                            Phrase: "'['"
                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 50] (49)"
                                                  IterEnd: "[1, 51] (50)"
                                                  Token: "Lower"
                                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                                  Whitespace: None
                                                Phrase: "Lower"
                                              Phrase: "Phrases"
                                            Phrase: "DynamicPhrasesType.Statements"
                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 51] (50)"
                                              IterEnd: "[1, 52] (51)"
                                              Token: "']'"
                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                              Whitespace: None
                                            Phrase: "']'"
                                        IsComplete: True
                                      Phrase: "Index"
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 52] (51)"
                                        IterEnd: "[1, 53] (52)"
                                        Token: "'['"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                        Whitespace: None
                                      Phrase: "'['"
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 53] (52)"
                                            IterEnd: "[1, 54] (53)"
                                            Token: "Lower"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                            Whitespace: None
                                          Phrase: "Lower"
                                        Phrase: "Phrases"
                                      Phrase: "DynamicPhrasesType.Statements"
                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 54] (53)"
                                        IterEnd: "[1, 55] (54)"
                                        Token: "']'"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                        Whitespace: None
                                      Phrase: "']'"
                                  IsComplete: True
                                Phrase: "Index"
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 56] (55)"
                                  IterEnd: "[1, 57] (56)"
                                  Token: "'*'"
                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                                  Whitespace:
                                    - 54
                                    - 55
                                Phrase: "'*'"
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 58] (57)"
                                      IterEnd: "[1, 62] (61)"
                                      Token: "Upper"
                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                                      Whitespace:
                                        - 56
                                        - 57
                                    Phrase: "Upper"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                            IsComplete: True
                          Phrase: "Mul"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Sub"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Ter"
    Phrase: "Phrases"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - None
      IsComplete: False
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
373) EndPhrase, "Phrases" [True], "DynamicPhrasesType.Statements" [None], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
374) OnInternalPhraseAsync, 5, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
          DataItems:
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 7] (6)"
                    IterEnd: "[1, 11] (10)"
                    Token: "Lower"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                    Whitespace:
                      - 5
                      - 6
                  Phrase: "Lower"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 12] (11)"
                IterEnd: "[1, 14] (13)"
                Token: "'if'"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                Whitespace:
                  - 10
                  - 11
              Phrase: "'if'"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                    IsIgnored: False
                    IterBegin: "[1, 15] (14)"
                    IterEnd: "[1, 24] (23)"
                    Token: "Upper"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                    Whitespace:
                      - 13
                      - 14
                  Phrase: "Upper"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                IsIgnored: False
                IterBegin: "[1, 25] (24)"
                IterEnd: "[1, 29] (28)"
                Token: "'else'"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                Whitespace:
                  - 23
                  - 24
              Phrase: "'else'"
            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                    DataItems:
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                              IsIgnored: False
                              IterBegin: "[1, 30] (29)"
                              IterEnd: "[1, 35] (34)"
                              Token: "Lower"
                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                              Whitespace:
                                - 28
                                - 29
                            Phrase: "Lower"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                          IsIgnored: False
                          IterBegin: "[1, 36] (35)"
                          IterEnd: "[1, 37] (36)"
                          Token: "'-'"
                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                            Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                          Whitespace:
                            - 34
                            - 35
                        Phrase: "'-'"
                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                              DataItems:
                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                    DataItems:
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                          DataItems:
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                                DataItems:
                                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                                      DataItems:
                                                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                IsIgnored: False
                                                                IterBegin: "[1, 38] (37)"
                                                                IterEnd: "[1, 43] (42)"
                                                                Token: "Lower"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                                Whitespace:
                                                                  - 36
                                                                  - 37
                                                              Phrase: "Lower"
                                                            Phrase: "Phrases"
                                                          Phrase: "DynamicPhrasesType.Statements"
                                                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 43] (42)"
                                                            IterEnd: "[1, 44] (43)"
                                                            Token: "'['"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                            Whitespace: None
                                                          Phrase: "'['"
                                                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                IsIgnored: False
                                                                IterBegin: "[1, 44] (43)"
                                                                IterEnd: "[1, 45] (44)"
                                                                Token: "Lower"
                                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                  Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                                Whitespace: None
                                                              Phrase: "Lower"
                                                            Phrase: "Phrases"
                                                          Phrase: "DynamicPhrasesType.Statements"
                                                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 45] (44)"
                                                            IterEnd: "[1, 46] (45)"
                                                            Token: "']'"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                            Whitespace: None
                                                          Phrase: "']'"
                                                      IsComplete: True
                                                    Phrase: "Index"
                                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 46] (45)"
                                                      IterEnd: "[1, 47] (46)"
                                                      Token: "'['"
                                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                                      Whitespace: None
                                                    Phrase: "'['"
                                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                          IsIgnored: False
                                                          IterBegin: "[1, 47] (46)"
                                                          IterEnd: "[1, 48] (47)"
                                                          Token: "Lower"
                                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                            Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                          Whitespace: None
                                                        Phrase: "Lower"
                                                      Phrase: "Phrases"
                                                    Phrase: "DynamicPhrasesType.Statements"
                                                  - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 48] (47)"
                                                      IterEnd: "[1, 49] (48)"
                                                      Token: "']'"
                                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                                      Whitespace: None
                                                    Phrase: "']'"
                                                IsComplete: True
                                              Phrase: "Index"
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 49] (48)"
                                                IterEnd: "[1, 50] (49)"
                                                Token: "'['"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                                Whitespace: None
                                              Phrase: "'['"
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                    IsIgnored: False
                                                    IterBegin: "[1, 50] (49)"
                                                    IterEnd: "[1, 51] (50)"
                                                    Token: "Lower"
                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                      Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                                    Whitespace: None
                                                  Phrase: "Lower"
                                                Phrase: "Phrases"
                                              Phrase: "DynamicPhrasesType.Statements"
                                            - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 51] (50)"
                                                IterEnd: "[1, 52] (51)"
                                                Token: "']'"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                                Whitespace: None
                                              Phrase: "']'"
                                          IsComplete: True
                                        Phrase: "Index"
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 52] (51)"
                                          IterEnd: "[1, 53] (52)"
                                          Token: "'['"
                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                          Whitespace: None
                                        Phrase: "'['"
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                              IsIgnored: False
                                              IterBegin: "[1, 53] (52)"
                                              IterEnd: "[1, 54] (53)"
                                              Token: "Lower"
                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                              Whitespace: None
                                            Phrase: "Lower"
                                          Phrase: "Phrases"
                                        Phrase: "DynamicPhrasesType.Statements"
                                      - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                          IsIgnored: False
                                          IterBegin: "[1, 54] (53)"
                                          IterEnd: "[1, 55] (54)"
                                          Token: "']'"
                                          Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                            Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                          Whitespace: None
                                        Phrase: "']'"
                                    IsComplete: True
                                  Phrase: "Index"
                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                    IsIgnored: False
                                    IterBegin: "[1, 56] (55)"
                                    IterEnd: "[1, 57] (56)"
                                    Token: "'*'"
                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                                    Whitespace:
                                      - 54
                                      - 55
                                  Phrase: "'*'"
                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                        IsIgnored: False
                                        IterBegin: "[1, 58] (57)"
                                        IterEnd: "[1, 62] (61)"
                                        Token: "Upper"
                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                          Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                                        Whitespace:
                                          - 56
                                          - 57
                                      Phrase: "Upper"
                                    Phrase: "Phrases"
                                  Phrase: "DynamicPhrasesType.Statements"
                              IsComplete: True
                            Phrase: "Mul"
                          Phrase: "Phrases"
                        Phrase: "DynamicPhrasesType.Statements"
                    IsComplete: True
                  Phrase: "Sub"
                Phrase: "Phrases"
              Phrase: "DynamicPhrasesType.Statements"
          IsComplete: True
        Phrase: "Ter"
      Phrase: "Phrases"
    Phrase: "DynamicPhrasesType.Statements"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems:
        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 5] (4)"
            IterEnd: "[1, 6] (5)"
            Token: "'+'"
            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
            Whitespace:
              - 3
              - 4
          Phrase: "'+'"
      IsComplete: False
    Phrase: "Add"
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
      DataItems: []
      IsComplete: False
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
375) EndPhrase, "DynamicPhrasesType.Statements" [True], "Add" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
376) StartPhrase, "'-'", "Sub", "LeftRecursiveSequencePhraseWrapper <Suffix>"
377) EndPhrase, "'-'" [False], "Sub" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
378) StartPhrase, "'*'", "Mul", "LeftRecursiveSequencePhraseWrapper <Suffix>"
379) EndPhrase, "'*'" [False], "Mul" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
380) StartPhrase, "'/'", "Div", "LeftRecursiveSequencePhraseWrapper <Suffix>"
381) EndPhrase, "'/'" [False], "Div" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
382) StartPhrase, "'if'", "Ter", "LeftRecursiveSequencePhraseWrapper <Suffix>"
383) EndPhrase, "'if'" [False], "Ter" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
384) StartPhrase, "'['", "Index", "LeftRecursiveSequencePhraseWrapper <Suffix>"
385) EndPhrase, "'['" [False], "Index" [None], "LeftRecursiveSequencePhraseWrapper <Suffix>" [None]
386) OnInternalPhraseAsync, 3, 61
    # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
        DataItems:
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 1] (0)"
                  IterEnd: "[1, 4] (3)"
                  Token: "Lower"
                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(0, 3), match='one'>"
                  Whitespace: None
                Phrase: "Lower"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
              IsIgnored: False
              IterBegin: "[1, 5] (4)"
              IterEnd: "[1, 6] (5)"
              Token: "'+'"
              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                Match: "<_sre.SRE_Match object; span=(4, 5), match='+'>"
              Whitespace:
                - 3
                - 4
            Phrase: "'+'"
          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                  DataItems:
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 7] (6)"
                            IterEnd: "[1, 11] (10)"
                            Token: "Lower"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(6, 10), match='true'>"
                            Whitespace:
                              - 5
                              - 6
                          Phrase: "Lower"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 12] (11)"
                        IterEnd: "[1, 14] (13)"
                        Token: "'if'"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(11, 13), match='if'>"
                        Whitespace:
                          - 10
                          - 11
                      Phrase: "'if'"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                            IsIgnored: False
                            IterBegin: "[1, 15] (14)"
                            IterEnd: "[1, 24] (23)"
                            Token: "Upper"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(14, 23), match='CONDITION'>"
                            Whitespace:
                              - 13
                              - 14
                          Phrase: "Upper"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 25] (24)"
                        IterEnd: "[1, 29] (28)"
                        Token: "'else'"
                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(24, 28), match='else'>"
                        Whitespace:
                          - 23
                          - 24
                      Phrase: "'else'"
                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                            DataItems:
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                      IsIgnored: False
                                      IterBegin: "[1, 30] (29)"
                                      IterEnd: "[1, 35] (34)"
                                      Token: "Lower"
                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                        Match: "<_sre.SRE_Match object; span=(29, 34), match='false'>"
                                      Whitespace:
                                        - 28
                                        - 29
                                    Phrase: "Lower"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                  IsIgnored: False
                                  IterBegin: "[1, 36] (35)"
                                  IterEnd: "[1, 37] (36)"
                                  Token: "'-'"
                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                    Match: "<_sre.SRE_Match object; span=(35, 36), match='-'>"
                                  Whitespace:
                                    - 34
                                    - 35
                                Phrase: "'-'"
                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                      DataItems:
                                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                            DataItems:
                                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                                  DataItems:
                                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                                        DataItems:
                                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.MultipleStandardLexResultData'>
                                                              DataItems:
                                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                        IsIgnored: False
                                                                        IterBegin: "[1, 38] (37)"
                                                                        IterEnd: "[1, 43] (42)"
                                                                        Token: "Lower"
                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                          Match: "<_sre.SRE_Match object; span=(37, 42), match='three'>"
                                                                        Whitespace:
                                                                          - 36
                                                                          - 37
                                                                      Phrase: "Lower"
                                                                    Phrase: "Phrases"
                                                                  Phrase: "DynamicPhrasesType.Statements"
                                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[1, 43] (42)"
                                                                    IterEnd: "[1, 44] (43)"
                                                                    Token: "'['"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(42, 43), match='['>"
                                                                    Whitespace: None
                                                                  Phrase: "'['"
                                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                        IsIgnored: False
                                                                        IterBegin: "[1, 44] (43)"
                                                                        IterEnd: "[1, 45] (44)"
                                                                        Token: "Lower"
                                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                          Match: "<_sre.SRE_Match object; span=(43, 44), match='a'>"
                                                                        Whitespace: None
                                                                      Phrase: "Lower"
                                                                    Phrase: "Phrases"
                                                                  Phrase: "DynamicPhrasesType.Statements"
                                                                - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                    IsIgnored: False
                                                                    IterBegin: "[1, 45] (44)"
                                                                    IterEnd: "[1, 46] (45)"
                                                                    Token: "']'"
                                                                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                      Match: "<_sre.SRE_Match object; span=(44, 45), match=']'>"
                                                                    Whitespace: None
                                                                  Phrase: "']'"
                                                              IsComplete: True
                                                            Phrase: "Index"
                                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                              IsIgnored: False
                                                              IterBegin: "[1, 46] (45)"
                                                              IterEnd: "[1, 47] (46)"
                                                              Token: "'['"
                                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                Match: "<_sre.SRE_Match object; span=(45, 46), match='['>"
                                                              Whitespace: None
                                                            Phrase: "'['"
                                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                                  IsIgnored: False
                                                                  IterBegin: "[1, 47] (46)"
                                                                  IterEnd: "[1, 48] (47)"
                                                                  Token: "Lower"
                                                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                    Match: "<_sre.SRE_Match object; span=(46, 47), match='b'>"
                                                                  Whitespace: None
                                                                Phrase: "Lower"
                                                              Phrase: "Phrases"
                                                            Phrase: "DynamicPhrasesType.Statements"
                                                          - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                              IsIgnored: False
                                                              IterBegin: "[1, 48] (47)"
                                                              IterEnd: "[1, 49] (48)"
                                                              Token: "']'"
                                                              Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                                Match: "<_sre.SRE_Match object; span=(47, 48), match=']'>"
                                                              Whitespace: None
                                                            Phrase: "']'"
                                                        IsComplete: True
                                                      Phrase: "Index"
                                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 49] (48)"
                                                        IterEnd: "[1, 50] (49)"
                                                        Token: "'['"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(48, 49), match='['>"
                                                        Whitespace: None
                                                      Phrase: "'['"
                                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                        Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                            IsIgnored: False
                                                            IterBegin: "[1, 50] (49)"
                                                            IterEnd: "[1, 51] (50)"
                                                            Token: "Lower"
                                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                              Match: "<_sre.SRE_Match object; span=(49, 50), match='c'>"
                                                            Whitespace: None
                                                          Phrase: "Lower"
                                                        Phrase: "Phrases"
                                                      Phrase: "DynamicPhrasesType.Statements"
                                                    - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                      Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                        IsIgnored: False
                                                        IterBegin: "[1, 51] (50)"
                                                        IterEnd: "[1, 52] (51)"
                                                        Token: "']'"
                                                        Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                          Match: "<_sre.SRE_Match object; span=(50, 51), match=']'>"
                                                        Whitespace: None
                                                      Phrase: "']'"
                                                  IsComplete: True
                                                Phrase: "Index"
                                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 52] (51)"
                                                  IterEnd: "[1, 53] (52)"
                                                  Token: "'['"
                                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(51, 52), match='['>"
                                                  Whitespace: None
                                                Phrase: "'['"
                                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                  Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                    Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                      IsIgnored: False
                                                      IterBegin: "[1, 53] (52)"
                                                      IterEnd: "[1, 54] (53)"
                                                      Token: "Lower"
                                                      Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                        Match: "<_sre.SRE_Match object; span=(52, 53), match='d'>"
                                                      Whitespace: None
                                                    Phrase: "Lower"
                                                  Phrase: "Phrases"
                                                Phrase: "DynamicPhrasesType.Statements"
                                              - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                                Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                  IsIgnored: False
                                                  IterBegin: "[1, 54] (53)"
                                                  IterEnd: "[1, 55] (54)"
                                                  Token: "']'"
                                                  Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                    Match: "<_sre.SRE_Match object; span=(53, 54), match=']'>"
                                                  Whitespace: None
                                                Phrase: "']'"
                                            IsComplete: True
                                          Phrase: "Index"
                                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                            IsIgnored: False
                                            IterBegin: "[1, 56] (55)"
                                            IterEnd: "[1, 57] (56)"
                                            Token: "'*'"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(55, 56), match='*'>"
                                            Whitespace:
                                              - 54
                                              - 55
                                          Phrase: "'*'"
                                        - # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                          Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                            Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                                              Data: # <class 'TheLanguage.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                                                IsIgnored: False
                                                IterBegin: "[1, 58] (57)"
                                                IterEnd: "[1, 62] (61)"
                                                Token: "Upper"
                                                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                                  Match: "<_sre.SRE_Match object; span=(57, 61), match='FOUR'>"
                                                Whitespace:
                                                  - 56
                                                  - 57
                                              Phrase: "Upper"
                                            Phrase: "Phrases"
                                          Phrase: "DynamicPhrasesType.Statements"
                                      IsComplete: True
                                    Phrase: "Mul"
                                  Phrase: "Phrases"
                                Phrase: "DynamicPhrasesType.Statements"
                            IsComplete: True
                          Phrase: "Sub"
                        Phrase: "Phrases"
                      Phrase: "DynamicPhrasesType.Statements"
                  IsComplete: True
                Phrase: "Ter"
              Phrase: "Phrases"
            Phrase: "DynamicPhrasesType.Statements"
        IsComplete: True
      Phrase: "Add"
    Phrase: "LeftRecursiveSequencePhraseWrapper <Suffix>"
387) EndPhrase, "LeftRecursiveSequencePhraseWrapper <Suffix>" [True]
