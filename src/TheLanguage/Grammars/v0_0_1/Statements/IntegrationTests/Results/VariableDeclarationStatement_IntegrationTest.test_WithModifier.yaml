# <class 'TheLanguage.Parser.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Parser.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Parser.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Parser.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                        IsIgnored: False
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 4] (3)"
                        Type: "'var' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                        Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(0, 3), match='var'>"
                        Whitespace: None
                    IterBegin: "[1, 1] (0)"
                    IterEnd: "[1, 4] (3)"
                    Type: "Modifier <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 4] (3)"
                Type: "Repeat: {Modifier, 0, 1} <class 'TheLanguage.Parser.Phrases.RepeatPhrase.RepeatPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[1, 5] (4)"
                            IterEnd: "[1, 8] (7)"
                            Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                            Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                              Match: "<_sre.SRE_Match object; span=(4, 7), match='one'>"
                            Whitespace:
                              - 3
                              - 4
                        Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                          Name: "one"
                          Regions: # <class 'types.VariableNameLexerInfoRegions'>
                            Name: "[Ln 1, Col 5] -> [Ln 1, Col 8]"
                            Self__: "[Ln 1, Col 5] -> [Ln 1, Col 8]"
                        IterBegin: "[1, 5] (4)"
                        IterEnd: "[1, 8] (7)"
                        Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[1, 5] (4)"
                    IterEnd: "[1, 8] (7)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 5] (4)"
                IterEnd: "[1, 8] (7)"
                Type: "DynamicPhrasesType.Names <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 9] (8)"
                IterEnd: "[1, 10] (9)"
                Type: "'=' <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(8, 9), match='='>"
                Whitespace:
                  - 7
                  - 8
              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Parser.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Parser.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Parser.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Parser.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                                    IsIgnored: False
                                    IterBegin: "[1, 11] (10)"
                                    IterEnd: "[1, 16] (15)"
                                    Type: "<generic_name> <class 'TheLanguage.Parser.Components.Token.RegexToken'>"
                                    Value: # <class 'TheLanguage.Parser.Components.Token.RegexToken.MatchResult'>
                                      Match: "<_sre.SRE_Match object; span=(10, 15), match='value'>"
                                    Whitespace:
                                      - 9
                                      - 10
                                Info: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                                  Name: "value"
                                  Regions: # <class 'types.VariableNameLexerInfoRegions'>
                                    Name: "[Ln 1, Col 11] -> [Ln 1, Col 16]"
                                    Self__: "[Ln 1, Col 11] -> [Ln 1, Col 16]"
                                IterBegin: "[1, 11] (10)"
                                IterEnd: "[1, 16] (15)"
                                Type: "Variable Name <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
                            IterBegin: "[1, 11] (10)"
                            IterEnd: "[1, 16] (15)"
                            Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                        Info: # <class 'TheLanguage.Lexer.Expressions.VariableExpressionLexerInfo.VariableExpressionLexerInfo'>
                          Name: # <class 'TheLanguage.Lexer.Names.VariableNameLexerInfo.VariableNameLexerInfo'>
                            Name: "value"
                            Regions: # <class 'types.VariableNameLexerInfoRegions'>
                              Name: "[Ln 1, Col 11] -> [Ln 1, Col 16]"
                              Self__: "[Ln 1, Col 11] -> [Ln 1, Col 16]"
                          Regions: # <class 'types.VariableExpressionLexerInfoRegions'>
                            Name: "[Ln 1, Col 11] -> [Ln 1, Col 16]"
                            Self__: "[Ln 1, Col 11] -> [Ln 1, Col 16]"
                        IterBegin: "[1, 11] (10)"
                        IterEnd: "[1, 16] (15)"
                        Type: "Variable Expression <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
                    IterBegin: "[1, 11] (10)"
                    IterEnd: "[1, 16] (15)"
                    Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[1, 11] (10)"
                IterEnd: "[1, 16] (15)"
                Type: "DynamicPhrasesType.Expressions <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'TheLanguage.Parser.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 16] (15)"
                IterEnd: "[2, 1] (16)"
                Type: "Newline+ <class 'TheLanguage.Parser.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Parser.Components.Token.NewlineToken.MatchResult'>
                  End: 16
                  Start: 15
                Whitespace: None
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (16)"
            Type: "Variable Declaration Statement <class 'TheLanguage.Parser.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (16)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Parser.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (16)"
    Type: "Dynamic Phrases <class 'TheLanguage.Parser.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[2, 1] (16)"
Type: "<None>"
