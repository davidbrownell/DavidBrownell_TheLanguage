# <class 'TheLanguage.Lexer.Components.AST.Node'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[1, 8] (7)"
                Type: "Include Token <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 7), match='include'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 9] (8)"
                IterEnd: "[1, 15] (14)"
                Type: "Lower Token <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(8, 14), match='number'>"
                Whitespace:
                  - 7
                  - 8
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 15] (14)"
                IterEnd: "[2, 1] (15)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 15
                  Start: 14
                Whitespace: None
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[2, 1] (15)"
            Type: "Include <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[1, 1] (0)"
        IterEnd: "[2, 1] (15)"
        Type: "(Include | Upper | Lower | Number | New Scope) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[1, 1] (0)"
    IterEnd: "[2, 1] (15)"
    Type: "Dynamic Phrase <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 1] (15)"
                IterEnd: "[2, 2] (16)"
                Type: "Number Token <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(15, 16), match='1'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 3] (17)"
                IterEnd: "[2, 4] (18)"
                Type: "Number Token <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(17, 18), match='2'>"
                Whitespace:
                  - 16
                  - 17
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 5] (19)"
                IterEnd: "[2, 6] (20)"
                Type: "Number Token <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(19, 20), match='3'>"
                Whitespace:
                  - 18
                  - 19
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[2, 6] (20)"
                IterEnd: "[3, 1] (21)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 21
                  Start: 20
                Whitespace: None
            IsIgnored: False
            IterBegin: "[2, 1] (15)"
            IterEnd: "[3, 1] (21)"
            Type: "Dynamic Number <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IsIgnored: False
        IterBegin: "[2, 1] (15)"
        IterEnd: "[3, 1] (21)"
        Type: "(Include | Upper | Lower | Number | New Scope) / (Dynamic Number) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IsIgnored: False
    IterBegin: "[2, 1] (15)"
    IterEnd: "[3, 1] (21)"
    Type: "Dynamic Phrase <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IsIgnored: False
IterBegin: "[1, 1] (0)"
IterEnd: "[3, 1] (21)"
Type: "<None>"
