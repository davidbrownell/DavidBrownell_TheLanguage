# ----------------------------------------------------------------------
# |
# |  ConstraintParameters.TheLanguage
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2021-11-12 10:15:19
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2021
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
from ..ParserInfo import ParserInfo, ParserInfoRegions, Region
from ..CompileTimeExpressions.Expression import CompileTimeExpressionParserInfo, CompileTimeExpressionParserInfoRegions
from ..CompileTimeTypes.Type import CompileTimeTypeParserInfo, CompileTimeTypeParserInfoRegions


# ----------------------------------------------------------------------
public immutable class ConstraintParameterParserInfo
    extends ParserInfo
:
    public CompileTimeTypeParserInfo val type
    public String val name
    public (CompileTimeExpressionParserInfo | None) val default


# ----------------------------------------------------------------------
public immutable class ConstraintParameterParserInfoRegions
    extends ParserInfoRegions
:
    public CompileTimeTypeParserInfoRegions val type
    public Region val name
    public (CompileTimeExpressionParserInfoRegions | None) val default


# ----------------------------------------------------------------------
public immutable class ConstraintParametersParserInfo
    extends ParserInfo
:
    public using OptionalParameters = (List<ConstraintParameterParserInfo>{ min_length'=1 } | None)

    # ----------------------------------------------------------------------
    public OptionalParameters val positional
    public OptionalParameters val any
    public OptionalParameters val keyword

    # ----------------------------------------------------------------------
    private None __Init?__():
        # TODO: ensure self.positional or self.any or self.keyword
        assert self.positional or self.any or self.keyword


# ----------------------------------------------------------------------
public immutable class ConstraintParametersParserInfoRegions
    extends ParserInfoRegions
:
    public using OptionalParametersRegions = (List<ConstraintParameterParserInfoRegions>{ min_length'=1 } | None)

    # ----------------------------------------------------------------------
    public OptionalParametersRegions val positional
    public OptionalParametersRegions val any
    public OptionalParametersRegions val keyword

    # ----------------------------------------------------------------------
    private None __Init?__():
        # TODO: ensure self.positional or self.any or self.keyword
        assert self.positional or self.any or self.keyword
