# <class 'v1.Lexer.Components.AST.Node'>
children:
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Node'>
            children:
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 1] (0)"
                  end: "[1, 3] (2)"
                type: "Number <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(0, 2), match='33'>"
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 3] (2)"
                  end: "[2, 1] (3)"
                type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                    begin: 2
                    end: 3
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 1] (0)"
              end: "[2, 1] (3)"
            type: "Number Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 1] (0)"
          end: "[2, 1] (3)"
        type: "(Upper Phrase | Lower Phrase | Number Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 1] (0)"
      end: "[2, 1] (3)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Node'>
            children:
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[2, 1] (3)"
                  end: "[2, 12] (14)"
                type: "Lower <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(3, 14), match='twooooooooo'>"
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[2, 12] (14)"
                  end: "[3, 1] (15)"
                type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                    begin: 14
                    end: 15
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[2, 1] (3)"
              end: "[3, 1] (15)"
            type: "Lower Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[2, 1] (3)"
          end: "[3, 1] (15)"
        type: "(Upper Phrase | Lower Phrase | Number Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[2, 1] (3)"
      end: "[3, 1] (15)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Node'>
            children:
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[3, 1] (15)"
                  end: "[3, 4] (18)"
                type: "Upper <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(15, 18), match='ONE'>"
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: False
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[3, 4] (18)"
                  end: "[4, 1] (19)"
                type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                    begin: 18
                    end: 19
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[3, 1] (15)"
              end: "[4, 1] (19)"
            type: "Upper Phrase <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[3, 1] (15)"
          end: "[4, 1] (19)"
        type: "(Upper Phrase | Lower Phrase | Number Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[3, 1] (15)"
      end: "[4, 1] (19)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
  begin: "[1, 1] (0)"
  end: "[4, 1] (19)"
type: "<None>"
