0) StartPhrase, "[{[Word Token, Newline+], 0, None}, {[Number Token, Newline+], 1, None}, {[Upper Token, Newline+], 0, 1}, {[Word Token, Newline+], 1, None}]"
1) StartPhrase, "{[Word Token, Newline+], 0, None}"
2) StartPhrase, "[Word Token, Newline+]"
3) StartPhrase, "Word Token"
4) EndPhrase, "Word Token" [False]
5) EndPhrase, "[Word Token, Newline+]" [False]
6) OnInternalPhraseAsync, 0, 0
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems: []
      IsComplete: True
    Phrase: "{[Word Token, Newline+], 0, None}"
7) EndPhrase, "{[Word Token, Newline+], 0, None}" [True]
8) StartPhrase, "{[Number Token, Newline+], 1, None}"
9) StartPhrase, "[Number Token, Newline+]"
10) StartPhrase, "Number Token"
11) OnInternalPhraseAsync, 0, 2
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 1] (0)"
      IterEnd: "[1, 3] (2)"
      Token: "Number Token"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(0, 2), match='12'>"
      Whitespace: None
    Phrase: "Number Token"
12) EndPhrase, "Number Token" [True]
13) StartPhrase, "Newline+"
14) OnInternalPhraseAsync, 2, 3
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[1, 3] (2)"
      IterEnd: "[2, 1] (3)"
      Token: "Newline+"
      Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
        End: 3
        Start: 2
      Whitespace: None
    Phrase: "Newline+"
15) EndPhrase, "Newline+" [True]
16) OnInternalPhraseAsync, 0, 3
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 3] (2)"
            Token: "Number Token"
            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 2), match='12'>"
            Whitespace: None
          Phrase: "Number Token"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 3] (2)"
            IterEnd: "[2, 1] (3)"
            Token: "Newline+"
            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 3
              Start: 2
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "[Number Token, Newline+]"
17) EndPhrase, "[Number Token, Newline+]" [True]
18) StartPhrase, "[Number Token, Newline+]"
19) StartPhrase, "Number Token"
20) OnInternalPhraseAsync, 3, 7
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[2, 1] (3)"
      IterEnd: "[2, 5] (7)"
      Token: "Number Token"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(3, 7), match='3456'>"
      Whitespace: None
    Phrase: "Number Token"
21) EndPhrase, "Number Token" [True]
22) StartPhrase, "Newline+"
23) OnInternalPhraseAsync, 7, 8
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[2, 5] (7)"
      IterEnd: "[3, 1] (8)"
      Token: "Newline+"
      Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
        End: 8
        Start: 7
      Whitespace: None
    Phrase: "Newline+"
24) EndPhrase, "Newline+" [True]
25) OnInternalPhraseAsync, 3, 8
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 1] (3)"
            IterEnd: "[2, 5] (7)"
            Token: "Number Token"
            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(3, 7), match='3456'>"
            Whitespace: None
          Phrase: "Number Token"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 5] (7)"
            IterEnd: "[3, 1] (8)"
            Token: "Newline+"
            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 8
              Start: 7
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "[Number Token, Newline+]"
26) EndPhrase, "[Number Token, Newline+]" [True]
27) StartPhrase, "[Number Token, Newline+]"
28) StartPhrase, "Number Token"
29) EndPhrase, "Number Token" [False]
30) EndPhrase, "[Number Token, Newline+]" [False]
31) OnInternalPhraseAsync, 0, 8
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
            DataItems:
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 1] (0)"
                  IterEnd: "[1, 3] (2)"
                  Token: "Number Token"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(0, 2), match='12'>"
                  Whitespace: None
                Phrase: "Number Token"
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[1, 3] (2)"
                  IterEnd: "[2, 1] (3)"
                  Token: "Newline+"
                  Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                    End: 3
                    Start: 2
                  Whitespace: None
                Phrase: "Newline+"
            IsComplete: True
          Phrase: "[Number Token, Newline+]"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
            DataItems:
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[2, 1] (3)"
                  IterEnd: "[2, 5] (7)"
                  Token: "Number Token"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(3, 7), match='3456'>"
                  Whitespace: None
                Phrase: "Number Token"
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[2, 5] (7)"
                  IterEnd: "[3, 1] (8)"
                  Token: "Newline+"
                  Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                    End: 8
                    Start: 7
                  Whitespace: None
                Phrase: "Newline+"
            IsComplete: True
          Phrase: "[Number Token, Newline+]"
      IsComplete: True
    Phrase: "{[Number Token, Newline+], 1, None}"
32) EndPhrase, "{[Number Token, Newline+], 1, None}" [True]
33) StartPhrase, "{[Upper Token, Newline+], 0, 1}"
34) StartPhrase, "[Upper Token, Newline+]"
35) StartPhrase, "Upper Token"
36) EndPhrase, "Upper Token" [False]
37) EndPhrase, "[Upper Token, Newline+]" [False]
38) OnInternalPhraseAsync, 8, 8
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems: []
      IsComplete: True
    Phrase: "{[Upper Token, Newline+], 0, 1}"
39) EndPhrase, "{[Upper Token, Newline+], 0, 1}" [True]
40) StartPhrase, "{[Word Token, Newline+], 1, None}"
41) StartPhrase, "[Word Token, Newline+]"
42) StartPhrase, "Word Token"
43) OnInternalPhraseAsync, 8, 13
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[3, 1] (8)"
      IterEnd: "[3, 6] (13)"
      Token: "Word Token"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(8, 13), match='wordc'>"
      Whitespace: None
    Phrase: "Word Token"
44) EndPhrase, "Word Token" [True]
45) StartPhrase, "Newline+"
46) OnInternalPhraseAsync, 13, 14
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[3, 6] (13)"
      IterEnd: "[4, 1] (14)"
      Token: "Newline+"
      Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
        End: 14
        Start: 13
      Whitespace: None
    Phrase: "Newline+"
47) EndPhrase, "Newline+" [True]
48) OnInternalPhraseAsync, 8, 14
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 1] (8)"
            IterEnd: "[3, 6] (13)"
            Token: "Word Token"
            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(8, 13), match='wordc'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[3, 6] (13)"
            IterEnd: "[4, 1] (14)"
            Token: "Newline+"
            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 14
              Start: 13
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "[Word Token, Newline+]"
49) EndPhrase, "[Word Token, Newline+]" [True]
50) StartPhrase, "[Word Token, Newline+]"
51) StartPhrase, "Word Token"
52) OnInternalPhraseAsync, 14, 19
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[4, 1] (14)"
      IterEnd: "[4, 6] (19)"
      Token: "Word Token"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(14, 19), match='wordd'>"
      Whitespace: None
    Phrase: "Word Token"
53) EndPhrase, "Word Token" [True]
54) StartPhrase, "Newline+"
55) OnInternalPhraseAsync, 19, 20
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[4, 6] (19)"
      IterEnd: "[5, 1] (20)"
      Token: "Newline+"
      Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
        End: 20
        Start: 19
      Whitespace: None
    Phrase: "Newline+"
56) EndPhrase, "Newline+" [True]
57) OnInternalPhraseAsync, 14, 20
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[4, 1] (14)"
            IterEnd: "[4, 6] (19)"
            Token: "Word Token"
            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(14, 19), match='wordd'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[4, 6] (19)"
            IterEnd: "[5, 1] (20)"
            Token: "Newline+"
            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 20
              Start: 19
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "[Word Token, Newline+]"
58) EndPhrase, "[Word Token, Newline+]" [True]
59) StartPhrase, "[Word Token, Newline+]"
60) StartPhrase, "Word Token"
61) OnInternalPhraseAsync, 20, 25
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[5, 1] (20)"
      IterEnd: "[5, 6] (25)"
      Token: "Word Token"
      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
        Match: "<_sre.SRE_Match object; span=(20, 25), match='worde'>"
      Whitespace: None
    Phrase: "Word Token"
62) EndPhrase, "Word Token" [True]
63) StartPhrase, "Newline+"
64) OnInternalPhraseAsync, 25, 26
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
      IsIgnored: False
      IterBegin: "[5, 6] (25)"
      IterEnd: "[6, 1] (26)"
      Token: "Newline+"
      Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
        End: 26
        Start: 25
      Whitespace: None
    Phrase: "Newline+"
65) EndPhrase, "Newline+" [True]
66) OnInternalPhraseAsync, 20, 26
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[5, 1] (20)"
            IterEnd: "[5, 6] (25)"
            Token: "Word Token"
            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(20, 25), match='worde'>"
            Whitespace: None
          Phrase: "Word Token"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[5, 6] (25)"
            IterEnd: "[6, 1] (26)"
            Token: "Newline+"
            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 26
              Start: 25
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "[Word Token, Newline+]"
67) EndPhrase, "[Word Token, Newline+]" [True]
68) OnInternalPhraseAsync, 8, 26
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
            DataItems:
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[3, 1] (8)"
                  IterEnd: "[3, 6] (13)"
                  Token: "Word Token"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(8, 13), match='wordc'>"
                  Whitespace: None
                Phrase: "Word Token"
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[3, 6] (13)"
                  IterEnd: "[4, 1] (14)"
                  Token: "Newline+"
                  Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                    End: 14
                    Start: 13
                  Whitespace: None
                Phrase: "Newline+"
            IsComplete: True
          Phrase: "[Word Token, Newline+]"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
            DataItems:
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[4, 1] (14)"
                  IterEnd: "[4, 6] (19)"
                  Token: "Word Token"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(14, 19), match='wordd'>"
                  Whitespace: None
                Phrase: "Word Token"
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[4, 6] (19)"
                  IterEnd: "[5, 1] (20)"
                  Token: "Newline+"
                  Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                    End: 20
                    Start: 19
                  Whitespace: None
                Phrase: "Newline+"
            IsComplete: True
          Phrase: "[Word Token, Newline+]"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
            DataItems:
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[5, 1] (20)"
                  IterEnd: "[5, 6] (25)"
                  Token: "Word Token"
                  Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                    Match: "<_sre.SRE_Match object; span=(20, 25), match='worde'>"
                  Whitespace: None
                Phrase: "Word Token"
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                  IsIgnored: False
                  IterBegin: "[5, 6] (25)"
                  IterEnd: "[6, 1] (26)"
                  Token: "Newline+"
                  Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                    End: 26
                    Start: 25
                  Whitespace: None
                Phrase: "Newline+"
            IsComplete: True
          Phrase: "[Word Token, Newline+]"
      IsComplete: True
    Phrase: "{[Word Token, Newline+], 1, None}"
69) EndPhrase, "{[Word Token, Newline+], 1, None}" [True]
70) OnInternalPhraseAsync, 0, 26
    # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
            DataItems: []
            IsComplete: True
          Phrase: "{[Word Token, Newline+], 0, None}"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
            DataItems:
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 1] (0)"
                        IterEnd: "[1, 3] (2)"
                        Token: "Number Token"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(0, 2), match='12'>"
                        Whitespace: None
                      Phrase: "Number Token"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[1, 3] (2)"
                        IterEnd: "[2, 1] (3)"
                        Token: "Newline+"
                        Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                          End: 3
                          Start: 2
                        Whitespace: None
                      Phrase: "Newline+"
                  IsComplete: True
                Phrase: "[Number Token, Newline+]"
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[2, 1] (3)"
                        IterEnd: "[2, 5] (7)"
                        Token: "Number Token"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(3, 7), match='3456'>"
                        Whitespace: None
                      Phrase: "Number Token"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[2, 5] (7)"
                        IterEnd: "[3, 1] (8)"
                        Token: "Newline+"
                        Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                          End: 8
                          Start: 7
                        Whitespace: None
                      Phrase: "Newline+"
                  IsComplete: True
                Phrase: "[Number Token, Newline+]"
            IsComplete: True
          Phrase: "{[Number Token, Newline+], 1, None}"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
            DataItems: []
            IsComplete: True
          Phrase: "{[Upper Token, Newline+], 0, 1}"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
            DataItems:
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[3, 1] (8)"
                        IterEnd: "[3, 6] (13)"
                        Token: "Word Token"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(8, 13), match='wordc'>"
                        Whitespace: None
                      Phrase: "Word Token"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[3, 6] (13)"
                        IterEnd: "[4, 1] (14)"
                        Token: "Newline+"
                        Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                          End: 14
                          Start: 13
                        Whitespace: None
                      Phrase: "Newline+"
                  IsComplete: True
                Phrase: "[Word Token, Newline+]"
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[4, 1] (14)"
                        IterEnd: "[4, 6] (19)"
                        Token: "Word Token"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(14, 19), match='wordd'>"
                        Whitespace: None
                      Phrase: "Word Token"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[4, 6] (19)"
                        IterEnd: "[5, 1] (20)"
                        Token: "Newline+"
                        Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                          End: 20
                          Start: 19
                        Whitespace: None
                      Phrase: "Newline+"
                  IsComplete: True
                Phrase: "[Word Token, Newline+]"
              - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                  DataItems:
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[5, 1] (20)"
                        IterEnd: "[5, 6] (25)"
                        Token: "Word Token"
                        Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                          Match: "<_sre.SRE_Match object; span=(20, 25), match='worde'>"
                        Whitespace: None
                      Phrase: "Word Token"
                    - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                      Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                        IsIgnored: False
                        IterBegin: "[5, 6] (25)"
                        IterEnd: "[6, 1] (26)"
                        Token: "Newline+"
                        Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
                          End: 26
                          Start: 25
                        Whitespace: None
                      Phrase: "Newline+"
                  IsComplete: True
                Phrase: "[Word Token, Newline+]"
            IsComplete: True
          Phrase: "{[Word Token, Newline+], 1, None}"
      IsComplete: True
    Phrase: "[{[Word Token, Newline+], 0, None}, {[Number Token, Newline+], 1, None}, {[Upper Token, Newline+], 0, 1}, {[Word Token, Newline+], 1, None}]"
71) EndPhrase, "[{[Word Token, Newline+], 0, None}, {[Number Token, Newline+], 1, None}, {[Upper Token, Newline+], 0, 1}, {[Word Token, Newline+], 1, None}]" [True]
