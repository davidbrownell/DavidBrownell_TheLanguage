# <class 'Original.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
    DataItems:
      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems:
            - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
              Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
                DataItems:
                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 1] (0)"
                      IterEnd: "[1, 5] (4)"
                      Token: "Word Token"
                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(0, 4), match='word'>"
                      Whitespace: None
                    Phrase: "Word Token"
                  - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
                    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
                      IsIgnored: False
                      IterBegin: "[1, 6] (5)"
                      IterEnd: "[1, 9] (8)"
                      Token: "Number Token"
                      Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
                        Match: "<_sre.SRE_Match object; span=(5, 8), match='123'>"
                      Whitespace:
                        - 4
                        - 5
                    Phrase: "Number Token"
                IsComplete: True
              Phrase: "Word & Number"
          IsComplete: True
        Phrase: "{Word & Number, 0, None}"
      - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
        Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
          DataItems: []
          IsComplete: True
        Phrase: "{Word Token, 0, 1}"
    IsComplete: True
  Phrase: "[{Word & Number, 0, None}, {Word Token, 0, 1}]"
IterBegin: "[1, 1] (0)"
IterEnd: "[1, 9] (8)"
Success: True
