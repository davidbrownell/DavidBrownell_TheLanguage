# <class 'Original.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 1] (0)"
            IterEnd: "[1, 7] (6)"
            Token: "lower"
            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(0, 6), match='lower1'>"
            Whitespace: None
          Phrase: "lower"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[1, 8] (7)"
          IterEnd: "[1, 18] (17)"
          Token: "<comment>"
          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(7, 17), match='# Comment2'>"
          Whitespace:
            - 6
            - 7
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[1, 18] (17)"
            IterEnd: "[2, 1] (18)"
            Token: "Newline+"
            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 18
              Start: 17
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "[lower, Newline+]"
  Phrase: "([lower, Newline+] | [upper, Newline+])"
IterBegin: "[1, 1] (0)"
IterEnd: "[2, 1] (18)"
Success: True

# <class 'Original.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 1] (18)"
            IterEnd: "[2, 7] (24)"
            Token: "lower"
            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(18, 24), match='lower2'>"
            Whitespace: None
          Phrase: "lower"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[2, 7] (24)"
            IterEnd: "[3, 1] (25)"
            Token: "Newline+"
            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 25
              Start: 24
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "[lower, Newline+]"
  Phrase: "([lower, Newline+] | [upper, Newline+])"
IterBegin: "[2, 1] (18)"
IterEnd: "[3, 1] (25)"
Success: True

# <class 'Original.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[3, 1] (25)"
          IterEnd: "[3, 11] (35)"
          Token: "<comment>"
          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(25, 35), match='# Comment3'>"
          Whitespace: None
        - # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[3, 11] (35)"
          IterEnd: "[4, 1] (36)"
          Token: "Newline+"
          Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 36
            Start: 35
          Whitespace: None
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[4, 1] (36)"
            IterEnd: "[4, 7] (42)"
            Token: "lower"
            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(36, 42), match='lower3'>"
            Whitespace: None
          Phrase: "lower"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[4, 7] (42)"
            IterEnd: "[8, 1] (46)"
            Token: "Newline+"
            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 46
              Start: 42
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "[lower, Newline+]"
  Phrase: "([lower, Newline+] | [upper, Newline+])"
IterBegin: "[3, 1] (25)"
IterEnd: "[8, 1] (46)"
Success: True

# <class 'Original.Lexer.Components.Phrase.Phrase.LexResult'>
Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
  Data: # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
    Data: # <class 'Original.Lexer.Components.Phrase.Phrase.MultipleLexResultData'>
      DataItems:
        - # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[8, 5] (50)"
          IterEnd: "[8, 15] (60)"
          Token: "<comment>"
          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(50, 60), match='# Comment4'>"
          Whitespace:
            - 46
            - 50
        - # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[8, 15] (60)"
          IterEnd: "[9, 1] (61)"
          Token: "Newline+"
          Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 61
            Start: 60
          Whitespace: None
        - # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[9, 1] (61)"
          IterEnd: "[9, 11] (71)"
          Token: "<comment>"
          Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
            Match: "<_sre.SRE_Match object; span=(61, 71), match='# Comment5'>"
          Whitespace: None
        - # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
          IsIgnored: True
          IterBegin: "[9, 11] (71)"
          IterEnd: "[12, 1] (74)"
          Token: "Newline+"
          Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
            End: 74
            Start: 71
          Whitespace: None
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[12, 1] (74)"
            IterEnd: "[12, 7] (80)"
            Token: "lower"
            Value: # <class 'Original.Lexer.Components.Token.RegexToken.MatchResult'>
              Match: "<_sre.SRE_Match object; span=(74, 80), match='lower4'>"
            Whitespace: None
          Phrase: "lower"
        - # <class 'Original.Lexer.Components.Phrase.Phrase.StandardLexResultData'>
          Data: # <class 'Original.Lexer.Components.Phrase.Phrase.TokenLexResultData'>
            IsIgnored: False
            IterBegin: "[12, 7] (80)"
            IterEnd: "[13, 1] (81)"
            Token: "Newline+"
            Value: # <class 'Original.Lexer.Components.Token.NewlineToken.MatchResult'>
              End: 81
              Start: 80
            Whitespace: None
          Phrase: "Newline+"
      IsComplete: True
    Phrase: "[lower, Newline+]"
  Phrase: "([lower, Newline+] | [upper, Newline+])"
IterBegin: "[8, 1] (46)"
IterEnd: "[13, 1] (81)"
Success: True
