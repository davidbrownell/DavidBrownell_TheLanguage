# <class 'TheLanguage.Lexer.Components.AST.RootNode'>
Children:
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[1, 1] (0)"
                IterEnd: "[3, 7] (28)"
                Type: "Multi-line Content <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(0, 28), match='<<<!!!\\nSingle line 1.\\n!!!>>>'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[3, 7] (28)"
                IterEnd: "[5, 1] (30)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 30
                  Start: 28
                Whitespace: None
            Info: None
            IterBegin: "[1, 1] (0)"
            IterEnd: "[5, 1] (30)"
            Type: "Compiler Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[1, 1] (0)"
        IterEnd: "[5, 1] (30)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[1, 1] (0)"
    IterEnd: "[5, 1] (30)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[5, 1] (30)"
                    IterEnd: "[5, 6] (35)"
                    Type: "'class' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(30, 35), match='class'>"
                    Whitespace: None
                IterBegin: "[5, 1] (30)"
                IterEnd: "[5, 6] (35)"
                Type: "Class Type <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 7] (36)"
                IterEnd: "[5, 10] (39)"
                Type: "<type_name> <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(36, 39), match='Foo'>"
                Whitespace:
                  - 35
                  - 36
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 10] (39)"
                IterEnd: "[5, 11] (40)"
                Type: "'(' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(39, 40), match='('>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[5, 11] (40)"
                IterEnd: "[5, 12] (41)"
                Type: "')' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(40, 41), match=')'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                Children:
                  - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                    IsIgnored: False
                    IterBegin: "[5, 12] (41)"
                    IterEnd: "[5, 13] (42)"
                    Type: "':' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                    Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                      Match: "<_sre.SRE_Match object; span=(41, 42), match=':'>"
                    Whitespace: None
                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                    Children:
                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                        Children:
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[5, 13] (42)"
                            IterEnd: "[6, 1] (43)"
                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                              End: 43
                              Start: 42
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[6, 1] (43)"
                            IterEnd: "[6, 5] (47)"
                            Type: "Indent <class 'TheLanguage.Lexer.Components.Token.IndentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.IndentToken.MatchResult'>
                              End: 47
                              Start: 43
                              Value: 4
                            Whitespace: None
                          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                            Children:
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[6, 5] (47)"
                                            IterEnd: "[8, 11] (83)"
                                            Type: "Multi-line Content <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(47, 83), match='<<<!!!\\n    Single line 2.\\n    !!!>>>'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[8, 11] (83)"
                                            IterEnd: "[9, 1] (84)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 84
                                              Start: 83
                                            Whitespace: None
                                        Info: None
                                        IterBegin: "[6, 5] (47)"
                                        IterEnd: "[9, 1] (84)"
                                        Type: "Compiler Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[6, 5] (47)"
                                    IterEnd: "[9, 1] (84)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[6, 5] (47)"
                                IterEnd: "[9, 1] (84)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                              - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                Children:
                                  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                    Children:
                                      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
                                        Children:
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[9, 5] (88)"
                                            IterEnd: "[9, 9] (92)"
                                            Type: "'pass' <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                                              Match: "<_sre.SRE_Match object; span=(88, 92), match='pass'>"
                                            Whitespace: None
                                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                                            IsIgnored: False
                                            IterBegin: "[9, 9] (92)"
                                            IterEnd: "[11, 1] (94)"
                                            Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                                            Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                                              End: 94
                                              Start: 92
                                            Whitespace: None
                                        Info: # <class 'TheLanguage.Parser.Statements.PassStatementParserInfo.PassStatementParserInfo'>
                                          Regions: # <class 'types.PassStatementParserInfoRegions'>
                                            Self__: "[Ln 9, Col 5] -> [Ln 11, Col 1]"
                                        IterBegin: "[9, 5] (88)"
                                        IterEnd: "[11, 1] (94)"
                                        Type: "Pass Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                                    IterBegin: "[9, 5] (88)"
                                    IterEnd: "[11, 1] (94)"
                                    Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                                IterBegin: "[9, 5] (88)"
                                IterEnd: "[11, 1] (94)"
                                Type: "Statements <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
                            IterBegin: "[6, 5] (47)"
                            IterEnd: "[11, 1] (94)"
                            Type: "Repeat: {Statements, 1, None} <class 'TheLanguage.Lexer.Phrases.RepeatPhrase.RepeatPhrase'>"
                          - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                            IsIgnored: False
                            IterBegin: "[11, 1] (94)"
                            IterEnd: "[11, 1] (94)"
                            Type: "Dedent <class 'TheLanguage.Lexer.Components.Token.DedentToken'>"
                            Value: # <class 'TheLanguage.Lexer.Components.Token.DedentToken.MatchResult'>
                              {}
                            Whitespace: None
                        IterBegin: "[5, 13] (42)"
                        IterEnd: "[11, 1] (94)"
                        Type: "Multi-line <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
                    IterBegin: "[5, 13] (42)"
                    IterEnd: "[11, 1] (94)"
                    Type: "Or: (Multi-line, DynamicPhrasesType.Statements) <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
                IterBegin: "[5, 12] (41)"
                IterEnd: "[11, 1] (94)"
                Type: "Statements <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
            Info: # <class 'TheLanguage.Parser.Statements.ClassStatementParserInfo.ClassStatementParserInfo'>
              Base: None
              ClassModifier: "ClassModifier.immutable"
              ClassType: "ClassType.Class"
              Documentation: None
              Interfaces: None
              Mixins: None
              Name: "Foo"
              Regions: # <class 'types.ClassStatementParserInfoRegions'>
                Base: None
                ClassModifier: "[Ln 5, Col 1] -> [Ln 11, Col 1]"
                ClassType: "[Ln 5, Col 1] -> [Ln 5, Col 6]"
                Documentation: None
                Interfaces: None
                Mixins: None
                Name: "[Ln 5, Col 7] -> [Ln 5, Col 10]"
                Self__: "[Ln 5, Col 1] -> [Ln 11, Col 1]"
                Statements: "[Ln 5, Col 12] -> [Ln 11, Col 1]"
                Visibility: "[Ln 5, Col 1] -> [Ln 11, Col 1]"
              Statements:
                - # <class 'TheLanguage.Parser.Statements.PassStatementParserInfo.PassStatementParserInfo'>
                  Regions: # <class 'types.PassStatementParserInfoRegions'>
                    Self__: "[Ln 9, Col 5] -> [Ln 11, Col 1]"
              Visibility: "VisibilityModifier.private"
            IterBegin: "[5, 1] (30)"
            IterEnd: "[11, 1] (94)"
            Type: "Class Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[5, 1] (30)"
        IterEnd: "[11, 1] (94)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[5, 1] (30)"
    IterEnd: "[11, 1] (94)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
  - # <class 'TheLanguage.Lexer.Components.AST.Node'>
    Children:
      - # <class 'TheLanguage.Lexer.Components.AST.Node'>
        Children:
          - # <class 'TheLanguage.Lexer.Components.AST.Node'>
            Children:
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[11, 1] (94)"
                IterEnd: "[13, 7] (127)"
                Type: "Multi-line Content <class 'TheLanguage.Lexer.Components.Token.RegexToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.RegexToken.MatchResult'>
                  Match: "<_sre.SRE_Match object; span=(94, 127), match='<<<!!!\\nWith escape \\\\!!!>>>\\n!!!>>>'>"
                Whitespace: None
              - # <class 'TheLanguage.Lexer.Components.AST.Leaf'>
                IsIgnored: False
                IterBegin: "[13, 7] (127)"
                IterEnd: "[14, 1] (128)"
                Type: "Newline+ <class 'TheLanguage.Lexer.Components.Token.NewlineToken'>"
                Value: # <class 'TheLanguage.Lexer.Components.Token.NewlineToken.MatchResult'>
                  End: 128
                  Start: 127
                Whitespace: None
            Info: None
            IterBegin: "[11, 1] (94)"
            IterEnd: "[14, 1] (128)"
            Type: "Compiler Statement <class 'TheLanguage.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        IterBegin: "[11, 1] (94)"
        IterEnd: "[14, 1] (128)"
        Type: "0.0.1 Grammar <class 'TheLanguage.Lexer.Phrases.OrPhrase.OrPhrase'>"
    IterBegin: "[11, 1] (94)"
    IterEnd: "[14, 1] (128)"
    Type: "Dynamic Phrases <class 'TheLanguage.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
IterBegin: "[1, 1] (0)"
IterEnd: "[14, 1] (128)"
Type: "<None>"
