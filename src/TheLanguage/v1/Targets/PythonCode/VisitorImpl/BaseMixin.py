# ----------------------------------------------------------------------
# |
# |  BaseMixin.py
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2022-04-26 08:36:54
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2022
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
"""Contains the BaseMixin object"""

import os
import textwrap
import types

from contextlib import contextmanager
from io import StringIO
from typing import Dict, List, Set, Union

import CommonEnvironment

from CommonEnvironmentEx.Package import InitRelativeImports

# ----------------------------------------------------------------------
_script_fullpath                            = CommonEnvironment.ThisFullpath()
_script_dir, _script_name                   = os.path.split(_script_fullpath)
# ----------------------------------------------------------------------

with InitRelativeImports():
    from ....Lexer.Location import Location

    from ....Parser.Parser import RootParserInfo, TranslationUnitRegion

    from ....Parser.ParserInfos.ParserInfo import ParserInfo

    from ....Parser.ParserInfos.Common.ClassModifier import ClassModifier
    from ....Parser.ParserInfos.Common.MethodModifier import MethodModifier
    from ....Parser.ParserInfos.Common.MutabilityModifier import MutabilityModifier
    from ....Parser.ParserInfos.Common.VisibilityModifier import VisibilityModifier

    from ....Parser.ParserInfos.Statements.IfStatementParserInfo import IfStatementParserInfo, StatementParserInfo


# ----------------------------------------------------------------------
class BaseMixin(object):
    """Base class for visitation; implements functionality used by phrase-specific implementations"""

    # ----------------------------------------------------------------------
    def __init__(self):
        imports: Set[str] = set()

        imports.add("from v1.Lexer.Location import Location")
        imports.add("from v1.Parser.ParserInfos.ParserInfo import ParserInfoType")
        imports.add("from v1.Parser.TranslationUnitRegion import TranslationUnitRegion")

        for common_import in [
            "ClassModifier",
            "MethodModifier",
            "MutabilityModifier",
            "VisibilityModifier",
        ]:
            imports.add(
                "from v1.Parser.ParserInfos.Common.{common_import} import {common_import}".format(
                    common_import=common_import,
                ),
            )

        self._imports                       = imports
        self._stream                        = StringIO()

        self._region_id_lookup: Dict[str, str]          = {}
        self._statement_id_lookup: Dict[TranslationUnitRegion, str]    = {}

    # ----------------------------------------------------------------------
    def __getattr__(
        self,
        name: str,
    ):
        index = name.find("ParserInfo__")
        if index != -1 and index + len("ParserInfo__") + 1 < len(name):
            return types.MethodType(self.__class__._DefaultDetailMethod, self)  # pylint: disable=protected-access

        raise AttributeError(name)

    # ----------------------------------------------------------------------
    def GetContent(self) -> str:
        return textwrap.dedent(
            """\
            # ----------------------------------------------------------------------
            # This code was automatically generated by the PythonTarget. Any changes made to this
            # file will be overwritten during the next generation!
            # ----------------------------------------------------------------------

            {imports}


            # ----------------------------------------------------------------------
            {regions}


            # ----------------------------------------------------------------------
            {content}
            """,
        ).format(
            imports="\n".join(sorted(self._imports)),
            content="\n".join(line.rstrip() for line in self._stream.getvalue().rstrip().splitlines()),
            regions="\n".join("{} = {}".format(value, key) for key, value in self._region_id_lookup.items()),
        )

    # ----------------------------------------------------------------------
    @staticmethod
    @contextmanager
    def OnPhrase(*args, **kwargs):
        yield

    # ----------------------------------------------------------------------
    @contextmanager
    def OnRootParserInfo(
        self,
        parser_info: RootParserInfo,
    ):
        if parser_info.documentation is not None:
            self._stream.write(
                textwrap.dedent(
                    '''
                    """\\
                    {}
                    """

                    ''',
                ).format(parser_info.documentation),
            )

        yield

        self._imports.add("from v1.Parser.ParserInfos.ParserInfo import RootParserInfo")

        self._stream.write(
            textwrap.dedent(
                """\
                root_parser_info = RootParserInfo.Create(
                    regions=[{self_region}, {statements_region}, {documentation_region}],
                    statements={statements},
                    documentation={documentation},
                )

                """,
            ).format(
                self_region=self._ToString(parser_info.regions__.self__),
                statements_region=self._ToString(parser_info.regions__.statements),
                documentation_region=self._ToString(parser_info.regions__.documentation),
                statements=self._ToString(parser_info.statements),
                documentation=self._ToString(parser_info.documentation),
            ),
        )

    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    # ----------------------------------------------------------------------
    def _CreateStatementName(
        self,
        parser_info: ParserInfo,
    ) -> str:
        potential_statement_id = self._statement_id_lookup.get(parser_info.regions__.self__, None)
        if potential_statement_id is not None:
            return potential_statement_id

        statement_id = "statement_{:0>6}".format(len(self._statement_id_lookup))

        self._statement_id_lookup[parser_info.regions__.self__] = statement_id

        return statement_id

    # ----------------------------------------------------------------------
    def _ToString(
        self,
        value: Union[
            None,
            str,
            bool,
            ClassModifier,
            MethodModifier,
            MutabilityModifier,
            VisibilityModifier,
            Location,
            TranslationUnitRegion,
            ParserInfo,
            List[ParserInfo],
        ],
    ) -> str:
        if value is None:
            return "None"
        elif isinstance(value, str):
            return '"{}"'.format(value.replace("\n", "\\n"))
        elif isinstance(value, bool):
            return str(value)
        elif isinstance(value, ClassModifier):
            return "ClassModifier.{}".format(value.name)
        elif isinstance(value, MethodModifier):
            return "MethodModifier.{}".format(value.name)
        elif isinstance(value, MutabilityModifier):
            return "MutabilityModifier.{}".format(value.name)
        elif isinstance(value, VisibilityModifier):
            return "VisibilityModifier.{}".format(value.name)
        elif isinstance(value, Location):
            return "Location(line={}, column={})".format(value.line, value.column)
        elif isinstance(value, TranslationUnitRegion):
            region_statement = "TranslationUnitRegion(begin={}, end={})".format(
                self._ToString(value.begin),
                self._ToString(value.end),
            )

            potential_var_name = self._region_id_lookup.get(region_statement, None)
            if potential_var_name is not None:
                return potential_var_name

            var_name = "tu_region_{:0>6}".format(len(self._region_id_lookup))

            self._region_id_lookup[region_statement] = var_name

            return var_name
        elif isinstance(value, ParserInfo):
            return self._CreateStatementName(value)
        elif isinstance(value, list):
            return "[{}, ]".format(", ".join(self._ToString(item) for item in value))

        assert False, value  # pragma: no cover
        return None  # pragma: no cover

    # ----------------------------------------------------------------------
    def _DefaultDetailMethod(
        self,
        parser_info_or_infos: Union[ParserInfo, List[ParserInfo]],
    ):
        if isinstance(parser_info_or_infos, list):
            for parser_info in parser_info_or_infos:
                parser_info.Accept(self)
        else:
            parser_info_or_infos.Accept(self)
