# ----------------------------------------------------------------------
# This code was automatically generated by the PythonTarget. Any changes made to this
# file will be overwritten during the next generation!
# ----------------------------------------------------------------------

from v1.Lexer.Location import Location
from v1.Parser.MiniLanguage.Types.BooleanType import BooleanType
from v1.Parser.MiniLanguage.Types.CustomType import CustomType
from v1.Parser.MiniLanguage.Types.NumberType import NumberType
from v1.Parser.MiniLanguage.Types.StringType import StringType
from v1.Parser.ParserInfos.Common.ClassModifier import ClassModifier
from v1.Parser.ParserInfos.Common.ConstraintParametersParserInfo import ConstraintParameterParserInfo
from v1.Parser.ParserInfos.Common.ConstraintParametersParserInfo import ConstraintParametersParserInfo
from v1.Parser.ParserInfos.Common.FuncArgumentsParserInfo import FuncArgumentParserInfo
from v1.Parser.ParserInfos.Common.FuncArgumentsParserInfo import FuncArgumentsParserInfo
from v1.Parser.ParserInfos.Common.FuncParametersParserInfo import FuncParameterParserInfo
from v1.Parser.ParserInfos.Common.FuncParametersParserInfo import FuncParametersParserInfo
from v1.Parser.ParserInfos.Common.MethodModifier import MethodModifier
from v1.Parser.ParserInfos.Common.MutabilityModifier import MutabilityModifier
from v1.Parser.ParserInfos.Common.TemplateParametersParserInfo import TemplateParametersParserInfo
from v1.Parser.ParserInfos.Common.TemplateParametersParserInfo import TemplateTypeParameterParserInfo
from v1.Parser.ParserInfos.Common.VisibilityModifier import VisibilityModifier
from v1.Parser.ParserInfos.Expressions.BinaryExpressionParserInfo import BinaryExpressionParserInfo, OperatorType as BinaryExpressionOperatorType
from v1.Parser.ParserInfos.Expressions.CallExpressionParserInfo import CallExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.FuncOrTypeExpressionParserInfo import FuncOrTypeExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.NoneExpressionParserInfo import NoneExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.TypeCheckExpressionParserInfo import TypeCheckExpressionParserInfo, OperatorType as TypeCheckExpressionParserInfoOperatorType
from v1.Parser.ParserInfos.Expressions.VariableExpressionParserInfo import VariableExpressionParserInfo
from v1.Parser.ParserInfos.Expressions.VariantExpressionParserInfo import VariantExpressionParserInfo
from v1.Parser.ParserInfos.ParserInfo import ParserInfoType
from v1.Parser.ParserInfos.ParserInfo import RootParserInfo
from v1.Parser.ParserInfos.Statements.ClassCapabilities.ConceptCapabilities import ConceptCapabilities
from v1.Parser.ParserInfos.Statements.ClassStatementParserInfo import ClassStatementParserInfo
from v1.Parser.ParserInfos.Statements.FuncDefinitionStatementParserInfo import FuncDefinitionStatementParserInfo, OperatorType as FuncDefinitionStatementParserInfoOperatorType
from v1.Parser.ParserInfos.Statements.FuncInvocationStatementParserInfo import FuncInvocationStatementParserInfo
from v1.Parser.ParserInfos.Statements.SpecialMethodStatementParserInfo import SpecialMethodStatementParserInfo, SpecialMethodType
from v1.Parser.Region import Region


# ----------------------------------------------------------------------
region_000000 = Region(begin=Location(line=20, column=6), end=Location(line=20, column=9))
region_000001 = Region(begin=Location(line=20, column=12), end=Location(line=20, column=16))
region_000002 = Region(begin=Location(line=20, column=5), end=Location(line=20, column=17))
region_000003 = Region(begin=Location(line=20, column=31), end=Location(line=20, column=35))
region_000004 = Region(begin=Location(line=20, column=5), end=Location(line=20, column=35))
region_000005 = Region(begin=Location(line=20, column=18), end=Location(line=20, column=28))
region_000006 = Region(begin=Location(line=21, column=6), end=Location(line=21, column=9))
region_000007 = Region(begin=Location(line=21, column=12), end=Location(line=21, column=16))
region_000008 = Region(begin=Location(line=21, column=5), end=Location(line=21, column=17))
region_000009 = Region(begin=Location(line=21, column=31), end=Location(line=21, column=35))
region_000010 = Region(begin=Location(line=21, column=5), end=Location(line=21, column=35))
region_000011 = Region(begin=Location(line=21, column=18), end=Location(line=21, column=28))
region_000012 = Region(begin=Location(line=19, column=30), end=Location(line=22, column=2))
region_000013 = Region(begin=Location(line=20, column=5), end=Location(line=21, column=36))
region_000014 = Region(begin=Location(line=24, column=9), end=Location(line=24, column=17))
region_000015 = Region(begin=Location(line=24, column=18), end=Location(line=24, column=28))
region_000016 = Region(begin=Location(line=24, column=32), end=Location(line=24, column=36))
region_000017 = Region(begin=Location(line=24, column=18), end=Location(line=24, column=36))
region_000018 = Region(begin=Location(line=24, column=29), end=Location(line=24, column=31))
region_000019 = Region(begin=Location(line=24, column=40), end=Location(line=24, column=50))
region_000020 = Region(begin=Location(line=24, column=54), end=Location(line=24, column=58))
region_000021 = Region(begin=Location(line=24, column=40), end=Location(line=24, column=58))
region_000022 = Region(begin=Location(line=24, column=51), end=Location(line=24, column=53))
region_000023 = Region(begin=Location(line=24, column=62), end=Location(line=24, column=72))
region_000024 = Region(begin=Location(line=24, column=76), end=Location(line=24, column=86))
region_000025 = Region(begin=Location(line=24, column=62), end=Location(line=24, column=86))
region_000026 = Region(begin=Location(line=24, column=73), end=Location(line=24, column=75))
region_000027 = Region(begin=Location(line=24, column=40), end=Location(line=24, column=86))
region_000028 = Region(begin=Location(line=24, column=59), end=Location(line=24, column=61))
region_000029 = Region(begin=Location(line=24, column=18), end=Location(line=24, column=86))
region_000030 = Region(begin=Location(line=24, column=37), end=Location(line=24, column=39))
region_000031 = Region(begin=Location(line=24, column=17), end=Location(line=24, column=87))
region_000032 = Region(begin=Location(line=24, column=9), end=Location(line=24, column=87))
region_000033 = Region(begin=Location(line=24, column=9), end=Location(line=26, column=1))
region_000034 = Region(begin=Location(line=23, column=5), end=Location(line=26, column=5))
region_000035 = Region(begin=Location(line=23, column=5), end=Location(line=23, column=25))
region_000036 = Region(begin=Location(line=23, column=27), end=Location(line=26, column=5))
region_000037 = Region(begin=Location(line=26, column=21), end=Location(line=26, column=33))
region_000038 = Region(begin=Location(line=26, column=21), end=Location(line=26, column=29))
region_000039 = Region(begin=Location(line=26, column=30), end=Location(line=26, column=33))
region_000040 = Region(begin=Location(line=26, column=51), end=Location(line=26, column=59))
region_000041 = Region(begin=Location(line=26, column=50), end=Location(line=26, column=60))
region_000042 = Region(begin=Location(line=26, column=61), end=Location(line=26, column=73))
region_000043 = Region(begin=Location(line=26, column=61), end=Location(line=26, column=69))
region_000044 = Region(begin=Location(line=26, column=70), end=Location(line=26, column=73))
region_000045 = Region(begin=Location(line=26, column=61), end=Location(line=26, column=81))
region_000046 = Region(begin=Location(line=26, column=74), end=Location(line=26, column=81))
region_000047 = Region(begin=Location(line=26, column=60), end=Location(line=26, column=82))
region_000048 = Region(begin=Location(line=26, column=5), end=Location(line=27, column=1))
region_000049 = Region(begin=Location(line=26, column=14), end=Location(line=26, column=20))
region_000050 = Region(begin=Location(line=26, column=34), end=Location(line=26, column=50))
region_000051 = Region(begin=Location(line=26, column=6), end=Location(line=26, column=12))
region_000052 = Region(begin=Location(line=27, column=32), end=Location(line=27, column=40))
region_000053 = Region(begin=Location(line=27, column=31), end=Location(line=27, column=41))
region_000054 = Region(begin=Location(line=27, column=42), end=Location(line=27, column=54))
region_000055 = Region(begin=Location(line=27, column=42), end=Location(line=27, column=50))
region_000056 = Region(begin=Location(line=27, column=51), end=Location(line=27, column=54))
region_000057 = Region(begin=Location(line=27, column=42), end=Location(line=27, column=62))
region_000058 = Region(begin=Location(line=27, column=55), end=Location(line=27, column=62))
region_000059 = Region(begin=Location(line=27, column=41), end=Location(line=27, column=63))
region_000060 = Region(begin=Location(line=27, column=5), end=Location(line=29, column=1))
region_000061 = Region(begin=Location(line=27, column=5), end=Location(line=27, column=11))
region_000062 = Region(begin=Location(line=27, column=64), end=Location(line=27, column=73))
region_000063 = Region(begin=Location(line=27, column=17), end=Location(line=27, column=31))
region_000064 = Region(begin=Location(line=29, column=29), end=Location(line=29, column=37))
region_000065 = Region(begin=Location(line=29, column=28), end=Location(line=29, column=38))
region_000066 = Region(begin=Location(line=29, column=39), end=Location(line=29, column=51))
region_000067 = Region(begin=Location(line=29, column=39), end=Location(line=29, column=47))
region_000068 = Region(begin=Location(line=29, column=48), end=Location(line=29, column=51))
region_000069 = Region(begin=Location(line=29, column=39), end=Location(line=29, column=59))
region_000070 = Region(begin=Location(line=29, column=52), end=Location(line=29, column=59))
region_000071 = Region(begin=Location(line=29, column=38), end=Location(line=29, column=60))
region_000072 = Region(begin=Location(line=29, column=5), end=Location(line=31, column=1))
region_000073 = Region(begin=Location(line=29, column=5), end=Location(line=29, column=11))
region_000074 = Region(begin=Location(line=29, column=61), end=Location(line=29, column=70))
region_000075 = Region(begin=Location(line=29, column=17), end=Location(line=29, column=28))
region_000076 = Region(begin=Location(line=31, column=12), end=Location(line=31, column=24))
region_000077 = Region(begin=Location(line=31, column=12), end=Location(line=31, column=20))
region_000078 = Region(begin=Location(line=31, column=21), end=Location(line=31, column=24))
region_000079 = Region(begin=Location(line=31, column=5), end=Location(line=33, column=1))
region_000080 = Region(begin=Location(line=31, column=5), end=Location(line=31, column=11))
region_000081 = Region(begin=Location(line=31, column=38), end=Location(line=31, column=47))
region_000082 = Region(begin=Location(line=31, column=25), end=Location(line=31, column=35))
region_000083 = Region(begin=Location(line=31, column=35), end=Location(line=31, column=37))
region_000084 = Region(begin=Location(line=33, column=12), end=Location(line=33, column=20))
region_000085 = Region(begin=Location(line=33, column=12), end=Location(line=33, column=16))
region_000086 = Region(begin=Location(line=33, column=17), end=Location(line=33, column=20))
region_000087 = Region(begin=Location(line=33, column=5), end=Location(line=34, column=1))
region_000088 = Region(begin=Location(line=33, column=5), end=Location(line=33, column=11))
region_000089 = Region(begin=Location(line=33, column=34), end=Location(line=33, column=43))
region_000090 = Region(begin=Location(line=33, column=21), end=Location(line=33, column=31))
region_000091 = Region(begin=Location(line=33, column=31), end=Location(line=33, column=33))
region_000092 = Region(begin=Location(line=34, column=12), end=Location(line=34, column=19))
region_000093 = Region(begin=Location(line=34, column=12), end=Location(line=34, column=15))
region_000094 = Region(begin=Location(line=34, column=16), end=Location(line=34, column=19))
region_000095 = Region(begin=Location(line=34, column=5), end=Location(line=36, column=1))
region_000096 = Region(begin=Location(line=34, column=5), end=Location(line=34, column=11))
region_000097 = Region(begin=Location(line=34, column=36), end=Location(line=34, column=45))
region_000098 = Region(begin=Location(line=34, column=20), end=Location(line=34, column=33))
region_000099 = Region(begin=Location(line=34, column=33), end=Location(line=34, column=35))
region_000100 = Region(begin=Location(line=36, column=21), end=Location(line=36, column=38))
region_000101 = Region(begin=Location(line=36, column=21), end=Location(line=36, column=34))
region_000102 = Region(begin=Location(line=36, column=35), end=Location(line=36, column=38))
region_000103 = Region(begin=Location(line=36, column=51), end=Location(line=36, column=69))
region_000104 = Region(begin=Location(line=36, column=51), end=Location(line=36, column=59))
region_000105 = Region(begin=Location(line=36, column=60), end=Location(line=36, column=69))
region_000106 = Region(begin=Location(line=36, column=51), end=Location(line=36, column=74))
region_000107 = Region(begin=Location(line=36, column=70), end=Location(line=36, column=74))
region_000108 = Region(begin=Location(line=36, column=76), end=Location(line=36, column=92))
region_000109 = Region(begin=Location(line=36, column=76), end=Location(line=36, column=82))
region_000110 = Region(begin=Location(line=36, column=83), end=Location(line=36, column=92))
region_000111 = Region(begin=Location(line=36, column=76), end=Location(line=36, column=97))
region_000112 = Region(begin=Location(line=36, column=93), end=Location(line=36, column=97))
region_000113 = Region(begin=Location(line=36, column=50), end=Location(line=36, column=98))
region_000114 = Region(begin=Location(line=36, column=51), end=Location(line=36, column=97))
region_000115 = Region(begin=Location(line=36, column=5), end=Location(line=38, column=1))
region_000116 = Region(begin=Location(line=36, column=14), end=Location(line=36, column=20))
region_000117 = Region(begin=Location(line=36, column=39), end=Location(line=36, column=50))
region_000118 = Region(begin=Location(line=36, column=6), end=Location(line=36, column=12))
region_000119 = Region(begin=Location(line=38, column=12), end=Location(line=38, column=20))
region_000120 = Region(begin=Location(line=38, column=12), end=Location(line=38, column=16))
region_000121 = Region(begin=Location(line=38, column=17), end=Location(line=38, column=20))
region_000122 = Region(begin=Location(line=38, column=31), end=Location(line=38, column=44))
region_000123 = Region(begin=Location(line=38, column=31), end=Location(line=38, column=34))
region_000124 = Region(begin=Location(line=38, column=35), end=Location(line=38, column=44))
region_000125 = Region(begin=Location(line=38, column=31), end=Location(line=38, column=49))
region_000126 = Region(begin=Location(line=38, column=45), end=Location(line=38, column=49))
region_000127 = Region(begin=Location(line=38, column=30), end=Location(line=38, column=50))
region_000128 = Region(begin=Location(line=38, column=5), end=Location(line=39, column=1))
region_000129 = Region(begin=Location(line=38, column=5), end=Location(line=38, column=11))
region_000130 = Region(begin=Location(line=38, column=51), end=Location(line=38, column=60))
region_000131 = Region(begin=Location(line=38, column=21), end=Location(line=38, column=30))
region_000132 = Region(begin=Location(line=39, column=12), end=Location(line=39, column=20))
region_000133 = Region(begin=Location(line=39, column=12), end=Location(line=39, column=16))
region_000134 = Region(begin=Location(line=39, column=17), end=Location(line=39, column=20))
region_000135 = Region(begin=Location(line=39, column=34), end=Location(line=39, column=47))
region_000136 = Region(begin=Location(line=39, column=34), end=Location(line=39, column=37))
region_000137 = Region(begin=Location(line=39, column=38), end=Location(line=39, column=47))
region_000138 = Region(begin=Location(line=39, column=34), end=Location(line=39, column=52))
region_000139 = Region(begin=Location(line=39, column=48), end=Location(line=39, column=52))
region_000140 = Region(begin=Location(line=39, column=33), end=Location(line=39, column=53))
region_000141 = Region(begin=Location(line=39, column=5), end=Location(line=40, column=1))
region_000142 = Region(begin=Location(line=39, column=5), end=Location(line=39, column=11))
region_000143 = Region(begin=Location(line=39, column=54), end=Location(line=39, column=63))
region_000144 = Region(begin=Location(line=39, column=21), end=Location(line=39, column=33))
region_000145 = Region(begin=Location(line=40, column=12), end=Location(line=40, column=20))
region_000146 = Region(begin=Location(line=40, column=12), end=Location(line=40, column=16))
region_000147 = Region(begin=Location(line=40, column=17), end=Location(line=40, column=20))
region_000148 = Region(begin=Location(line=40, column=30), end=Location(line=40, column=43))
region_000149 = Region(begin=Location(line=40, column=30), end=Location(line=40, column=33))
region_000150 = Region(begin=Location(line=40, column=34), end=Location(line=40, column=43))
region_000151 = Region(begin=Location(line=40, column=30), end=Location(line=40, column=48))
region_000152 = Region(begin=Location(line=40, column=44), end=Location(line=40, column=48))
region_000153 = Region(begin=Location(line=40, column=29), end=Location(line=40, column=49))
region_000154 = Region(begin=Location(line=40, column=5), end=Location(line=41, column=1))
region_000155 = Region(begin=Location(line=40, column=5), end=Location(line=40, column=11))
region_000156 = Region(begin=Location(line=40, column=50), end=Location(line=40, column=59))
region_000157 = Region(begin=Location(line=40, column=21), end=Location(line=40, column=29))
region_000158 = Region(begin=Location(line=41, column=12), end=Location(line=41, column=20))
region_000159 = Region(begin=Location(line=41, column=12), end=Location(line=41, column=16))
region_000160 = Region(begin=Location(line=41, column=17), end=Location(line=41, column=20))
region_000161 = Region(begin=Location(line=41, column=35), end=Location(line=41, column=48))
region_000162 = Region(begin=Location(line=41, column=35), end=Location(line=41, column=38))
region_000163 = Region(begin=Location(line=41, column=39), end=Location(line=41, column=48))
region_000164 = Region(begin=Location(line=41, column=35), end=Location(line=41, column=53))
region_000165 = Region(begin=Location(line=41, column=49), end=Location(line=41, column=53))
region_000166 = Region(begin=Location(line=41, column=34), end=Location(line=41, column=54))
region_000167 = Region(begin=Location(line=41, column=5), end=Location(line=42, column=1))
region_000168 = Region(begin=Location(line=41, column=5), end=Location(line=41, column=11))
region_000169 = Region(begin=Location(line=41, column=55), end=Location(line=41, column=64))
region_000170 = Region(begin=Location(line=41, column=21), end=Location(line=41, column=34))
region_000171 = Region(begin=Location(line=42, column=12), end=Location(line=42, column=20))
region_000172 = Region(begin=Location(line=42, column=12), end=Location(line=42, column=16))
region_000173 = Region(begin=Location(line=42, column=17), end=Location(line=42, column=20))
region_000174 = Region(begin=Location(line=42, column=33), end=Location(line=42, column=46))
region_000175 = Region(begin=Location(line=42, column=33), end=Location(line=42, column=36))
region_000176 = Region(begin=Location(line=42, column=37), end=Location(line=42, column=46))
region_000177 = Region(begin=Location(line=42, column=33), end=Location(line=42, column=51))
region_000178 = Region(begin=Location(line=42, column=47), end=Location(line=42, column=51))
region_000179 = Region(begin=Location(line=42, column=32), end=Location(line=42, column=52))
region_000180 = Region(begin=Location(line=42, column=5), end=Location(line=43, column=1))
region_000181 = Region(begin=Location(line=42, column=5), end=Location(line=42, column=11))
region_000182 = Region(begin=Location(line=42, column=53), end=Location(line=42, column=62))
region_000183 = Region(begin=Location(line=42, column=21), end=Location(line=42, column=32))
region_000184 = Region(begin=Location(line=43, column=12), end=Location(line=43, column=20))
region_000185 = Region(begin=Location(line=43, column=12), end=Location(line=43, column=16))
region_000186 = Region(begin=Location(line=43, column=17), end=Location(line=43, column=20))
region_000187 = Region(begin=Location(line=43, column=38), end=Location(line=43, column=51))
region_000188 = Region(begin=Location(line=43, column=38), end=Location(line=43, column=41))
region_000189 = Region(begin=Location(line=43, column=42), end=Location(line=43, column=51))
region_000190 = Region(begin=Location(line=43, column=38), end=Location(line=43, column=56))
region_000191 = Region(begin=Location(line=43, column=52), end=Location(line=43, column=56))
region_000192 = Region(begin=Location(line=43, column=37), end=Location(line=43, column=57))
region_000193 = Region(begin=Location(line=43, column=5), end=Location(line=45, column=1))
region_000194 = Region(begin=Location(line=43, column=5), end=Location(line=43, column=11))
region_000195 = Region(begin=Location(line=43, column=58), end=Location(line=43, column=67))
region_000196 = Region(begin=Location(line=43, column=21), end=Location(line=43, column=37))
region_000197 = Region(begin=Location(line=45, column=12), end=Location(line=45, column=24))
region_000198 = Region(begin=Location(line=45, column=12), end=Location(line=45, column=20))
region_000199 = Region(begin=Location(line=45, column=21), end=Location(line=45, column=24))
region_000200 = Region(begin=Location(line=45, column=5), end=Location(line=46, column=1))
region_000201 = Region(begin=Location(line=45, column=5), end=Location(line=45, column=11))
region_000202 = Region(begin=Location(line=45, column=41), end=Location(line=45, column=50))
region_000203 = Region(begin=Location(line=45, column=25), end=Location(line=45, column=38))
region_000204 = Region(begin=Location(line=45, column=38), end=Location(line=45, column=40))
region_000205 = Region(begin=Location(line=46, column=12), end=Location(line=46, column=24))
region_000206 = Region(begin=Location(line=46, column=12), end=Location(line=46, column=20))
region_000207 = Region(begin=Location(line=46, column=21), end=Location(line=46, column=24))
region_000208 = Region(begin=Location(line=46, column=5), end=Location(line=48, column=1))
region_000209 = Region(begin=Location(line=46, column=5), end=Location(line=46, column=11))
region_000210 = Region(begin=Location(line=46, column=41), end=Location(line=46, column=50))
region_000211 = Region(begin=Location(line=46, column=25), end=Location(line=46, column=38))
region_000212 = Region(begin=Location(line=46, column=38), end=Location(line=46, column=40))
region_000213 = Region(begin=Location(line=48, column=12), end=Location(line=48, column=24))
region_000214 = Region(begin=Location(line=48, column=12), end=Location(line=48, column=20))
region_000215 = Region(begin=Location(line=48, column=21), end=Location(line=48, column=24))
region_000216 = Region(begin=Location(line=48, column=37), end=Location(line=48, column=50))
region_000217 = Region(begin=Location(line=48, column=37), end=Location(line=48, column=40))
region_000218 = Region(begin=Location(line=48, column=41), end=Location(line=48, column=50))
region_000219 = Region(begin=Location(line=48, column=37), end=Location(line=48, column=58))
region_000220 = Region(begin=Location(line=48, column=51), end=Location(line=48, column=58))
region_000221 = Region(begin=Location(line=48, column=36), end=Location(line=48, column=59))
region_000222 = Region(begin=Location(line=48, column=5), end=Location(line=49, column=1))
region_000223 = Region(begin=Location(line=48, column=5), end=Location(line=48, column=11))
region_000224 = Region(begin=Location(line=48, column=60), end=Location(line=48, column=69))
region_000225 = Region(begin=Location(line=48, column=25), end=Location(line=48, column=36))
region_000226 = Region(begin=Location(line=49, column=12), end=Location(line=49, column=24))
region_000227 = Region(begin=Location(line=49, column=12), end=Location(line=49, column=20))
region_000228 = Region(begin=Location(line=49, column=21), end=Location(line=49, column=24))
region_000229 = Region(begin=Location(line=49, column=39), end=Location(line=49, column=52))
region_000230 = Region(begin=Location(line=49, column=39), end=Location(line=49, column=42))
region_000231 = Region(begin=Location(line=49, column=43), end=Location(line=49, column=52))
region_000232 = Region(begin=Location(line=49, column=39), end=Location(line=49, column=63))
region_000233 = Region(begin=Location(line=49, column=53), end=Location(line=49, column=63))
region_000234 = Region(begin=Location(line=49, column=38), end=Location(line=49, column=64))
region_000235 = Region(begin=Location(line=49, column=5), end=Location(line=50, column=1))
region_000236 = Region(begin=Location(line=49, column=5), end=Location(line=49, column=11))
region_000237 = Region(begin=Location(line=49, column=65), end=Location(line=49, column=74))
region_000238 = Region(begin=Location(line=49, column=25), end=Location(line=49, column=38))
region_000239 = Region(begin=Location(line=50, column=12), end=Location(line=50, column=24))
region_000240 = Region(begin=Location(line=50, column=12), end=Location(line=50, column=20))
region_000241 = Region(begin=Location(line=50, column=21), end=Location(line=50, column=24))
region_000242 = Region(begin=Location(line=50, column=36), end=Location(line=50, column=49))
region_000243 = Region(begin=Location(line=50, column=36), end=Location(line=50, column=39))
region_000244 = Region(begin=Location(line=50, column=40), end=Location(line=50, column=49))
region_000245 = Region(begin=Location(line=50, column=36), end=Location(line=50, column=58))
region_000246 = Region(begin=Location(line=50, column=50), end=Location(line=50, column=58))
region_000247 = Region(begin=Location(line=50, column=35), end=Location(line=50, column=59))
region_000248 = Region(begin=Location(line=50, column=5), end=Location(line=52, column=1))
region_000249 = Region(begin=Location(line=50, column=5), end=Location(line=50, column=11))
region_000250 = Region(begin=Location(line=50, column=60), end=Location(line=50, column=69))
region_000251 = Region(begin=Location(line=50, column=25), end=Location(line=50, column=35))
region_000252 = Region(begin=Location(line=52, column=12), end=Location(line=52, column=24))
region_000253 = Region(begin=Location(line=52, column=12), end=Location(line=52, column=20))
region_000254 = Region(begin=Location(line=52, column=21), end=Location(line=52, column=24))
region_000255 = Region(begin=Location(line=52, column=34), end=Location(line=52, column=47))
region_000256 = Region(begin=Location(line=52, column=34), end=Location(line=52, column=37))
region_000257 = Region(begin=Location(line=52, column=38), end=Location(line=52, column=47))
region_000258 = Region(begin=Location(line=52, column=34), end=Location(line=52, column=53))
region_000259 = Region(begin=Location(line=52, column=48), end=Location(line=52, column=53))
region_000260 = Region(begin=Location(line=52, column=33), end=Location(line=52, column=54))
region_000261 = Region(begin=Location(line=52, column=5), end=Location(line=53, column=1))
region_000262 = Region(begin=Location(line=52, column=5), end=Location(line=52, column=11))
region_000263 = Region(begin=Location(line=52, column=55), end=Location(line=52, column=64))
region_000264 = Region(begin=Location(line=52, column=25), end=Location(line=52, column=33))
region_000265 = Region(begin=Location(line=53, column=12), end=Location(line=53, column=24))
region_000266 = Region(begin=Location(line=53, column=12), end=Location(line=53, column=20))
region_000267 = Region(begin=Location(line=53, column=21), end=Location(line=53, column=24))
region_000268 = Region(begin=Location(line=53, column=39), end=Location(line=53, column=52))
region_000269 = Region(begin=Location(line=53, column=39), end=Location(line=53, column=42))
region_000270 = Region(begin=Location(line=53, column=43), end=Location(line=53, column=52))
region_000271 = Region(begin=Location(line=53, column=39), end=Location(line=53, column=58))
region_000272 = Region(begin=Location(line=53, column=53), end=Location(line=53, column=58))
region_000273 = Region(begin=Location(line=53, column=38), end=Location(line=53, column=59))
region_000274 = Region(begin=Location(line=53, column=5), end=Location(line=54, column=1))
region_000275 = Region(begin=Location(line=53, column=5), end=Location(line=53, column=11))
region_000276 = Region(begin=Location(line=53, column=60), end=Location(line=53, column=69))
region_000277 = Region(begin=Location(line=53, column=25), end=Location(line=53, column=38))
region_000278 = Region(begin=Location(line=19, column=1), end=Location(line=54, column=1))
region_000279 = Region(begin=Location(line=19, column=1), end=Location(line=19, column=7))
region_000280 = Region(begin=Location(line=19, column=8), end=Location(line=19, column=17))
region_000281 = Region(begin=Location(line=19, column=26), end=Location(line=19, column=29))
region_000282 = Region(begin=Location(line=22, column=2), end=Location(line=54, column=1))
region_000283 = Region(begin=Location(line=1, column=1), end=Location(line=54, column=1))


# ----------------------------------------------------------------------
statement_000000 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000000, region_000000, None],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000001 = NoneExpressionParserInfo.Create(
    regions=[region_000001],
)

statement_000002 = VariantExpressionParserInfo.Create(
    regions=[region_000002, None],
    types=[statement_000000, statement_000001, ],
    mutability_modifier=None,
)

statement_000003 = NoneExpressionParserInfo.Create(
    regions=[region_000003],
)

statement_000004 = ConstraintParameterParserInfo.Create(
    regions=[region_000004, region_000005],
    type=statement_000002,
    name="min_value!",
    default_value=statement_000003,
)

statement_000005 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000006, region_000006, None],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000006 = NoneExpressionParserInfo.Create(
    regions=[region_000007],
)

statement_000007 = VariantExpressionParserInfo.Create(
    regions=[region_000008, None],
    types=[statement_000005, statement_000006, ],
    mutability_modifier=None,
)

statement_000008 = NoneExpressionParserInfo.Create(
    regions=[region_000009],
)

statement_000009 = ConstraintParameterParserInfo.Create(
    regions=[region_000010, region_000011],
    type=statement_000007,
    name="max_value!",
    default_value=statement_000008,
)

statement_000010 = ConstraintParametersParserInfo.Create(
    regions=[region_000012, None, region_000013, None],
    positional=None,
    any=[statement_000004, statement_000009, ],
    keyword=None,
)

statement_000011 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000014, region_000014, None],
    value=CustomType("Enforce!"),
    templates=None,
    constraints=None,
    mutability_modifier=None,
)

statement_000012 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000015, region_000015],
    name="min_value!",
)

statement_000013 = NoneExpressionParserInfo.Create(
    regions=[region_000016],
)

statement_000014 = TypeCheckExpressionParserInfo.Create(
    regions=[region_000017, region_000018],
    operator=TypeCheckExpressionParserInfoOperatorType.Is,
    expression=statement_000012,
    the_type=statement_000013,
)

statement_000015 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000019, region_000019],
    name="max_value!",
)

statement_000016 = NoneExpressionParserInfo.Create(
    regions=[region_000020],
)

statement_000017 = TypeCheckExpressionParserInfo.Create(
    regions=[region_000021, region_000022],
    operator=TypeCheckExpressionParserInfoOperatorType.Is,
    expression=statement_000015,
    the_type=statement_000016,
)

statement_000018 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000023, region_000023],
    name="min_value!",
)

statement_000019 = VariableExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.TypeCustomization,
    regions=[region_000024, region_000024],
    name="max_value!",
)

statement_000020 = BinaryExpressionParserInfo.Create(
    regions=[region_000025, region_000026],
    left_expression=statement_000018,
    operator=BinaryExpressionOperatorType.LessEqual,
    right_expression=statement_000019,
)

statement_000021 = BinaryExpressionParserInfo.Create(
    regions=[region_000027, region_000028],
    left_expression=statement_000017,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000020,
)

statement_000022 = BinaryExpressionParserInfo.Create(
    regions=[region_000029, region_000030],
    left_expression=statement_000014,
    operator=BinaryExpressionOperatorType.LogicalOr,
    right_expression=statement_000021,
)

statement_000022 = FuncArgumentParserInfo.Create(
    regions=[region_000029, None],
    expression=statement_000022,
    keyword=None,
)

statement_000023 = FuncArgumentsParserInfo.Create(
    regions=[region_000031, region_000031],
    arguments=[statement_000022, ],
)

statement_000024 = CallExpressionParserInfo.Create(
    regions=[region_000032, region_000031],
    expression=statement_000011,
    arguments=statement_000023,
)

statement_000025 = FuncInvocationStatementParserInfo.Create(
    regions=[region_000033],
    expression=statement_000024,
)

statement_000026 = SpecialMethodStatementParserInfo.Create(
    regions=[region_000034, region_000035, region_000036],
    parent_class_capabilities=ConceptCapabilities,
    name=SpecialMethodType.CompileTimeEvalConstraints,
    statements=[statement_000025, ],
)

statement_000027 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000037, region_000038, region_000039],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.new,
)

statement_000028 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000040, region_000040, None],
    name="ArchiveT",
    is_variadic=None,
    default_type=None,
)

statement_000029 = TemplateParametersParserInfo.Create(
    regions=[region_000041, None, region_000040, None],
    positional=None,
    any=[statement_000028, ],
    keyword=None,
)

statement_000030 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000042, region_000043, region_000044],
    value=CustomType("ArchiveT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000031 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000045, None, region_000046],  # type: ignore
    type=statement_000030,
    is_variadic=None,
    name="archive",
    default_value=None,
)

statement_000032 = FuncParametersParserInfo.Create(
    regions=[region_000047, None, region_000045, None],
    positional=None,
    any=[statement_000031, ],
    keyword=None,
)

statement_000033 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000048, region_000047, region_000049, None, region_000048, region_000050, None, None, None, None, None, None, None, None, region_000051],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000032,
    visibility_param=VisibilityModifier.public,
    mutability_param=None,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000027,
    name=FuncDefinitionStatementParserInfoOperatorType.Deserialize,
    documentation=None,
    templates=statement_000029,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=True,
)

statement_000034 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000052, region_000052, None],
    name="ArchiveT",
    is_variadic=None,
    default_type=None,
)

statement_000035 = TemplateParametersParserInfo.Create(
    regions=[region_000053, None, region_000052, None],
    positional=None,
    any=[statement_000034, ],
    keyword=None,
)

statement_000036 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000054, region_000055, region_000056],
    value=CustomType("ArchiveT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000037 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000057, None, region_000058],  # type: ignore
    type=statement_000036,
    is_variadic=None,
    name="archive",
    default_value=None,
)

statement_000038 = FuncParametersParserInfo.Create(
    regions=[region_000059, None, region_000057, None],
    positional=None,
    any=[statement_000037, ],
    keyword=None,
)

statement_000039 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000060, region_000059, region_000061, region_000062, region_000060, region_000063, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000038,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Serialize,
    documentation=None,
    templates=statement_000035,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000040 = TemplateTypeParameterParserInfo.Create(
    regions=[region_000064, region_000064, None],
    name="VisitorT",
    is_variadic=None,
    default_type=None,
)

statement_000041 = TemplateParametersParserInfo.Create(
    regions=[region_000065, None, region_000064, None],
    positional=None,
    any=[statement_000040, ],
    keyword=None,
)

statement_000042 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000066, region_000067, region_000068],
    value=CustomType("VisitorT"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.ref,
)

statement_000043 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000069, None, region_000070],  # type: ignore
    type=statement_000042,
    is_variadic=None,
    name="visitor",
    default_value=None,
)

statement_000044 = FuncParametersParserInfo.Create(
    regions=[region_000071, None, region_000069, None],
    positional=None,
    any=[statement_000043, ],
    keyword=None,
)

statement_000045 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000072, region_000071, region_000073, region_000074, region_000072, region_000075, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000044,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=None,
    name=FuncDefinitionStatementParserInfoOperatorType.Accept,
    documentation=None,
    templates=statement_000041,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000046 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000076, region_000077, region_000078],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.new,
)

statement_000047 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000079, region_000083, region_000080, region_000081, region_000079, region_000082, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000046,
    name=FuncDefinitionStatementParserInfoOperatorType.Clone,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000048 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000084, region_000085, region_000086],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000049 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000087, region_000091, region_000088, region_000089, region_000087, region_000090, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000048,
    name=FuncDefinitionStatementParserInfoOperatorType.ToBool,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000050 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000092, region_000093, region_000094],
    value=StringType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000051 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000095, region_000099, region_000096, region_000097, region_000095, region_000098, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000050,
    name=FuncDefinitionStatementParserInfoOperatorType.ToString,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000052 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000100, region_000101, region_000102],
    value=CustomType("CompareResult"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000053 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000103, region_000104, region_000105],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000054 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000106, None, region_000107],  # type: ignore
    type=statement_000053,
    is_variadic=None,
    name="this",
    default_value=None,
)

statement_000055 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000108, region_000109, region_000110],
    value=CustomType("Number"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000056 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000111, None, region_000112],  # type: ignore
    type=statement_000055,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000057 = FuncParametersParserInfo.Create(
    regions=[region_000113, None, region_000114, None],
    positional=None,
    any=[statement_000054, statement_000056, ],
    keyword=None,
)

statement_000058 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000115, region_000113, region_000116, None, region_000115, region_000117, None, None, None, None, None, None, None, None, region_000118],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000057,
    visibility_param=VisibilityModifier.public,
    mutability_param=None,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000052,
    name=FuncDefinitionStatementParserInfoOperatorType.Compare,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=True,
)

statement_000059 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000119, region_000120, region_000121],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000060 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000122, region_000123, region_000124],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000061 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000125, None, region_000126],  # type: ignore
    type=statement_000060,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000062 = FuncParametersParserInfo.Create(
    regions=[region_000127, None, region_000125, None],
    positional=None,
    any=[statement_000061, ],
    keyword=None,
)

statement_000063 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000128, region_000127, region_000129, region_000130, region_000128, region_000131, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000062,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000059,
    name=FuncDefinitionStatementParserInfoOperatorType.Equal,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000064 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000132, region_000133, region_000134],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000065 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000135, region_000136, region_000137],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000066 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000138, None, region_000139],  # type: ignore
    type=statement_000065,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000067 = FuncParametersParserInfo.Create(
    regions=[region_000140, None, region_000138, None],
    positional=None,
    any=[statement_000066, ],
    keyword=None,
)

statement_000068 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000141, region_000140, region_000142, region_000143, region_000141, region_000144, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000067,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000064,
    name=FuncDefinitionStatementParserInfoOperatorType.NotEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000069 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000145, region_000146, region_000147],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000070 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000148, region_000149, region_000150],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000071 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000151, None, region_000152],  # type: ignore
    type=statement_000070,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000072 = FuncParametersParserInfo.Create(
    regions=[region_000153, None, region_000151, None],
    positional=None,
    any=[statement_000071, ],
    keyword=None,
)

statement_000073 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000154, region_000153, region_000155, region_000156, region_000154, region_000157, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000072,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000069,
    name=FuncDefinitionStatementParserInfoOperatorType.Less,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000074 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000158, region_000159, region_000160],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000075 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000161, region_000162, region_000163],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000076 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000164, None, region_000165],  # type: ignore
    type=statement_000075,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000077 = FuncParametersParserInfo.Create(
    regions=[region_000166, None, region_000164, None],
    positional=None,
    any=[statement_000076, ],
    keyword=None,
)

statement_000078 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000167, region_000166, region_000168, region_000169, region_000167, region_000170, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000077,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000074,
    name=FuncDefinitionStatementParserInfoOperatorType.LessEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000079 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000171, region_000172, region_000173],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000080 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000174, region_000175, region_000176],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000081 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000177, None, region_000178],  # type: ignore
    type=statement_000080,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000082 = FuncParametersParserInfo.Create(
    regions=[region_000179, None, region_000177, None],
    positional=None,
    any=[statement_000081, ],
    keyword=None,
)

statement_000083 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000180, region_000179, region_000181, region_000182, region_000180, region_000183, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000082,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000079,
    name=FuncDefinitionStatementParserInfoOperatorType.Greater,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000084 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000184, region_000185, region_000186],
    value=BooleanType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.val,
)

statement_000085 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000187, region_000188, region_000189],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000086 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000190, None, region_000191],  # type: ignore
    type=statement_000085,
    is_variadic=None,
    name="that",
    default_value=None,
)

statement_000087 = FuncParametersParserInfo.Create(
    regions=[region_000192, None, region_000190, None],
    positional=None,
    any=[statement_000086, ],
    keyword=None,
)

statement_000088 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000193, region_000192, region_000194, region_000195, region_000193, region_000196, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000087,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000084,
    name=FuncDefinitionStatementParserInfoOperatorType.GreaterEqual,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000089 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000197, region_000198, region_000199],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.new,
)

statement_000090 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000200, region_000204, region_000201, region_000202, region_000200, region_000203, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000089,
    name=FuncDefinitionStatementParserInfoOperatorType.Negative,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000091 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000205, region_000206, region_000207],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.new,
)

statement_000092 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000208, region_000212, region_000209, region_000210, region_000208, region_000211, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=True,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000091,
    name=FuncDefinitionStatementParserInfoOperatorType.Positive,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000093 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000213, region_000214, region_000215],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.new,
)

statement_000094 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000216, region_000217, region_000218],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000095 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000219, None, region_000220],  # type: ignore
    type=statement_000094,
    is_variadic=None,
    name="divisor",
    default_value=None,
)

statement_000096 = FuncParametersParserInfo.Create(
    regions=[region_000221, None, region_000219, None],
    positional=None,
    any=[statement_000095, ],
    keyword=None,
)

statement_000097 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000222, region_000221, region_000223, region_000224, region_000222, region_000225, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000096,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000093,
    name=FuncDefinitionStatementParserInfoOperatorType.Divide,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000098 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000226, region_000227, region_000228],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.new,
)

statement_000099 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000229, region_000230, region_000231],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000100 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000232, None, region_000233],  # type: ignore
    type=statement_000099,
    is_variadic=None,
    name="multiplier",
    default_value=None,
)

statement_000101 = FuncParametersParserInfo.Create(
    regions=[region_000234, None, region_000232, None],
    positional=None,
    any=[statement_000100, ],
    keyword=None,
)

statement_000102 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000235, region_000234, region_000236, region_000237, region_000235, region_000238, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000101,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000098,
    name=FuncDefinitionStatementParserInfoOperatorType.Multiply,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000103 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000239, region_000240, region_000241],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.new,
)

statement_000104 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000242, region_000243, region_000244],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000105 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000245, None, region_000246],  # type: ignore
    type=statement_000104,
    is_variadic=None,
    name="exponent",
    default_value=None,
)

statement_000106 = FuncParametersParserInfo.Create(
    regions=[region_000247, None, region_000245, None],
    positional=None,
    any=[statement_000105, ],
    keyword=None,
)

statement_000107 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000248, region_000247, region_000249, region_000250, region_000248, region_000251, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000106,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000103,
    name=FuncDefinitionStatementParserInfoOperatorType.Power,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000108 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000252, region_000253, region_000254],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.new,
)

statement_000109 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000255, region_000256, region_000257],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000110 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000258, None, region_000259],  # type: ignore
    type=statement_000109,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000111 = FuncParametersParserInfo.Create(
    regions=[region_000260, None, region_000258, None],
    positional=None,
    any=[statement_000110, ],
    keyword=None,
)

statement_000112 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000261, region_000260, region_000262, region_000263, region_000261, region_000264, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000111,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000108,
    name=FuncDefinitionStatementParserInfoOperatorType.Add,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000113 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Unknown,
    regions=[region_000265, region_000266, region_000267],
    value=CustomType("ThisType"),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.new,
)

statement_000114 = FuncOrTypeExpressionParserInfo.Create(
    parser_info_type=ParserInfoType.Configuration,
    regions=[region_000268, region_000269, region_000270],
    value=NumberType(),
    templates=None,
    constraints=None,
    mutability_modifier=MutabilityModifier.immutable,
)

statement_000115 = FuncParameterParserInfo.Create(
    parser_info_type=ParserInfoType.Standard,
    regions=[region_000271, None, region_000272],  # type: ignore
    type=statement_000114,
    is_variadic=None,
    name="value",
    default_value=None,
)

statement_000116 = FuncParametersParserInfo.Create(
    regions=[region_000273, None, region_000271, None],
    positional=None,
    any=[statement_000115, ],
    keyword=None,
)

statement_000117 = FuncDefinitionStatementParserInfo.Create(
    regions=[region_000274, region_000273, region_000275, region_000276, region_000274, region_000277, None, None, None, None, None, None, None, None, None],
    parent_class_capabilities=ConceptCapabilities,
    parameters=statement_000116,
    visibility_param=VisibilityModifier.public,
    mutability_param=MutabilityModifier.immutable,
    method_modifier_param=MethodModifier.abstract,
    return_type=statement_000113,
    name=FuncDefinitionStatementParserInfoOperatorType.Subtract,
    documentation=None,
    templates=None,
    captured_variables=None,
    statements=None,
    is_deferred=None,
    is_exceptional=None,
    is_generator=None,
    is_reentrant=None,
    is_scoped=None,
    is_static=None,
)

statement_000118 = ClassStatementParserInfo.Create(
    regions=[region_000278, region_000279, region_000280, region_000281, None, None, None, None, region_000282, region_000278, None, None],
    parent_class_capabilities=None,
    class_capabilities=ConceptCapabilities,
    visibility_param=VisibilityModifier.public,
    class_modifier_param=ClassModifier.immutable,
    name="Num",
    documentation=None,
    templates=None,
    constraints=statement_000010,
    extends=None,
    implements=None,
    uses=None,
    statements=[statement_000026, statement_000033, statement_000039, statement_000045, statement_000047, statement_000049, statement_000051, statement_000058, statement_000063, statement_000068, statement_000073, statement_000078, statement_000083, statement_000088, statement_000090, statement_000092, statement_000097, statement_000102, statement_000107, statement_000112, statement_000117, ],
    constructor_visibility_param=VisibilityModifier.public,
    is_abstract=None,
    is_final=None,
)

root_parser_info = RootParserInfo.Create(
    regions=[region_000283, region_000283, None],
    statements=[statement_000118, ],
    documentation=None,
)
