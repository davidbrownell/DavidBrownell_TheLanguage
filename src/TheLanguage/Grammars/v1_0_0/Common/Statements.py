# ----------------------------------------------------------------------
# |
# |  Statements.py
# |
# |  David Brownell <db@DavidBrownell.com>
# |      2021-06-13 12:12:55
# |
# ----------------------------------------------------------------------
# |
# |  Copyright David Brownell 2021
# |  Distributed under the Boost Software License, Version 1.0. See
# |  accompanying file LICENSE_1_0.txt or copy at
# |  http://www.boost.org/LICENSE_1_0.txt.
# |
# ----------------------------------------------------------------------
"""Contains common statements used in other statement definitions"""

import os

from dataclasses import dataclass

import CommonEnvironment
from CommonEnvironmentEx.Package import InitRelativeImports

# ----------------------------------------------------------------------
_script_fullpath                            = CommonEnvironment.ThisFullpath()
_script_dir, _script_name                   = os.path.split(_script_fullpath)
# ----------------------------------------------------------------------

with InitRelativeImports():
    from . import Tokens as CommonTokens
    from ...GrammarStatement import (
        DynamicStatements,
        Node,
        Statement,
    )


# ----------------------------------------------------------------------
# <type_name> <var|ref|val|view|...>
Type                                        = Statement(
    "Type",
    CommonTokens.Name,
    # TODO: Tempataes

    # The modifier is optional and will default to the first item in the list if not provided
    (
        Statement.NamedItem(
            "Modifier",
            [
                # TODO: Not sure that all of these should be here
                CommonTokens.Var,
                CommonTokens.Ref,
                CommonTokens.Val,
                CommonTokens.View,
                CommonTokens.Isolated,
                CommonTokens.Shared,
                CommonTokens.Immutable,
                CommonTokens.Mutable,
            ],
        ),
        0,
        1,
    ),
)


# ----------------------------------------------------------------------
@dataclass(frozen=True)
class TypeInfo(object):
    """Contains information about a type"""

    Name: str
    Modifier: CommonTokens.RegexToken

    # ----------------------------------------------------------------------
    @classmethod
    def FromNode(
        cls,
        node: Node,
    ):
        assert len(node.Children) >= 1

        name = node.Children[0].Value.Match.group("value")

        if (
            len(node.Children) >= 2
            and isinstance(node.Children[1].Type, tuple)
            and node.Children[1].Type[0].Name == "Modifier"
        ):
            modifier_node = node.Children[1]

            # Drill into the Optional node
            assert isinstance(modifier_node.Type, tuple)
            assert len(modifier_node.Children) == 1
            modifier_node = modifier_node.Children[0]

            # Drill into the Or node (via the Modifier named item)
            assert isinstance(modifier_node.Type.Item, list)
            assert len(modifier_node.Children) == 1
            modifier = modifier_node.Children[0].Type
        else:
            # Drill into the Type statement
            modifier = Type.Items[1]

            # Drill into the Optional statement
            assert isinstance(modifier, tuple)
            modifier = modifier[0]

            # Drill into the NamedItem statement
            modifier = modifier.Item

            # Select the first item in the list
            assert isinstance(modifier, list)
            modifier = modifier[0]

        return cls(name, modifier)


# ----------------------------------------------------------------------
def ExtractDynamicExpressionsNode(
    node: Node,
) -> Node:
    """Drill into to the specific content when given a node generated by matching `DynamicStatements.Expressions`"""

    # Drill into the Dynamic Expression node
    assert node.Type == DynamicStatements.Expressions
    assert len(node.Children) == 1
    node = node.Children[0]

    # Drill into the grammar node
    assert isinstance(node.Type.Item, list)
    assert len(node.Children) == 1
    node = node.Children[0]

    return node
