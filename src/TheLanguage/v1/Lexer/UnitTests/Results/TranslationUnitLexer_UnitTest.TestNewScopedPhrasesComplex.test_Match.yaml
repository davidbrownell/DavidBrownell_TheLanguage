# <class 'v1.Lexer.Components.AST.Node'>
children:
  - # <class 'v1.Lexer.Components.AST.Node'>
    children:
      - # <class 'v1.Lexer.Components.AST.Node'>
        children:
          - # <class 'v1.Lexer.Components.AST.Node'>
            children:
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 1] (0)"
                  end: "[1, 9] (8)"
                type: "Upper <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(0, 8), match='NEWSCOPE'>"
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 9] (8)"
                  end: "[1, 10] (9)"
                type: "Colon <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                  match: "<_sre.SRE_Match object; span=(8, 9), match=':'>"
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[1, 10] (9)"
                  end: "[2, 1] (10)"
                type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                    begin: 9
                    end: 10
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[2, 1] (10)"
                  end: "[2, 5] (14)"
                type: "Indent <class 'v1.Lexer.Components.Tokens.IndentToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.IndentToken.MatchResult'>
                  indent_value: 4
                  range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                    begin: 10
                    end: 14
              - # <class 'v1.Lexer.Components.AST.Node'>
                children:
                  - # <class 'v1.Lexer.Components.AST.Node'>
                    children:
                      - # <class 'v1.Lexer.Components.AST.Leaf'>
                        is_ignored: false
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[2, 5] (14)"
                          end: "[2, 10] (19)"
                        type: "Upper <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(14, 19), match='UPPER'>"
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[2, 5] (14)"
                      end: "[2, 10] (19)"
                    type: "(Newline Phrase | New Scope) / (Upper Phrase | Lower Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[2, 5] (14)"
                  end: "[2, 10] (19)"
                type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'v1.Lexer.Components.AST.Node'>
                children:
                  - # <class 'v1.Lexer.Components.AST.Node'>
                    children:
                      - # <class 'v1.Lexer.Components.AST.Leaf'>
                        is_ignored: false
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[2, 10] (19)"
                          end: "[4, 1] (21)"
                        type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                        value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                          range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                            begin: 19
                            end: 21
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[2, 10] (19)"
                      end: "[4, 1] (21)"
                    type: "(Newline Phrase | New Scope) / (Upper Phrase | Lower Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[2, 10] (19)"
                  end: "[4, 1] (21)"
                type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'v1.Lexer.Components.AST.Node'>
                children:
                  - # <class 'v1.Lexer.Components.AST.Node'>
                    children:
                      - # <class 'v1.Lexer.Components.AST.Leaf'>
                        is_ignored: false
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[4, 5] (25)"
                          end: "[4, 10] (30)"
                        type: "Lower <class 'v1.Lexer.Components.Tokens.RegexToken'>"
                        value: # <class 'v1.Lexer.Components.Tokens.RegexToken.MatchResult'>
                          match: "<_sre.SRE_Match object; span=(25, 30), match='lower'>"
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[4, 5] (25)"
                      end: "[4, 10] (30)"
                    type: "(Newline Phrase | New Scope) / (Upper Phrase | Lower Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[4, 5] (25)"
                  end: "[4, 10] (30)"
                type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'v1.Lexer.Components.AST.Node'>
                children:
                  - # <class 'v1.Lexer.Components.AST.Node'>
                    children:
                      - # <class 'v1.Lexer.Components.AST.Leaf'>
                        is_ignored: false
                        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                          begin: "[4, 10] (30)"
                          end: "[5, 1] (31)"
                        type: "Newline+ <class 'v1.Lexer.Components.Tokens.NewlineToken'>"
                        value: # <class 'v1.Lexer.Components.Tokens.NewlineToken.MatchResult'>
                          range: # <class 'v1.Lexer.Components.Normalize.OffsetRange'>
                            begin: 30
                            end: 31
                    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                      begin: "[4, 10] (30)"
                      end: "[5, 1] (31)"
                    type: "(Newline Phrase | New Scope) / (Upper Phrase | Lower Phrase) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[4, 10] (30)"
                  end: "[5, 1] (31)"
                type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
              - # <class 'v1.Lexer.Components.AST.Leaf'>
                is_ignored: false
                iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
                  begin: "[5, 1] (31)"
                  end: "[5, 1] (31)"
                type: "Dedent <class 'v1.Lexer.Components.Tokens.DedentToken'>"
                value: # <class 'v1.Lexer.Components.Tokens.DedentToken.MatchResult'>
                  {}
            iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
              begin: "[1, 1] (0)"
              end: "[5, 1] (31)"
            type: "New Scope <class 'v1.Lexer.Phrases.SequencePhrase.SequencePhrase'>"
        iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
          begin: "[1, 1] (0)"
          end: "[5, 1] (31)"
        type: "(Newline Phrase | New Scope) <class 'v1.Lexer.Phrases.OrPhrase.OrPhrase'>"
    iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
      begin: "[1, 1] (0)"
      end: "[5, 1] (31)"
    type: "DynamicPhrasesType.Statements <class 'v1.Lexer.Phrases.DynamicPhrase.DynamicPhrase'>"
iter_range: # <class 'v1.Lexer.Components.Phrase.Phrase.NormalizedIteratorRange'>
  begin: "[1, 1] (0)"
  end: "[5, 1] (31)"
type: "<None>"
